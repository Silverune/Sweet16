******************************* Segment: Default *******************************
******************************** Segment: Main *********************************
[Basic]
0801: 0b 08     -         
0803: 0a 00     -         
0805: 9e        -         
0806: 32 30 36 32                                      -         
080a: 00        -         
080b: 00 00     - upstartEnd:

[Basic End]
080e: ad 00 10  - Main:   lda address
0811: c9 fe     -         cmp #(>MagicCookie) // opposite to normal so reads natural in memory inspection
0813: d0 0c     -         bne !nope+
0815: ad 01 10  -         lda address+1
0818: c9 ed     -         cmp #(<MagicCookie)
081a: d0 05     -         bne !nope+
081c: a9 01     -         lda #$01
081e: 4c 23 08  -         jmp !done+
0821: a9 00     -         lda #$00
0823: f0 03     -         beq !already_loaded+						// segment data already there - not being loaded from disk
0825: 20 64 08  -         jsr LoadCode								// load library and tests
0828: 20 bf 08  -         jsr Ready
082b: 48        - ErrorHandler:pha
082c: a2 00     -         ldx #$00
082e: bd 3d 08  -         lda address,x
0831: f0 07     -         beq !done+
0833: 20 d2 ff  -         jsr Kernal.CHROUT
0836: e8        -         inx
0837: 4c 2e 08  -         jmp !loop-
083a: 4c 45 08  -         jmp !done+
083d: 45 12 12 0f 12 3a 20                             -         .text preprocessorString	// store in memory
0844: 00        -         .byte Petscii.NULL			// terminate
0845: 68        -         pla
0846: 20 d2 ff  -         jsr Kernal.CHROUT
0849: 4c 49 08  -         jmp *
084c: 20 bd ff  - Load:   jsr Kernal.SETNAM
084f: a9 01     -         lda #$01                        // logical number
0851: a6 ba     -         ldx Zero.CurrentDeviceNumber    // last used device number
0853: d0 02     -         bne !skip+
0855: a2 08     -         ldx #DEFAULT_DEVICE             // default
0857: a0 01     -         ldy #$01                         // $01 means: load to address stored in file
0859: 20 ba ff  -         jsr Kernal.SETLFS
085c: a9 00     -         lda #$00                         // $00 means: load to memory (not verify)
085e: 20 d5 ff  -         jsr Kernal.LOAD
0861: b0 c8     -         bcs errorHandler                 // if carry set, a load error has happened
0863: 60        -         rts
0864: a2 00     - LoadCode:ldx #$00
0866: bd 75 08  -         lda address,x
0869: f0 07     -         beq !done+
086b: 20 d2 ff  -         jsr Kernal.CHROUT
086e: e8        -         inx
086f: 4c 66 08  -         jmp !loop-
0872: 4c 85 08  -         jmp !done+
0875: 4c 4f 41 44 49 4e 47 20 43 4f 44 45 2e 2e 2e     -         .text preprocessorString	// store in memory
0884: 00        -         .byte Petscii.NULL			// terminate
0885: a2 9c     -         ldx #<filename
0887: a0 08     -         ldy #>filename
0889: ad bc 08  -         lda length
088c: 20 4c 08  -         jsr loadInstance
088f: a2 ac     -         ldx #<filename
0891: a0 08     -         ldy #>filename
0893: ad bd 08  -         lda length
0896: 20 4c 08  -         jsr loadInstance
0899: 4c be 08  -         jmp !done+
089c: 2d 2d 2d 20 20 20 20 4c 49 42 20 20 20 2d 2d 2d  -         .text fileList.get(i)
08ac: 2d 2d 2d 20 20 20 54 45 53 54 53 20 20 2d 2d 2d  -         .text fileList.get(i)
08bc: 10        -         .byte fileList.get(i).size()
08bd: 10        -         .byte fileList.get(i).size()
08be: 60        -         rts
08bf: 20 f9 51  - Ready:  jsr TestRun
08c2: 20 c8 08  -         jsr Anykey
08c5: 6c fc ff  -         jmp (Kernal.RESET)
08c8: 20 9f ff  - Anykey: jsr Kernal.SCNKEY   // scan keyboard
08cb: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
08ce: f0 f8     -         beq Anykey
08d0: 60        -         rts
******************************* Segment: Loader ********************************
**************************** Segment: Sweet16Patch *****************************
[Sweet16Patch]
1000: fe ed     - sweet16_patch:.byte >MagicCookie, <MagicCookie
******************************* Segment: Sweet16 *******************************
[Sweet16]
1000: a9 00     - @SW16_NONE:lda #$00
1002: 8d aa 12  -         sta SW16_SAVE_RESTORE
1005: 4c 0d 10  -         jmp SW160
1008: a9 01     - @SW16:  lda #$01
100a: 8d aa 12  -         sta SW16_SAVE_RESTORE
100d: f0 03     - SW160:  beq SW16A
100f: 20 16 12  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
1012: 68        - SW16A:  pla
1013: 85 35     -         sta R15L            // INIT SWEET16 PC
1015: 68        -         pla                 // FROM RETURN
1016: 85 36     -         sta R15H	        // ADDRESS
1018: 20 1e 10  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
101b: 4c 18 10  -         jmp  SW16B          // ONE SWEET16 INSTR.
101e: e6 35     - SW16C:  inc  R15L
1020: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
1022: e6 36     -         inc  R15H
1024: a9 11     - @SW16D: lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
1026: 48        -         pha                 // PUSH ON STACK FOR RTS
1027: a0 00     -         ldy  #$00
1029: b1 35     -         lda  (R15L),Y       // FETCH INSTR
102b: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
102d: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
102e: aa        -         tax                 // TO X REG FOR INDEXING
102f: 4a        -         lsr
1030: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
1032: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
1034: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
1036: 4a        -         lsr
1037: 4a        -         lsr                 // OPCODE*2 TO LSB'S
1038: 4a        -         lsr
1039: a8        -         tay                 // TO Y REG FOR INDEXING
103a: b9 5f 10  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
103d: 48        -         pha                 // ONTO STACK
103e: 60        -         rts                 // GOTO REG-OP ROUTINE
103f: e6 35     - TOBR:   inc  R15L
1041: d0 02     -         bne  TOBR2          // INCR PC
1043: e6 36     -         inc  R15H
1045: bd 62 10  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
1048: 48        -         pha                 // ONTO STACK FOR NON-REG OP
1049: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
104b: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
104c: 60        -         rts                 // GOTO NON-REG OP ROUTINE
104d: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
104f: 95 18     -         sta  R0H,X
1051: 88        -         dey
1052: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
1054: 95 17     -         sta  R0L,X
1056: 98        -         tya                 // Y REG CONTAINS 1
1057: 38        -         sec
1058: 65 35     -         adc  R15L           // ADD 2 TO PC
105a: 85 35     -         sta  R15L
105c: 90 02     -         bcc  SET2
105e: e6 36     -         inc  R15H
1060: 60        - SET2:   rts
1061: 00        - OPTBL:  .byte <SET-1          // 1X
1062: f7        - BRTBL:  .byte  <RTN-1          // 0
1063: 03        -         .byte  <LD-1           // 2X
1064: 8b        -         .byte  <BR-1           // 1
1065: 13        -         .byte  <ST-1           // 3X
1066: 8c        -         .byte  <BNC-1          // 2
1067: 2b        -         .byte  <LDAT-1         // 4X
1068: 9d        -         .byte  <BC-1           // 3
1069: 1c        -         .byte  <STAT-1         // 5X
106a: a0        -         .byte  <BP-1           // 4
106b: 35        -         .byte  <LDDAT-1        // 6X
106c: a7        -         .byte  <BM-1           // 5
106d: 3f        -         .byte  <STDAT-1        // 7X
106e: ae        -         .byte  <BZ-1           // 6
106f: e7        -         .byte  <POP-1          // 8X
1070: b7        -         .byte  <BNZ-1          // 7
1071: 49        -         .byte  <STPAT-1        // 9X
1072: c0        -         .byte  <BM1-1          // 8
1073: 73        -         .byte  <ADD-1          // AX
1074: cb        -         .byte  <BNM1-1         // 9
1075: 5c        -         .byte  <SUB-1          // BX
1076: 0c        -         .byte  <BK-1           // A
1077: eb        -         .byte  <POPD-1         // CX
1078: d6        -         .byte  <RS-1           // B
1079: 5e        -         .byte  <CPR-1          // DX
107a: 81        -         .byte  <BS-1           // C
107b: 24        -         .byte  <INR-1          // EX
107c: 10        -         .byte  <XJSR-1         // D
107d: 53        -         .byte  <DCR-1          // FX
107e: 0d        -         .byte  <SETM-1         // E
107f: d5        -         .byte  <NUL-1          // UNUSED
1080: f4        -         .byte  <SETI-1         // F
1081: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .align $100            // ensures page aligned
10a1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
10c1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
10e1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
1100: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
1101: 4c 4d 10  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
1104: b5 17     - LD:     lda  R0L,X
1106: 85 17     -         sta  R0L
1108: b5 18     -         lda  R0H,X          // MOVE RX TO R0
110a: 85 18     -         sta  R0H
110c: 60        -         rts
110d: 00        - BK:     brk
110e: 4c 78 12  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
1111: 4c 8a 12  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
1114: a5 17     - ST:     lda  R0L
1116: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
1118: a5 18     -         lda  R0H
111a: 95 18     -         sta  R0H,X
111c: 60        -         rts
111d: a5 17     - STAT:   lda  R0L	
111f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
1121: a0 00     -         ldy  #$00
1123: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
1125: f6 17     - INR:    inc  R0L,X
1127: d0 02     -         bne  INR2           // INCR RX
1129: f6 18     -         inc  R0H,X	
112b: 60        - INR2:   rts
112c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
112e: 85 17     -         sta  R0L            // TO R0
1130: a0 00     -         ldy  #$00
1132: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
1134: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
1136: 20 2c 11  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
1139: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
113b: 85 18     -         sta  R0H
113d: 4c 25 11  -         jmp  INR            // INCR RX
1140: 20 1d 11  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
1143: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
1145: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
1147: 4c 25 11  -         jmp  INR            // INCR RX AND RETURN
114a: 20 54 11  - STPAT:  jsr  DCR            // DECR RX
114d: a5 17     -         lda  R0L
114f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
1151: 4c 04 12  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
1154: b5 17     - DCR:    lda  R0L,X
1156: d0 02     -         bne  DCR2           // DECR RX
1158: d6 18     -         dec  R0H,X
115a: d6 17     - DCR2:   dec  R0L,X
115c: 60        -         rts
115d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
115f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
1160: a5 17     -         lda  R0L
1162: f5 17     -         sbc  R0L,X
1164: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
1167: a5 18     -         lda  R0H
1169: f5 18     -         sbc  R0H,X
116b: 99 18 00  - SUB2:   sta  R0H,Y
116e: 98        -         tya                 // LAST RESULT REG*2
116f: 69 00     -         adc  #$00           // CARRY TO LSB
1171: 85 34     -         sta  R14H
1173: 60        -         rts
1174: a5 17     - ADD:    lda  R0L
1176: 75 17     -         adc  R0L,X
1178: 85 17     -         sta  R0L            // R0+RX TO R0
117a: a5 18     -         lda  R0H
117c: 75 18     -         adc  R0H,X
117e: a0 00     -         ldy  #$00           // R0 FOR RESULT
1180: f0 e9     -         beq  SUB2           // FINISH ADD
1182: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
1184: 20 1f 11  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
1187: a5 36     -         lda  R15H
1189: 20 1f 11  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
118c: 18        - BR:     clc
118d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
118f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
1191: 10 01     -         bpl  BR2
1193: 88        -         dey
1194: 65 35     - BR2:    adc  R15L           // ADD TO PC
1196: 85 35     -         sta  R15L
1198: 98        -         tya
1199: 65 36     -         adc  R15H
119b: 85 36     -         sta  R15H
119d: 60        - BNC2:   rts
119e: b0 ec     - BC:     bcs  BR
11a0: 60        -         rts
11a1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
11a2: aa        -         tax                 // TO X REG FOR INDEXING
11a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
11a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
11a7: 60        -         rts
11a8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
11a9: aa        -         tax
11aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
11ac: 30 e1     -         bmi  BR1
11ae: 60        -         rts
11af: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
11b0: aa        -         tax
11b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
11b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
11b5: f0 d8     -         beq  BR1            // BRANCH IF SO
11b7: 60        -         rts
11b8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
11b9: aa        -         tax
11ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
11bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
11be: d0 cf     -         bne  BR1            // BRANCH IF SO
11c0: 60        -         rts	
11c1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
11c2: aa        -         tax
11c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
11c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
11c7: 49 ff     -         eor  #$FF
11c9: f0 c4     -         beq  BR1            // BRANCH IF SO
11cb: 60        -         rts
11cc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
11cd: aa        -         tax
11ce: b5 17     -         lda  R0L,X
11d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
11d2: 49 ff     -         eor  #$FF
11d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
11d6: 60        - NUL:    rts
11d7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
11d9: 20 54 11  -         jsr  DCR            // DECR STACK POINTER
11dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
11de: 85 36     -         sta  R15H
11e0: 20 54 11  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
11e3: a1 17     -         lda  (R0L,X)
11e5: 85 35     -         sta  R15L
11e7: 60        -         rts
11e8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
11ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
11ec: 20 54 11  - POPD:   jsr  DCR            // DECR RX
11ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
11f1: a8        -         tay                 // SAVE IN Y REG	
11f2: 4c fb 11  -         jmp POP2
11f5: 4c 66 12  - SETI:   jmp SETI_OUTOFPAGE
11f8: 4c 09 12  - RTN:    jmp  RTNZ
11fb: 20 54 11  - POP2:   jsr  DCR            // DECR RX
11fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
1200: 85 17     -         sta  R0L            // TO R0
1202: 84 18     -         sty  R0H
1204: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
1206: 84 34     -         sty  R14H
1208: 60        -         rts
1209: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
120a: 68        -         pla
120b: ad aa 12  -         lda SW16_SAVE_RESTORE
120e: f0 03     -         beq RESTORED
1210: 20 26 12  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
1213: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
1216: 8d a6 12  - SAVE:   sta ACCUMULATOR
1219: 8e a7 12  -         stx XREG
121c: 8c a8 12  -         sty YREG
121f: 08        -         php
1220: 68        -         pla
1221: 8d a9 12  -         sta STATUS
1224: d8        -         cld
1225: 60        -         rts
1226: ad a9 12  - RESTORE:lda STATUS
1229: 48        -         pha
122a: ad a6 12  -         lda ACCUMULATOR
122d: ae a7 12  -         ldx XREG
1230: ac a8 12  -         ldy YREG
1233: 28        -         plp
1234: 60        -         rts
1235: 68        - @SW16_BREAK_HANDLER:pla		// Y
1236: a8        -         tay		// restore Y
1237: 68        -         pla		// X
1238: aa        -         tax		// restore X
1239: 68        -         pla		// restore A
123a: 85 37     -         sta RL(ZP)
123c: 28        -         plp		// restore Status Flags
123d: 68        -         pla		// PCL discard - not useful
123e: 68        -         pla		// PCH discard - not useful
123f: a5 37     -         lda RL(ZP)
1241: 4c 24 10  -         jmp SW16D
1244: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
1246: 85 37     -         sta RL(ZP)
1248: e6 35     -         inc R15L
124a: d0 02     -         bne !incremented+ 		// inc PC
124c: e6 36     -         inc R15H
124e: b1 35     -         lda (R15L),Y       		// dest addr low
1250: 85 38     -         sta RH(ZP)
1252: e6 35     -         inc R15L
1254: d0 02     -         bne !incremented+ 		// inc PC
1256: e6 36     -         inc R15H
1258: b1 35     -         lda (R15L),Y       		// dest register
125a: e6 35     -         inc R15L
125c: d0 02     -         bne !incremented+ 		// inc PC
125e: e6 36     -         inc R15H
1260: a8        -         tay
1261: e6 37     -         inc RL(ZP)
1263: a2 37     -         ldx #RL(ZP)
1265: 60        -         rts
1266: 20 44 12  - SETI_OUTOFPAGE:jsr SETIM_COMMON
1269: a1 00     -         lda ($00,X)
126b: 99 00 00  -         sta $00,Y				// low order
126e: c6 37     -         dec RL(ZP)
1270: a1 00     -         lda ($00,X)
1272: 99 01 00  -         sta $01,Y				// high order
1275: 4c 24 10  -         jmp SW16D				// back to SWEET16
1278: 20 44 12  - SETM_OUTOFPAGE:jsr SETIM_COMMON
127b: a1 00     -         lda ($00,X)
127d: 99 01 00  -         sta $01,Y				// high order
1280: c6 37     -         dec RL(ZP)
1282: a1 00     -         lda ($00,X)
1284: 99 00 00  -         sta $00,Y				// low order
1287: 4c 24 10  -         jmp SW16D				// back to SWEET16
128a: a9 12     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
128c: 48        -         pha						// using rts as jmps here
128d: a9 a2     -         lda #<((!returned+)-1)
128f: 48        -         pha
1290: b1 35     -         lda (R15L),Y       		// high order byte
1292: 48        -         pha
1293: e6 35     -         inc R15L
1295: d0 02     -         bne !incremented+ 		// inc PC
1297: e6 36     -         inc R15H
1299: b1 35     -         lda (R15L),Y       		// low order byte
129b: 48        -         pha
129c: e6 35     -         inc R15L
129e: d0 02     -         bne !incremented+ 		// inc PC
12a0: e6 36     -         inc R15H
12a2: 60        -         rts				   		// this performs jump from stack
12a3: 4c 24 10  -         jmp SW16D				// back to SWEET16
12a6: 00        - ACCUMULATOR:.byte 0
12a7: 00        - XREG:   .byte 0
12a8: 00        - YREG:   .byte 0
12a9: 00        - STATUS: .byte 0
12aa: 00        - SW16_SAVE_RESTORE:.byte 0
***************************** Segment: TestsPatch ******************************
[TestsPatch]
2000: fe ed     - tests_patch:.byte >MagicCookie, <MagicCookie
******************************** Segment: Tests ********************************
[Tests]
2000: ee 62 54  - SET_TEST:inc TEST_NAME_COUNT
2003: ad 86 02  -         lda Two.CurrentCharColor
2006: 48        -         pha
2007: a9 0f     -         lda #color
2009: 8d 86 02  -         sta Two.CurrentCharColor
200c: a2 00     -         ldx #$00
200e: bd 1d 20  -         lda address,x
2011: f0 07     -         beq !done+
2013: 20 d2 ff  -         jsr Kernal.CHROUT
2016: e8        -         inx
2017: 4c 0e 20  -         jmp !loop-
201a: 4c 21 20  -         jmp !done+
201d: 53 45 54  -         .text preprocessorString	// store in memory
2020: 00        -         .byte Petscii.NULL			// terminate
2021: 68        -         pla
2022: 8d 86 02  -         sta Two.CurrentCharColor
2025: 4c 31 20  -         jmp !done+
2028: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
202a: 53 45 54  -         .text name
202d: 2e 2e 2e  -         .text "..."
2030: 00        -         .byte Petscii.NULL
2031: 20 08 10  -         jsr SW16
2034: 15        -         .byte opcode(op, register)
2035: 34 12     -         .word address.getValue()
2037: 00        -         .byte $00 }
2038: ee 60 54  -         inc TEST_COUNT
203b: ad 86 02  -         lda Two.CurrentCharColor
203e: 48        -         pha
203f: a9 0e     -         lda #color
2041: 8d 86 02  -         sta Two.CurrentCharColor
2044: a2 00     -         ldx #$00
2046: bd 59 20  -         lda address,x
2049: f0 07     -         beq !done+
204b: 20 d2 ff  -         jsr Kernal.CHROUT
204e: e8        -         inx
204f: 4c 46 20  -         jmp !loop-
2052: 68        -         pla
2053: 8d 86 02  -         sta Two.CurrentCharColor
2056: 4c 61 20  -         jmp !done+
2059: 20        - memory: .byte Petscii.SPACEBAR
205a: 56 41 4c 55 45                                   -         .text description
205f: 3a        -         .text ":"
2060: 00        -         .byte Petscii.NULL
2061: a6 21     -         ldx rl(register.getValue())
2063: a4 22     -         ldy rh(register.getValue())
2065: e0 34     -         cpx #<value
2067: d0 25     -         bne !failed+
2069: c0 12     -         cpy #>value
206b: d0 21     -         bne !failed+
206d: ee 61 54  -         inc TEST_PASS_COUNT
2070: ad 86 02  -         lda Two.CurrentCharColor
2073: 48        -         pha
2074: a9 05     -         lda #color
2076: 8d 86 02  -         sta Two.CurrentCharColor
2079: a2 00     -         ldx #$00
207b: bd 5c 54  -         lda address,x
207e: f0 07     -         beq !done+
2080: 20 d2 ff  -         jsr Kernal.CHROUT
2083: e8        -         inx
2084: 4c 7b 20  -         jmp !loop-
2087: 68        -         pla
2088: 8d 86 02  -         sta Two.CurrentCharColor
208b: 4c a9 20  -         jmp !done+
208e: ad 86 02  -         lda Two.CurrentCharColor
2091: 48        -         pha
2092: a9 02     -         lda #color
2094: 8d 86 02  -         sta Two.CurrentCharColor
2097: a2 00     -         ldx #$00
2099: bd 5e 54  -         lda address,x
209c: f0 07     -         beq !done+
209e: 20 d2 ff  -         jsr Kernal.CHROUT
20a1: e8        -         inx
20a2: 4c 99 20  -         jmp !loop-
20a5: 68        -         pla
20a6: 8d 86 02  -         sta Two.CurrentCharColor
20a9: a2 00     -         ldx #$00
20ab: bd ba 20  -         lda address,x
20ae: f0 07     -         beq !done+
20b0: 20 d2 ff  -         jsr Kernal.CHROUT
20b3: e8        -         inx
20b4: 4c ab 20  -         jmp !loop-
20b7: 4c bc 20  -         jmp !done+
20ba: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
20bc: ae 62 54  -         ldx TEST_NAME_COUNT
20bf: e0 15     -         cpx #TESTS_PER_PAGE
20c1: d0 5d     -         bne !exit+
20c3: ad 86 02  -         lda Two.CurrentCharColor
20c6: 48        -         pha
20c7: a9 01     -         lda #color
20c9: 8d 86 02  -         sta Two.CurrentCharColor
20cc: a2 00     -         ldx #$00
20ce: bd e1 20  -         lda address,x
20d1: f0 07     -         beq !done+
20d3: 20 d2 ff  -         jsr Kernal.CHROUT
20d6: e8        -         inx
20d7: 4c ce 20  -         jmp !loop-
20da: 68        -         pla
20db: 8d 86 02  -         sta Two.CurrentCharColor
20de: 4c 00 21  -         jmp !no_key+
20e1: 0d        - memory: .byte Petscii.RETURN
20e2: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
20f2: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
20fe: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2100: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
2103: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
2106: f0 f8     -         beq !no_key-
2108: a2 00     -         ldx #$00
210a: bd 19 21  -         lda address,x
210d: f0 07     -         beq !done+
210f: 20 d2 ff  -         jsr Kernal.CHROUT
2112: e8        -         inx
2113: 4c 0a 21  -         jmp !loop-
2116: 4c 1b 21  -         jmp !done+
2119: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
211b: a2 00     -         ldx #$00
211d: 8e 62 54  -         stx TEST_NAME_COUNT
2120: 60        -         rts
2121: ee 62 54  - LOAD_TEST:inc TEST_NAME_COUNT
2124: ad 86 02  -         lda Two.CurrentCharColor
2127: 48        -         pha
2128: a9 0f     -         lda #color
212a: 8d 86 02  -         sta Two.CurrentCharColor
212d: a2 00     -         ldx #$00
212f: bd 3e 21  -         lda address,x
2132: f0 07     -         beq !done+
2134: 20 d2 ff  -         jsr Kernal.CHROUT
2137: e8        -         inx
2138: 4c 2f 21  -         jmp !loop-
213b: 4c 43 21  -         jmp !done+
213e: 4c 4f 41 44                                      -         .text preprocessorString	// store in memory
2142: 00        -         .byte Petscii.NULL			// terminate
2143: 68        -         pla
2144: 8d 86 02  -         sta Two.CurrentCharColor
2147: 4c 54 21  -         jmp !done+
214a: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
214c: 4c 4f 41 44                                      -         .text name
2150: 2e 2e 2e  -         .text "..."
2153: 00        -         .byte Petscii.NULL
2154: 20 08 10  -         jsr SW16
2157: 15        -         .byte opcode(op, register)
2158: 21 43     -         .word address.getValue()
215a: 25        -         .byte opcode($20, register) }
215b: 00        -         .byte $00 }
215c: ee 60 54  -         inc TEST_COUNT
215f: ad 86 02  -         lda Two.CurrentCharColor
2162: 48        -         pha
2163: a9 0e     -         lda #color
2165: 8d 86 02  -         sta Two.CurrentCharColor
2168: a2 00     -         ldx #$00
216a: bd 7d 21  -         lda address,x
216d: f0 07     -         beq !done+
216f: 20 d2 ff  -         jsr Kernal.CHROUT
2172: e8        -         inx
2173: 4c 6a 21  -         jmp !loop-
2176: 68        -         pla
2177: 8d 86 02  -         sta Two.CurrentCharColor
217a: 4c 83 21  -         jmp !done+
217d: 20        - memory: .byte Petscii.SPACEBAR
217e: 41 43 43  -         .text description
2181: 3a        -         .text ":"
2182: 00        -         .byte Petscii.NULL
2183: a6 17     -         ldx rl(register.getValue())
2185: a4 18     -         ldy rh(register.getValue())
2187: e0 21     -         cpx #<value
2189: d0 25     -         bne !failed+
218b: c0 43     -         cpy #>value
218d: d0 21     -         bne !failed+
218f: ee 61 54  -         inc TEST_PASS_COUNT
2192: ad 86 02  -         lda Two.CurrentCharColor
2195: 48        -         pha
2196: a9 05     -         lda #color
2198: 8d 86 02  -         sta Two.CurrentCharColor
219b: a2 00     -         ldx #$00
219d: bd 5c 54  -         lda address,x
21a0: f0 07     -         beq !done+
21a2: 20 d2 ff  -         jsr Kernal.CHROUT
21a5: e8        -         inx
21a6: 4c 9d 21  -         jmp !loop-
21a9: 68        -         pla
21aa: 8d 86 02  -         sta Two.CurrentCharColor
21ad: 4c cb 21  -         jmp !done+
21b0: ad 86 02  -         lda Two.CurrentCharColor
21b3: 48        -         pha
21b4: a9 02     -         lda #color
21b6: 8d 86 02  -         sta Two.CurrentCharColor
21b9: a2 00     -         ldx #$00
21bb: bd 5e 54  -         lda address,x
21be: f0 07     -         beq !done+
21c0: 20 d2 ff  -         jsr Kernal.CHROUT
21c3: e8        -         inx
21c4: 4c bb 21  -         jmp !loop-
21c7: 68        -         pla
21c8: 8d 86 02  -         sta Two.CurrentCharColor
21cb: a2 00     -         ldx #$00
21cd: bd dc 21  -         lda address,x
21d0: f0 07     -         beq !done+
21d2: 20 d2 ff  -         jsr Kernal.CHROUT
21d5: e8        -         inx
21d6: 4c cd 21  -         jmp !loop-
21d9: 4c de 21  -         jmp !done+
21dc: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
21de: ae 62 54  -         ldx TEST_NAME_COUNT
21e1: e0 15     -         cpx #TESTS_PER_PAGE
21e3: d0 5d     -         bne !exit+
21e5: ad 86 02  -         lda Two.CurrentCharColor
21e8: 48        -         pha
21e9: a9 01     -         lda #color
21eb: 8d 86 02  -         sta Two.CurrentCharColor
21ee: a2 00     -         ldx #$00
21f0: bd 03 22  -         lda address,x
21f3: f0 07     -         beq !done+
21f5: 20 d2 ff  -         jsr Kernal.CHROUT
21f8: e8        -         inx
21f9: 4c f0 21  -         jmp !loop-
21fc: 68        -         pla
21fd: 8d 86 02  -         sta Two.CurrentCharColor
2200: 4c 22 22  -         jmp !no_key+
2203: 0d        - memory: .byte Petscii.RETURN
2204: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2214: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2220: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2222: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
2225: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
2228: f0 f8     -         beq !no_key-
222a: a2 00     -         ldx #$00
222c: bd 3b 22  -         lda address,x
222f: f0 07     -         beq !done+
2231: 20 d2 ff  -         jsr Kernal.CHROUT
2234: e8        -         inx
2235: 4c 2c 22  -         jmp !loop-
2238: 4c 3d 22  -         jmp !done+
223b: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
223d: a2 00     -         ldx #$00
223f: 8e 62 54  -         stx TEST_NAME_COUNT
2242: 60        -         rts
2243: ee 62 54  - STORE_TEST:inc TEST_NAME_COUNT
2246: ad 86 02  -         lda Two.CurrentCharColor
2249: 48        -         pha
224a: a9 0f     -         lda #color
224c: 8d 86 02  -         sta Two.CurrentCharColor
224f: a2 00     -         ldx #$00
2251: bd 60 22  -         lda address,x
2254: f0 07     -         beq !done+
2256: 20 d2 ff  -         jsr Kernal.CHROUT
2259: e8        -         inx
225a: 4c 51 22  -         jmp !loop-
225d: 4c 66 22  -         jmp !done+
2260: 53 54 4f 52 45                                   -         .text preprocessorString	// store in memory
2265: 00        -         .byte Petscii.NULL			// terminate
2266: 68        -         pla
2267: 8d 86 02  -         sta Two.CurrentCharColor
226a: 4c 78 22  -         jmp !done+
226d: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
226f: 53 54 4f 52 45                                   -         .text name
2274: 2e 2e 2e  -         .text "..."
2277: 00        -         .byte Petscii.NULL
2278: 20 08 10  -         jsr SW16
227b: 15        -         .byte opcode(op, register)
227c: 34 12     -         .word address.getValue()
227e: 25        -         .byte opcode($20, register) }
227f: 36        -         .byte opcode($30, register) }
2280: 00        -         .byte $00 }
2281: ee 60 54  -         inc TEST_COUNT
2284: ad 86 02  -         lda Two.CurrentCharColor
2287: 48        -         pha
2288: a9 0e     -         lda #color
228a: 8d 86 02  -         sta Two.CurrentCharColor
228d: a2 00     -         ldx #$00
228f: bd a2 22  -         lda address,x
2292: f0 07     -         beq !done+
2294: 20 d2 ff  -         jsr Kernal.CHROUT
2297: e8        -         inx
2298: 4c 8f 22  -         jmp !loop-
229b: 68        -         pla
229c: 8d 86 02  -         sta Two.CurrentCharColor
229f: 4c aa 22  -         jmp !done+
22a2: 20        - memory: .byte Petscii.SPACEBAR
22a3: 56 41 4c 55 45                                   -         .text description
22a8: 3a        -         .text ":"
22a9: 00        -         .byte Petscii.NULL
22aa: a6 23     -         ldx rl(register.getValue())
22ac: a4 24     -         ldy rh(register.getValue())
22ae: e0 34     -         cpx #<value
22b0: d0 25     -         bne !failed+
22b2: c0 12     -         cpy #>value
22b4: d0 21     -         bne !failed+
22b6: ee 61 54  -         inc TEST_PASS_COUNT
22b9: ad 86 02  -         lda Two.CurrentCharColor
22bc: 48        -         pha
22bd: a9 05     -         lda #color
22bf: 8d 86 02  -         sta Two.CurrentCharColor
22c2: a2 00     -         ldx #$00
22c4: bd 5c 54  -         lda address,x
22c7: f0 07     -         beq !done+
22c9: 20 d2 ff  -         jsr Kernal.CHROUT
22cc: e8        -         inx
22cd: 4c c4 22  -         jmp !loop-
22d0: 68        -         pla
22d1: 8d 86 02  -         sta Two.CurrentCharColor
22d4: 4c f2 22  -         jmp !done+
22d7: ad 86 02  -         lda Two.CurrentCharColor
22da: 48        -         pha
22db: a9 02     -         lda #color
22dd: 8d 86 02  -         sta Two.CurrentCharColor
22e0: a2 00     -         ldx #$00
22e2: bd 5e 54  -         lda address,x
22e5: f0 07     -         beq !done+
22e7: 20 d2 ff  -         jsr Kernal.CHROUT
22ea: e8        -         inx
22eb: 4c e2 22  -         jmp !loop-
22ee: 68        -         pla
22ef: 8d 86 02  -         sta Two.CurrentCharColor
22f2: a2 00     -         ldx #$00
22f4: bd 03 23  -         lda address,x
22f7: f0 07     -         beq !done+
22f9: 20 d2 ff  -         jsr Kernal.CHROUT
22fc: e8        -         inx
22fd: 4c f4 22  -         jmp !loop-
2300: 4c 05 23  -         jmp !done+
2303: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
2305: ae 62 54  -         ldx TEST_NAME_COUNT
2308: e0 15     -         cpx #TESTS_PER_PAGE
230a: d0 5d     -         bne !exit+
230c: ad 86 02  -         lda Two.CurrentCharColor
230f: 48        -         pha
2310: a9 01     -         lda #color
2312: 8d 86 02  -         sta Two.CurrentCharColor
2315: a2 00     -         ldx #$00
2317: bd 2a 23  -         lda address,x
231a: f0 07     -         beq !done+
231c: 20 d2 ff  -         jsr Kernal.CHROUT
231f: e8        -         inx
2320: 4c 17 23  -         jmp !loop-
2323: 68        -         pla
2324: 8d 86 02  -         sta Two.CurrentCharColor
2327: 4c 49 23  -         jmp !no_key+
232a: 0d        - memory: .byte Petscii.RETURN
232b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
233b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2347: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2349: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
234c: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
234f: f0 f8     -         beq !no_key-
2351: a2 00     -         ldx #$00
2353: bd 62 23  -         lda address,x
2356: f0 07     -         beq !done+
2358: 20 d2 ff  -         jsr Kernal.CHROUT
235b: e8        -         inx
235c: 4c 53 23  -         jmp !loop-
235f: 4c 64 23  -         jmp !done+
2362: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2364: a2 00     -         ldx #$00
2366: 8e 62 54  -         stx TEST_NAME_COUNT
2369: 60        -         rts
236a: ee 62 54  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
236d: ad 86 02  -         lda Two.CurrentCharColor
2370: 48        -         pha
2371: a9 0f     -         lda #color
2373: 8d 86 02  -         sta Two.CurrentCharColor
2376: a2 00     -         ldx #$00
2378: bd 87 23  -         lda address,x
237b: f0 07     -         beq !done+
237d: 20 d2 ff  -         jsr Kernal.CHROUT
2380: e8        -         inx
2381: 4c 78 23  -         jmp !loop-
2384: 4c 95 23  -         jmp !done+
2387: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text preprocessorString	// store in memory
2394: 00        -         .byte Petscii.NULL			// terminate
2395: 68        -         pla
2396: 8d 86 02  -         sta Two.CurrentCharColor
2399: 4c af 23  -         jmp !done+
239c: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
239e: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
23ab: 2e 2e 2e  -         .text "..."
23ae: 00        -         .byte Petscii.NULL
23af: 20 08 10  -         jsr SW16
23b2: 15        -         .byte opcode(op, register)
23b3: 63 54     -         .word address.getValue()
23b5: 45        -         .byte opcode($40, register) }
23b6: 00        -         .byte $00 }
23b7: ee 60 54  -         inc TEST_COUNT
23ba: ad 86 02  -         lda Two.CurrentCharColor
23bd: 48        -         pha
23be: a9 0e     -         lda #color
23c0: 8d 86 02  -         sta Two.CurrentCharColor
23c3: a2 00     -         ldx #$00
23c5: bd d8 23  -         lda address,x
23c8: f0 07     -         beq !done+
23ca: 20 d2 ff  -         jsr Kernal.CHROUT
23cd: e8        -         inx
23ce: 4c c5 23  -         jmp !loop-
23d1: 68        -         pla
23d2: 8d 86 02  -         sta Two.CurrentCharColor
23d5: 4c de 23  -         jmp !done+
23d8: 20        - memory: .byte Petscii.SPACEBAR
23d9: 41 43 43  -         .text description
23dc: 3a        -         .text ":"
23dd: 00        -         .byte Petscii.NULL
23de: a6 17     -         ldx rl(register.getValue())
23e0: a4 18     -         ldy rh(register.getValue())
23e2: ec 63 54  -         cpx address
23e5: d0 21     -         bne !failed+
23e7: ee 61 54  -         inc TEST_PASS_COUNT
23ea: ad 86 02  -         lda Two.CurrentCharColor
23ed: 48        -         pha
23ee: a9 05     -         lda #color
23f0: 8d 86 02  -         sta Two.CurrentCharColor
23f3: a2 00     -         ldx #$00
23f5: bd 5c 54  -         lda address,x
23f8: f0 07     -         beq !done+
23fa: 20 d2 ff  -         jsr Kernal.CHROUT
23fd: e8        -         inx
23fe: 4c f5 23  -         jmp !loop-
2401: 68        -         pla
2402: 8d 86 02  -         sta Two.CurrentCharColor
2405: 4c 23 24  -         jmp !done+
2408: ad 86 02  -         lda Two.CurrentCharColor
240b: 48        -         pha
240c: a9 02     -         lda #color
240e: 8d 86 02  -         sta Two.CurrentCharColor
2411: a2 00     -         ldx #$00
2413: bd 5e 54  -         lda address,x
2416: f0 07     -         beq !done+
2418: 20 d2 ff  -         jsr Kernal.CHROUT
241b: e8        -         inx
241c: 4c 13 24  -         jmp !loop-
241f: 68        -         pla
2420: 8d 86 02  -         sta Two.CurrentCharColor
2423: ee 60 54  -         inc TEST_COUNT
2426: ad 86 02  -         lda Two.CurrentCharColor
2429: 48        -         pha
242a: a9 0e     -         lda #color
242c: 8d 86 02  -         sta Two.CurrentCharColor
242f: a2 00     -         ldx #$00
2431: bd 44 24  -         lda address,x
2434: f0 07     -         beq !done+
2436: 20 d2 ff  -         jsr Kernal.CHROUT
2439: e8        -         inx
243a: 4c 31 24  -         jmp !loop-
243d: 68        -         pla
243e: 8d 86 02  -         sta Two.CurrentCharColor
2441: 4c 4a 24  -         jmp !done+
2444: 20        - memory: .byte Petscii.SPACEBAR
2445: 52 45 47  -         .text description
2448: 3a        -         .text ":"
2449: 00        -         .byte Petscii.NULL
244a: a6 21     -         ldx rl(register.getValue())
244c: a4 22     -         ldy rh(register.getValue())
244e: e0 64     -         cpx #<value
2450: d0 25     -         bne !failed+
2452: c0 54     -         cpy #>value
2454: d0 21     -         bne !failed+
2456: ee 61 54  -         inc TEST_PASS_COUNT
2459: ad 86 02  -         lda Two.CurrentCharColor
245c: 48        -         pha
245d: a9 05     -         lda #color
245f: 8d 86 02  -         sta Two.CurrentCharColor
2462: a2 00     -         ldx #$00
2464: bd 5c 54  -         lda address,x
2467: f0 07     -         beq !done+
2469: 20 d2 ff  -         jsr Kernal.CHROUT
246c: e8        -         inx
246d: 4c 64 24  -         jmp !loop-
2470: 68        -         pla
2471: 8d 86 02  -         sta Two.CurrentCharColor
2474: 4c 92 24  -         jmp !done+
2477: ad 86 02  -         lda Two.CurrentCharColor
247a: 48        -         pha
247b: a9 02     -         lda #color
247d: 8d 86 02  -         sta Two.CurrentCharColor
2480: a2 00     -         ldx #$00
2482: bd 5e 54  -         lda address,x
2485: f0 07     -         beq !done+
2487: 20 d2 ff  -         jsr Kernal.CHROUT
248a: e8        -         inx
248b: 4c 82 24  -         jmp !loop-
248e: 68        -         pla
248f: 8d 86 02  -         sta Two.CurrentCharColor
2492: a2 00     -         ldx #$00
2494: bd a3 24  -         lda address,x
2497: f0 07     -         beq !done+
2499: 20 d2 ff  -         jsr Kernal.CHROUT
249c: e8        -         inx
249d: 4c 94 24  -         jmp !loop-
24a0: 4c a5 24  -         jmp !done+
24a3: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
24a5: ae 62 54  -         ldx TEST_NAME_COUNT
24a8: e0 15     -         cpx #TESTS_PER_PAGE
24aa: d0 5d     -         bne !exit+
24ac: ad 86 02  -         lda Two.CurrentCharColor
24af: 48        -         pha
24b0: a9 01     -         lda #color
24b2: 8d 86 02  -         sta Two.CurrentCharColor
24b5: a2 00     -         ldx #$00
24b7: bd ca 24  -         lda address,x
24ba: f0 07     -         beq !done+
24bc: 20 d2 ff  -         jsr Kernal.CHROUT
24bf: e8        -         inx
24c0: 4c b7 24  -         jmp !loop-
24c3: 68        -         pla
24c4: 8d 86 02  -         sta Two.CurrentCharColor
24c7: 4c e9 24  -         jmp !no_key+
24ca: 0d        - memory: .byte Petscii.RETURN
24cb: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
24db: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
24e7: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
24e9: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
24ec: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
24ef: f0 f8     -         beq !no_key-
24f1: a2 00     -         ldx #$00
24f3: bd 02 25  -         lda address,x
24f6: f0 07     -         beq !done+
24f8: 20 d2 ff  -         jsr Kernal.CHROUT
24fb: e8        -         inx
24fc: 4c f3 24  -         jmp !loop-
24ff: 4c 04 25  -         jmp !done+
2502: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2504: a2 00     -         ldx #$00
2506: 8e 62 54  -         stx TEST_NAME_COUNT
2509: 60        -         rts
250a: ee 62 54  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
250d: ad 86 02  -         lda Two.CurrentCharColor
2510: 48        -         pha
2511: a9 0f     -         lda #color
2513: 8d 86 02  -         sta Two.CurrentCharColor
2516: a2 00     -         ldx #$00
2518: bd 27 25  -         lda address,x
251b: f0 07     -         beq !done+
251d: 20 d2 ff  -         jsr Kernal.CHROUT
2520: e8        -         inx
2521: 4c 18 25  -         jmp !loop-
2524: 4c 36 25  -         jmp !done+
2527: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text preprocessorString	// store in memory
2535: 00        -         .byte Petscii.NULL			// terminate
2536: 68        -         pla
2537: 8d 86 02  -         sta Two.CurrentCharColor
253a: 4c 51 25  -         jmp !done+
253d: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
253f: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
254d: 2e 2e 2e  -         .text "..."
2550: 00        -         .byte Petscii.NULL
2551: 20 08 10  -         jsr SW16
2554: 15        -         .byte opcode(op, register)
2555: 63 54     -         .word address.getValue()
2557: 16        -         .byte opcode(op, register)
2558: 65 54     -         .word address.getValue()
255a: 45        -         .byte opcode($40, register) }
255b: 56        -         .byte opcode($50, register) }
255c: 00        -         .byte $00 }
255d: ee 60 54  -         inc TEST_COUNT
2560: ad 86 02  -         lda Two.CurrentCharColor
2563: 48        -         pha
2564: a9 0e     -         lda #color
2566: 8d 86 02  -         sta Two.CurrentCharColor
2569: a2 00     -         ldx #$00
256b: bd 7e 25  -         lda address,x
256e: f0 07     -         beq !done+
2570: 20 d2 ff  -         jsr Kernal.CHROUT
2573: e8        -         inx
2574: 4c 6b 25  -         jmp !loop-
2577: 68        -         pla
2578: 8d 86 02  -         sta Two.CurrentCharColor
257b: 4c 84 25  -         jmp !done+
257e: 20        - memory: .byte Petscii.SPACEBAR
257f: 4d 45 4d  -         .text description
2582: 3a        -         .text ":"
2583: 00        -         .byte Petscii.NULL
2584: a2 ff     -         ldx #$ff
2586: e8        -         inx
2587: e0 01     -         cpx #size
2589: f0 0b     -         beq !success+
258b: bd 63 54  -         lda source,x
258e: dd 65 54  -         cmp dest,x
2591: f0 f3     -         beq !loop-
2593: 4c b7 25  -         jmp !failed+
2596: ee 61 54  -         inc TEST_PASS_COUNT
2599: ad 86 02  -         lda Two.CurrentCharColor
259c: 48        -         pha
259d: a9 05     -         lda #color
259f: 8d 86 02  -         sta Two.CurrentCharColor
25a2: a2 00     -         ldx #$00
25a4: bd 5c 54  -         lda address,x
25a7: f0 07     -         beq !done+
25a9: 20 d2 ff  -         jsr Kernal.CHROUT
25ac: e8        -         inx
25ad: 4c a4 25  -         jmp !loop-
25b0: 68        -         pla
25b1: 8d 86 02  -         sta Two.CurrentCharColor
25b4: 4c d2 25  -         jmp !done+
25b7: ad 86 02  -         lda Two.CurrentCharColor
25ba: 48        -         pha
25bb: a9 02     -         lda #color
25bd: 8d 86 02  -         sta Two.CurrentCharColor
25c0: a2 00     -         ldx #$00
25c2: bd 5e 54  -         lda address,x
25c5: f0 07     -         beq !done+
25c7: 20 d2 ff  -         jsr Kernal.CHROUT
25ca: e8        -         inx
25cb: 4c c2 25  -         jmp !loop-
25ce: 68        -         pla
25cf: 8d 86 02  -         sta Two.CurrentCharColor
25d2: ee 60 54  -         inc TEST_COUNT
25d5: ad 86 02  -         lda Two.CurrentCharColor
25d8: 48        -         pha
25d9: a9 0e     -         lda #color
25db: 8d 86 02  -         sta Two.CurrentCharColor
25de: a2 00     -         ldx #$00
25e0: bd f3 25  -         lda address,x
25e3: f0 07     -         beq !done+
25e5: 20 d2 ff  -         jsr Kernal.CHROUT
25e8: e8        -         inx
25e9: 4c e0 25  -         jmp !loop-
25ec: 68        -         pla
25ed: 8d 86 02  -         sta Two.CurrentCharColor
25f0: 4c f9 25  -         jmp !done+
25f3: 20        - memory: .byte Petscii.SPACEBAR
25f4: 53 52 43  -         .text description
25f7: 3a        -         .text ":"
25f8: 00        -         .byte Petscii.NULL
25f9: a6 21     -         ldx rl(register.getValue())
25fb: a4 22     -         ldy rh(register.getValue())
25fd: e0 64     -         cpx #<value
25ff: d0 25     -         bne !failed+
2601: c0 54     -         cpy #>value
2603: d0 21     -         bne !failed+
2605: ee 61 54  -         inc TEST_PASS_COUNT
2608: ad 86 02  -         lda Two.CurrentCharColor
260b: 48        -         pha
260c: a9 05     -         lda #color
260e: 8d 86 02  -         sta Two.CurrentCharColor
2611: a2 00     -         ldx #$00
2613: bd 5c 54  -         lda address,x
2616: f0 07     -         beq !done+
2618: 20 d2 ff  -         jsr Kernal.CHROUT
261b: e8        -         inx
261c: 4c 13 26  -         jmp !loop-
261f: 68        -         pla
2620: 8d 86 02  -         sta Two.CurrentCharColor
2623: 4c 41 26  -         jmp !done+
2626: ad 86 02  -         lda Two.CurrentCharColor
2629: 48        -         pha
262a: a9 02     -         lda #color
262c: 8d 86 02  -         sta Two.CurrentCharColor
262f: a2 00     -         ldx #$00
2631: bd 5e 54  -         lda address,x
2634: f0 07     -         beq !done+
2636: 20 d2 ff  -         jsr Kernal.CHROUT
2639: e8        -         inx
263a: 4c 31 26  -         jmp !loop-
263d: 68        -         pla
263e: 8d 86 02  -         sta Two.CurrentCharColor
2641: ee 60 54  -         inc TEST_COUNT
2644: ad 86 02  -         lda Two.CurrentCharColor
2647: 48        -         pha
2648: a9 0e     -         lda #color
264a: 8d 86 02  -         sta Two.CurrentCharColor
264d: a2 00     -         ldx #$00
264f: bd 62 26  -         lda address,x
2652: f0 07     -         beq !done+
2654: 20 d2 ff  -         jsr Kernal.CHROUT
2657: e8        -         inx
2658: 4c 4f 26  -         jmp !loop-
265b: 68        -         pla
265c: 8d 86 02  -         sta Two.CurrentCharColor
265f: 4c 68 26  -         jmp !done+
2662: 20        - memory: .byte Petscii.SPACEBAR
2663: 44 53 54  -         .text description
2666: 3a        -         .text ":"
2667: 00        -         .byte Petscii.NULL
2668: a6 23     -         ldx rl(register.getValue())
266a: a4 24     -         ldy rh(register.getValue())
266c: e0 66     -         cpx #<value
266e: d0 25     -         bne !failed+
2670: c0 54     -         cpy #>value
2672: d0 21     -         bne !failed+
2674: ee 61 54  -         inc TEST_PASS_COUNT
2677: ad 86 02  -         lda Two.CurrentCharColor
267a: 48        -         pha
267b: a9 05     -         lda #color
267d: 8d 86 02  -         sta Two.CurrentCharColor
2680: a2 00     -         ldx #$00
2682: bd 5c 54  -         lda address,x
2685: f0 07     -         beq !done+
2687: 20 d2 ff  -         jsr Kernal.CHROUT
268a: e8        -         inx
268b: 4c 82 26  -         jmp !loop-
268e: 68        -         pla
268f: 8d 86 02  -         sta Two.CurrentCharColor
2692: 4c b0 26  -         jmp !done+
2695: ad 86 02  -         lda Two.CurrentCharColor
2698: 48        -         pha
2699: a9 02     -         lda #color
269b: 8d 86 02  -         sta Two.CurrentCharColor
269e: a2 00     -         ldx #$00
26a0: bd 5e 54  -         lda address,x
26a3: f0 07     -         beq !done+
26a5: 20 d2 ff  -         jsr Kernal.CHROUT
26a8: e8        -         inx
26a9: 4c a0 26  -         jmp !loop-
26ac: 68        -         pla
26ad: 8d 86 02  -         sta Two.CurrentCharColor
26b0: a2 00     -         ldx #$00
26b2: bd c1 26  -         lda address,x
26b5: f0 07     -         beq !done+
26b7: 20 d2 ff  -         jsr Kernal.CHROUT
26ba: e8        -         inx
26bb: 4c b2 26  -         jmp !loop-
26be: 4c c3 26  -         jmp !done+
26c1: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
26c3: ae 62 54  -         ldx TEST_NAME_COUNT
26c6: e0 15     -         cpx #TESTS_PER_PAGE
26c8: d0 5d     -         bne !exit+
26ca: ad 86 02  -         lda Two.CurrentCharColor
26cd: 48        -         pha
26ce: a9 01     -         lda #color
26d0: 8d 86 02  -         sta Two.CurrentCharColor
26d3: a2 00     -         ldx #$00
26d5: bd e8 26  -         lda address,x
26d8: f0 07     -         beq !done+
26da: 20 d2 ff  -         jsr Kernal.CHROUT
26dd: e8        -         inx
26de: 4c d5 26  -         jmp !loop-
26e1: 68        -         pla
26e2: 8d 86 02  -         sta Two.CurrentCharColor
26e5: 4c 07 27  -         jmp !no_key+
26e8: 0d        - memory: .byte Petscii.RETURN
26e9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
26f9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2705: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2707: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
270a: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
270d: f0 f8     -         beq !no_key-
270f: a2 00     -         ldx #$00
2711: bd 20 27  -         lda address,x
2714: f0 07     -         beq !done+
2716: 20 d2 ff  -         jsr Kernal.CHROUT
2719: e8        -         inx
271a: 4c 11 27  -         jmp !loop-
271d: 4c 22 27  -         jmp !done+
2720: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2722: a2 00     -         ldx #$00
2724: 8e 62 54  -         stx TEST_NAME_COUNT
2727: 60        -         rts
2728: ee 62 54  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
272b: ad 86 02  -         lda Two.CurrentCharColor
272e: 48        -         pha
272f: a9 0f     -         lda #color
2731: 8d 86 02  -         sta Two.CurrentCharColor
2734: a2 00     -         ldx #$00
2736: bd 45 27  -         lda address,x
2739: f0 07     -         beq !done+
273b: 20 d2 ff  -         jsr Kernal.CHROUT
273e: e8        -         inx
273f: 4c 36 27  -         jmp !loop-
2742: 4c 5a 27  -         jmp !done+
2745: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text preprocessorString	// store in memory
2755: 52 45 43 54                                     
2759: 00        -         .byte Petscii.NULL			// terminate
275a: 68        -         pla
275b: 8d 86 02  -         sta Two.CurrentCharColor
275e: 4c 7b 27  -         jmp !done+
2761: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
2763: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
2773: 52 45 43 54                                     
2777: 2e 2e 2e  -         .text "..."
277a: 00        -         .byte Petscii.NULL
277b: 20 08 10  -         jsr SW16
277e: 15        -         .byte opcode(op, register)
277f: 63 54     -         .word address.getValue()
2781: 65        -         .byte opcode($60, register) }
2782: 00        -         .byte $00 }
2783: ee 60 54  -         inc TEST_COUNT
2786: ad 86 02  -         lda Two.CurrentCharColor
2789: 48        -         pha
278a: a9 0e     -         lda #color
278c: 8d 86 02  -         sta Two.CurrentCharColor
278f: a2 00     -         ldx #$00
2791: bd a4 27  -         lda address,x
2794: f0 07     -         beq !done+
2796: 20 d2 ff  -         jsr Kernal.CHROUT
2799: e8        -         inx
279a: 4c 91 27  -         jmp !loop-
279d: 68        -         pla
279e: 8d 86 02  -         sta Two.CurrentCharColor
27a1: 4c aa 27  -         jmp !done+
27a4: 20        - memory: .byte Petscii.SPACEBAR
27a5: 41 43 43  -         .text description
27a8: 3a        -         .text ":"
27a9: 00        -         .byte Petscii.NULL
27aa: a6 17     -         ldx rl(register.getValue())
27ac: a4 18     -         ldy rh(register.getValue())
27ae: ec 63 54  -         cpx address
27b1: d0 26     -         bne !failed+
27b3: cc 64 54  -         cpy address+1
27b6: d0 21     -         bne !failed+
27b8: ee 61 54  -         inc TEST_PASS_COUNT
27bb: ad 86 02  -         lda Two.CurrentCharColor
27be: 48        -         pha
27bf: a9 05     -         lda #color
27c1: 8d 86 02  -         sta Two.CurrentCharColor
27c4: a2 00     -         ldx #$00
27c6: bd 5c 54  -         lda address,x
27c9: f0 07     -         beq !done+
27cb: 20 d2 ff  -         jsr Kernal.CHROUT
27ce: e8        -         inx
27cf: 4c c6 27  -         jmp !loop-
27d2: 68        -         pla
27d3: 8d 86 02  -         sta Two.CurrentCharColor
27d6: 4c f4 27  -         jmp !done+
27d9: ad 86 02  -         lda Two.CurrentCharColor
27dc: 48        -         pha
27dd: a9 02     -         lda #color
27df: 8d 86 02  -         sta Two.CurrentCharColor
27e2: a2 00     -         ldx #$00
27e4: bd 5e 54  -         lda address,x
27e7: f0 07     -         beq !done+
27e9: 20 d2 ff  -         jsr Kernal.CHROUT
27ec: e8        -         inx
27ed: 4c e4 27  -         jmp !loop-
27f0: 68        -         pla
27f1: 8d 86 02  -         sta Two.CurrentCharColor
27f4: ee 60 54  -         inc TEST_COUNT
27f7: ad 86 02  -         lda Two.CurrentCharColor
27fa: 48        -         pha
27fb: a9 0e     -         lda #color
27fd: 8d 86 02  -         sta Two.CurrentCharColor
2800: a2 00     -         ldx #$00
2802: bd 15 28  -         lda address,x
2805: f0 07     -         beq !done+
2807: 20 d2 ff  -         jsr Kernal.CHROUT
280a: e8        -         inx
280b: 4c 02 28  -         jmp !loop-
280e: 68        -         pla
280f: 8d 86 02  -         sta Two.CurrentCharColor
2812: 4c 1a 28  -         jmp !done+
2815: 20        - memory: .byte Petscii.SPACEBAR
2816: 2b 32     -         .text description
2818: 3a        -         .text ":"
2819: 00        -         .byte Petscii.NULL
281a: a6 21     -         ldx rl(register.getValue())
281c: a4 22     -         ldy rh(register.getValue())
281e: e0 65     -         cpx #<value
2820: d0 25     -         bne !failed+
2822: c0 54     -         cpy #>value
2824: d0 21     -         bne !failed+
2826: ee 61 54  -         inc TEST_PASS_COUNT
2829: ad 86 02  -         lda Two.CurrentCharColor
282c: 48        -         pha
282d: a9 05     -         lda #color
282f: 8d 86 02  -         sta Two.CurrentCharColor
2832: a2 00     -         ldx #$00
2834: bd 5c 54  -         lda address,x
2837: f0 07     -         beq !done+
2839: 20 d2 ff  -         jsr Kernal.CHROUT
283c: e8        -         inx
283d: 4c 34 28  -         jmp !loop-
2840: 68        -         pla
2841: 8d 86 02  -         sta Two.CurrentCharColor
2844: 4c 62 28  -         jmp !done+
2847: ad 86 02  -         lda Two.CurrentCharColor
284a: 48        -         pha
284b: a9 02     -         lda #color
284d: 8d 86 02  -         sta Two.CurrentCharColor
2850: a2 00     -         ldx #$00
2852: bd 5e 54  -         lda address,x
2855: f0 07     -         beq !done+
2857: 20 d2 ff  -         jsr Kernal.CHROUT
285a: e8        -         inx
285b: 4c 52 28  -         jmp !loop-
285e: 68        -         pla
285f: 8d 86 02  -         sta Two.CurrentCharColor
2862: a2 00     -         ldx #$00
2864: bd 73 28  -         lda address,x
2867: f0 07     -         beq !done+
2869: 20 d2 ff  -         jsr Kernal.CHROUT
286c: e8        -         inx
286d: 4c 64 28  -         jmp !loop-
2870: 4c 75 28  -         jmp !done+
2873: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
2875: ae 62 54  -         ldx TEST_NAME_COUNT
2878: e0 15     -         cpx #TESTS_PER_PAGE
287a: d0 5d     -         bne !exit+
287c: ad 86 02  -         lda Two.CurrentCharColor
287f: 48        -         pha
2880: a9 01     -         lda #color
2882: 8d 86 02  -         sta Two.CurrentCharColor
2885: a2 00     -         ldx #$00
2887: bd 9a 28  -         lda address,x
288a: f0 07     -         beq !done+
288c: 20 d2 ff  -         jsr Kernal.CHROUT
288f: e8        -         inx
2890: 4c 87 28  -         jmp !loop-
2893: 68        -         pla
2894: 8d 86 02  -         sta Two.CurrentCharColor
2897: 4c b9 28  -         jmp !no_key+
289a: 0d        - memory: .byte Petscii.RETURN
289b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
28ab: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
28b7: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
28b9: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
28bc: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
28bf: f0 f8     -         beq !no_key-
28c1: a2 00     -         ldx #$00
28c3: bd d2 28  -         lda address,x
28c6: f0 07     -         beq !done+
28c8: 20 d2 ff  -         jsr Kernal.CHROUT
28cb: e8        -         inx
28cc: 4c c3 28  -         jmp !loop-
28cf: 4c d4 28  -         jmp !done+
28d2: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
28d4: a2 00     -         ldx #$00
28d6: 8e 62 54  -         stx TEST_NAME_COUNT
28d9: 60        -         rts
28da: ee 62 54  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
28dd: ad 86 02  -         lda Two.CurrentCharColor
28e0: 48        -         pha
28e1: a9 0f     -         lda #color
28e3: 8d 86 02  -         sta Two.CurrentCharColor
28e6: a2 00     -         ldx #$00
28e8: bd f7 28  -         lda address,x
28eb: f0 07     -         beq !done+
28ed: 20 d2 ff  -         jsr Kernal.CHROUT
28f0: e8        -         inx
28f1: 4c e8 28  -         jmp !loop-
28f4: 4c 05 29  -         jmp !done+
28f7: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text preprocessorString	// store in memory
2904: 00        -         .byte Petscii.NULL			// terminate
2905: 68        -         pla
2906: 8d 86 02  -         sta Two.CurrentCharColor
2909: 4c 1f 29  -         jmp !done+
290c: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
290e: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
291b: 2e 2e 2e  -         .text "..."
291e: 00        -         .byte Petscii.NULL
291f: 20 08 10  -         jsr SW16
2922: 15        -         .byte opcode(op, register)
2923: 63 54     -         .word address.getValue()
2925: 16        -         .byte opcode(op, register)
2926: 65 54     -         .word address.getValue()
2928: 65        -         .byte opcode($60, register) }
2929: 76        -         .byte opcode($70, register) }
292a: 00        -         .byte $00 }
292b: ee 60 54  -         inc TEST_COUNT
292e: ad 86 02  -         lda Two.CurrentCharColor
2931: 48        -         pha
2932: a9 0e     -         lda #color
2934: 8d 86 02  -         sta Two.CurrentCharColor
2937: a2 00     -         ldx #$00
2939: bd 4c 29  -         lda address,x
293c: f0 07     -         beq !done+
293e: 20 d2 ff  -         jsr Kernal.CHROUT
2941: e8        -         inx
2942: 4c 39 29  -         jmp !loop-
2945: 68        -         pla
2946: 8d 86 02  -         sta Two.CurrentCharColor
2949: 4c 52 29  -         jmp !done+
294c: 20        - memory: .byte Petscii.SPACEBAR
294d: 4d 45 4d  -         .text description
2950: 3a        -         .text ":"
2951: 00        -         .byte Petscii.NULL
2952: a2 ff     -         ldx #$ff
2954: e8        -         inx
2955: e0 02     -         cpx #size
2957: f0 0b     -         beq !success+
2959: bd 63 54  -         lda source,x
295c: dd 65 54  -         cmp dest,x
295f: f0 f3     -         beq !loop-
2961: 4c 85 29  -         jmp !failed+
2964: ee 61 54  -         inc TEST_PASS_COUNT
2967: ad 86 02  -         lda Two.CurrentCharColor
296a: 48        -         pha
296b: a9 05     -         lda #color
296d: 8d 86 02  -         sta Two.CurrentCharColor
2970: a2 00     -         ldx #$00
2972: bd 5c 54  -         lda address,x
2975: f0 07     -         beq !done+
2977: 20 d2 ff  -         jsr Kernal.CHROUT
297a: e8        -         inx
297b: 4c 72 29  -         jmp !loop-
297e: 68        -         pla
297f: 8d 86 02  -         sta Two.CurrentCharColor
2982: 4c a0 29  -         jmp !done+
2985: ad 86 02  -         lda Two.CurrentCharColor
2988: 48        -         pha
2989: a9 02     -         lda #color
298b: 8d 86 02  -         sta Two.CurrentCharColor
298e: a2 00     -         ldx #$00
2990: bd 5e 54  -         lda address,x
2993: f0 07     -         beq !done+
2995: 20 d2 ff  -         jsr Kernal.CHROUT
2998: e8        -         inx
2999: 4c 90 29  -         jmp !loop-
299c: 68        -         pla
299d: 8d 86 02  -         sta Two.CurrentCharColor
29a0: ee 60 54  -         inc TEST_COUNT
29a3: ad 86 02  -         lda Two.CurrentCharColor
29a6: 48        -         pha
29a7: a9 0e     -         lda #color
29a9: 8d 86 02  -         sta Two.CurrentCharColor
29ac: a2 00     -         ldx #$00
29ae: bd c1 29  -         lda address,x
29b1: f0 07     -         beq !done+
29b3: 20 d2 ff  -         jsr Kernal.CHROUT
29b6: e8        -         inx
29b7: 4c ae 29  -         jmp !loop-
29ba: 68        -         pla
29bb: 8d 86 02  -         sta Two.CurrentCharColor
29be: 4c c7 29  -         jmp !done+
29c1: 20        - memory: .byte Petscii.SPACEBAR
29c2: 53 2b 32  -         .text description
29c5: 3a        -         .text ":"
29c6: 00        -         .byte Petscii.NULL
29c7: a6 21     -         ldx rl(register.getValue())
29c9: a4 22     -         ldy rh(register.getValue())
29cb: e0 65     -         cpx #<value
29cd: d0 25     -         bne !failed+
29cf: c0 54     -         cpy #>value
29d1: d0 21     -         bne !failed+
29d3: ee 61 54  -         inc TEST_PASS_COUNT
29d6: ad 86 02  -         lda Two.CurrentCharColor
29d9: 48        -         pha
29da: a9 05     -         lda #color
29dc: 8d 86 02  -         sta Two.CurrentCharColor
29df: a2 00     -         ldx #$00
29e1: bd 5c 54  -         lda address,x
29e4: f0 07     -         beq !done+
29e6: 20 d2 ff  -         jsr Kernal.CHROUT
29e9: e8        -         inx
29ea: 4c e1 29  -         jmp !loop-
29ed: 68        -         pla
29ee: 8d 86 02  -         sta Two.CurrentCharColor
29f1: 4c 0f 2a  -         jmp !done+
29f4: ad 86 02  -         lda Two.CurrentCharColor
29f7: 48        -         pha
29f8: a9 02     -         lda #color
29fa: 8d 86 02  -         sta Two.CurrentCharColor
29fd: a2 00     -         ldx #$00
29ff: bd 5e 54  -         lda address,x
2a02: f0 07     -         beq !done+
2a04: 20 d2 ff  -         jsr Kernal.CHROUT
2a07: e8        -         inx
2a08: 4c ff 29  -         jmp !loop-
2a0b: 68        -         pla
2a0c: 8d 86 02  -         sta Two.CurrentCharColor
2a0f: ee 60 54  -         inc TEST_COUNT
2a12: ad 86 02  -         lda Two.CurrentCharColor
2a15: 48        -         pha
2a16: a9 0e     -         lda #color
2a18: 8d 86 02  -         sta Two.CurrentCharColor
2a1b: a2 00     -         ldx #$00
2a1d: bd 30 2a  -         lda address,x
2a20: f0 07     -         beq !done+
2a22: 20 d2 ff  -         jsr Kernal.CHROUT
2a25: e8        -         inx
2a26: 4c 1d 2a  -         jmp !loop-
2a29: 68        -         pla
2a2a: 8d 86 02  -         sta Two.CurrentCharColor
2a2d: 4c 36 2a  -         jmp !done+
2a30: 20        - memory: .byte Petscii.SPACEBAR
2a31: 44 2b 32  -         .text description
2a34: 3a        -         .text ":"
2a35: 00        -         .byte Petscii.NULL
2a36: a6 23     -         ldx rl(register.getValue())
2a38: a4 24     -         ldy rh(register.getValue())
2a3a: e0 67     -         cpx #<value
2a3c: d0 25     -         bne !failed+
2a3e: c0 54     -         cpy #>value
2a40: d0 21     -         bne !failed+
2a42: ee 61 54  -         inc TEST_PASS_COUNT
2a45: ad 86 02  -         lda Two.CurrentCharColor
2a48: 48        -         pha
2a49: a9 05     -         lda #color
2a4b: 8d 86 02  -         sta Two.CurrentCharColor
2a4e: a2 00     -         ldx #$00
2a50: bd 5c 54  -         lda address,x
2a53: f0 07     -         beq !done+
2a55: 20 d2 ff  -         jsr Kernal.CHROUT
2a58: e8        -         inx
2a59: 4c 50 2a  -         jmp !loop-
2a5c: 68        -         pla
2a5d: 8d 86 02  -         sta Two.CurrentCharColor
2a60: 4c 7e 2a  -         jmp !done+
2a63: ad 86 02  -         lda Two.CurrentCharColor
2a66: 48        -         pha
2a67: a9 02     -         lda #color
2a69: 8d 86 02  -         sta Two.CurrentCharColor
2a6c: a2 00     -         ldx #$00
2a6e: bd 5e 54  -         lda address,x
2a71: f0 07     -         beq !done+
2a73: 20 d2 ff  -         jsr Kernal.CHROUT
2a76: e8        -         inx
2a77: 4c 6e 2a  -         jmp !loop-
2a7a: 68        -         pla
2a7b: 8d 86 02  -         sta Two.CurrentCharColor
2a7e: a2 00     -         ldx #$00
2a80: bd 8f 2a  -         lda address,x
2a83: f0 07     -         beq !done+
2a85: 20 d2 ff  -         jsr Kernal.CHROUT
2a88: e8        -         inx
2a89: 4c 80 2a  -         jmp !loop-
2a8c: 4c 91 2a  -         jmp !done+
2a8f: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
2a91: ae 62 54  -         ldx TEST_NAME_COUNT
2a94: e0 15     -         cpx #TESTS_PER_PAGE
2a96: d0 5d     -         bne !exit+
2a98: ad 86 02  -         lda Two.CurrentCharColor
2a9b: 48        -         pha
2a9c: a9 01     -         lda #color
2a9e: 8d 86 02  -         sta Two.CurrentCharColor
2aa1: a2 00     -         ldx #$00
2aa3: bd b6 2a  -         lda address,x
2aa6: f0 07     -         beq !done+
2aa8: 20 d2 ff  -         jsr Kernal.CHROUT
2aab: e8        -         inx
2aac: 4c a3 2a  -         jmp !loop-
2aaf: 68        -         pla
2ab0: 8d 86 02  -         sta Two.CurrentCharColor
2ab3: 4c d5 2a  -         jmp !no_key+
2ab6: 0d        - memory: .byte Petscii.RETURN
2ab7: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2ac7: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2ad3: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2ad5: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
2ad8: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
2adb: f0 f8     -         beq !no_key-
2add: a2 00     -         ldx #$00
2adf: bd ee 2a  -         lda address,x
2ae2: f0 07     -         beq !done+
2ae4: 20 d2 ff  -         jsr Kernal.CHROUT
2ae7: e8        -         inx
2ae8: 4c df 2a  -         jmp !loop-
2aeb: 4c f0 2a  -         jmp !done+
2aee: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2af0: a2 00     -         ldx #$00
2af2: 8e 62 54  -         stx TEST_NAME_COUNT
2af5: 60        -         rts
2af6: ee 62 54  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
2af9: ad 86 02  -         lda Two.CurrentCharColor
2afc: 48        -         pha
2afd: a9 0f     -         lda #color
2aff: 8d 86 02  -         sta Two.CurrentCharColor
2b02: a2 00     -         ldx #$00
2b04: bd 13 2b  -         lda address,x
2b07: f0 07     -         beq !done+
2b09: 20 d2 ff  -         jsr Kernal.CHROUT
2b0c: e8        -         inx
2b0d: 4c 04 2b  -         jmp !loop-
2b10: 4c 22 2b  -         jmp !done+
2b13: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text preprocessorString	// store in memory
2b21: 00        -         .byte Petscii.NULL			// terminate
2b22: 68        -         pla
2b23: 8d 86 02  -         sta Two.CurrentCharColor
2b26: 4c 3d 2b  -         jmp !done+
2b29: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
2b2b: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
2b39: 2e 2e 2e  -         .text "..."
2b3c: 00        -         .byte Petscii.NULL
2b3d: 20 08 10  -         jsr SW16
2b40: 15        -         .byte opcode(op, register)
2b41: 89 54     -         .word address.getValue()
2b43: 10        -         .byte opcode(op, register)
2b44: 04 00     -         .word address.getValue()
2b46: 55        -         .byte opcode($50, register) }
2b47: 0d        -         .byte $0d
2b48: 2b        -         .byte >(address.getValue()-1)
2b49: dc        -         .byte <(address.getValue()-1)
2b4a: 10        -         .byte opcode(op, register)
2b4b: 05 00     -         .word address.getValue()
2b4d: 55        -         .byte opcode($50, register) }
2b4e: 0d        -         .byte $0d
2b4f: 2c        -         .byte >(address.getValue()-1)
2b50: 47        -         .byte <(address.getValue()-1)
2b51: 10        -         .byte opcode(op, register)
2b52: 06 00     -         .word address.getValue()
2b54: 55        -         .byte opcode($50, register) }
2b55: 0d        -         .byte $0d
2b56: 2c        -         .byte >(address.getValue()-1)
2b57: b2        -         .byte <(address.getValue()-1)
2b58: 85        -         .byte opcode($80, register) }
2b59: 0d        -         .byte $0d
2b5a: 2d        -         .byte >(address.getValue()-1)
2b5b: 1d        -         .byte <(address.getValue()-1)
2b5c: 85        -         .byte opcode($80, register) }
2b5d: 0d        -         .byte $0d
2b5e: 2e        -         .byte >(address.getValue()-1)
2b5f: 4a        -         .byte <(address.getValue()-1)
2b60: 85        -         .byte opcode($80, register) }
2b61: 0d        -         .byte $0d
2b62: 2e        -         .byte >(address.getValue()-1)
2b63: b9        -         .byte <(address.getValue()-1)
2b64: 00        -         .byte $00 }
2b65: a2 00     -         ldx #$00
2b67: bd 76 2b  -         lda address,x
2b6a: f0 07     -         beq !done+
2b6c: 20 d2 ff  -         jsr Kernal.CHROUT
2b6f: e8        -         inx
2b70: 4c 67 2b  -         jmp !loop-
2b73: 4c 78 2b  -         jmp !done+
2b76: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
2b78: ae 62 54  -         ldx TEST_NAME_COUNT
2b7b: e0 15     -         cpx #TESTS_PER_PAGE
2b7d: d0 5d     -         bne !exit+
2b7f: ad 86 02  -         lda Two.CurrentCharColor
2b82: 48        -         pha
2b83: a9 01     -         lda #color
2b85: 8d 86 02  -         sta Two.CurrentCharColor
2b88: a2 00     -         ldx #$00
2b8a: bd 9d 2b  -         lda address,x
2b8d: f0 07     -         beq !done+
2b8f: 20 d2 ff  -         jsr Kernal.CHROUT
2b92: e8        -         inx
2b93: 4c 8a 2b  -         jmp !loop-
2b96: 68        -         pla
2b97: 8d 86 02  -         sta Two.CurrentCharColor
2b9a: 4c bc 2b  -         jmp !no_key+
2b9d: 0d        - memory: .byte Petscii.RETURN
2b9e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2bae: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2bba: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2bbc: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
2bbf: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
2bc2: f0 f8     -         beq !no_key-
2bc4: a2 00     -         ldx #$00
2bc6: bd d5 2b  -         lda address,x
2bc9: f0 07     -         beq !done+
2bcb: 20 d2 ff  -         jsr Kernal.CHROUT
2bce: e8        -         inx
2bcf: 4c c6 2b  -         jmp !loop-
2bd2: 4c d7 2b  -         jmp !done+
2bd5: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2bd7: a2 00     -         ldx #$00
2bd9: 8e 62 54  -         stx TEST_NAME_COUNT
2bdc: 60        -         rts
2bdd: ee 60 54  -         inc TEST_COUNT
2be0: ad 86 02  -         lda Two.CurrentCharColor
2be3: 48        -         pha
2be4: a9 0e     -         lda #color
2be6: 8d 86 02  -         sta Two.CurrentCharColor
2be9: a2 00     -         ldx #$00
2beb: bd fe 2b  -         lda address,x
2bee: f0 07     -         beq !done+
2bf0: 20 d2 ff  -         jsr Kernal.CHROUT
2bf3: e8        -         inx
2bf4: 4c eb 2b  -         jmp !loop-
2bf7: 68        -         pla
2bf8: 8d 86 02  -         sta Two.CurrentCharColor
2bfb: 4c 02 2c  -         jmp !done+
2bfe: 20        - memory: .byte Petscii.SPACEBAR
2bff: 31        -         .text description
2c00: 3a        -         .text ":"
2c01: 00        -         .byte Petscii.NULL
2c02: a6 17     -         ldx rl(register.getValue())
2c04: a4 18     -         ldy rh(register.getValue())
2c06: ec 89 54  -         cpx address
2c09: d0 21     -         bne !failed+
2c0b: ee 61 54  -         inc TEST_PASS_COUNT
2c0e: ad 86 02  -         lda Two.CurrentCharColor
2c11: 48        -         pha
2c12: a9 05     -         lda #color
2c14: 8d 86 02  -         sta Two.CurrentCharColor
2c17: a2 00     -         ldx #$00
2c19: bd 5c 54  -         lda address,x
2c1c: f0 07     -         beq !done+
2c1e: 20 d2 ff  -         jsr Kernal.CHROUT
2c21: e8        -         inx
2c22: 4c 19 2c  -         jmp !loop-
2c25: 68        -         pla
2c26: 8d 86 02  -         sta Two.CurrentCharColor
2c29: 4c 47 2c  -         jmp !done+
2c2c: ad 86 02  -         lda Two.CurrentCharColor
2c2f: 48        -         pha
2c30: a9 02     -         lda #color
2c32: 8d 86 02  -         sta Two.CurrentCharColor
2c35: a2 00     -         ldx #$00
2c37: bd 5e 54  -         lda address,x
2c3a: f0 07     -         beq !done+
2c3c: 20 d2 ff  -         jsr Kernal.CHROUT
2c3f: e8        -         inx
2c40: 4c 37 2c  -         jmp !loop-
2c43: 68        -         pla
2c44: 8d 86 02  -         sta Two.CurrentCharColor
2c47: 60        -         rts
2c48: ee 60 54  -         inc TEST_COUNT
2c4b: ad 86 02  -         lda Two.CurrentCharColor
2c4e: 48        -         pha
2c4f: a9 0e     -         lda #color
2c51: 8d 86 02  -         sta Two.CurrentCharColor
2c54: a2 00     -         ldx #$00
2c56: bd 69 2c  -         lda address,x
2c59: f0 07     -         beq !done+
2c5b: 20 d2 ff  -         jsr Kernal.CHROUT
2c5e: e8        -         inx
2c5f: 4c 56 2c  -         jmp !loop-
2c62: 68        -         pla
2c63: 8d 86 02  -         sta Two.CurrentCharColor
2c66: 4c 6d 2c  -         jmp !done+
2c69: 20        - memory: .byte Petscii.SPACEBAR
2c6a: 32        -         .text description
2c6b: 3a        -         .text ":"
2c6c: 00        -         .byte Petscii.NULL
2c6d: a6 17     -         ldx rl(register.getValue())
2c6f: a4 18     -         ldy rh(register.getValue())
2c71: ec 8a 54  -         cpx address
2c74: d0 21     -         bne !failed+
2c76: ee 61 54  -         inc TEST_PASS_COUNT
2c79: ad 86 02  -         lda Two.CurrentCharColor
2c7c: 48        -         pha
2c7d: a9 05     -         lda #color
2c7f: 8d 86 02  -         sta Two.CurrentCharColor
2c82: a2 00     -         ldx #$00
2c84: bd 5c 54  -         lda address,x
2c87: f0 07     -         beq !done+
2c89: 20 d2 ff  -         jsr Kernal.CHROUT
2c8c: e8        -         inx
2c8d: 4c 84 2c  -         jmp !loop-
2c90: 68        -         pla
2c91: 8d 86 02  -         sta Two.CurrentCharColor
2c94: 4c b2 2c  -         jmp !done+
2c97: ad 86 02  -         lda Two.CurrentCharColor
2c9a: 48        -         pha
2c9b: a9 02     -         lda #color
2c9d: 8d 86 02  -         sta Two.CurrentCharColor
2ca0: a2 00     -         ldx #$00
2ca2: bd 5e 54  -         lda address,x
2ca5: f0 07     -         beq !done+
2ca7: 20 d2 ff  -         jsr Kernal.CHROUT
2caa: e8        -         inx
2cab: 4c a2 2c  -         jmp !loop-
2cae: 68        -         pla
2caf: 8d 86 02  -         sta Two.CurrentCharColor
2cb2: 60        -         rts
2cb3: ee 60 54  -         inc TEST_COUNT
2cb6: ad 86 02  -         lda Two.CurrentCharColor
2cb9: 48        -         pha
2cba: a9 0e     -         lda #color
2cbc: 8d 86 02  -         sta Two.CurrentCharColor
2cbf: a2 00     -         ldx #$00
2cc1: bd d4 2c  -         lda address,x
2cc4: f0 07     -         beq !done+
2cc6: 20 d2 ff  -         jsr Kernal.CHROUT
2cc9: e8        -         inx
2cca: 4c c1 2c  -         jmp !loop-
2ccd: 68        -         pla
2cce: 8d 86 02  -         sta Two.CurrentCharColor
2cd1: 4c d8 2c  -         jmp !done+
2cd4: 20        - memory: .byte Petscii.SPACEBAR
2cd5: 33        -         .text description
2cd6: 3a        -         .text ":"
2cd7: 00        -         .byte Petscii.NULL
2cd8: a6 17     -         ldx rl(register.getValue())
2cda: a4 18     -         ldy rh(register.getValue())
2cdc: ec 8b 54  -         cpx address
2cdf: d0 21     -         bne !failed+
2ce1: ee 61 54  -         inc TEST_PASS_COUNT
2ce4: ad 86 02  -         lda Two.CurrentCharColor
2ce7: 48        -         pha
2ce8: a9 05     -         lda #color
2cea: 8d 86 02  -         sta Two.CurrentCharColor
2ced: a2 00     -         ldx #$00
2cef: bd 5c 54  -         lda address,x
2cf2: f0 07     -         beq !done+
2cf4: 20 d2 ff  -         jsr Kernal.CHROUT
2cf7: e8        -         inx
2cf8: 4c ef 2c  -         jmp !loop-
2cfb: 68        -         pla
2cfc: 8d 86 02  -         sta Two.CurrentCharColor
2cff: 4c 1d 2d  -         jmp !done+
2d02: ad 86 02  -         lda Two.CurrentCharColor
2d05: 48        -         pha
2d06: a9 02     -         lda #color
2d08: 8d 86 02  -         sta Two.CurrentCharColor
2d0b: a2 00     -         ldx #$00
2d0d: bd 5e 54  -         lda address,x
2d10: f0 07     -         beq !done+
2d12: 20 d2 ff  -         jsr Kernal.CHROUT
2d15: e8        -         inx
2d16: 4c 0d 2d  -         jmp !loop-
2d19: 68        -         pla
2d1a: 8d 86 02  -         sta Two.CurrentCharColor
2d1d: 60        -         rts
2d1e: a2 00     -         ldx #$00
2d20: bd 2f 2d  -         lda address,x
2d23: f0 07     -         beq !done+
2d25: 20 d2 ff  -         jsr Kernal.CHROUT
2d28: e8        -         inx
2d29: 4c 20 2d  -         jmp !loop-
2d2c: 4c 31 2d  -         jmp !done+
2d2f: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
2d31: ae 62 54  -         ldx TEST_NAME_COUNT
2d34: e0 15     -         cpx #TESTS_PER_PAGE
2d36: d0 5d     -         bne !exit+
2d38: ad 86 02  -         lda Two.CurrentCharColor
2d3b: 48        -         pha
2d3c: a9 01     -         lda #color
2d3e: 8d 86 02  -         sta Two.CurrentCharColor
2d41: a2 00     -         ldx #$00
2d43: bd 56 2d  -         lda address,x
2d46: f0 07     -         beq !done+
2d48: 20 d2 ff  -         jsr Kernal.CHROUT
2d4b: e8        -         inx
2d4c: 4c 43 2d  -         jmp !loop-
2d4f: 68        -         pla
2d50: 8d 86 02  -         sta Two.CurrentCharColor
2d53: 4c 75 2d  -         jmp !no_key+
2d56: 0d        - memory: .byte Petscii.RETURN
2d57: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2d67: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2d73: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2d75: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
2d78: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
2d7b: f0 f8     -         beq !no_key-
2d7d: a2 00     -         ldx #$00
2d7f: bd 8e 2d  -         lda address,x
2d82: f0 07     -         beq !done+
2d84: 20 d2 ff  -         jsr Kernal.CHROUT
2d87: e8        -         inx
2d88: 4c 7f 2d  -         jmp !loop-
2d8b: 4c 90 2d  -         jmp !done+
2d8e: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
2d90: a2 00     -         ldx #$00
2d92: 8e 62 54  -         stx TEST_NAME_COUNT
2d95: ee 62 54  -         inc TEST_NAME_COUNT
2d98: ad 86 02  -         lda Two.CurrentCharColor
2d9b: 48        -         pha
2d9c: a9 0f     -         lda #color
2d9e: 8d 86 02  -         sta Two.CurrentCharColor
2da1: a2 00     -         ldx #$00
2da3: bd b2 2d  -         lda address,x
2da6: f0 07     -         beq !done+
2da8: 20 d2 ff  -         jsr Kernal.CHROUT
2dab: e8        -         inx
2dac: 4c a3 2d  -         jmp !loop-
2daf: 4c c1 2d  -         jmp !done+
2db2: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text preprocessorString	// store in memory
2dc0: 00        -         .byte Petscii.NULL			// terminate
2dc1: 68        -         pla
2dc2: 8d 86 02  -         sta Two.CurrentCharColor
2dc5: 4c dc 2d  -         jmp !done+
2dc8: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
2dca: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
2dd8: 2e 2e 2e  -         .text "..."
2ddb: 00        -         .byte Petscii.NULL
2ddc: ee 60 54  -         inc TEST_COUNT
2ddf: ad 86 02  -         lda Two.CurrentCharColor
2de2: 48        -         pha
2de3: a9 0e     -         lda #color
2de5: 8d 86 02  -         sta Two.CurrentCharColor
2de8: a2 00     -         ldx #$00
2dea: bd fd 2d  -         lda address,x
2ded: f0 07     -         beq !done+
2def: 20 d2 ff  -         jsr Kernal.CHROUT
2df2: e8        -         inx
2df3: 4c ea 2d  -         jmp !loop-
2df6: 68        -         pla
2df7: 8d 86 02  -         sta Two.CurrentCharColor
2dfa: 4c 02 2e  -         jmp !done+
2dfd: 20        - memory: .byte Petscii.SPACEBAR
2dfe: 50 33     -         .text description
2e00: 3a        -         .text ":"
2e01: 00        -         .byte Petscii.NULL
2e02: a6 17     -         ldx rl(register.getValue())
2e04: a4 18     -         ldy rh(register.getValue())
2e06: e0 06     -         cpx #<value
2e08: d0 25     -         bne !failed+
2e0a: c0 00     -         cpy #>value
2e0c: d0 21     -         bne !failed+
2e0e: ee 61 54  -         inc TEST_PASS_COUNT
2e11: ad 86 02  -         lda Two.CurrentCharColor
2e14: 48        -         pha
2e15: a9 05     -         lda #color
2e17: 8d 86 02  -         sta Two.CurrentCharColor
2e1a: a2 00     -         ldx #$00
2e1c: bd 5c 54  -         lda address,x
2e1f: f0 07     -         beq !done+
2e21: 20 d2 ff  -         jsr Kernal.CHROUT
2e24: e8        -         inx
2e25: 4c 1c 2e  -         jmp !loop-
2e28: 68        -         pla
2e29: 8d 86 02  -         sta Two.CurrentCharColor
2e2c: 4c 4a 2e  -         jmp !done+
2e2f: ad 86 02  -         lda Two.CurrentCharColor
2e32: 48        -         pha
2e33: a9 02     -         lda #color
2e35: 8d 86 02  -         sta Two.CurrentCharColor
2e38: a2 00     -         ldx #$00
2e3a: bd 5e 54  -         lda address,x
2e3d: f0 07     -         beq !done+
2e3f: 20 d2 ff  -         jsr Kernal.CHROUT
2e42: e8        -         inx
2e43: 4c 3a 2e  -         jmp !loop-
2e46: 68        -         pla
2e47: 8d 86 02  -         sta Two.CurrentCharColor
2e4a: 60        -         rts
2e4b: ee 60 54  -         inc TEST_COUNT
2e4e: ad 86 02  -         lda Two.CurrentCharColor
2e51: 48        -         pha
2e52: a9 0e     -         lda #color
2e54: 8d 86 02  -         sta Two.CurrentCharColor
2e57: a2 00     -         ldx #$00
2e59: bd 6c 2e  -         lda address,x
2e5c: f0 07     -         beq !done+
2e5e: 20 d2 ff  -         jsr Kernal.CHROUT
2e61: e8        -         inx
2e62: 4c 59 2e  -         jmp !loop-
2e65: 68        -         pla
2e66: 8d 86 02  -         sta Two.CurrentCharColor
2e69: 4c 71 2e  -         jmp !done+
2e6c: 20        - memory: .byte Petscii.SPACEBAR
2e6d: 50 32     -         .text description
2e6f: 3a        -         .text ":"
2e70: 00        -         .byte Petscii.NULL
2e71: a6 17     -         ldx rl(register.getValue())
2e73: a4 18     -         ldy rh(register.getValue())
2e75: e0 05     -         cpx #<value
2e77: d0 25     -         bne !failed+
2e79: c0 00     -         cpy #>value
2e7b: d0 21     -         bne !failed+
2e7d: ee 61 54  -         inc TEST_PASS_COUNT
2e80: ad 86 02  -         lda Two.CurrentCharColor
2e83: 48        -         pha
2e84: a9 05     -         lda #color
2e86: 8d 86 02  -         sta Two.CurrentCharColor
2e89: a2 00     -         ldx #$00
2e8b: bd 5c 54  -         lda address,x
2e8e: f0 07     -         beq !done+
2e90: 20 d2 ff  -         jsr Kernal.CHROUT
2e93: e8        -         inx
2e94: 4c 8b 2e  -         jmp !loop-
2e97: 68        -         pla
2e98: 8d 86 02  -         sta Two.CurrentCharColor
2e9b: 4c b9 2e  -         jmp !done+
2e9e: ad 86 02  -         lda Two.CurrentCharColor
2ea1: 48        -         pha
2ea2: a9 02     -         lda #color
2ea4: 8d 86 02  -         sta Two.CurrentCharColor
2ea7: a2 00     -         ldx #$00
2ea9: bd 5e 54  -         lda address,x
2eac: f0 07     -         beq !done+
2eae: 20 d2 ff  -         jsr Kernal.CHROUT
2eb1: e8        -         inx
2eb2: 4c a9 2e  -         jmp !loop-
2eb5: 68        -         pla
2eb6: 8d 86 02  -         sta Two.CurrentCharColor
2eb9: 60        -         rts
2eba: ee 60 54  -         inc TEST_COUNT
2ebd: ad 86 02  -         lda Two.CurrentCharColor
2ec0: 48        -         pha
2ec1: a9 0e     -         lda #color
2ec3: 8d 86 02  -         sta Two.CurrentCharColor
2ec6: a2 00     -         ldx #$00
2ec8: bd db 2e  -         lda address,x
2ecb: f0 07     -         beq !done+
2ecd: 20 d2 ff  -         jsr Kernal.CHROUT
2ed0: e8        -         inx
2ed1: 4c c8 2e  -         jmp !loop-
2ed4: 68        -         pla
2ed5: 8d 86 02  -         sta Two.CurrentCharColor
2ed8: 4c e0 2e  -         jmp !done+
2edb: 20        - memory: .byte Petscii.SPACEBAR
2edc: 50 31     -         .text description
2ede: 3a        -         .text ":"
2edf: 00        -         .byte Petscii.NULL
2ee0: a6 17     -         ldx rl(register.getValue())
2ee2: a4 18     -         ldy rh(register.getValue())
2ee4: e0 04     -         cpx #<value
2ee6: d0 25     -         bne !failed+
2ee8: c0 00     -         cpy #>value
2eea: d0 21     -         bne !failed+
2eec: ee 61 54  -         inc TEST_PASS_COUNT
2eef: ad 86 02  -         lda Two.CurrentCharColor
2ef2: 48        -         pha
2ef3: a9 05     -         lda #color
2ef5: 8d 86 02  -         sta Two.CurrentCharColor
2ef8: a2 00     -         ldx #$00
2efa: bd 5c 54  -         lda address,x
2efd: f0 07     -         beq !done+
2eff: 20 d2 ff  -         jsr Kernal.CHROUT
2f02: e8        -         inx
2f03: 4c fa 2e  -         jmp !loop-
2f06: 68        -         pla
2f07: 8d 86 02  -         sta Two.CurrentCharColor
2f0a: 4c 28 2f  -         jmp !done+
2f0d: ad 86 02  -         lda Two.CurrentCharColor
2f10: 48        -         pha
2f11: a9 02     -         lda #color
2f13: 8d 86 02  -         sta Two.CurrentCharColor
2f16: a2 00     -         ldx #$00
2f18: bd 5e 54  -         lda address,x
2f1b: f0 07     -         beq !done+
2f1d: 20 d2 ff  -         jsr Kernal.CHROUT
2f20: e8        -         inx
2f21: 4c 18 2f  -         jmp !loop-
2f24: 68        -         pla
2f25: 8d 86 02  -         sta Two.CurrentCharColor
2f28: 60        -         rts
2f29: ee 62 54  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
2f2c: ad 86 02  -         lda Two.CurrentCharColor
2f2f: 48        -         pha
2f30: a9 0f     -         lda #color
2f32: 8d 86 02  -         sta Two.CurrentCharColor
2f35: a2 00     -         ldx #$00
2f37: bd 46 2f  -         lda address,x
2f3a: f0 07     -         beq !done+
2f3c: 20 d2 ff  -         jsr Kernal.CHROUT
2f3f: e8        -         inx
2f40: 4c 37 2f  -         jmp !loop-
2f43: 4c 54 2f  -         jmp !done+
2f46: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text preprocessorString	// store in memory
2f53: 00        -         .byte Petscii.NULL			// terminate
2f54: 68        -         pla
2f55: 8d 86 02  -         sta Two.CurrentCharColor
2f58: 4c 6e 2f  -         jmp !done+
2f5b: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
2f5d: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
2f6a: 2e 2e 2e  -         .text "..."
2f6d: 00        -         .byte Petscii.NULL
2f6e: 20 08 10  -         jsr SW16
2f71: 14        -         .byte opcode(op, register)
2f72: 65 54     -         .word address.getValue()
2f74: 15        -         .byte opcode(op, register)
2f75: 67 54     -         .word address.getValue()
2f77: 84        -         .byte opcode($80, register) }
2f78: 95        -         .byte opcode($90, register) }
2f79: 84        -         .byte opcode($80, register) }
2f7a: 95        -         .byte opcode($90, register) }
2f7b: 00        -         .byte $00 }
2f7c: ee 60 54  -         inc TEST_COUNT
2f7f: ad 86 02  -         lda Two.CurrentCharColor
2f82: 48        -         pha
2f83: a9 0e     -         lda #color
2f85: 8d 86 02  -         sta Two.CurrentCharColor
2f88: a2 00     -         ldx #$00
2f8a: bd 9d 2f  -         lda address,x
2f8d: f0 07     -         beq !done+
2f8f: 20 d2 ff  -         jsr Kernal.CHROUT
2f92: e8        -         inx
2f93: 4c 8a 2f  -         jmp !loop-
2f96: 68        -         pla
2f97: 8d 86 02  -         sta Two.CurrentCharColor
2f9a: 4c a3 2f  -         jmp !done+
2f9d: 20        - memory: .byte Petscii.SPACEBAR
2f9e: 4d 45 4d  -         .text description
2fa1: 3a        -         .text ":"
2fa2: 00        -         .byte Petscii.NULL
2fa3: a2 ff     -         ldx #$ff
2fa5: e8        -         inx
2fa6: e0 02     -         cpx #size
2fa8: f0 0b     -         beq !success+
2faa: bd 63 54  -         lda source,x
2fad: dd 63 54  -         cmp dest,x
2fb0: f0 f3     -         beq !loop-
2fb2: 4c d6 2f  -         jmp !failed+
2fb5: ee 61 54  -         inc TEST_PASS_COUNT
2fb8: ad 86 02  -         lda Two.CurrentCharColor
2fbb: 48        -         pha
2fbc: a9 05     -         lda #color
2fbe: 8d 86 02  -         sta Two.CurrentCharColor
2fc1: a2 00     -         ldx #$00
2fc3: bd 5c 54  -         lda address,x
2fc6: f0 07     -         beq !done+
2fc8: 20 d2 ff  -         jsr Kernal.CHROUT
2fcb: e8        -         inx
2fcc: 4c c3 2f  -         jmp !loop-
2fcf: 68        -         pla
2fd0: 8d 86 02  -         sta Two.CurrentCharColor
2fd3: 4c f1 2f  -         jmp !done+
2fd6: ad 86 02  -         lda Two.CurrentCharColor
2fd9: 48        -         pha
2fda: a9 02     -         lda #color
2fdc: 8d 86 02  -         sta Two.CurrentCharColor
2fdf: a2 00     -         ldx #$00
2fe1: bd 5e 54  -         lda address,x
2fe4: f0 07     -         beq !done+
2fe6: 20 d2 ff  -         jsr Kernal.CHROUT
2fe9: e8        -         inx
2fea: 4c e1 2f  -         jmp !loop-
2fed: 68        -         pla
2fee: 8d 86 02  -         sta Two.CurrentCharColor
2ff1: a2 00     -         ldx #$00
2ff3: bd 02 30  -         lda address,x
2ff6: f0 07     -         beq !done+
2ff8: 20 d2 ff  -         jsr Kernal.CHROUT
2ffb: e8        -         inx
2ffc: 4c f3 2f  -         jmp !loop-
2fff: 4c 04 30  -         jmp !done+
3002: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3004: ae 62 54  -         ldx TEST_NAME_COUNT
3007: e0 15     -         cpx #TESTS_PER_PAGE
3009: d0 5d     -         bne !exit+
300b: ad 86 02  -         lda Two.CurrentCharColor
300e: 48        -         pha
300f: a9 01     -         lda #color
3011: 8d 86 02  -         sta Two.CurrentCharColor
3014: a2 00     -         ldx #$00
3016: bd 29 30  -         lda address,x
3019: f0 07     -         beq !done+
301b: 20 d2 ff  -         jsr Kernal.CHROUT
301e: e8        -         inx
301f: 4c 16 30  -         jmp !loop-
3022: 68        -         pla
3023: 8d 86 02  -         sta Two.CurrentCharColor
3026: 4c 48 30  -         jmp !no_key+
3029: 0d        - memory: .byte Petscii.RETURN
302a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
303a: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3046: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3048: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
304b: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
304e: f0 f8     -         beq !no_key-
3050: a2 00     -         ldx #$00
3052: bd 61 30  -         lda address,x
3055: f0 07     -         beq !done+
3057: 20 d2 ff  -         jsr Kernal.CHROUT
305a: e8        -         inx
305b: 4c 52 30  -         jmp !loop-
305e: 4c 63 30  -         jmp !done+
3061: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3063: a2 00     -         ldx #$00
3065: 8e 62 54  -         stx TEST_NAME_COUNT
3068: 60        -         rts
3069: ee 62 54  - ADD_TEST:inc TEST_NAME_COUNT
306c: ad 86 02  -         lda Two.CurrentCharColor
306f: 48        -         pha
3070: a9 0f     -         lda #color
3072: 8d 86 02  -         sta Two.CurrentCharColor
3075: a2 00     -         ldx #$00
3077: bd 86 30  -         lda address,x
307a: f0 07     -         beq !done+
307c: 20 d2 ff  -         jsr Kernal.CHROUT
307f: e8        -         inx
3080: 4c 77 30  -         jmp !loop-
3083: 4c 8f 30  -         jmp !done+
3086: 41 44 44 49 54 49 4f 4e                          -         .text preprocessorString	// store in memory
308e: 00        -         .byte Petscii.NULL			// terminate
308f: 68        -         pla
3090: 8d 86 02  -         sta Two.CurrentCharColor
3093: 4c a4 30  -         jmp !done+
3096: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
3098: 41 44 44 49 54 49 4f 4e                          -         .text name
30a0: 2e 2e 2e  -         .text "..."
30a3: 00        -         .byte Petscii.NULL
30a4: 20 08 10  -         jsr SW16
30a7: 10        -         .byte opcode(op, register)
30a8: 34 76     -         .word address.getValue()
30aa: 11        -         .byte opcode(op, register)
30ab: 27 42     -         .word address.getValue()
30ad: a1        -         .byte opcode($a0, register) }
30ae: 0d        -         .byte $0d
30af: 31        -         .byte >(address.getValue()-1)
30b0: 98        -         .byte <(address.getValue()-1)
30b1: a0        -         .byte opcode($a0, register) }
30b2: 00        -         .byte $00 }
30b3: ee 60 54  -         inc TEST_COUNT
30b6: ad 86 02  -         lda Two.CurrentCharColor
30b9: 48        -         pha
30ba: a9 0e     -         lda #color
30bc: 8d 86 02  -         sta Two.CurrentCharColor
30bf: a2 00     -         ldx #$00
30c1: bd d4 30  -         lda address,x
30c4: f0 07     -         beq !done+
30c6: 20 d2 ff  -         jsr Kernal.CHROUT
30c9: e8        -         inx
30ca: 4c c1 30  -         jmp !loop-
30cd: 68        -         pla
30ce: 8d 86 02  -         sta Two.CurrentCharColor
30d1: 4c d9 30  -         jmp !done+
30d4: 20        - memory: .byte Petscii.SPACEBAR
30d5: 58 32     -         .text description
30d7: 3a        -         .text ":"
30d8: 00        -         .byte Petscii.NULL
30d9: a6 17     -         ldx rl(register.getValue())
30db: a4 18     -         ldy rh(register.getValue())
30dd: e0 b6     -         cpx #<value
30df: d0 25     -         bne !failed+
30e1: c0 70     -         cpy #>value
30e3: d0 21     -         bne !failed+
30e5: ee 61 54  -         inc TEST_PASS_COUNT
30e8: ad 86 02  -         lda Two.CurrentCharColor
30eb: 48        -         pha
30ec: a9 05     -         lda #color
30ee: 8d 86 02  -         sta Two.CurrentCharColor
30f1: a2 00     -         ldx #$00
30f3: bd 5c 54  -         lda address,x
30f6: f0 07     -         beq !done+
30f8: 20 d2 ff  -         jsr Kernal.CHROUT
30fb: e8        -         inx
30fc: 4c f3 30  -         jmp !loop-
30ff: 68        -         pla
3100: 8d 86 02  -         sta Two.CurrentCharColor
3103: 4c 21 31  -         jmp !done+
3106: ad 86 02  -         lda Two.CurrentCharColor
3109: 48        -         pha
310a: a9 02     -         lda #color
310c: 8d 86 02  -         sta Two.CurrentCharColor
310f: a2 00     -         ldx #$00
3111: bd 5e 54  -         lda address,x
3114: f0 07     -         beq !done+
3116: 20 d2 ff  -         jsr Kernal.CHROUT
3119: e8        -         inx
311a: 4c 11 31  -         jmp !loop-
311d: 68        -         pla
311e: 8d 86 02  -         sta Two.CurrentCharColor
3121: a2 00     -         ldx #$00
3123: bd 32 31  -         lda address,x
3126: f0 07     -         beq !done+
3128: 20 d2 ff  -         jsr Kernal.CHROUT
312b: e8        -         inx
312c: 4c 23 31  -         jmp !loop-
312f: 4c 34 31  -         jmp !done+
3132: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3134: ae 62 54  -         ldx TEST_NAME_COUNT
3137: e0 15     -         cpx #TESTS_PER_PAGE
3139: d0 5d     -         bne !exit+
313b: ad 86 02  -         lda Two.CurrentCharColor
313e: 48        -         pha
313f: a9 01     -         lda #color
3141: 8d 86 02  -         sta Two.CurrentCharColor
3144: a2 00     -         ldx #$00
3146: bd 59 31  -         lda address,x
3149: f0 07     -         beq !done+
314b: 20 d2 ff  -         jsr Kernal.CHROUT
314e: e8        -         inx
314f: 4c 46 31  -         jmp !loop-
3152: 68        -         pla
3153: 8d 86 02  -         sta Two.CurrentCharColor
3156: 4c 78 31  -         jmp !no_key+
3159: 0d        - memory: .byte Petscii.RETURN
315a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
316a: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3176: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3178: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
317b: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
317e: f0 f8     -         beq !no_key-
3180: a2 00     -         ldx #$00
3182: bd 91 31  -         lda address,x
3185: f0 07     -         beq !done+
3187: 20 d2 ff  -         jsr Kernal.CHROUT
318a: e8        -         inx
318b: 4c 82 31  -         jmp !loop-
318e: 4c 93 31  -         jmp !done+
3191: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3193: a2 00     -         ldx #$00
3195: 8e 62 54  -         stx TEST_NAME_COUNT
3198: 60        -         rts
3199: ee 60 54  -         inc TEST_COUNT
319c: ad 86 02  -         lda Two.CurrentCharColor
319f: 48        -         pha
31a0: a9 0e     -         lda #color
31a2: 8d 86 02  -         sta Two.CurrentCharColor
31a5: a2 00     -         ldx #$00
31a7: bd ba 31  -         lda address,x
31aa: f0 07     -         beq !done+
31ac: 20 d2 ff  -         jsr Kernal.CHROUT
31af: e8        -         inx
31b0: 4c a7 31  -         jmp !loop-
31b3: 68        -         pla
31b4: 8d 86 02  -         sta Two.CurrentCharColor
31b7: 4c c0 31  -         jmp !done+
31ba: 20        - memory: .byte Petscii.SPACEBAR
31bb: 41 44 44  -         .text description
31be: 3a        -         .text ":"
31bf: 00        -         .byte Petscii.NULL
31c0: a6 17     -         ldx rl(register.getValue())
31c2: a4 18     -         ldy rh(register.getValue())
31c4: e0 5b     -         cpx #<value
31c6: d0 25     -         bne !failed+
31c8: c0 b8     -         cpy #>value
31ca: d0 21     -         bne !failed+
31cc: ee 61 54  -         inc TEST_PASS_COUNT
31cf: ad 86 02  -         lda Two.CurrentCharColor
31d2: 48        -         pha
31d3: a9 05     -         lda #color
31d5: 8d 86 02  -         sta Two.CurrentCharColor
31d8: a2 00     -         ldx #$00
31da: bd 5c 54  -         lda address,x
31dd: f0 07     -         beq !done+
31df: 20 d2 ff  -         jsr Kernal.CHROUT
31e2: e8        -         inx
31e3: 4c da 31  -         jmp !loop-
31e6: 68        -         pla
31e7: 8d 86 02  -         sta Two.CurrentCharColor
31ea: 4c 08 32  -         jmp !done+
31ed: ad 86 02  -         lda Two.CurrentCharColor
31f0: 48        -         pha
31f1: a9 02     -         lda #color
31f3: 8d 86 02  -         sta Two.CurrentCharColor
31f6: a2 00     -         ldx #$00
31f8: bd 5e 54  -         lda address,x
31fb: f0 07     -         beq !done+
31fd: 20 d2 ff  -         jsr Kernal.CHROUT
3200: e8        -         inx
3201: 4c f8 31  -         jmp !loop-
3204: 68        -         pla
3205: 8d 86 02  -         sta Two.CurrentCharColor
3208: 60        -         rts
3209: ee 62 54  - SUBTRACT_TEST:inc TEST_NAME_COUNT
320c: ad 86 02  -         lda Two.CurrentCharColor
320f: 48        -         pha
3210: a9 0f     -         lda #color
3212: 8d 86 02  -         sta Two.CurrentCharColor
3215: a2 00     -         ldx #$00
3217: bd 26 32  -         lda address,x
321a: f0 07     -         beq !done+
321c: 20 d2 ff  -         jsr Kernal.CHROUT
321f: e8        -         inx
3220: 4c 17 32  -         jmp !loop-
3223: 4c 32 32  -         jmp !done+
3226: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text preprocessorString	// store in memory
3231: 00        -         .byte Petscii.NULL			// terminate
3232: 68        -         pla
3233: 8d 86 02  -         sta Two.CurrentCharColor
3236: 4c 4a 32  -         jmp !done+
3239: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
323b: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
3246: 2e 2e 2e  -         .text "..."
3249: 00        -         .byte Petscii.NULL
324a: 20 08 10  -         jsr SW16
324d: 10        -         .byte opcode(op, register)
324e: 34 76     -         .word address.getValue()
3250: 11        -         .byte opcode(op, register)
3251: 27 42     -         .word address.getValue()
3253: b1        -         .byte opcode($b0, register) }
3254: 0d        -         .byte $0d
3255: 33        -         .byte >(address.getValue()-1)
3256: 3d        -         .byte <(address.getValue()-1)
3257: b0        -         .byte opcode($b0, register) }
3258: 00        -         .byte $00 }
3259: ee 60 54  -         inc TEST_COUNT
325c: ad 86 02  -         lda Two.CurrentCharColor
325f: 48        -         pha
3260: a9 0e     -         lda #color
3262: 8d 86 02  -         sta Two.CurrentCharColor
3265: a2 00     -         ldx #$00
3267: bd 7a 32  -         lda address,x
326a: f0 07     -         beq !done+
326c: 20 d2 ff  -         jsr Kernal.CHROUT
326f: e8        -         inx
3270: 4c 67 32  -         jmp !loop-
3273: 68        -         pla
3274: 8d 86 02  -         sta Two.CurrentCharColor
3277: 4c 7e 32  -         jmp !done+
327a: 20        - memory: .byte Petscii.SPACEBAR
327b: 30        -         .text description
327c: 3a        -         .text ":"
327d: 00        -         .byte Petscii.NULL
327e: a6 17     -         ldx rl(register.getValue())
3280: a4 18     -         ldy rh(register.getValue())
3282: e0 00     -         cpx #<value
3284: d0 25     -         bne !failed+
3286: c0 00     -         cpy #>value
3288: d0 21     -         bne !failed+
328a: ee 61 54  -         inc TEST_PASS_COUNT
328d: ad 86 02  -         lda Two.CurrentCharColor
3290: 48        -         pha
3291: a9 05     -         lda #color
3293: 8d 86 02  -         sta Two.CurrentCharColor
3296: a2 00     -         ldx #$00
3298: bd 5c 54  -         lda address,x
329b: f0 07     -         beq !done+
329d: 20 d2 ff  -         jsr Kernal.CHROUT
32a0: e8        -         inx
32a1: 4c 98 32  -         jmp !loop-
32a4: 68        -         pla
32a5: 8d 86 02  -         sta Two.CurrentCharColor
32a8: 4c c6 32  -         jmp !done+
32ab: ad 86 02  -         lda Two.CurrentCharColor
32ae: 48        -         pha
32af: a9 02     -         lda #color
32b1: 8d 86 02  -         sta Two.CurrentCharColor
32b4: a2 00     -         ldx #$00
32b6: bd 5e 54  -         lda address,x
32b9: f0 07     -         beq !done+
32bb: 20 d2 ff  -         jsr Kernal.CHROUT
32be: e8        -         inx
32bf: 4c b6 32  -         jmp !loop-
32c2: 68        -         pla
32c3: 8d 86 02  -         sta Two.CurrentCharColor
32c6: a2 00     -         ldx #$00
32c8: bd d7 32  -         lda address,x
32cb: f0 07     -         beq !done+
32cd: 20 d2 ff  -         jsr Kernal.CHROUT
32d0: e8        -         inx
32d1: 4c c8 32  -         jmp !loop-
32d4: 4c d9 32  -         jmp !done+
32d7: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
32d9: ae 62 54  -         ldx TEST_NAME_COUNT
32dc: e0 15     -         cpx #TESTS_PER_PAGE
32de: d0 5d     -         bne !exit+
32e0: ad 86 02  -         lda Two.CurrentCharColor
32e3: 48        -         pha
32e4: a9 01     -         lda #color
32e6: 8d 86 02  -         sta Two.CurrentCharColor
32e9: a2 00     -         ldx #$00
32eb: bd fe 32  -         lda address,x
32ee: f0 07     -         beq !done+
32f0: 20 d2 ff  -         jsr Kernal.CHROUT
32f3: e8        -         inx
32f4: 4c eb 32  -         jmp !loop-
32f7: 68        -         pla
32f8: 8d 86 02  -         sta Two.CurrentCharColor
32fb: 4c 1d 33  -         jmp !no_key+
32fe: 0d        - memory: .byte Petscii.RETURN
32ff: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
330f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
331b: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
331d: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
3320: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
3323: f0 f8     -         beq !no_key-
3325: a2 00     -         ldx #$00
3327: bd 36 33  -         lda address,x
332a: f0 07     -         beq !done+
332c: 20 d2 ff  -         jsr Kernal.CHROUT
332f: e8        -         inx
3330: 4c 27 33  -         jmp !loop-
3333: 4c 38 33  -         jmp !done+
3336: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3338: a2 00     -         ldx #$00
333a: 8e 62 54  -         stx TEST_NAME_COUNT
333d: 60        -         rts
333e: ee 60 54  -         inc TEST_COUNT
3341: ad 86 02  -         lda Two.CurrentCharColor
3344: 48        -         pha
3345: a9 0e     -         lda #color
3347: 8d 86 02  -         sta Two.CurrentCharColor
334a: a2 00     -         ldx #$00
334c: bd 5f 33  -         lda address,x
334f: f0 07     -         beq !done+
3351: 20 d2 ff  -         jsr Kernal.CHROUT
3354: e8        -         inx
3355: 4c 4c 33  -         jmp !loop-
3358: 68        -         pla
3359: 8d 86 02  -         sta Two.CurrentCharColor
335c: 4c 65 33  -         jmp !done+
335f: 20        - memory: .byte Petscii.SPACEBAR
3360: 53 55 42  -         .text description
3363: 3a        -         .text ":"
3364: 00        -         .byte Petscii.NULL
3365: a6 17     -         ldx rl(register.getValue())
3367: a4 18     -         ldy rh(register.getValue())
3369: e0 0d     -         cpx #<value
336b: d0 25     -         bne !failed+
336d: c0 34     -         cpy #>value
336f: d0 21     -         bne !failed+
3371: ee 61 54  -         inc TEST_PASS_COUNT
3374: ad 86 02  -         lda Two.CurrentCharColor
3377: 48        -         pha
3378: a9 05     -         lda #color
337a: 8d 86 02  -         sta Two.CurrentCharColor
337d: a2 00     -         ldx #$00
337f: bd 5c 54  -         lda address,x
3382: f0 07     -         beq !done+
3384: 20 d2 ff  -         jsr Kernal.CHROUT
3387: e8        -         inx
3388: 4c 7f 33  -         jmp !loop-
338b: 68        -         pla
338c: 8d 86 02  -         sta Two.CurrentCharColor
338f: 4c ad 33  -         jmp !done+
3392: ad 86 02  -         lda Two.CurrentCharColor
3395: 48        -         pha
3396: a9 02     -         lda #color
3398: 8d 86 02  -         sta Two.CurrentCharColor
339b: a2 00     -         ldx #$00
339d: bd 5e 54  -         lda address,x
33a0: f0 07     -         beq !done+
33a2: 20 d2 ff  -         jsr Kernal.CHROUT
33a5: e8        -         inx
33a6: 4c 9d 33  -         jmp !loop-
33a9: 68        -         pla
33aa: 8d 86 02  -         sta Two.CurrentCharColor
33ad: 60        -         rts	
33ae: ee 62 54  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
33b1: ad 86 02  -         lda Two.CurrentCharColor
33b4: 48        -         pha
33b5: a9 0f     -         lda #color
33b7: 8d 86 02  -         sta Two.CurrentCharColor
33ba: a2 00     -         ldx #$00
33bc: bd cb 33  -         lda address,x
33bf: f0 07     -         beq !done+
33c1: 20 d2 ff  -         jsr Kernal.CHROUT
33c4: e8        -         inx
33c5: 4c bc 33  -         jmp !loop-
33c8: 4c d9 33  -         jmp !done+
33cb: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text preprocessorString	// store in memory
33d8: 00        -         .byte Petscii.NULL			// terminate
33d9: 68        -         pla
33da: 8d 86 02  -         sta Two.CurrentCharColor
33dd: 4c f3 33  -         jmp !done+
33e0: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
33e2: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
33ef: 2e 2e 2e  -         .text "..."
33f2: 00        -         .byte Petscii.NULL
33f3: 20 08 10  -         jsr SW16
33f6: 15        -         .byte opcode(op, register)
33f7: 89 54     -         .word address.getValue()
33f9: 10        -         .byte opcode(op, register)
33fa: 63 54     -         .word address.getValue()
33fc: 75        -         .byte opcode($70, register) }
33fd: 0d        -         .byte $0d
33fe: 34        -         .byte >(address.getValue()-1)
33ff: f2        -         .byte <(address.getValue()-1)
3400: 10        -         .byte opcode(op, register)
3401: 65 54     -         .word address.getValue()
3403: 75        -         .byte opcode($70, register) }
3404: 0d        -         .byte $0d
3405: 35        -         .byte >(address.getValue()-1)
3406: 62        -         .byte <(address.getValue()-1)
3407: c5        -         .byte opcode($c0, register) }
3408: 0d        -         .byte $0d
3409: 35        -         .byte >(address.getValue()-1)
340a: d2        -         .byte <(address.getValue()-1)
340b: c5        -         .byte opcode($c0, register) }
340c: 00        -         .byte $00 }
340d: ee 60 54  -         inc TEST_COUNT
3410: ad 86 02  -         lda Two.CurrentCharColor
3413: 48        -         pha
3414: a9 0e     -         lda #color
3416: 8d 86 02  -         sta Two.CurrentCharColor
3419: a2 00     -         ldx #$00
341b: bd 2e 34  -         lda address,x
341e: f0 07     -         beq !done+
3420: 20 d2 ff  -         jsr Kernal.CHROUT
3423: e8        -         inx
3424: 4c 1b 34  -         jmp !loop-
3427: 68        -         pla
3428: 8d 86 02  -         sta Two.CurrentCharColor
342b: 4c 33 34  -         jmp !done+
342e: 20        - memory: .byte Petscii.SPACEBAR
342f: 50 31     -         .text description
3431: 3a        -         .text ":"
3432: 00        -         .byte Petscii.NULL
3433: a6 17     -         ldx addr
3435: e0 63     -         cpx #<value
3437: d0 27     -         bne !failed+
3439: a6 18     -         ldx addr+1
343b: e0 54     -         cpx #>value
343d: d0 21     -         bne !failed+
343f: ee 61 54  -         inc TEST_PASS_COUNT
3442: ad 86 02  -         lda Two.CurrentCharColor
3445: 48        -         pha
3446: a9 05     -         lda #color
3448: 8d 86 02  -         sta Two.CurrentCharColor
344b: a2 00     -         ldx #$00
344d: bd 5c 54  -         lda address,x
3450: f0 07     -         beq !done+
3452: 20 d2 ff  -         jsr Kernal.CHROUT
3455: e8        -         inx
3456: 4c 4d 34  -         jmp !loop-
3459: 68        -         pla
345a: 8d 86 02  -         sta Two.CurrentCharColor
345d: 4c 7b 34  -         jmp !done+
3460: ad 86 02  -         lda Two.CurrentCharColor
3463: 48        -         pha
3464: a9 02     -         lda #color
3466: 8d 86 02  -         sta Two.CurrentCharColor
3469: a2 00     -         ldx #$00
346b: bd 5e 54  -         lda address,x
346e: f0 07     -         beq !done+
3470: 20 d2 ff  -         jsr Kernal.CHROUT
3473: e8        -         inx
3474: 4c 6b 34  -         jmp !loop-
3477: 68        -         pla
3478: 8d 86 02  -         sta Two.CurrentCharColor
347b: a2 00     -         ldx #$00
347d: bd 8c 34  -         lda address,x
3480: f0 07     -         beq !done+
3482: 20 d2 ff  -         jsr Kernal.CHROUT
3485: e8        -         inx
3486: 4c 7d 34  -         jmp !loop-
3489: 4c 8e 34  -         jmp !done+
348c: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
348e: ae 62 54  -         ldx TEST_NAME_COUNT
3491: e0 15     -         cpx #TESTS_PER_PAGE
3493: d0 5d     -         bne !exit+
3495: ad 86 02  -         lda Two.CurrentCharColor
3498: 48        -         pha
3499: a9 01     -         lda #color
349b: 8d 86 02  -         sta Two.CurrentCharColor
349e: a2 00     -         ldx #$00
34a0: bd b3 34  -         lda address,x
34a3: f0 07     -         beq !done+
34a5: 20 d2 ff  -         jsr Kernal.CHROUT
34a8: e8        -         inx
34a9: 4c a0 34  -         jmp !loop-
34ac: 68        -         pla
34ad: 8d 86 02  -         sta Two.CurrentCharColor
34b0: 4c d2 34  -         jmp !no_key+
34b3: 0d        - memory: .byte Petscii.RETURN
34b4: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
34c4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
34d0: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
34d2: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
34d5: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
34d8: f0 f8     -         beq !no_key-
34da: a2 00     -         ldx #$00
34dc: bd eb 34  -         lda address,x
34df: f0 07     -         beq !done+
34e1: 20 d2 ff  -         jsr Kernal.CHROUT
34e4: e8        -         inx
34e5: 4c dc 34  -         jmp !loop-
34e8: 4c ed 34  -         jmp !done+
34eb: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
34ed: a2 00     -         ldx #$00
34ef: 8e 62 54  -         stx TEST_NAME_COUNT
34f2: 60        -         rts
34f3: ee 60 54  -         inc TEST_COUNT
34f6: ad 86 02  -         lda Two.CurrentCharColor
34f9: 48        -         pha
34fa: a9 0e     -         lda #color
34fc: 8d 86 02  -         sta Two.CurrentCharColor
34ff: a2 00     -         ldx #$00
3501: bd 14 35  -         lda address,x
3504: f0 07     -         beq !done+
3506: 20 d2 ff  -         jsr Kernal.CHROUT
3509: e8        -         inx
350a: 4c 01 35  -         jmp !loop-
350d: 68        -         pla
350e: 8d 86 02  -         sta Two.CurrentCharColor
3511: 4c 18 35  -         jmp !done+
3514: 20        - memory: .byte Petscii.SPACEBAR
3515: 31        -         .text description
3516: 3a        -         .text ":"
3517: 00        -         .byte Petscii.NULL
3518: ae 89 54  -         ldx addr
351b: e0 63     -         cpx #<value
351d: d0 28     -         bne !failed+
351f: ae 8a 54  -         ldx addr+1
3522: e0 54     -         cpx #>value
3524: d0 21     -         bne !failed+
3526: ee 61 54  -         inc TEST_PASS_COUNT
3529: ad 86 02  -         lda Two.CurrentCharColor
352c: 48        -         pha
352d: a9 05     -         lda #color
352f: 8d 86 02  -         sta Two.CurrentCharColor
3532: a2 00     -         ldx #$00
3534: bd 5c 54  -         lda address,x
3537: f0 07     -         beq !done+
3539: 20 d2 ff  -         jsr Kernal.CHROUT
353c: e8        -         inx
353d: 4c 34 35  -         jmp !loop-
3540: 68        -         pla
3541: 8d 86 02  -         sta Two.CurrentCharColor
3544: 4c 62 35  -         jmp !done+
3547: ad 86 02  -         lda Two.CurrentCharColor
354a: 48        -         pha
354b: a9 02     -         lda #color
354d: 8d 86 02  -         sta Two.CurrentCharColor
3550: a2 00     -         ldx #$00
3552: bd 5e 54  -         lda address,x
3555: f0 07     -         beq !done+
3557: 20 d2 ff  -         jsr Kernal.CHROUT
355a: e8        -         inx
355b: 4c 52 35  -         jmp !loop-
355e: 68        -         pla
355f: 8d 86 02  -         sta Two.CurrentCharColor
3562: 60        -         rts
3563: ee 60 54  -         inc TEST_COUNT
3566: ad 86 02  -         lda Two.CurrentCharColor
3569: 48        -         pha
356a: a9 0e     -         lda #color
356c: 8d 86 02  -         sta Two.CurrentCharColor
356f: a2 00     -         ldx #$00
3571: bd 84 35  -         lda address,x
3574: f0 07     -         beq !done+
3576: 20 d2 ff  -         jsr Kernal.CHROUT
3579: e8        -         inx
357a: 4c 71 35  -         jmp !loop-
357d: 68        -         pla
357e: 8d 86 02  -         sta Two.CurrentCharColor
3581: 4c 88 35  -         jmp !done+
3584: 20        - memory: .byte Petscii.SPACEBAR
3585: 32        -         .text description
3586: 3a        -         .text ":"
3587: 00        -         .byte Petscii.NULL
3588: ae 8b 54  -         ldx addr
358b: e0 65     -         cpx #<value
358d: d0 28     -         bne !failed+
358f: ae 8c 54  -         ldx addr+1
3592: e0 54     -         cpx #>value
3594: d0 21     -         bne !failed+
3596: ee 61 54  -         inc TEST_PASS_COUNT
3599: ad 86 02  -         lda Two.CurrentCharColor
359c: 48        -         pha
359d: a9 05     -         lda #color
359f: 8d 86 02  -         sta Two.CurrentCharColor
35a2: a2 00     -         ldx #$00
35a4: bd 5c 54  -         lda address,x
35a7: f0 07     -         beq !done+
35a9: 20 d2 ff  -         jsr Kernal.CHROUT
35ac: e8        -         inx
35ad: 4c a4 35  -         jmp !loop-
35b0: 68        -         pla
35b1: 8d 86 02  -         sta Two.CurrentCharColor
35b4: 4c d2 35  -         jmp !done+
35b7: ad 86 02  -         lda Two.CurrentCharColor
35ba: 48        -         pha
35bb: a9 02     -         lda #color
35bd: 8d 86 02  -         sta Two.CurrentCharColor
35c0: a2 00     -         ldx #$00
35c2: bd 5e 54  -         lda address,x
35c5: f0 07     -         beq !done+
35c7: 20 d2 ff  -         jsr Kernal.CHROUT
35ca: e8        -         inx
35cb: 4c c2 35  -         jmp !loop-
35ce: 68        -         pla
35cf: 8d 86 02  -         sta Two.CurrentCharColor
35d2: 60        -         rts
35d3: ee 60 54  -         inc TEST_COUNT
35d6: ad 86 02  -         lda Two.CurrentCharColor
35d9: 48        -         pha
35da: a9 0e     -         lda #color
35dc: 8d 86 02  -         sta Two.CurrentCharColor
35df: a2 00     -         ldx #$00
35e1: bd f4 35  -         lda address,x
35e4: f0 07     -         beq !done+
35e6: 20 d2 ff  -         jsr Kernal.CHROUT
35e9: e8        -         inx
35ea: 4c e1 35  -         jmp !loop-
35ed: 68        -         pla
35ee: 8d 86 02  -         sta Two.CurrentCharColor
35f1: 4c f9 35  -         jmp !done+
35f4: 20        - memory: .byte Petscii.SPACEBAR
35f5: 50 32     -         .text description
35f7: 3a        -         .text ":"
35f8: 00        -         .byte Petscii.NULL
35f9: a6 17     -         ldx addr
35fb: e0 65     -         cpx #<value
35fd: d0 27     -         bne !failed+
35ff: a6 18     -         ldx addr+1
3601: e0 54     -         cpx #>value
3603: d0 21     -         bne !failed+
3605: ee 61 54  -         inc TEST_PASS_COUNT
3608: ad 86 02  -         lda Two.CurrentCharColor
360b: 48        -         pha
360c: a9 05     -         lda #color
360e: 8d 86 02  -         sta Two.CurrentCharColor
3611: a2 00     -         ldx #$00
3613: bd 5c 54  -         lda address,x
3616: f0 07     -         beq !done+
3618: 20 d2 ff  -         jsr Kernal.CHROUT
361b: e8        -         inx
361c: 4c 13 36  -         jmp !loop-
361f: 68        -         pla
3620: 8d 86 02  -         sta Two.CurrentCharColor
3623: 4c 41 36  -         jmp !done+
3626: ad 86 02  -         lda Two.CurrentCharColor
3629: 48        -         pha
362a: a9 02     -         lda #color
362c: 8d 86 02  -         sta Two.CurrentCharColor
362f: a2 00     -         ldx #$00
3631: bd 5e 54  -         lda address,x
3634: f0 07     -         beq !done+
3636: 20 d2 ff  -         jsr Kernal.CHROUT
3639: e8        -         inx
363a: 4c 31 36  -         jmp !loop-
363d: 68        -         pla
363e: 8d 86 02  -         sta Two.CurrentCharColor
3641: 60        -         rts
3642: ee 62 54  - COMPARE_TEST:inc TEST_NAME_COUNT
3645: ad 86 02  -         lda Two.CurrentCharColor
3648: 48        -         pha
3649: a9 0f     -         lda #color
364b: 8d 86 02  -         sta Two.CurrentCharColor
364e: a2 00     -         ldx #$00
3650: bd 5f 36  -         lda address,x
3653: f0 07     -         beq !done+
3655: 20 d2 ff  -         jsr Kernal.CHROUT
3658: e8        -         inx
3659: 4c 50 36  -         jmp !loop-
365c: 4c 67 36  -         jmp !done+
365f: 43 4f 4d 50 41 52 45                             -         .text preprocessorString	// store in memory
3666: 00        -         .byte Petscii.NULL			// terminate
3667: 68        -         pla
3668: 8d 86 02  -         sta Two.CurrentCharColor
366b: 4c 7b 36  -         jmp !done+
366e: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
3670: 43 4f 4d 50 41 52 45                             -         .text name
3677: 2e 2e 2e  -         .text "..."
367a: 00        -         .byte Petscii.NULL
367b: 20 08 10  -         jsr SW16
367e: 15        -         .byte opcode(op, register)
367f: 69 54     -         .word address.getValue()
3681: 16        -         .byte opcode(op, register)
3682: 79 54     -         .word address.getValue()
3684: 14        -         .byte opcode(op, register)
3685: 00 00     -         .word address.getValue()
3687: e4        -         .byte opcode($e0, register) }
3688: b0        -         .byte opcode($b0, register) }
3689: 75        -         .byte opcode($70, register) }
368a: 25        -         .byte opcode($20, register) }
368b: d6        -         .byte opcode($d0, register) }
368c: 02 f9     -         .byte $02, effective_address(ea,*) }
368e: 00        -         .byte $00 }
368f: ee 60 54  -         inc TEST_COUNT
3692: ad 86 02  -         lda Two.CurrentCharColor
3695: 48        -         pha
3696: a9 0e     -         lda #color
3698: 8d 86 02  -         sta Two.CurrentCharColor
369b: a2 00     -         ldx #$00
369d: bd b0 36  -         lda address,x
36a0: f0 07     -         beq !done+
36a2: 20 d2 ff  -         jsr Kernal.CHROUT
36a5: e8        -         inx
36a6: 4c 9d 36  -         jmp !loop-
36a9: 68        -         pla
36aa: 8d 86 02  -         sta Two.CurrentCharColor
36ad: 4c b8 36  -         jmp !done+
36b0: 20        - memory: .byte Petscii.SPACEBAR
36b1: 43 4f 55 4e 54                                   -         .text description
36b6: 3a        -         .text ":"
36b7: 00        -         .byte Petscii.NULL
36b8: a6 1f     -         ldx rl(register.getValue())
36ba: a4 20     -         ldy rh(register.getValue())
36bc: e0 08     -         cpx #<value
36be: d0 25     -         bne !failed+
36c0: c0 00     -         cpy #>value
36c2: d0 21     -         bne !failed+
36c4: ee 61 54  -         inc TEST_PASS_COUNT
36c7: ad 86 02  -         lda Two.CurrentCharColor
36ca: 48        -         pha
36cb: a9 05     -         lda #color
36cd: 8d 86 02  -         sta Two.CurrentCharColor
36d0: a2 00     -         ldx #$00
36d2: bd 5c 54  -         lda address,x
36d5: f0 07     -         beq !done+
36d7: 20 d2 ff  -         jsr Kernal.CHROUT
36da: e8        -         inx
36db: 4c d2 36  -         jmp !loop-
36de: 68        -         pla
36df: 8d 86 02  -         sta Two.CurrentCharColor
36e2: 4c 00 37  -         jmp !done+
36e5: ad 86 02  -         lda Two.CurrentCharColor
36e8: 48        -         pha
36e9: a9 02     -         lda #color
36eb: 8d 86 02  -         sta Two.CurrentCharColor
36ee: a2 00     -         ldx #$00
36f0: bd 5e 54  -         lda address,x
36f3: f0 07     -         beq !done+
36f5: 20 d2 ff  -         jsr Kernal.CHROUT
36f8: e8        -         inx
36f9: 4c f0 36  -         jmp !loop-
36fc: 68        -         pla
36fd: 8d 86 02  -         sta Two.CurrentCharColor
3700: a2 00     -         ldx #$00
3702: bd 11 37  -         lda address,x
3705: f0 07     -         beq !done+
3707: 20 d2 ff  -         jsr Kernal.CHROUT
370a: e8        -         inx
370b: 4c 02 37  -         jmp !loop-
370e: 4c 13 37  -         jmp !done+
3711: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3713: ae 62 54  -         ldx TEST_NAME_COUNT
3716: e0 15     -         cpx #TESTS_PER_PAGE
3718: d0 5d     -         bne !exit+
371a: ad 86 02  -         lda Two.CurrentCharColor
371d: 48        -         pha
371e: a9 01     -         lda #color
3720: 8d 86 02  -         sta Two.CurrentCharColor
3723: a2 00     -         ldx #$00
3725: bd 38 37  -         lda address,x
3728: f0 07     -         beq !done+
372a: 20 d2 ff  -         jsr Kernal.CHROUT
372d: e8        -         inx
372e: 4c 25 37  -         jmp !loop-
3731: 68        -         pla
3732: 8d 86 02  -         sta Two.CurrentCharColor
3735: 4c 57 37  -         jmp !no_key+
3738: 0d        - memory: .byte Petscii.RETURN
3739: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3749: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3755: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3757: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
375a: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
375d: f0 f8     -         beq !no_key-
375f: a2 00     -         ldx #$00
3761: bd 70 37  -         lda address,x
3764: f0 07     -         beq !done+
3766: 20 d2 ff  -         jsr Kernal.CHROUT
3769: e8        -         inx
376a: 4c 61 37  -         jmp !loop-
376d: 4c 72 37  -         jmp !done+
3770: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3772: a2 00     -         ldx #$00
3774: 8e 62 54  -         stx TEST_NAME_COUNT
3777: 60        -         rts	
3778: ee 62 54  - INCREMENT_TEST:inc TEST_NAME_COUNT
377b: ad 86 02  -         lda Two.CurrentCharColor
377e: 48        -         pha
377f: a9 0f     -         lda #color
3781: 8d 86 02  -         sta Two.CurrentCharColor
3784: a2 00     -         ldx #$00
3786: bd 95 37  -         lda address,x
3789: f0 07     -         beq !done+
378b: 20 d2 ff  -         jsr Kernal.CHROUT
378e: e8        -         inx
378f: 4c 86 37  -         jmp !loop-
3792: 4c 9f 37  -         jmp !done+
3795: 49 4e 43 52 45 4d 45 4e 54                       -         .text preprocessorString	// store in memory
379e: 00        -         .byte Petscii.NULL			// terminate
379f: 68        -         pla
37a0: 8d 86 02  -         sta Two.CurrentCharColor
37a3: 4c b5 37  -         jmp !done+
37a6: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
37a8: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
37b1: 2e 2e 2e  -         .text "..."
37b4: 00        -         .byte Petscii.NULL
37b5: 20 08 10  -         jsr SW16
37b8: 15        -         .byte opcode(op, register)
37b9: 63 54     -         .word address.getValue()
37bb: b0        -         .byte opcode($b0, register) }
37bc: 55        -         .byte opcode($50, register) }
37bd: e5        -         .byte opcode($e0, register) }
37be: 00        -         .byte $00 }
37bf: ee 60 54  -         inc TEST_COUNT
37c2: ad 86 02  -         lda Two.CurrentCharColor
37c5: 48        -         pha
37c6: a9 0e     -         lda #color
37c8: 8d 86 02  -         sta Two.CurrentCharColor
37cb: a2 00     -         ldx #$00
37cd: bd e0 37  -         lda address,x
37d0: f0 07     -         beq !done+
37d2: 20 d2 ff  -         jsr Kernal.CHROUT
37d5: e8        -         inx
37d6: 4c cd 37  -         jmp !loop-
37d9: 68        -         pla
37da: 8d 86 02  -         sta Two.CurrentCharColor
37dd: 4c e5 37  -         jmp !done+
37e0: 20        - memory: .byte Petscii.SPACEBAR
37e1: 2b 32     -         .text description
37e3: 3a        -         .text ":"
37e4: 00        -         .byte Petscii.NULL
37e5: a6 21     -         ldx rl(register.getValue())
37e7: a4 22     -         ldy rh(register.getValue())
37e9: e0 65     -         cpx #<value
37eb: d0 25     -         bne !failed+
37ed: c0 54     -         cpy #>value
37ef: d0 21     -         bne !failed+
37f1: ee 61 54  -         inc TEST_PASS_COUNT
37f4: ad 86 02  -         lda Two.CurrentCharColor
37f7: 48        -         pha
37f8: a9 05     -         lda #color
37fa: 8d 86 02  -         sta Two.CurrentCharColor
37fd: a2 00     -         ldx #$00
37ff: bd 5c 54  -         lda address,x
3802: f0 07     -         beq !done+
3804: 20 d2 ff  -         jsr Kernal.CHROUT
3807: e8        -         inx
3808: 4c ff 37  -         jmp !loop-
380b: 68        -         pla
380c: 8d 86 02  -         sta Two.CurrentCharColor
380f: 4c 2d 38  -         jmp !done+
3812: ad 86 02  -         lda Two.CurrentCharColor
3815: 48        -         pha
3816: a9 02     -         lda #color
3818: 8d 86 02  -         sta Two.CurrentCharColor
381b: a2 00     -         ldx #$00
381d: bd 5e 54  -         lda address,x
3820: f0 07     -         beq !done+
3822: 20 d2 ff  -         jsr Kernal.CHROUT
3825: e8        -         inx
3826: 4c 1d 38  -         jmp !loop-
3829: 68        -         pla
382a: 8d 86 02  -         sta Two.CurrentCharColor
382d: a2 00     -         ldx #$00
382f: bd 3e 38  -         lda address,x
3832: f0 07     -         beq !done+
3834: 20 d2 ff  -         jsr Kernal.CHROUT
3837: e8        -         inx
3838: 4c 2f 38  -         jmp !loop-
383b: 4c 40 38  -         jmp !done+
383e: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3840: ae 62 54  -         ldx TEST_NAME_COUNT
3843: e0 15     -         cpx #TESTS_PER_PAGE
3845: d0 5d     -         bne !exit+
3847: ad 86 02  -         lda Two.CurrentCharColor
384a: 48        -         pha
384b: a9 01     -         lda #color
384d: 8d 86 02  -         sta Two.CurrentCharColor
3850: a2 00     -         ldx #$00
3852: bd 65 38  -         lda address,x
3855: f0 07     -         beq !done+
3857: 20 d2 ff  -         jsr Kernal.CHROUT
385a: e8        -         inx
385b: 4c 52 38  -         jmp !loop-
385e: 68        -         pla
385f: 8d 86 02  -         sta Two.CurrentCharColor
3862: 4c 84 38  -         jmp !no_key+
3865: 0d        - memory: .byte Petscii.RETURN
3866: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3876: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3882: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3884: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
3887: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
388a: f0 f8     -         beq !no_key-
388c: a2 00     -         ldx #$00
388e: bd 9d 38  -         lda address,x
3891: f0 07     -         beq !done+
3893: 20 d2 ff  -         jsr Kernal.CHROUT
3896: e8        -         inx
3897: 4c 8e 38  -         jmp !loop-
389a: 4c 9f 38  -         jmp !done+
389d: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
389f: a2 00     -         ldx #$00
38a1: 8e 62 54  -         stx TEST_NAME_COUNT
38a4: 60        -         rts
38a5: ee 62 54  - DECREMENT_TEST:inc TEST_NAME_COUNT
38a8: ad 86 02  -         lda Two.CurrentCharColor
38ab: 48        -         pha
38ac: a9 0f     -         lda #color
38ae: 8d 86 02  -         sta Two.CurrentCharColor
38b1: a2 00     -         ldx #$00
38b3: bd c2 38  -         lda address,x
38b6: f0 07     -         beq !done+
38b8: 20 d2 ff  -         jsr Kernal.CHROUT
38bb: e8        -         inx
38bc: 4c b3 38  -         jmp !loop-
38bf: 4c cc 38  -         jmp !done+
38c2: 44 45 43 52 45 4d 45 4e 54                       -         .text preprocessorString	// store in memory
38cb: 00        -         .byte Petscii.NULL			// terminate
38cc: 68        -         pla
38cd: 8d 86 02  -         sta Two.CurrentCharColor
38d0: 4c e2 38  -         jmp !done+
38d3: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
38d5: 44 45 43 52 45 4d 45 4e 54                       -         .text name
38de: 2e 2e 2e  -         .text "..."
38e1: 00        -         .byte Petscii.NULL
38e2: 20 08 10  -         jsr SW16
38e5: 15        -         .byte opcode(op, register)
38e6: 69 54     -         .word address.getValue()
38e8: 14        -         .byte opcode(op, register)
38e9: 10 00     -         .word address.getValue()
38eb: b0        -         .byte opcode($b0, register) }
38ec: 55        -         .byte opcode($50, register) }
38ed: f4        -         .byte opcode($f0, register) }
38ee: 07 fc     -         .byte $07, effective_address(ea,*) }
38f0: 00        -         .byte $00 }
38f1: ee 60 54  -         inc TEST_COUNT
38f4: ad 86 02  -         lda Two.CurrentCharColor
38f7: 48        -         pha
38f8: a9 0e     -         lda #color
38fa: 8d 86 02  -         sta Two.CurrentCharColor
38fd: a2 00     -         ldx #$00
38ff: bd 12 39  -         lda address,x
3902: f0 07     -         beq !done+
3904: 20 d2 ff  -         jsr Kernal.CHROUT
3907: e8        -         inx
3908: 4c ff 38  -         jmp !loop-
390b: 68        -         pla
390c: 8d 86 02  -         sta Two.CurrentCharColor
390f: 4c 16 39  -         jmp !done+
3912: 20        - memory: .byte Petscii.SPACEBAR
3913: 30        -         .text description
3914: 3a        -         .text ":"
3915: 00        -         .byte Petscii.NULL
3916: a6 1f     -         ldx rl(register.getValue())
3918: a4 20     -         ldy rh(register.getValue())
391a: e0 00     -         cpx #<value
391c: d0 25     -         bne !failed+
391e: c0 00     -         cpy #>value
3920: d0 21     -         bne !failed+
3922: ee 61 54  -         inc TEST_PASS_COUNT
3925: ad 86 02  -         lda Two.CurrentCharColor
3928: 48        -         pha
3929: a9 05     -         lda #color
392b: 8d 86 02  -         sta Two.CurrentCharColor
392e: a2 00     -         ldx #$00
3930: bd 5c 54  -         lda address,x
3933: f0 07     -         beq !done+
3935: 20 d2 ff  -         jsr Kernal.CHROUT
3938: e8        -         inx
3939: 4c 30 39  -         jmp !loop-
393c: 68        -         pla
393d: 8d 86 02  -         sta Two.CurrentCharColor
3940: 4c 5e 39  -         jmp !done+
3943: ad 86 02  -         lda Two.CurrentCharColor
3946: 48        -         pha
3947: a9 02     -         lda #color
3949: 8d 86 02  -         sta Two.CurrentCharColor
394c: a2 00     -         ldx #$00
394e: bd 5e 54  -         lda address,x
3951: f0 07     -         beq !done+
3953: 20 d2 ff  -         jsr Kernal.CHROUT
3956: e8        -         inx
3957: 4c 4e 39  -         jmp !loop-
395a: 68        -         pla
395b: 8d 86 02  -         sta Two.CurrentCharColor
395e: a2 00     -         ldx #$00
3960: bd 6f 39  -         lda address,x
3963: f0 07     -         beq !done+
3965: 20 d2 ff  -         jsr Kernal.CHROUT
3968: e8        -         inx
3969: 4c 60 39  -         jmp !loop-
396c: 4c 71 39  -         jmp !done+
396f: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3971: ae 62 54  -         ldx TEST_NAME_COUNT
3974: e0 15     -         cpx #TESTS_PER_PAGE
3976: d0 5d     -         bne !exit+
3978: ad 86 02  -         lda Two.CurrentCharColor
397b: 48        -         pha
397c: a9 01     -         lda #color
397e: 8d 86 02  -         sta Two.CurrentCharColor
3981: a2 00     -         ldx #$00
3983: bd 96 39  -         lda address,x
3986: f0 07     -         beq !done+
3988: 20 d2 ff  -         jsr Kernal.CHROUT
398b: e8        -         inx
398c: 4c 83 39  -         jmp !loop-
398f: 68        -         pla
3990: 8d 86 02  -         sta Two.CurrentCharColor
3993: 4c b5 39  -         jmp !no_key+
3996: 0d        - memory: .byte Petscii.RETURN
3997: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
39a7: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
39b3: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
39b5: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
39b8: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
39bb: f0 f8     -         beq !no_key-
39bd: a2 00     -         ldx #$00
39bf: bd ce 39  -         lda address,x
39c2: f0 07     -         beq !done+
39c4: 20 d2 ff  -         jsr Kernal.CHROUT
39c7: e8        -         inx
39c8: 4c bf 39  -         jmp !loop-
39cb: 4c d0 39  -         jmp !done+
39ce: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
39d0: a2 00     -         ldx #$00
39d2: 8e 62 54  -         stx TEST_NAME_COUNT
39d5: 60        -         rts
39d6: ee 62 54  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
39d9: ad 86 02  -         lda Two.CurrentCharColor
39dc: 48        -         pha
39dd: a9 0f     -         lda #color
39df: 8d 86 02  -         sta Two.CurrentCharColor
39e2: a2 00     -         ldx #$00
39e4: bd f3 39  -         lda address,x
39e7: f0 07     -         beq !done+
39e9: 20 d2 ff  -         jsr Kernal.CHROUT
39ec: e8        -         inx
39ed: 4c e4 39  -         jmp !loop-
39f0: 4c fd 39  -         jmp !done+
39f3: 36 35 30 32 20 4d 4f 44 45                       -         .text preprocessorString	// store in memory
39fc: 00        -         .byte Petscii.NULL			// terminate
39fd: 68        -         pla
39fe: 8d 86 02  -         sta Two.CurrentCharColor
3a01: 4c 13 3a  -         jmp !done+
3a04: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
3a06: 36 35 30 32 20 4d 4f 44 45                       -         .text name
3a0f: 2e 2e 2e  -         .text "..."
3a12: 00        -         .byte Petscii.NULL
3a13: 20 08 10  -         jsr SW16
3a16: 00        -         .byte $00 }
3a17: ee 60 54  -         inc TEST_COUNT
3a1a: ad 86 02  -         lda Two.CurrentCharColor
3a1d: 48        -         pha
3a1e: a9 0e     -         lda #color
3a20: 8d 86 02  -         sta Two.CurrentCharColor
3a23: a2 00     -         ldx #$00
3a25: bd 38 3a  -         lda address,x
3a28: f0 07     -         beq !done+
3a2a: 20 d2 ff  -         jsr Kernal.CHROUT
3a2d: e8        -         inx
3a2e: 4c 25 3a  -         jmp !loop-
3a31: 68        -         pla
3a32: 8d 86 02  -         sta Two.CurrentCharColor
3a35: 4c 3e 3a  -         jmp !done+
3a38: 20        - memory: .byte Petscii.SPACEBAR
3a39: 52 54 4e  -         .text description
3a3c: 3a        -         .text ":"
3a3d: 00        -         .byte Petscii.NULL
3a3e: a2 01     -         ldx #value
3a40: f0 21     -         beq !failed+
3a42: ee 61 54  -         inc TEST_PASS_COUNT
3a45: ad 86 02  -         lda Two.CurrentCharColor
3a48: 48        -         pha
3a49: a9 05     -         lda #color
3a4b: 8d 86 02  -         sta Two.CurrentCharColor
3a4e: a2 00     -         ldx #$00
3a50: bd 5c 54  -         lda address,x
3a53: f0 07     -         beq !done+
3a55: 20 d2 ff  -         jsr Kernal.CHROUT
3a58: e8        -         inx
3a59: 4c 50 3a  -         jmp !loop-
3a5c: 68        -         pla
3a5d: 8d 86 02  -         sta Two.CurrentCharColor
3a60: 4c 7e 3a  -         jmp !done+
3a63: ad 86 02  -         lda Two.CurrentCharColor
3a66: 48        -         pha
3a67: a9 02     -         lda #color
3a69: 8d 86 02  -         sta Two.CurrentCharColor
3a6c: a2 00     -         ldx #$00
3a6e: bd 5e 54  -         lda address,x
3a71: f0 07     -         beq !done+
3a73: 20 d2 ff  -         jsr Kernal.CHROUT
3a76: e8        -         inx
3a77: 4c 6e 3a  -         jmp !loop-
3a7a: 68        -         pla
3a7b: 8d 86 02  -         sta Two.CurrentCharColor
3a7e: a2 00     -         ldx #$00
3a80: bd 8f 3a  -         lda address,x
3a83: f0 07     -         beq !done+
3a85: 20 d2 ff  -         jsr Kernal.CHROUT
3a88: e8        -         inx
3a89: 4c 80 3a  -         jmp !loop-
3a8c: 4c 91 3a  -         jmp !done+
3a8f: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3a91: ae 62 54  -         ldx TEST_NAME_COUNT
3a94: e0 15     -         cpx #TESTS_PER_PAGE
3a96: d0 5d     -         bne !exit+
3a98: ad 86 02  -         lda Two.CurrentCharColor
3a9b: 48        -         pha
3a9c: a9 01     -         lda #color
3a9e: 8d 86 02  -         sta Two.CurrentCharColor
3aa1: a2 00     -         ldx #$00
3aa3: bd b6 3a  -         lda address,x
3aa6: f0 07     -         beq !done+
3aa8: 20 d2 ff  -         jsr Kernal.CHROUT
3aab: e8        -         inx
3aac: 4c a3 3a  -         jmp !loop-
3aaf: 68        -         pla
3ab0: 8d 86 02  -         sta Two.CurrentCharColor
3ab3: 4c d5 3a  -         jmp !no_key+
3ab6: 0d        - memory: .byte Petscii.RETURN
3ab7: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3ac7: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3ad3: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3ad5: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
3ad8: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
3adb: f0 f8     -         beq !no_key-
3add: a2 00     -         ldx #$00
3adf: bd ee 3a  -         lda address,x
3ae2: f0 07     -         beq !done+
3ae4: 20 d2 ff  -         jsr Kernal.CHROUT
3ae7: e8        -         inx
3ae8: 4c df 3a  -         jmp !loop-
3aeb: 4c f0 3a  -         jmp !done+
3aee: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3af0: a2 00     -         ldx #$00
3af2: 8e 62 54  -         stx TEST_NAME_COUNT
3af5: 60        -         rts
3af6: ee 62 54  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
3af9: ad 86 02  -         lda Two.CurrentCharColor
3afc: 48        -         pha
3afd: a9 0f     -         lda #color
3aff: 8d 86 02  -         sta Two.CurrentCharColor
3b02: a2 00     -         ldx #$00
3b04: bd 13 3b  -         lda address,x
3b07: f0 07     -         beq !done+
3b09: 20 d2 ff  -         jsr Kernal.CHROUT
3b0c: e8        -         inx
3b0d: 4c 04 3b  -         jmp !loop-
3b10: 4c 21 3b  -         jmp !done+
3b13: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text preprocessorString	// store in memory
3b20: 00        -         .byte Petscii.NULL			// terminate
3b21: 68        -         pla
3b22: 8d 86 02  -         sta Two.CurrentCharColor
3b25: 4c 3b 3b  -         jmp !done+
3b28: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
3b2a: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
3b37: 2e 2e 2e  -         .text "..."
3b3a: 00        -         .byte Petscii.NULL
3b3b: 20 08 10  -         jsr SW16
3b3e: 01 00     -         .byte $01, effective_address(ea,*) }
3b40: 10        -         .byte opcode(op, register)
3b41: dc fe     -         .word address.getValue()
3b43: 01 05     -         .byte $01, effective_address(ea,*) }
3b45: 10        -         .byte opcode(op, register)
3b46: 23 01     -         .word address.getValue()
3b48: 01 00     -         .byte $01, effective_address(ea,*) }
3b4a: 00        -         .byte $00 }
3b4b: ee 60 54  -         inc TEST_COUNT
3b4e: ad 86 02  -         lda Two.CurrentCharColor
3b51: 48        -         pha
3b52: a9 0e     -         lda #color
3b54: 8d 86 02  -         sta Two.CurrentCharColor
3b57: a2 00     -         ldx #$00
3b59: bd 6c 3b  -         lda address,x
3b5c: f0 07     -         beq !done+
3b5e: 20 d2 ff  -         jsr Kernal.CHROUT
3b61: e8        -         inx
3b62: 4c 59 3b  -         jmp !loop-
3b65: 68        -         pla
3b66: 8d 86 02  -         sta Two.CurrentCharColor
3b69: 4c 70 3b  -         jmp !done+
3b6c: 20        - memory: .byte Petscii.SPACEBAR
3b6d: 31        -         .text description
3b6e: 3a        -         .text ":"
3b6f: 00        -         .byte Petscii.NULL
3b70: a6 17     -         ldx rl(register.getValue())
3b72: a4 18     -         ldy rh(register.getValue())
3b74: e0 dc     -         cpx #<value
3b76: d0 25     -         bne !failed+
3b78: c0 fe     -         cpy #>value
3b7a: d0 21     -         bne !failed+
3b7c: ee 61 54  -         inc TEST_PASS_COUNT
3b7f: ad 86 02  -         lda Two.CurrentCharColor
3b82: 48        -         pha
3b83: a9 05     -         lda #color
3b85: 8d 86 02  -         sta Two.CurrentCharColor
3b88: a2 00     -         ldx #$00
3b8a: bd 5c 54  -         lda address,x
3b8d: f0 07     -         beq !done+
3b8f: 20 d2 ff  -         jsr Kernal.CHROUT
3b92: e8        -         inx
3b93: 4c 8a 3b  -         jmp !loop-
3b96: 68        -         pla
3b97: 8d 86 02  -         sta Two.CurrentCharColor
3b9a: 4c b8 3b  -         jmp !done+
3b9d: ad 86 02  -         lda Two.CurrentCharColor
3ba0: 48        -         pha
3ba1: a9 02     -         lda #color
3ba3: 8d 86 02  -         sta Two.CurrentCharColor
3ba6: a2 00     -         ldx #$00
3ba8: bd 5e 54  -         lda address,x
3bab: f0 07     -         beq !done+
3bad: 20 d2 ff  -         jsr Kernal.CHROUT
3bb0: e8        -         inx
3bb1: 4c a8 3b  -         jmp !loop-
3bb4: 68        -         pla
3bb5: 8d 86 02  -         sta Two.CurrentCharColor
3bb8: a2 00     -         ldx #$00
3bba: bd c9 3b  -         lda address,x
3bbd: f0 07     -         beq !done+
3bbf: 20 d2 ff  -         jsr Kernal.CHROUT
3bc2: e8        -         inx
3bc3: 4c ba 3b  -         jmp !loop-
3bc6: 4c cb 3b  -         jmp !done+
3bc9: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3bcb: ae 62 54  -         ldx TEST_NAME_COUNT
3bce: e0 15     -         cpx #TESTS_PER_PAGE
3bd0: d0 5d     -         bne !exit+
3bd2: ad 86 02  -         lda Two.CurrentCharColor
3bd5: 48        -         pha
3bd6: a9 01     -         lda #color
3bd8: 8d 86 02  -         sta Two.CurrentCharColor
3bdb: a2 00     -         ldx #$00
3bdd: bd f0 3b  -         lda address,x
3be0: f0 07     -         beq !done+
3be2: 20 d2 ff  -         jsr Kernal.CHROUT
3be5: e8        -         inx
3be6: 4c dd 3b  -         jmp !loop-
3be9: 68        -         pla
3bea: 8d 86 02  -         sta Two.CurrentCharColor
3bed: 4c 0f 3c  -         jmp !no_key+
3bf0: 0d        - memory: .byte Petscii.RETURN
3bf1: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3c01: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3c0d: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3c0f: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
3c12: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
3c15: f0 f8     -         beq !no_key-
3c17: a2 00     -         ldx #$00
3c19: bd 28 3c  -         lda address,x
3c1c: f0 07     -         beq !done+
3c1e: 20 d2 ff  -         jsr Kernal.CHROUT
3c21: e8        -         inx
3c22: 4c 19 3c  -         jmp !loop-
3c25: 4c 2a 3c  -         jmp !done+
3c28: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3c2a: a2 00     -         ldx #$00
3c2c: 8e 62 54  -         stx TEST_NAME_COUNT
3c2f: 60        -         rts
3c30: ee 62 54  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
3c33: ad 86 02  -         lda Two.CurrentCharColor
3c36: 48        -         pha
3c37: a9 0f     -         lda #color
3c39: 8d 86 02  -         sta Two.CurrentCharColor
3c3c: a2 00     -         ldx #$00
3c3e: bd 4d 3c  -         lda address,x
3c41: f0 07     -         beq !done+
3c43: 20 d2 ff  -         jsr Kernal.CHROUT
3c46: e8        -         inx
3c47: 4c 3e 3c  -         jmp !loop-
3c4a: 4c 5d 3c  -         jmp !done+
3c4d: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text preprocessorString	// store in memory
3c5c: 00        -         .byte Petscii.NULL			// terminate
3c5d: 68        -         pla
3c5e: 8d 86 02  -         sta Two.CurrentCharColor
3c61: 4c 79 3c  -         jmp !done+
3c64: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
3c66: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
3c75: 2e 2e 2e  -         .text "..."
3c78: 00        -         .byte Petscii.NULL
3c79: 20 08 10  -         jsr SW16
3c7c: 15        -         .byte opcode(op, register)
3c7d: 00 10     -         .word address.getValue()
3c7f: 10        -         .byte opcode(op, register)
3c80: ff ff     -         .word address.getValue()
3c82: a5        -         .byte opcode($a0, register) }
3c83: 02 02     -         .byte $02, effective_address(ea,*) }
3c85: 01 05     -         .byte $01, effective_address(ea,*) }
3c87: 10        -         .byte opcode(op, register)
3c88: dc fe     -         .word address.getValue()
3c8a: 01 05     -         .byte $01, effective_address(ea,*) }
3c8c: 10        -         .byte opcode(op, register)
3c8d: 23 01     -         .word address.getValue()
3c8f: 01 00     -         .byte $01, effective_address(ea,*) }
3c91: 00        -         .byte $00 }
3c92: ee 60 54  -         inc TEST_COUNT
3c95: ad 86 02  -         lda Two.CurrentCharColor
3c98: 48        -         pha
3c99: a9 0e     -         lda #color
3c9b: 8d 86 02  -         sta Two.CurrentCharColor
3c9e: a2 00     -         ldx #$00
3ca0: bd b3 3c  -         lda address,x
3ca3: f0 07     -         beq !done+
3ca5: 20 d2 ff  -         jsr Kernal.CHROUT
3ca8: e8        -         inx
3ca9: 4c a0 3c  -         jmp !loop-
3cac: 68        -         pla
3cad: 8d 86 02  -         sta Two.CurrentCharColor
3cb0: 4c b7 3c  -         jmp !done+
3cb3: 20        - memory: .byte Petscii.SPACEBAR
3cb4: 32        -         .text description
3cb5: 3a        -         .text ":"
3cb6: 00        -         .byte Petscii.NULL
3cb7: a6 17     -         ldx rl(register.getValue())
3cb9: a4 18     -         ldy rh(register.getValue())
3cbb: e0 23     -         cpx #<value
3cbd: d0 25     -         bne !failed+
3cbf: c0 01     -         cpy #>value
3cc1: d0 21     -         bne !failed+
3cc3: ee 61 54  -         inc TEST_PASS_COUNT
3cc6: ad 86 02  -         lda Two.CurrentCharColor
3cc9: 48        -         pha
3cca: a9 05     -         lda #color
3ccc: 8d 86 02  -         sta Two.CurrentCharColor
3ccf: a2 00     -         ldx #$00
3cd1: bd 5c 54  -         lda address,x
3cd4: f0 07     -         beq !done+
3cd6: 20 d2 ff  -         jsr Kernal.CHROUT
3cd9: e8        -         inx
3cda: 4c d1 3c  -         jmp !loop-
3cdd: 68        -         pla
3cde: 8d 86 02  -         sta Two.CurrentCharColor
3ce1: 4c ff 3c  -         jmp !done+
3ce4: ad 86 02  -         lda Two.CurrentCharColor
3ce7: 48        -         pha
3ce8: a9 02     -         lda #color
3cea: 8d 86 02  -         sta Two.CurrentCharColor
3ced: a2 00     -         ldx #$00
3cef: bd 5e 54  -         lda address,x
3cf2: f0 07     -         beq !done+
3cf4: 20 d2 ff  -         jsr Kernal.CHROUT
3cf7: e8        -         inx
3cf8: 4c ef 3c  -         jmp !loop-
3cfb: 68        -         pla
3cfc: 8d 86 02  -         sta Two.CurrentCharColor
3cff: a2 00     -         ldx #$00
3d01: bd 10 3d  -         lda address,x
3d04: f0 07     -         beq !done+
3d06: 20 d2 ff  -         jsr Kernal.CHROUT
3d09: e8        -         inx
3d0a: 4c 01 3d  -         jmp !loop-
3d0d: 4c 12 3d  -         jmp !done+
3d10: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3d12: ae 62 54  -         ldx TEST_NAME_COUNT
3d15: e0 15     -         cpx #TESTS_PER_PAGE
3d17: d0 5d     -         bne !exit+
3d19: ad 86 02  -         lda Two.CurrentCharColor
3d1c: 48        -         pha
3d1d: a9 01     -         lda #color
3d1f: 8d 86 02  -         sta Two.CurrentCharColor
3d22: a2 00     -         ldx #$00
3d24: bd 37 3d  -         lda address,x
3d27: f0 07     -         beq !done+
3d29: 20 d2 ff  -         jsr Kernal.CHROUT
3d2c: e8        -         inx
3d2d: 4c 24 3d  -         jmp !loop-
3d30: 68        -         pla
3d31: 8d 86 02  -         sta Two.CurrentCharColor
3d34: 4c 56 3d  -         jmp !no_key+
3d37: 0d        - memory: .byte Petscii.RETURN
3d38: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3d48: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3d54: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3d56: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
3d59: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
3d5c: f0 f8     -         beq !no_key-
3d5e: a2 00     -         ldx #$00
3d60: bd 6f 3d  -         lda address,x
3d63: f0 07     -         beq !done+
3d65: 20 d2 ff  -         jsr Kernal.CHROUT
3d68: e8        -         inx
3d69: 4c 60 3d  -         jmp !loop-
3d6c: 4c 71 3d  -         jmp !done+
3d6f: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3d71: a2 00     -         ldx #$00
3d73: 8e 62 54  -         stx TEST_NAME_COUNT
3d76: 60        -         rts
3d77: ee 62 54  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
3d7a: ad 86 02  -         lda Two.CurrentCharColor
3d7d: 48        -         pha
3d7e: a9 0f     -         lda #color
3d80: 8d 86 02  -         sta Two.CurrentCharColor
3d83: a2 00     -         ldx #$00
3d85: bd 94 3d  -         lda address,x
3d88: f0 07     -         beq !done+
3d8a: 20 d2 ff  -         jsr Kernal.CHROUT
3d8d: e8        -         inx
3d8e: 4c 85 3d  -         jmp !loop-
3d91: 4c a4 3d  -         jmp !done+
3d94: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text preprocessorString	// store in memory
3da3: 00        -         .byte Petscii.NULL			// terminate
3da4: 68        -         pla
3da5: 8d 86 02  -         sta Two.CurrentCharColor
3da8: 4c c0 3d  -         jmp !done+
3dab: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
3dad: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
3dbc: 2e 2e 2e  -         .text "..."
3dbf: 00        -         .byte Petscii.NULL
3dc0: 20 08 10  -         jsr SW16
3dc3: 15        -         .byte opcode(op, register)
3dc4: 00 10     -         .word address.getValue()
3dc6: 10        -         .byte opcode(op, register)
3dc7: ff ff     -         .word address.getValue()
3dc9: a5        -         .byte opcode($a0, register) }
3dca: 03 02     -         .byte $03, effective_address(ea,*) }
3dcc: 01 05     -         .byte $01, effective_address(ea,*) }
3dce: 10        -         .byte opcode(op, register)
3dcf: dc fe     -         .word address.getValue()
3dd1: 01 05     -         .byte $01, effective_address(ea,*) }
3dd3: 10        -         .byte opcode(op, register)
3dd4: 23 01     -         .word address.getValue()
3dd6: 01 00     -         .byte $01, effective_address(ea,*) }
3dd8: 00        -         .byte $00 }
3dd9: ee 60 54  -         inc TEST_COUNT
3ddc: ad 86 02  -         lda Two.CurrentCharColor
3ddf: 48        -         pha
3de0: a9 0e     -         lda #color
3de2: 8d 86 02  -         sta Two.CurrentCharColor
3de5: a2 00     -         ldx #$00
3de7: bd fa 3d  -         lda address,x
3dea: f0 07     -         beq !done+
3dec: 20 d2 ff  -         jsr Kernal.CHROUT
3def: e8        -         inx
3df0: 4c e7 3d  -         jmp !loop-
3df3: 68        -         pla
3df4: 8d 86 02  -         sta Two.CurrentCharColor
3df7: 4c fe 3d  -         jmp !done+
3dfa: 20        - memory: .byte Petscii.SPACEBAR
3dfb: 31        -         .text description
3dfc: 3a        -         .text ":"
3dfd: 00        -         .byte Petscii.NULL
3dfe: a6 17     -         ldx rl(register.getValue())
3e00: a4 18     -         ldy rh(register.getValue())
3e02: e0 dc     -         cpx #<value
3e04: d0 25     -         bne !failed+
3e06: c0 fe     -         cpy #>value
3e08: d0 21     -         bne !failed+
3e0a: ee 61 54  -         inc TEST_PASS_COUNT
3e0d: ad 86 02  -         lda Two.CurrentCharColor
3e10: 48        -         pha
3e11: a9 05     -         lda #color
3e13: 8d 86 02  -         sta Two.CurrentCharColor
3e16: a2 00     -         ldx #$00
3e18: bd 5c 54  -         lda address,x
3e1b: f0 07     -         beq !done+
3e1d: 20 d2 ff  -         jsr Kernal.CHROUT
3e20: e8        -         inx
3e21: 4c 18 3e  -         jmp !loop-
3e24: 68        -         pla
3e25: 8d 86 02  -         sta Two.CurrentCharColor
3e28: 4c 46 3e  -         jmp !done+
3e2b: ad 86 02  -         lda Two.CurrentCharColor
3e2e: 48        -         pha
3e2f: a9 02     -         lda #color
3e31: 8d 86 02  -         sta Two.CurrentCharColor
3e34: a2 00     -         ldx #$00
3e36: bd 5e 54  -         lda address,x
3e39: f0 07     -         beq !done+
3e3b: 20 d2 ff  -         jsr Kernal.CHROUT
3e3e: e8        -         inx
3e3f: 4c 36 3e  -         jmp !loop-
3e42: 68        -         pla
3e43: 8d 86 02  -         sta Two.CurrentCharColor
3e46: a2 00     -         ldx #$00
3e48: bd 57 3e  -         lda address,x
3e4b: f0 07     -         beq !done+
3e4d: 20 d2 ff  -         jsr Kernal.CHROUT
3e50: e8        -         inx
3e51: 4c 48 3e  -         jmp !loop-
3e54: 4c 59 3e  -         jmp !done+
3e57: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3e59: ae 62 54  -         ldx TEST_NAME_COUNT
3e5c: e0 15     -         cpx #TESTS_PER_PAGE
3e5e: d0 5d     -         bne !exit+
3e60: ad 86 02  -         lda Two.CurrentCharColor
3e63: 48        -         pha
3e64: a9 01     -         lda #color
3e66: 8d 86 02  -         sta Two.CurrentCharColor
3e69: a2 00     -         ldx #$00
3e6b: bd 7e 3e  -         lda address,x
3e6e: f0 07     -         beq !done+
3e70: 20 d2 ff  -         jsr Kernal.CHROUT
3e73: e8        -         inx
3e74: 4c 6b 3e  -         jmp !loop-
3e77: 68        -         pla
3e78: 8d 86 02  -         sta Two.CurrentCharColor
3e7b: 4c 9d 3e  -         jmp !no_key+
3e7e: 0d        - memory: .byte Petscii.RETURN
3e7f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3e8f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3e9b: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3e9d: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
3ea0: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
3ea3: f0 f8     -         beq !no_key-
3ea5: a2 00     -         ldx #$00
3ea7: bd b6 3e  -         lda address,x
3eaa: f0 07     -         beq !done+
3eac: 20 d2 ff  -         jsr Kernal.CHROUT
3eaf: e8        -         inx
3eb0: 4c a7 3e  -         jmp !loop-
3eb3: 4c b8 3e  -         jmp !done+
3eb6: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3eb8: a2 00     -         ldx #$00
3eba: 8e 62 54  -         stx TEST_NAME_COUNT
3ebd: 60        -         rts
3ebe: ee 62 54  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
3ec1: ad 86 02  -         lda Two.CurrentCharColor
3ec4: 48        -         pha
3ec5: a9 0f     -         lda #color
3ec7: 8d 86 02  -         sta Two.CurrentCharColor
3eca: a2 00     -         ldx #$00
3ecc: bd db 3e  -         lda address,x
3ecf: f0 07     -         beq !done+
3ed1: 20 d2 ff  -         jsr Kernal.CHROUT
3ed4: e8        -         inx
3ed5: 4c cc 3e  -         jmp !loop-
3ed8: 4c e9 3e  -         jmp !done+
3edb: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text preprocessorString	// store in memory
3ee8: 00        -         .byte Petscii.NULL			// terminate
3ee9: 68        -         pla
3eea: 8d 86 02  -         sta Two.CurrentCharColor
3eed: 4c 03 3f  -         jmp !done+
3ef0: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
3ef2: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
3eff: 2e 2e 2e  -         .text "..."
3f02: 00        -         .byte Petscii.NULL
3f03: 20 08 10  -         jsr SW16
3f06: 15        -         .byte opcode(op, register)
3f07: 69 54     -         .word address.getValue()
3f09: 14        -         .byte opcode(op, register)
3f0a: 79 54     -         .word address.getValue()
3f0c: b0        -         .byte opcode($b0, register) }
3f0d: 55        -         .byte opcode($50, register) }
3f0e: 24        -         .byte opcode($20, register) }
3f0f: d5        -         .byte opcode($d0, register) }
3f10: 04 fa     -         .byte $04, effective_address(ea,*) }
3f12: 00        -         .byte $00 }
3f13: ee 60 54  -         inc TEST_COUNT
3f16: ad 86 02  -         lda Two.CurrentCharColor
3f19: 48        -         pha
3f1a: a9 0e     -         lda #color
3f1c: 8d 86 02  -         sta Two.CurrentCharColor
3f1f: a2 00     -         ldx #$00
3f21: bd 34 3f  -         lda address,x
3f24: f0 07     -         beq !done+
3f26: 20 d2 ff  -         jsr Kernal.CHROUT
3f29: e8        -         inx
3f2a: 4c 21 3f  -         jmp !loop-
3f2d: 68        -         pla
3f2e: 8d 86 02  -         sta Two.CurrentCharColor
3f31: 4c 3a 3f  -         jmp !done+
3f34: 20        - memory: .byte Petscii.SPACEBAR
3f35: 43 4c 52  -         .text description
3f38: 3a        -         .text ":"
3f39: 00        -         .byte Petscii.NULL
3f3a: a2 ff     -         ldx #$ff
3f3c: e8        -         inx
3f3d: e0 10     -         cpx #size
3f3f: f0 0a     -         beq !success+
3f41: a9 00     -         lda #constant
3f43: dd 69 54  -         cmp source,x
3f46: f0 f4     -         beq !loop-
3f48: 4c 6c 3f  -         jmp !failed+
3f4b: ee 61 54  -         inc TEST_PASS_COUNT
3f4e: ad 86 02  -         lda Two.CurrentCharColor
3f51: 48        -         pha
3f52: a9 05     -         lda #color
3f54: 8d 86 02  -         sta Two.CurrentCharColor
3f57: a2 00     -         ldx #$00
3f59: bd 5c 54  -         lda address,x
3f5c: f0 07     -         beq !done+
3f5e: 20 d2 ff  -         jsr Kernal.CHROUT
3f61: e8        -         inx
3f62: 4c 59 3f  -         jmp !loop-
3f65: 68        -         pla
3f66: 8d 86 02  -         sta Two.CurrentCharColor
3f69: 4c 87 3f  -         jmp !done+
3f6c: ad 86 02  -         lda Two.CurrentCharColor
3f6f: 48        -         pha
3f70: a9 02     -         lda #color
3f72: 8d 86 02  -         sta Two.CurrentCharColor
3f75: a2 00     -         ldx #$00
3f77: bd 5e 54  -         lda address,x
3f7a: f0 07     -         beq !done+
3f7c: 20 d2 ff  -         jsr Kernal.CHROUT
3f7f: e8        -         inx
3f80: 4c 77 3f  -         jmp !loop-
3f83: 68        -         pla
3f84: 8d 86 02  -         sta Two.CurrentCharColor
3f87: a2 00     -         ldx #$00
3f89: bd 98 3f  -         lda address,x
3f8c: f0 07     -         beq !done+
3f8e: 20 d2 ff  -         jsr Kernal.CHROUT
3f91: e8        -         inx
3f92: 4c 89 3f  -         jmp !loop-
3f95: 4c 9a 3f  -         jmp !done+
3f98: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
3f9a: ae 62 54  -         ldx TEST_NAME_COUNT
3f9d: e0 15     -         cpx #TESTS_PER_PAGE
3f9f: d0 5d     -         bne !exit+
3fa1: ad 86 02  -         lda Two.CurrentCharColor
3fa4: 48        -         pha
3fa5: a9 01     -         lda #color
3fa7: 8d 86 02  -         sta Two.CurrentCharColor
3faa: a2 00     -         ldx #$00
3fac: bd bf 3f  -         lda address,x
3faf: f0 07     -         beq !done+
3fb1: 20 d2 ff  -         jsr Kernal.CHROUT
3fb4: e8        -         inx
3fb5: 4c ac 3f  -         jmp !loop-
3fb8: 68        -         pla
3fb9: 8d 86 02  -         sta Two.CurrentCharColor
3fbc: 4c de 3f  -         jmp !no_key+
3fbf: 0d        - memory: .byte Petscii.RETURN
3fc0: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3fd0: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3fdc: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3fde: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
3fe1: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
3fe4: f0 f8     -         beq !no_key-
3fe6: a2 00     -         ldx #$00
3fe8: bd f7 3f  -         lda address,x
3feb: f0 07     -         beq !done+
3fed: 20 d2 ff  -         jsr Kernal.CHROUT
3ff0: e8        -         inx
3ff1: 4c e8 3f  -         jmp !loop-
3ff4: 4c f9 3f  -         jmp !done+
3ff7: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
3ff9: a2 00     -         ldx #$00
3ffb: 8e 62 54  -         stx TEST_NAME_COUNT
3ffe: 60        -         rts
3fff: ee 62 54  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
4002: ad 86 02  -         lda Two.CurrentCharColor
4005: 48        -         pha
4006: a9 0f     -         lda #color
4008: 8d 86 02  -         sta Two.CurrentCharColor
400b: a2 00     -         ldx #$00
400d: bd 1c 40  -         lda address,x
4010: f0 07     -         beq !done+
4012: 20 d2 ff  -         jsr Kernal.CHROUT
4015: e8        -         inx
4016: 4c 0d 40  -         jmp !loop-
4019: 4c 2a 40  -         jmp !done+
401c: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text preprocessorString	// store in memory
4029: 00        -         .byte Petscii.NULL			// terminate
402a: 68        -         pla
402b: 8d 86 02  -         sta Two.CurrentCharColor
402e: 4c 44 40  -         jmp !done+
4031: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4033: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
4040: 2e 2e 2e  -         .text "..."
4043: 00        -         .byte Petscii.NULL
4044: 20 08 10  -         jsr SW16
4047: 15        -         .byte opcode(op, register)
4048: 0a 00     -         .word address.getValue()
404a: b0        -         .byte opcode($b0, register) }
404b: b5        -         .byte opcode($b0, register) }
404c: 05 07     -         .byte $05, effective_address(ea,*) }
404e: 01 00     -         .byte $01, effective_address(ea,*) }
4050: 10        -         .byte opcode(op, register)
4051: dc fe     -         .word address.getValue()
4053: 01 05     -         .byte $01, effective_address(ea,*) }
4055: 10        -         .byte opcode(op, register)
4056: 23 01     -         .word address.getValue()
4058: 01 00     -         .byte $01, effective_address(ea,*) }
405a: 00        -         .byte $00 }
405b: ee 60 54  -         inc TEST_COUNT
405e: ad 86 02  -         lda Two.CurrentCharColor
4061: 48        -         pha
4062: a9 0e     -         lda #color
4064: 8d 86 02  -         sta Two.CurrentCharColor
4067: a2 00     -         ldx #$00
4069: bd 7c 40  -         lda address,x
406c: f0 07     -         beq !done+
406e: 20 d2 ff  -         jsr Kernal.CHROUT
4071: e8        -         inx
4072: 4c 69 40  -         jmp !loop-
4075: 68        -         pla
4076: 8d 86 02  -         sta Two.CurrentCharColor
4079: 4c 80 40  -         jmp !done+
407c: 20        - memory: .byte Petscii.SPACEBAR
407d: 32        -         .text description
407e: 3a        -         .text ":"
407f: 00        -         .byte Petscii.NULL
4080: a6 17     -         ldx rl(register.getValue())
4082: a4 18     -         ldy rh(register.getValue())
4084: e0 23     -         cpx #<value
4086: d0 25     -         bne !failed+
4088: c0 01     -         cpy #>value
408a: d0 21     -         bne !failed+
408c: ee 61 54  -         inc TEST_PASS_COUNT
408f: ad 86 02  -         lda Two.CurrentCharColor
4092: 48        -         pha
4093: a9 05     -         lda #color
4095: 8d 86 02  -         sta Two.CurrentCharColor
4098: a2 00     -         ldx #$00
409a: bd 5c 54  -         lda address,x
409d: f0 07     -         beq !done+
409f: 20 d2 ff  -         jsr Kernal.CHROUT
40a2: e8        -         inx
40a3: 4c 9a 40  -         jmp !loop-
40a6: 68        -         pla
40a7: 8d 86 02  -         sta Two.CurrentCharColor
40aa: 4c c8 40  -         jmp !done+
40ad: ad 86 02  -         lda Two.CurrentCharColor
40b0: 48        -         pha
40b1: a9 02     -         lda #color
40b3: 8d 86 02  -         sta Two.CurrentCharColor
40b6: a2 00     -         ldx #$00
40b8: bd 5e 54  -         lda address,x
40bb: f0 07     -         beq !done+
40bd: 20 d2 ff  -         jsr Kernal.CHROUT
40c0: e8        -         inx
40c1: 4c b8 40  -         jmp !loop-
40c4: 68        -         pla
40c5: 8d 86 02  -         sta Two.CurrentCharColor
40c8: a2 00     -         ldx #$00
40ca: bd d9 40  -         lda address,x
40cd: f0 07     -         beq !done+
40cf: 20 d2 ff  -         jsr Kernal.CHROUT
40d2: e8        -         inx
40d3: 4c ca 40  -         jmp !loop-
40d6: 4c db 40  -         jmp !done+
40d9: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
40db: ae 62 54  -         ldx TEST_NAME_COUNT
40de: e0 15     -         cpx #TESTS_PER_PAGE
40e0: d0 5d     -         bne !exit+
40e2: ad 86 02  -         lda Two.CurrentCharColor
40e5: 48        -         pha
40e6: a9 01     -         lda #color
40e8: 8d 86 02  -         sta Two.CurrentCharColor
40eb: a2 00     -         ldx #$00
40ed: bd 00 41  -         lda address,x
40f0: f0 07     -         beq !done+
40f2: 20 d2 ff  -         jsr Kernal.CHROUT
40f5: e8        -         inx
40f6: 4c ed 40  -         jmp !loop-
40f9: 68        -         pla
40fa: 8d 86 02  -         sta Two.CurrentCharColor
40fd: 4c 1f 41  -         jmp !no_key+
4100: 0d        - memory: .byte Petscii.RETURN
4101: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4111: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
411d: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
411f: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
4122: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
4125: f0 f8     -         beq !no_key-
4127: a2 00     -         ldx #$00
4129: bd 38 41  -         lda address,x
412c: f0 07     -         beq !done+
412e: 20 d2 ff  -         jsr Kernal.CHROUT
4131: e8        -         inx
4132: 4c 29 41  -         jmp !loop-
4135: 4c 3a 41  -         jmp !done+
4138: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
413a: a2 00     -         ldx #$00
413c: 8e 62 54  -         stx TEST_NAME_COUNT
413f: 60        -         rts
4140: ee 62 54  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
4143: ad 86 02  -         lda Two.CurrentCharColor
4146: 48        -         pha
4147: a9 0f     -         lda #color
4149: 8d 86 02  -         sta Two.CurrentCharColor
414c: a2 00     -         ldx #$00
414e: bd 5d 41  -         lda address,x
4151: f0 07     -         beq !done+
4153: 20 d2 ff  -         jsr Kernal.CHROUT
4156: e8        -         inx
4157: 4c 4e 41  -         jmp !loop-
415a: 4c 69 41  -         jmp !done+
415d: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text preprocessorString	// store in memory
4168: 00        -         .byte Petscii.NULL			// terminate
4169: 68        -         pla
416a: 8d 86 02  -         sta Two.CurrentCharColor
416d: 4c 81 41  -         jmp !done+
4170: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4172: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
417d: 2e 2e 2e  -         .text "..."
4180: 00        -         .byte Petscii.NULL
4181: 20 08 10  -         jsr SW16
4184: b0        -         .byte opcode($b0, register) }
4185: 06 07     -         .byte $06, effective_address(ea,*) }
4187: 01 00     -         .byte $01, effective_address(ea,*) }
4189: 10        -         .byte opcode(op, register)
418a: dc fe     -         .word address.getValue()
418c: 01 05     -         .byte $01, effective_address(ea,*) }
418e: 10        -         .byte opcode(op, register)
418f: 23 01     -         .word address.getValue()
4191: 01 00     -         .byte $01, effective_address(ea,*) }
4193: 00        -         .byte $00 }
4194: ee 60 54  -         inc TEST_COUNT
4197: ad 86 02  -         lda Two.CurrentCharColor
419a: 48        -         pha
419b: a9 0e     -         lda #color
419d: 8d 86 02  -         sta Two.CurrentCharColor
41a0: a2 00     -         ldx #$00
41a2: bd b5 41  -         lda address,x
41a5: f0 07     -         beq !done+
41a7: 20 d2 ff  -         jsr Kernal.CHROUT
41aa: e8        -         inx
41ab: 4c a2 41  -         jmp !loop-
41ae: 68        -         pla
41af: 8d 86 02  -         sta Two.CurrentCharColor
41b2: 4c b9 41  -         jmp !done+
41b5: 20        - memory: .byte Petscii.SPACEBAR
41b6: 32        -         .text description
41b7: 3a        -         .text ":"
41b8: 00        -         .byte Petscii.NULL
41b9: a6 17     -         ldx rl(register.getValue())
41bb: a4 18     -         ldy rh(register.getValue())
41bd: e0 23     -         cpx #<value
41bf: d0 25     -         bne !failed+
41c1: c0 01     -         cpy #>value
41c3: d0 21     -         bne !failed+
41c5: ee 61 54  -         inc TEST_PASS_COUNT
41c8: ad 86 02  -         lda Two.CurrentCharColor
41cb: 48        -         pha
41cc: a9 05     -         lda #color
41ce: 8d 86 02  -         sta Two.CurrentCharColor
41d1: a2 00     -         ldx #$00
41d3: bd 5c 54  -         lda address,x
41d6: f0 07     -         beq !done+
41d8: 20 d2 ff  -         jsr Kernal.CHROUT
41db: e8        -         inx
41dc: 4c d3 41  -         jmp !loop-
41df: 68        -         pla
41e0: 8d 86 02  -         sta Two.CurrentCharColor
41e3: 4c 01 42  -         jmp !done+
41e6: ad 86 02  -         lda Two.CurrentCharColor
41e9: 48        -         pha
41ea: a9 02     -         lda #color
41ec: 8d 86 02  -         sta Two.CurrentCharColor
41ef: a2 00     -         ldx #$00
41f1: bd 5e 54  -         lda address,x
41f4: f0 07     -         beq !done+
41f6: 20 d2 ff  -         jsr Kernal.CHROUT
41f9: e8        -         inx
41fa: 4c f1 41  -         jmp !loop-
41fd: 68        -         pla
41fe: 8d 86 02  -         sta Two.CurrentCharColor
4201: a2 00     -         ldx #$00
4203: bd 12 42  -         lda address,x
4206: f0 07     -         beq !done+
4208: 20 d2 ff  -         jsr Kernal.CHROUT
420b: e8        -         inx
420c: 4c 03 42  -         jmp !loop-
420f: 4c 14 42  -         jmp !done+
4212: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4214: ae 62 54  -         ldx TEST_NAME_COUNT
4217: e0 15     -         cpx #TESTS_PER_PAGE
4219: d0 5d     -         bne !exit+
421b: ad 86 02  -         lda Two.CurrentCharColor
421e: 48        -         pha
421f: a9 01     -         lda #color
4221: 8d 86 02  -         sta Two.CurrentCharColor
4224: a2 00     -         ldx #$00
4226: bd 39 42  -         lda address,x
4229: f0 07     -         beq !done+
422b: 20 d2 ff  -         jsr Kernal.CHROUT
422e: e8        -         inx
422f: 4c 26 42  -         jmp !loop-
4232: 68        -         pla
4233: 8d 86 02  -         sta Two.CurrentCharColor
4236: 4c 58 42  -         jmp !no_key+
4239: 0d        - memory: .byte Petscii.RETURN
423a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
424a: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4256: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4258: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
425b: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
425e: f0 f8     -         beq !no_key-
4260: a2 00     -         ldx #$00
4262: bd 71 42  -         lda address,x
4265: f0 07     -         beq !done+
4267: 20 d2 ff  -         jsr Kernal.CHROUT
426a: e8        -         inx
426b: 4c 62 42  -         jmp !loop-
426e: 4c 73 42  -         jmp !done+
4271: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4273: a2 00     -         ldx #$00
4275: 8e 62 54  -         stx TEST_NAME_COUNT
4278: 60        -         rts
4279: ee 62 54  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
427c: ad 86 02  -         lda Two.CurrentCharColor
427f: 48        -         pha
4280: a9 0f     -         lda #color
4282: 8d 86 02  -         sta Two.CurrentCharColor
4285: a2 00     -         ldx #$00
4287: bd 96 42  -         lda address,x
428a: f0 07     -         beq !done+
428c: 20 d2 ff  -         jsr Kernal.CHROUT
428f: e8        -         inx
4290: 4c 87 42  -         jmp !loop-
4293: 4c a3 42  -         jmp !done+
4296: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text preprocessorString	// store in memory
42a2: 00        -         .byte Petscii.NULL			// terminate
42a3: 68        -         pla
42a4: 8d 86 02  -         sta Two.CurrentCharColor
42a7: 4c bc 42  -         jmp !done+
42aa: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
42ac: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
42b8: 2e 2e 2e  -         .text "..."
42bb: 00        -         .byte Petscii.NULL
42bc: 20 08 10  -         jsr SW16
42bf: 15        -         .byte opcode(op, register)
42c0: 0a 00     -         .word address.getValue()
42c2: b0        -         .byte opcode($b0, register) }
42c3: a5        -         .byte opcode($a0, register) }
42c4: 07 07     -         .byte $07, effective_address(ea,*) }
42c6: 01 00     -         .byte $01, effective_address(ea,*) }
42c8: 10        -         .byte opcode(op, register)
42c9: dc fe     -         .word address.getValue()
42cb: 01 05     -         .byte $01, effective_address(ea,*) }
42cd: 10        -         .byte opcode(op, register)
42ce: 23 01     -         .word address.getValue()
42d0: 01 00     -         .byte $01, effective_address(ea,*) }
42d2: 00        -         .byte $00 }
42d3: ee 60 54  -         inc TEST_COUNT
42d6: ad 86 02  -         lda Two.CurrentCharColor
42d9: 48        -         pha
42da: a9 0e     -         lda #color
42dc: 8d 86 02  -         sta Two.CurrentCharColor
42df: a2 00     -         ldx #$00
42e1: bd f4 42  -         lda address,x
42e4: f0 07     -         beq !done+
42e6: 20 d2 ff  -         jsr Kernal.CHROUT
42e9: e8        -         inx
42ea: 4c e1 42  -         jmp !loop-
42ed: 68        -         pla
42ee: 8d 86 02  -         sta Two.CurrentCharColor
42f1: 4c f8 42  -         jmp !done+
42f4: 20        - memory: .byte Petscii.SPACEBAR
42f5: 32        -         .text description
42f6: 3a        -         .text ":"
42f7: 00        -         .byte Petscii.NULL
42f8: a6 17     -         ldx rl(register.getValue())
42fa: a4 18     -         ldy rh(register.getValue())
42fc: e0 23     -         cpx #<value
42fe: d0 25     -         bne !failed+
4300: c0 01     -         cpy #>value
4302: d0 21     -         bne !failed+
4304: ee 61 54  -         inc TEST_PASS_COUNT
4307: ad 86 02  -         lda Two.CurrentCharColor
430a: 48        -         pha
430b: a9 05     -         lda #color
430d: 8d 86 02  -         sta Two.CurrentCharColor
4310: a2 00     -         ldx #$00
4312: bd 5c 54  -         lda address,x
4315: f0 07     -         beq !done+
4317: 20 d2 ff  -         jsr Kernal.CHROUT
431a: e8        -         inx
431b: 4c 12 43  -         jmp !loop-
431e: 68        -         pla
431f: 8d 86 02  -         sta Two.CurrentCharColor
4322: 4c 40 43  -         jmp !done+
4325: ad 86 02  -         lda Two.CurrentCharColor
4328: 48        -         pha
4329: a9 02     -         lda #color
432b: 8d 86 02  -         sta Two.CurrentCharColor
432e: a2 00     -         ldx #$00
4330: bd 5e 54  -         lda address,x
4333: f0 07     -         beq !done+
4335: 20 d2 ff  -         jsr Kernal.CHROUT
4338: e8        -         inx
4339: 4c 30 43  -         jmp !loop-
433c: 68        -         pla
433d: 8d 86 02  -         sta Two.CurrentCharColor
4340: a2 00     -         ldx #$00
4342: bd 51 43  -         lda address,x
4345: f0 07     -         beq !done+
4347: 20 d2 ff  -         jsr Kernal.CHROUT
434a: e8        -         inx
434b: 4c 42 43  -         jmp !loop-
434e: 4c 53 43  -         jmp !done+
4351: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4353: ae 62 54  -         ldx TEST_NAME_COUNT
4356: e0 15     -         cpx #TESTS_PER_PAGE
4358: d0 5d     -         bne !exit+
435a: ad 86 02  -         lda Two.CurrentCharColor
435d: 48        -         pha
435e: a9 01     -         lda #color
4360: 8d 86 02  -         sta Two.CurrentCharColor
4363: a2 00     -         ldx #$00
4365: bd 78 43  -         lda address,x
4368: f0 07     -         beq !done+
436a: 20 d2 ff  -         jsr Kernal.CHROUT
436d: e8        -         inx
436e: 4c 65 43  -         jmp !loop-
4371: 68        -         pla
4372: 8d 86 02  -         sta Two.CurrentCharColor
4375: 4c 97 43  -         jmp !no_key+
4378: 0d        - memory: .byte Petscii.RETURN
4379: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4389: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4395: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4397: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
439a: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
439d: f0 f8     -         beq !no_key-
439f: a2 00     -         ldx #$00
43a1: bd b0 43  -         lda address,x
43a4: f0 07     -         beq !done+
43a6: 20 d2 ff  -         jsr Kernal.CHROUT
43a9: e8        -         inx
43aa: 4c a1 43  -         jmp !loop-
43ad: 4c b2 43  -         jmp !done+
43b0: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
43b2: a2 00     -         ldx #$00
43b4: 8e 62 54  -         stx TEST_NAME_COUNT
43b7: 60        -         rts
43b8: ee 62 54  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
43bb: ad 86 02  -         lda Two.CurrentCharColor
43be: 48        -         pha
43bf: a9 0f     -         lda #color
43c1: 8d 86 02  -         sta Two.CurrentCharColor
43c4: a2 00     -         ldx #$00
43c6: bd d5 43  -         lda address,x
43c9: f0 07     -         beq !done+
43cb: 20 d2 ff  -         jsr Kernal.CHROUT
43ce: e8        -         inx
43cf: 4c c6 43  -         jmp !loop-
43d2: 4c e2 43  -         jmp !done+
43d5: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text preprocessorString	// store in memory
43e1: 00        -         .byte Petscii.NULL			// terminate
43e2: 68        -         pla
43e3: 8d 86 02  -         sta Two.CurrentCharColor
43e6: 4c fb 43  -         jmp !done+
43e9: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
43eb: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
43f7: 2e 2e 2e  -         .text "..."
43fa: 00        -         .byte Petscii.NULL
43fb: 20 08 10  -         jsr SW16
43fe: 15        -         .byte opcode(op, register)
43ff: 01 00     -         .word address.getValue()
4401: b0        -         .byte opcode($b0, register) }
4402: b5        -         .byte opcode($b0, register) }
4403: 08 07     -         .byte $08, effective_address(ea,*) }
4405: 01 00     -         .byte $01, effective_address(ea,*) }
4407: 10        -         .byte opcode(op, register)
4408: dc fe     -         .word address.getValue()
440a: 01 05     -         .byte $01, effective_address(ea,*) }
440c: 10        -         .byte opcode(op, register)
440d: 23 01     -         .word address.getValue()
440f: 01 00     -         .byte $01, effective_address(ea,*) }
4411: 00        -         .byte $00 }
4412: ee 60 54  -         inc TEST_COUNT
4415: ad 86 02  -         lda Two.CurrentCharColor
4418: 48        -         pha
4419: a9 0e     -         lda #color
441b: 8d 86 02  -         sta Two.CurrentCharColor
441e: a2 00     -         ldx #$00
4420: bd 33 44  -         lda address,x
4423: f0 07     -         beq !done+
4425: 20 d2 ff  -         jsr Kernal.CHROUT
4428: e8        -         inx
4429: 4c 20 44  -         jmp !loop-
442c: 68        -         pla
442d: 8d 86 02  -         sta Two.CurrentCharColor
4430: 4c 37 44  -         jmp !done+
4433: 20        - memory: .byte Petscii.SPACEBAR
4434: 32        -         .text description
4435: 3a        -         .text ":"
4436: 00        -         .byte Petscii.NULL
4437: a6 17     -         ldx rl(register.getValue())
4439: a4 18     -         ldy rh(register.getValue())
443b: e0 23     -         cpx #<value
443d: d0 25     -         bne !failed+
443f: c0 01     -         cpy #>value
4441: d0 21     -         bne !failed+
4443: ee 61 54  -         inc TEST_PASS_COUNT
4446: ad 86 02  -         lda Two.CurrentCharColor
4449: 48        -         pha
444a: a9 05     -         lda #color
444c: 8d 86 02  -         sta Two.CurrentCharColor
444f: a2 00     -         ldx #$00
4451: bd 5c 54  -         lda address,x
4454: f0 07     -         beq !done+
4456: 20 d2 ff  -         jsr Kernal.CHROUT
4459: e8        -         inx
445a: 4c 51 44  -         jmp !loop-
445d: 68        -         pla
445e: 8d 86 02  -         sta Two.CurrentCharColor
4461: 4c 7f 44  -         jmp !done+
4464: ad 86 02  -         lda Two.CurrentCharColor
4467: 48        -         pha
4468: a9 02     -         lda #color
446a: 8d 86 02  -         sta Two.CurrentCharColor
446d: a2 00     -         ldx #$00
446f: bd 5e 54  -         lda address,x
4472: f0 07     -         beq !done+
4474: 20 d2 ff  -         jsr Kernal.CHROUT
4477: e8        -         inx
4478: 4c 6f 44  -         jmp !loop-
447b: 68        -         pla
447c: 8d 86 02  -         sta Two.CurrentCharColor
447f: a2 00     -         ldx #$00
4481: bd 90 44  -         lda address,x
4484: f0 07     -         beq !done+
4486: 20 d2 ff  -         jsr Kernal.CHROUT
4489: e8        -         inx
448a: 4c 81 44  -         jmp !loop-
448d: 4c 92 44  -         jmp !done+
4490: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4492: ae 62 54  -         ldx TEST_NAME_COUNT
4495: e0 15     -         cpx #TESTS_PER_PAGE
4497: d0 5d     -         bne !exit+
4499: ad 86 02  -         lda Two.CurrentCharColor
449c: 48        -         pha
449d: a9 01     -         lda #color
449f: 8d 86 02  -         sta Two.CurrentCharColor
44a2: a2 00     -         ldx #$00
44a4: bd b7 44  -         lda address,x
44a7: f0 07     -         beq !done+
44a9: 20 d2 ff  -         jsr Kernal.CHROUT
44ac: e8        -         inx
44ad: 4c a4 44  -         jmp !loop-
44b0: 68        -         pla
44b1: 8d 86 02  -         sta Two.CurrentCharColor
44b4: 4c d6 44  -         jmp !no_key+
44b7: 0d        - memory: .byte Petscii.RETURN
44b8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
44c8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
44d4: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
44d6: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
44d9: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
44dc: f0 f8     -         beq !no_key-
44de: a2 00     -         ldx #$00
44e0: bd ef 44  -         lda address,x
44e3: f0 07     -         beq !done+
44e5: 20 d2 ff  -         jsr Kernal.CHROUT
44e8: e8        -         inx
44e9: 4c e0 44  -         jmp !loop-
44ec: 4c f1 44  -         jmp !done+
44ef: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
44f1: a2 00     -         ldx #$00
44f3: 8e 62 54  -         stx TEST_NAME_COUNT
44f6: 60        -         rts
44f7: ee 62 54  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
44fa: ad 86 02  -         lda Two.CurrentCharColor
44fd: 48        -         pha
44fe: a9 0f     -         lda #color
4500: 8d 86 02  -         sta Two.CurrentCharColor
4503: a2 00     -         ldx #$00
4505: bd 14 45  -         lda address,x
4508: f0 07     -         beq !done+
450a: 20 d2 ff  -         jsr Kernal.CHROUT
450d: e8        -         inx
450e: 4c 05 45  -         jmp !loop-
4511: 4c 22 45  -         jmp !done+
4514: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text preprocessorString	// store in memory
4521: 00        -         .byte Petscii.NULL			// terminate
4522: 68        -         pla
4523: 8d 86 02  -         sta Two.CurrentCharColor
4526: 4c 3c 45  -         jmp !done+
4529: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
452b: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
4538: 2e 2e 2e  -         .text "..."
453b: 00        -         .byte Petscii.NULL
453c: 20 08 10  -         jsr SW16
453f: 15        -         .byte opcode(op, register)
4540: 02 00     -         .word address.getValue()
4542: b0        -         .byte opcode($b0, register) }
4543: b5        -         .byte opcode($b0, register) }
4544: 09 07     -         .byte $09, effective_address(ea,*) }
4546: 01 00     -         .byte $01, effective_address(ea,*) }
4548: 10        -         .byte opcode(op, register)
4549: dc fe     -         .word address.getValue()
454b: 01 05     -         .byte $01, effective_address(ea,*) }
454d: 10        -         .byte opcode(op, register)
454e: 23 01     -         .word address.getValue()
4550: 01 00     -         .byte $01, effective_address(ea,*) }
4552: 00        -         .byte $00 }
4553: ee 60 54  -         inc TEST_COUNT
4556: ad 86 02  -         lda Two.CurrentCharColor
4559: 48        -         pha
455a: a9 0e     -         lda #color
455c: 8d 86 02  -         sta Two.CurrentCharColor
455f: a2 00     -         ldx #$00
4561: bd 74 45  -         lda address,x
4564: f0 07     -         beq !done+
4566: 20 d2 ff  -         jsr Kernal.CHROUT
4569: e8        -         inx
456a: 4c 61 45  -         jmp !loop-
456d: 68        -         pla
456e: 8d 86 02  -         sta Two.CurrentCharColor
4571: 4c 78 45  -         jmp !done+
4574: 20        - memory: .byte Petscii.SPACEBAR
4575: 32        -         .text description
4576: 3a        -         .text ":"
4577: 00        -         .byte Petscii.NULL
4578: a6 17     -         ldx rl(register.getValue())
457a: a4 18     -         ldy rh(register.getValue())
457c: e0 23     -         cpx #<value
457e: d0 25     -         bne !failed+
4580: c0 01     -         cpy #>value
4582: d0 21     -         bne !failed+
4584: ee 61 54  -         inc TEST_PASS_COUNT
4587: ad 86 02  -         lda Two.CurrentCharColor
458a: 48        -         pha
458b: a9 05     -         lda #color
458d: 8d 86 02  -         sta Two.CurrentCharColor
4590: a2 00     -         ldx #$00
4592: bd 5c 54  -         lda address,x
4595: f0 07     -         beq !done+
4597: 20 d2 ff  -         jsr Kernal.CHROUT
459a: e8        -         inx
459b: 4c 92 45  -         jmp !loop-
459e: 68        -         pla
459f: 8d 86 02  -         sta Two.CurrentCharColor
45a2: 4c c0 45  -         jmp !done+
45a5: ad 86 02  -         lda Two.CurrentCharColor
45a8: 48        -         pha
45a9: a9 02     -         lda #color
45ab: 8d 86 02  -         sta Two.CurrentCharColor
45ae: a2 00     -         ldx #$00
45b0: bd 5e 54  -         lda address,x
45b3: f0 07     -         beq !done+
45b5: 20 d2 ff  -         jsr Kernal.CHROUT
45b8: e8        -         inx
45b9: 4c b0 45  -         jmp !loop-
45bc: 68        -         pla
45bd: 8d 86 02  -         sta Two.CurrentCharColor
45c0: a2 00     -         ldx #$00
45c2: bd d1 45  -         lda address,x
45c5: f0 07     -         beq !done+
45c7: 20 d2 ff  -         jsr Kernal.CHROUT
45ca: e8        -         inx
45cb: 4c c2 45  -         jmp !loop-
45ce: 4c d3 45  -         jmp !done+
45d1: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
45d3: ae 62 54  -         ldx TEST_NAME_COUNT
45d6: e0 15     -         cpx #TESTS_PER_PAGE
45d8: d0 5d     -         bne !exit+
45da: ad 86 02  -         lda Two.CurrentCharColor
45dd: 48        -         pha
45de: a9 01     -         lda #color
45e0: 8d 86 02  -         sta Two.CurrentCharColor
45e3: a2 00     -         ldx #$00
45e5: bd f8 45  -         lda address,x
45e8: f0 07     -         beq !done+
45ea: 20 d2 ff  -         jsr Kernal.CHROUT
45ed: e8        -         inx
45ee: 4c e5 45  -         jmp !loop-
45f1: 68        -         pla
45f2: 8d 86 02  -         sta Two.CurrentCharColor
45f5: 4c 17 46  -         jmp !no_key+
45f8: 0d        - memory: .byte Petscii.RETURN
45f9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4609: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4615: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4617: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
461a: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
461d: f0 f8     -         beq !no_key-
461f: a2 00     -         ldx #$00
4621: bd 30 46  -         lda address,x
4624: f0 07     -         beq !done+
4626: 20 d2 ff  -         jsr Kernal.CHROUT
4629: e8        -         inx
462a: 4c 21 46  -         jmp !loop-
462d: 4c 32 46  -         jmp !done+
4630: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4632: a2 00     -         ldx #$00
4634: 8e 62 54  -         stx TEST_NAME_COUNT
4637: 60        -         rts
4638: ee 62 54  - BREAK_TEST:inc TEST_NAME_COUNT
463b: ad 86 02  -         lda Two.CurrentCharColor
463e: 48        -         pha
463f: a9 0f     -         lda #color
4641: 8d 86 02  -         sta Two.CurrentCharColor
4644: a2 00     -         ldx #$00
4646: bd 55 46  -         lda address,x
4649: f0 07     -         beq !done+
464b: 20 d2 ff  -         jsr Kernal.CHROUT
464e: e8        -         inx
464f: 4c 46 46  -         jmp !loop-
4652: 4c 5b 46  -         jmp !done+
4655: 42 52 45 41 4b                                   -         .text preprocessorString	// store in memory
465a: 00        -         .byte Petscii.NULL			// terminate
465b: 68        -         pla
465c: 8d 86 02  -         sta Two.CurrentCharColor
465f: 4c 6d 46  -         jmp !done+
4662: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4664: 42 52 45 41 4b                                   -         .text name
4669: 2e 2e 2e  -         .text "..."
466c: 00        -         .byte Petscii.NULL
466d: a9 35     -         lda #<address
466f: 8d 16 03  -         sta lowByte
4672: a9 12     -         lda #>address 
4674: 8d 17 03  -         sta highByte
4677: 20 08 10  -         jsr SW16
467a: 10        -         .byte opcode(op, register)
467b: ed fe     -         .word address.getValue()
467d: 0a        -         .byte $0a }
467e: 0d        -         .byte $0d
467f: 47        -         .byte >(address.getValue()-1)
4680: 6a        -         .byte <(address.getValue()-1)
4681: 10        -         .byte opcode(op, register)
4682: 23 01     -         .word address.getValue()
4684: 0a        -         .byte $0a }
4685: 00        -         .byte $00 }
4686: ee 60 54  -         inc TEST_COUNT
4689: ad 86 02  -         lda Two.CurrentCharColor
468c: 48        -         pha
468d: a9 0e     -         lda #color
468f: 8d 86 02  -         sta Two.CurrentCharColor
4692: a2 00     -         ldx #$00
4694: bd a7 46  -         lda address,x
4697: f0 07     -         beq !done+
4699: 20 d2 ff  -         jsr Kernal.CHROUT
469c: e8        -         inx
469d: 4c 94 46  -         jmp !loop-
46a0: 68        -         pla
46a1: 8d 86 02  -         sta Two.CurrentCharColor
46a4: 4c ab 46  -         jmp !done+
46a7: 20        - memory: .byte Petscii.SPACEBAR
46a8: 32        -         .text description
46a9: 3a        -         .text ":"
46aa: 00        -         .byte Petscii.NULL
46ab: a6 17     -         ldx rl(register.getValue())
46ad: a4 18     -         ldy rh(register.getValue())
46af: e0 23     -         cpx #<value
46b1: d0 25     -         bne !failed+
46b3: c0 01     -         cpy #>value
46b5: d0 21     -         bne !failed+
46b7: ee 61 54  -         inc TEST_PASS_COUNT
46ba: ad 86 02  -         lda Two.CurrentCharColor
46bd: 48        -         pha
46be: a9 05     -         lda #color
46c0: 8d 86 02  -         sta Two.CurrentCharColor
46c3: a2 00     -         ldx #$00
46c5: bd 5c 54  -         lda address,x
46c8: f0 07     -         beq !done+
46ca: 20 d2 ff  -         jsr Kernal.CHROUT
46cd: e8        -         inx
46ce: 4c c5 46  -         jmp !loop-
46d1: 68        -         pla
46d2: 8d 86 02  -         sta Two.CurrentCharColor
46d5: 4c f3 46  -         jmp !done+
46d8: ad 86 02  -         lda Two.CurrentCharColor
46db: 48        -         pha
46dc: a9 02     -         lda #color
46de: 8d 86 02  -         sta Two.CurrentCharColor
46e1: a2 00     -         ldx #$00
46e3: bd 5e 54  -         lda address,x
46e6: f0 07     -         beq !done+
46e8: 20 d2 ff  -         jsr Kernal.CHROUT
46eb: e8        -         inx
46ec: 4c e3 46  -         jmp !loop-
46ef: 68        -         pla
46f0: 8d 86 02  -         sta Two.CurrentCharColor
46f3: a2 00     -         ldx #$00
46f5: bd 04 47  -         lda address,x
46f8: f0 07     -         beq !done+
46fa: 20 d2 ff  -         jsr Kernal.CHROUT
46fd: e8        -         inx
46fe: 4c f5 46  -         jmp !loop-
4701: 4c 06 47  -         jmp !done+
4704: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4706: ae 62 54  -         ldx TEST_NAME_COUNT
4709: e0 15     -         cpx #TESTS_PER_PAGE
470b: d0 5d     -         bne !exit+
470d: ad 86 02  -         lda Two.CurrentCharColor
4710: 48        -         pha
4711: a9 01     -         lda #color
4713: 8d 86 02  -         sta Two.CurrentCharColor
4716: a2 00     -         ldx #$00
4718: bd 2b 47  -         lda address,x
471b: f0 07     -         beq !done+
471d: 20 d2 ff  -         jsr Kernal.CHROUT
4720: e8        -         inx
4721: 4c 18 47  -         jmp !loop-
4724: 68        -         pla
4725: 8d 86 02  -         sta Two.CurrentCharColor
4728: 4c 4a 47  -         jmp !no_key+
472b: 0d        - memory: .byte Petscii.RETURN
472c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
473c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4748: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
474a: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
474d: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
4750: f0 f8     -         beq !no_key-
4752: a2 00     -         ldx #$00
4754: bd 63 47  -         lda address,x
4757: f0 07     -         beq !done+
4759: 20 d2 ff  -         jsr Kernal.CHROUT
475c: e8        -         inx
475d: 4c 54 47  -         jmp !loop-
4760: 4c 65 47  -         jmp !done+
4763: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4765: a2 00     -         ldx #$00
4767: 8e 62 54  -         stx TEST_NAME_COUNT
476a: 60        -         rts
476b: ee 60 54  -         inc TEST_COUNT
476e: ad 86 02  -         lda Two.CurrentCharColor
4771: 48        -         pha
4772: a9 0e     -         lda #color
4774: 8d 86 02  -         sta Two.CurrentCharColor
4777: a2 00     -         ldx #$00
4779: bd 8c 47  -         lda address,x
477c: f0 07     -         beq !done+
477e: 20 d2 ff  -         jsr Kernal.CHROUT
4781: e8        -         inx
4782: 4c 79 47  -         jmp !loop-
4785: 68        -         pla
4786: 8d 86 02  -         sta Two.CurrentCharColor
4789: 4c 90 47  -         jmp !done+
478c: 20        - memory: .byte Petscii.SPACEBAR
478d: 31        -         .text description
478e: 3a        -         .text ":"
478f: 00        -         .byte Petscii.NULL
4790: a6 17     -         ldx rl(register.getValue())
4792: a4 18     -         ldy rh(register.getValue())
4794: e0 ed     -         cpx #<value
4796: d0 25     -         bne !failed+
4798: c0 fe     -         cpy #>value
479a: d0 21     -         bne !failed+
479c: ee 61 54  -         inc TEST_PASS_COUNT
479f: ad 86 02  -         lda Two.CurrentCharColor
47a2: 48        -         pha
47a3: a9 05     -         lda #color
47a5: 8d 86 02  -         sta Two.CurrentCharColor
47a8: a2 00     -         ldx #$00
47aa: bd 5c 54  -         lda address,x
47ad: f0 07     -         beq !done+
47af: 20 d2 ff  -         jsr Kernal.CHROUT
47b2: e8        -         inx
47b3: 4c aa 47  -         jmp !loop-
47b6: 68        -         pla
47b7: 8d 86 02  -         sta Two.CurrentCharColor
47ba: 4c d8 47  -         jmp !done+
47bd: ad 86 02  -         lda Two.CurrentCharColor
47c0: 48        -         pha
47c1: a9 02     -         lda #color
47c3: 8d 86 02  -         sta Two.CurrentCharColor
47c6: a2 00     -         ldx #$00
47c8: bd 5e 54  -         lda address,x
47cb: f0 07     -         beq !done+
47cd: 20 d2 ff  -         jsr Kernal.CHROUT
47d0: e8        -         inx
47d1: 4c c8 47  -         jmp !loop-
47d4: 68        -         pla
47d5: 8d 86 02  -         sta Two.CurrentCharColor
47d8: 60        -         rts
47d9: ee 62 54  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
47dc: ad 86 02  -         lda Two.CurrentCharColor
47df: 48        -         pha
47e0: a9 0f     -         lda #color
47e2: 8d 86 02  -         sta Two.CurrentCharColor
47e5: a2 00     -         ldx #$00
47e7: bd f6 47  -         lda address,x
47ea: f0 07     -         beq !done+
47ec: 20 d2 ff  -         jsr Kernal.CHROUT
47ef: e8        -         inx
47f0: 4c e7 47  -         jmp !loop-
47f3: 4c 00 48  -         jmp !done+
47f6: 49 4e 54 20 42 52 45 41 4b                       -         .text preprocessorString	// store in memory
47ff: 00        -         .byte Petscii.NULL			// terminate
4800: 68        -         pla
4801: 8d 86 02  -         sta Two.CurrentCharColor
4804: 4c 16 48  -         jmp !done+
4807: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4809: 49 4e 54 20 42 52 45 41 4b                       -         .text name
4812: 2e 2e 2e  -         .text "..."
4815: 00        -         .byte Petscii.NULL
4816: a9 86     -         lda #<address
4818: 8d 16 03  -         sta lowByte
481b: a9 49     -         lda #>address 
481d: 8d 17 03  -         sta highByte
4820: 20 08 10  -         jsr SW16
4823: 10        -         .byte opcode(op, register)
4824: ed fe     -         .word address.getValue()
4826: 0a        -         .byte $0a }
4827: 0d        -         .byte $0d
4828: 48        -         .byte >(address.getValue()-1)
4829: a9        -         .byte <(address.getValue()-1)
482a: 10        -         .byte opcode(op, register)
482b: 23 01     -         .word address.getValue()
482d: 0a        -         .byte $0a }
482e: 0d        -         .byte $0d
482f: 49        -         .byte >(address.getValue()-1)
4830: 17        -         .byte <(address.getValue()-1)
4831: 00        -         .byte $00 }
4832: a2 00     -         ldx #$00
4834: bd 43 48  -         lda address,x
4837: f0 07     -         beq !done+
4839: 20 d2 ff  -         jsr Kernal.CHROUT
483c: e8        -         inx
483d: 4c 34 48  -         jmp !loop-
4840: 4c 45 48  -         jmp !done+
4843: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4845: ae 62 54  -         ldx TEST_NAME_COUNT
4848: e0 15     -         cpx #TESTS_PER_PAGE
484a: d0 5d     -         bne !exit+
484c: ad 86 02  -         lda Two.CurrentCharColor
484f: 48        -         pha
4850: a9 01     -         lda #color
4852: 8d 86 02  -         sta Two.CurrentCharColor
4855: a2 00     -         ldx #$00
4857: bd 6a 48  -         lda address,x
485a: f0 07     -         beq !done+
485c: 20 d2 ff  -         jsr Kernal.CHROUT
485f: e8        -         inx
4860: 4c 57 48  -         jmp !loop-
4863: 68        -         pla
4864: 8d 86 02  -         sta Two.CurrentCharColor
4867: 4c 89 48  -         jmp !no_key+
486a: 0d        - memory: .byte Petscii.RETURN
486b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
487b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4887: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4889: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
488c: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
488f: f0 f8     -         beq !no_key-
4891: a2 00     -         ldx #$00
4893: bd a2 48  -         lda address,x
4896: f0 07     -         beq !done+
4898: 20 d2 ff  -         jsr Kernal.CHROUT
489b: e8        -         inx
489c: 4c 93 48  -         jmp !loop-
489f: 4c a4 48  -         jmp !done+
48a2: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
48a4: a2 00     -         ldx #$00
48a6: 8e 62 54  -         stx TEST_NAME_COUNT
48a9: 60        -         rts
48aa: ee 60 54  -         inc TEST_COUNT
48ad: ad 86 02  -         lda Two.CurrentCharColor
48b0: 48        -         pha
48b1: a9 0e     -         lda #color
48b3: 8d 86 02  -         sta Two.CurrentCharColor
48b6: a2 00     -         ldx #$00
48b8: bd cb 48  -         lda address,x
48bb: f0 07     -         beq !done+
48bd: 20 d2 ff  -         jsr Kernal.CHROUT
48c0: e8        -         inx
48c1: 4c b8 48  -         jmp !loop-
48c4: 68        -         pla
48c5: 8d 86 02  -         sta Two.CurrentCharColor
48c8: 4c cf 48  -         jmp !done+
48cb: 20        - memory: .byte Petscii.SPACEBAR
48cc: 31        -         .text description
48cd: 3a        -         .text ":"
48ce: 00        -         .byte Petscii.NULL
48cf: a6 17     -         ldx rl(register.getValue())
48d1: a4 18     -         ldy rh(register.getValue())
48d3: e0 ed     -         cpx #<value
48d5: d0 25     -         bne !failed+
48d7: c0 fe     -         cpy #>value
48d9: d0 21     -         bne !failed+
48db: ee 61 54  -         inc TEST_PASS_COUNT
48de: ad 86 02  -         lda Two.CurrentCharColor
48e1: 48        -         pha
48e2: a9 05     -         lda #color
48e4: 8d 86 02  -         sta Two.CurrentCharColor
48e7: a2 00     -         ldx #$00
48e9: bd 5c 54  -         lda address,x
48ec: f0 07     -         beq !done+
48ee: 20 d2 ff  -         jsr Kernal.CHROUT
48f1: e8        -         inx
48f2: 4c e9 48  -         jmp !loop-
48f5: 68        -         pla
48f6: 8d 86 02  -         sta Two.CurrentCharColor
48f9: 4c 17 49  -         jmp !done+
48fc: ad 86 02  -         lda Two.CurrentCharColor
48ff: 48        -         pha
4900: a9 02     -         lda #color
4902: 8d 86 02  -         sta Two.CurrentCharColor
4905: a2 00     -         ldx #$00
4907: bd 5e 54  -         lda address,x
490a: f0 07     -         beq !done+
490c: 20 d2 ff  -         jsr Kernal.CHROUT
490f: e8        -         inx
4910: 4c 07 49  -         jmp !loop-
4913: 68        -         pla
4914: 8d 86 02  -         sta Two.CurrentCharColor
4917: 60        -         rts
4918: ee 60 54  -         inc TEST_COUNT
491b: ad 86 02  -         lda Two.CurrentCharColor
491e: 48        -         pha
491f: a9 0e     -         lda #color
4921: 8d 86 02  -         sta Two.CurrentCharColor
4924: a2 00     -         ldx #$00
4926: bd 39 49  -         lda address,x
4929: f0 07     -         beq !done+
492b: 20 d2 ff  -         jsr Kernal.CHROUT
492e: e8        -         inx
492f: 4c 26 49  -         jmp !loop-
4932: 68        -         pla
4933: 8d 86 02  -         sta Two.CurrentCharColor
4936: 4c 3d 49  -         jmp !done+
4939: 20        - memory: .byte Petscii.SPACEBAR
493a: 32        -         .text description
493b: 3a        -         .text ":"
493c: 00        -         .byte Petscii.NULL
493d: a6 17     -         ldx rl(register.getValue())
493f: a4 18     -         ldy rh(register.getValue())
4941: e0 23     -         cpx #<value
4943: d0 25     -         bne !failed+
4945: c0 01     -         cpy #>value
4947: d0 21     -         bne !failed+
4949: ee 61 54  -         inc TEST_PASS_COUNT
494c: ad 86 02  -         lda Two.CurrentCharColor
494f: 48        -         pha
4950: a9 05     -         lda #color
4952: 8d 86 02  -         sta Two.CurrentCharColor
4955: a2 00     -         ldx #$00
4957: bd 5c 54  -         lda address,x
495a: f0 07     -         beq !done+
495c: 20 d2 ff  -         jsr Kernal.CHROUT
495f: e8        -         inx
4960: 4c 57 49  -         jmp !loop-
4963: 68        -         pla
4964: 8d 86 02  -         sta Two.CurrentCharColor
4967: 4c 85 49  -         jmp !done+
496a: ad 86 02  -         lda Two.CurrentCharColor
496d: 48        -         pha
496e: a9 02     -         lda #color
4970: 8d 86 02  -         sta Two.CurrentCharColor
4973: a2 00     -         ldx #$00
4975: bd 5e 54  -         lda address,x
4978: f0 07     -         beq !done+
497a: 20 d2 ff  -         jsr Kernal.CHROUT
497d: e8        -         inx
497e: 4c 75 49  -         jmp !loop-
4981: 68        -         pla
4982: 8d 86 02  -         sta Two.CurrentCharColor
4985: 60        -         rts
4986: 68        -         pla		// Y
4987: a8        -         tay		// restore Y
4988: 68        -         pla		// X
4989: aa        -         tax		// restore X
498a: 68        -         pla		// restore A
498b: 85 37     -         sta Sweet16_rl(Sweet16.ZP)
498d: 28        -         plp		// restore Status Flags
498e: 68        -         pla		// PCL discard - not useful
498f: 68        -         pla		// PCH discard - not useful
4990: a5 37     -         lda Sweet16_rl(Sweet16.ZP)
4992: 4c 24 10  -         jmp SW16D
4995: ee 62 54  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
4998: ad 86 02  -         lda Two.CurrentCharColor
499b: 48        -         pha
499c: a9 0f     -         lda #color
499e: 8d 86 02  -         sta Two.CurrentCharColor
49a1: a2 00     -         ldx #$00
49a3: bd b2 49  -         lda address,x
49a6: f0 07     -         beq !done+
49a8: 20 d2 ff  -         jsr Kernal.CHROUT
49ab: e8        -         inx
49ac: 4c a3 49  -         jmp !loop-
49af: 4c c0 49  -         jmp !done+
49b2: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text preprocessorString	// store in memory
49bf: 00        -         .byte Petscii.NULL			// terminate
49c0: 68        -         pla
49c1: 8d 86 02  -         sta Two.CurrentCharColor
49c4: 4c da 49  -         jmp !done+
49c7: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
49c9: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
49d6: 2e 2e 2e  -         .text "..."
49d9: 00        -         .byte Petscii.NULL
49da: 20 08 10  -         jsr SW16
49dd: 15        -         .byte opcode(op, register)
49de: 69 54     -         .word address.getValue()
49e0: 14        -         .byte opcode(op, register)
49e1: 79 54     -         .word address.getValue()
49e3: 16        -         .byte opcode(op, register)
49e4: 79 54     -         .word address.getValue()
49e6: 0c 04     -         .byte $0c, effective_address(ea,*) }
49e8: 00        -         .byte $00 }
49e9: 4c f3 49  -         jmp !done+
49ec: 45        -         .byte opcode($40, register) }
49ed: 56        -         .byte opcode($50, register) }
49ee: 24        -         .byte opcode($20, register) }
49ef: d5        -         .byte opcode($d0, register) }
49f0: 04 fa     -         .byte $04, effective_address(ea,*) }
49f2: 0b        -         .byte $0b }
49f3: ee 60 54  -         inc TEST_COUNT
49f6: ad 86 02  -         lda Two.CurrentCharColor
49f9: 48        -         pha
49fa: a9 0e     -         lda #color
49fc: 8d 86 02  -         sta Two.CurrentCharColor
49ff: a2 00     -         ldx #$00
4a01: bd 14 4a  -         lda address,x
4a04: f0 07     -         beq !done+
4a06: 20 d2 ff  -         jsr Kernal.CHROUT
4a09: e8        -         inx
4a0a: 4c 01 4a  -         jmp !loop-
4a0d: 68        -         pla
4a0e: 8d 86 02  -         sta Two.CurrentCharColor
4a11: 4c 1a 4a  -         jmp !done+
4a14: 20        - memory: .byte Petscii.SPACEBAR
4a15: 4d 45 4d  -         .text description
4a18: 3a        -         .text ":"
4a19: 00        -         .byte Petscii.NULL
4a1a: a2 ff     -         ldx #$ff
4a1c: e8        -         inx
4a1d: e0 10     -         cpx #size
4a1f: f0 0b     -         beq !success+
4a21: bd 69 54  -         lda source,x
4a24: dd 79 54  -         cmp dest,x
4a27: f0 f3     -         beq !loop-
4a29: 4c 4d 4a  -         jmp !failed+
4a2c: ee 61 54  -         inc TEST_PASS_COUNT
4a2f: ad 86 02  -         lda Two.CurrentCharColor
4a32: 48        -         pha
4a33: a9 05     -         lda #color
4a35: 8d 86 02  -         sta Two.CurrentCharColor
4a38: a2 00     -         ldx #$00
4a3a: bd 5c 54  -         lda address,x
4a3d: f0 07     -         beq !done+
4a3f: 20 d2 ff  -         jsr Kernal.CHROUT
4a42: e8        -         inx
4a43: 4c 3a 4a  -         jmp !loop-
4a46: 68        -         pla
4a47: 8d 86 02  -         sta Two.CurrentCharColor
4a4a: 4c 68 4a  -         jmp !done+
4a4d: ad 86 02  -         lda Two.CurrentCharColor
4a50: 48        -         pha
4a51: a9 02     -         lda #color
4a53: 8d 86 02  -         sta Two.CurrentCharColor
4a56: a2 00     -         ldx #$00
4a58: bd 5e 54  -         lda address,x
4a5b: f0 07     -         beq !done+
4a5d: 20 d2 ff  -         jsr Kernal.CHROUT
4a60: e8        -         inx
4a61: 4c 58 4a  -         jmp !loop-
4a64: 68        -         pla
4a65: 8d 86 02  -         sta Two.CurrentCharColor
4a68: a2 00     -         ldx #$00
4a6a: bd 79 4a  -         lda address,x
4a6d: f0 07     -         beq !done+
4a6f: 20 d2 ff  -         jsr Kernal.CHROUT
4a72: e8        -         inx
4a73: 4c 6a 4a  -         jmp !loop-
4a76: 4c 7b 4a  -         jmp !done+
4a79: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4a7b: ae 62 54  -         ldx TEST_NAME_COUNT
4a7e: e0 15     -         cpx #TESTS_PER_PAGE
4a80: d0 5d     -         bne !exit+
4a82: ad 86 02  -         lda Two.CurrentCharColor
4a85: 48        -         pha
4a86: a9 01     -         lda #color
4a88: 8d 86 02  -         sta Two.CurrentCharColor
4a8b: a2 00     -         ldx #$00
4a8d: bd a0 4a  -         lda address,x
4a90: f0 07     -         beq !done+
4a92: 20 d2 ff  -         jsr Kernal.CHROUT
4a95: e8        -         inx
4a96: 4c 8d 4a  -         jmp !loop-
4a99: 68        -         pla
4a9a: 8d 86 02  -         sta Two.CurrentCharColor
4a9d: 4c bf 4a  -         jmp !no_key+
4aa0: 0d        - memory: .byte Petscii.RETURN
4aa1: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4ab1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4abd: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4abf: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
4ac2: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
4ac5: f0 f8     -         beq !no_key-
4ac7: a2 00     -         ldx #$00
4ac9: bd d8 4a  -         lda address,x
4acc: f0 07     -         beq !done+
4ace: 20 d2 ff  -         jsr Kernal.CHROUT
4ad1: e8        -         inx
4ad2: 4c c9 4a  -         jmp !loop-
4ad5: 4c da 4a  -         jmp !done+
4ad8: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4ada: a2 00     -         ldx #$00
4adc: 8e 62 54  -         stx TEST_NAME_COUNT
4adf: 60        -         rts
4ae0: ee 62 54  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
4ae3: ad 86 02  -         lda Two.CurrentCharColor
4ae6: 48        -         pha
4ae7: a9 0f     -         lda #color
4ae9: 8d 86 02  -         sta Two.CurrentCharColor
4aec: a2 00     -         ldx #$00
4aee: bd fd 4a  -         lda address,x
4af1: f0 07     -         beq !done+
4af3: 20 d2 ff  -         jsr Kernal.CHROUT
4af6: e8        -         inx
4af7: 4c ee 4a  -         jmp !loop-
4afa: 4c 0d 4b  -         jmp !done+
4afd: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text preprocessorString	// store in memory
4b0c: 00        -         .byte Petscii.NULL			// terminate
4b0d: 68        -         pla
4b0e: 8d 86 02  -         sta Two.CurrentCharColor
4b11: 4c 29 4b  -         jmp !done+
4b14: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4b16: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
4b25: 2e 2e 2e  -         .text "..."
4b28: 00        -         .byte Petscii.NULL
4b29: 20 08 10  -         jsr SW16
4b2c: 10        -         .byte opcode(op, register)
4b2d: 34 12     -         .word address.getValue()
4b2f: 0c 04     -         .byte $0c, effective_address(ea,*) }
4b31: 00        -         .byte $00 }
4b32: 4c 39 4b  -         jmp !done+
4b35: 10        -         .byte opcode(op, register)
4b36: 78 56     -         .word address.getValue()
4b38: 0b        -         .byte $0b }
4b39: ee 60 54  -         inc TEST_COUNT
4b3c: ad 86 02  -         lda Two.CurrentCharColor
4b3f: 48        -         pha
4b40: a9 0e     -         lda #color
4b42: 8d 86 02  -         sta Two.CurrentCharColor
4b45: a2 00     -         ldx #$00
4b47: bd 5a 4b  -         lda address,x
4b4a: f0 07     -         beq !done+
4b4c: 20 d2 ff  -         jsr Kernal.CHROUT
4b4f: e8        -         inx
4b50: 4c 47 4b  -         jmp !loop-
4b53: 68        -         pla
4b54: 8d 86 02  -         sta Two.CurrentCharColor
4b57: 4c 60 4b  -         jmp !done+
4b5a: 20        - memory: .byte Petscii.SPACEBAR
4b5b: 53 55 42  -         .text description
4b5e: 3a        -         .text ":"
4b5f: 00        -         .byte Petscii.NULL
4b60: a6 17     -         ldx rl(register.getValue())
4b62: a4 18     -         ldy rh(register.getValue())
4b64: e0 78     -         cpx #<value
4b66: d0 25     -         bne !failed+
4b68: c0 56     -         cpy #>value
4b6a: d0 21     -         bne !failed+
4b6c: ee 61 54  -         inc TEST_PASS_COUNT
4b6f: ad 86 02  -         lda Two.CurrentCharColor
4b72: 48        -         pha
4b73: a9 05     -         lda #color
4b75: 8d 86 02  -         sta Two.CurrentCharColor
4b78: a2 00     -         ldx #$00
4b7a: bd 5c 54  -         lda address,x
4b7d: f0 07     -         beq !done+
4b7f: 20 d2 ff  -         jsr Kernal.CHROUT
4b82: e8        -         inx
4b83: 4c 7a 4b  -         jmp !loop-
4b86: 68        -         pla
4b87: 8d 86 02  -         sta Two.CurrentCharColor
4b8a: 4c a8 4b  -         jmp !done+
4b8d: ad 86 02  -         lda Two.CurrentCharColor
4b90: 48        -         pha
4b91: a9 02     -         lda #color
4b93: 8d 86 02  -         sta Two.CurrentCharColor
4b96: a2 00     -         ldx #$00
4b98: bd 5e 54  -         lda address,x
4b9b: f0 07     -         beq !done+
4b9d: 20 d2 ff  -         jsr Kernal.CHROUT
4ba0: e8        -         inx
4ba1: 4c 98 4b  -         jmp !loop-
4ba4: 68        -         pla
4ba5: 8d 86 02  -         sta Two.CurrentCharColor
4ba8: a2 00     -         ldx #$00
4baa: bd b9 4b  -         lda address,x
4bad: f0 07     -         beq !done+
4baf: 20 d2 ff  -         jsr Kernal.CHROUT
4bb2: e8        -         inx
4bb3: 4c aa 4b  -         jmp !loop-
4bb6: 4c bb 4b  -         jmp !done+
4bb9: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4bbb: ae 62 54  -         ldx TEST_NAME_COUNT
4bbe: e0 15     -         cpx #TESTS_PER_PAGE
4bc0: d0 5d     -         bne !exit+
4bc2: ad 86 02  -         lda Two.CurrentCharColor
4bc5: 48        -         pha
4bc6: a9 01     -         lda #color
4bc8: 8d 86 02  -         sta Two.CurrentCharColor
4bcb: a2 00     -         ldx #$00
4bcd: bd e0 4b  -         lda address,x
4bd0: f0 07     -         beq !done+
4bd2: 20 d2 ff  -         jsr Kernal.CHROUT
4bd5: e8        -         inx
4bd6: 4c cd 4b  -         jmp !loop-
4bd9: 68        -         pla
4bda: 8d 86 02  -         sta Two.CurrentCharColor
4bdd: 4c ff 4b  -         jmp !no_key+
4be0: 0d        - memory: .byte Petscii.RETURN
4be1: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4bf1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4bfd: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4bff: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
4c02: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
4c05: f0 f8     -         beq !no_key-
4c07: a2 00     -         ldx #$00
4c09: bd 18 4c  -         lda address,x
4c0c: f0 07     -         beq !done+
4c0e: 20 d2 ff  -         jsr Kernal.CHROUT
4c11: e8        -         inx
4c12: 4c 09 4c  -         jmp !loop-
4c15: 4c 1a 4c  -         jmp !done+
4c18: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4c1a: a2 00     -         ldx #$00
4c1c: 8e 62 54  -         stx TEST_NAME_COUNT
4c1f: 60        -         rts
4c20: ee 62 54  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
4c23: ad 86 02  -         lda Two.CurrentCharColor
4c26: 48        -         pha
4c27: a9 0f     -         lda #color
4c29: 8d 86 02  -         sta Two.CurrentCharColor
4c2c: a2 00     -         ldx #$00
4c2e: bd 3d 4c  -         lda address,x
4c31: f0 07     -         beq !done+
4c33: 20 d2 ff  -         jsr Kernal.CHROUT
4c36: e8        -         inx
4c37: 4c 2e 4c  -         jmp !loop-
4c3a: 4c 4b 4c  -         jmp !done+
4c3d: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text preprocessorString	// store in memory
4c4a: 00        -         .byte Petscii.NULL			// terminate
4c4b: 68        -         pla
4c4c: 8d 86 02  -         sta Two.CurrentCharColor
4c4f: 4c 65 4c  -         jmp !done+
4c52: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4c54: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
4c61: 2e 2e 2e  -         .text "..."
4c64: 00        -         .byte Petscii.NULL
4c65: 20 08 10  -         jsr SW16
4c68: 15        -         .byte opcode(op, register)
4c69: 00 00     -         .word address.getValue()
4c6b: 10        -         .byte opcode(op, register)
4c6c: 56 4d     -         .word address.getValue()
4c6e: 3f        -         .byte opcode($30, register) }
4c6f: 00        -         .byte $00 }
4c70: ee 60 54  -         inc TEST_COUNT
4c73: ad 86 02  -         lda Two.CurrentCharColor
4c76: 48        -         pha
4c77: a9 0e     -         lda #color
4c79: 8d 86 02  -         sta Two.CurrentCharColor
4c7c: a2 00     -         ldx #$00
4c7e: bd 91 4c  -         lda address,x
4c81: f0 07     -         beq !done+
4c83: 20 d2 ff  -         jsr Kernal.CHROUT
4c86: e8        -         inx
4c87: 4c 7e 4c  -         jmp !loop-
4c8a: 68        -         pla
4c8b: 8d 86 02  -         sta Two.CurrentCharColor
4c8e: 4c 97 4c  -         jmp !done+
4c91: 20        - memory: .byte Petscii.SPACEBAR
4c92: 53 45 54  -         .text description
4c95: 3a        -         .text ":"
4c96: 00        -         .byte Petscii.NULL
4c97: a6 21     -         ldx rl(register.getValue())
4c99: a4 22     -         ldy rh(register.getValue())
4c9b: e0 34     -         cpx #<value
4c9d: d0 25     -         bne !failed+
4c9f: c0 12     -         cpy #>value
4ca1: d0 21     -         bne !failed+
4ca3: ee 61 54  -         inc TEST_PASS_COUNT
4ca6: ad 86 02  -         lda Two.CurrentCharColor
4ca9: 48        -         pha
4caa: a9 05     -         lda #color
4cac: 8d 86 02  -         sta Two.CurrentCharColor
4caf: a2 00     -         ldx #$00
4cb1: bd 5c 54  -         lda address,x
4cb4: f0 07     -         beq !done+
4cb6: 20 d2 ff  -         jsr Kernal.CHROUT
4cb9: e8        -         inx
4cba: 4c b1 4c  -         jmp !loop-
4cbd: 68        -         pla
4cbe: 8d 86 02  -         sta Two.CurrentCharColor
4cc1: 4c df 4c  -         jmp !done+
4cc4: ad 86 02  -         lda Two.CurrentCharColor
4cc7: 48        -         pha
4cc8: a9 02     -         lda #color
4cca: 8d 86 02  -         sta Two.CurrentCharColor
4ccd: a2 00     -         ldx #$00
4ccf: bd 5e 54  -         lda address,x
4cd2: f0 07     -         beq !done+
4cd4: 20 d2 ff  -         jsr Kernal.CHROUT
4cd7: e8        -         inx
4cd8: 4c cf 4c  -         jmp !loop-
4cdb: 68        -         pla
4cdc: 8d 86 02  -         sta Two.CurrentCharColor
4cdf: a2 00     -         ldx #$00
4ce1: bd f0 4c  -         lda address,x
4ce4: f0 07     -         beq !done+
4ce6: 20 d2 ff  -         jsr Kernal.CHROUT
4ce9: e8        -         inx
4cea: 4c e1 4c  -         jmp !loop-
4ced: 4c f2 4c  -         jmp !done+
4cf0: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4cf2: ae 62 54  -         ldx TEST_NAME_COUNT
4cf5: e0 15     -         cpx #TESTS_PER_PAGE
4cf7: d0 5d     -         bne !exit+
4cf9: ad 86 02  -         lda Two.CurrentCharColor
4cfc: 48        -         pha
4cfd: a9 01     -         lda #color
4cff: 8d 86 02  -         sta Two.CurrentCharColor
4d02: a2 00     -         ldx #$00
4d04: bd 17 4d  -         lda address,x
4d07: f0 07     -         beq !done+
4d09: 20 d2 ff  -         jsr Kernal.CHROUT
4d0c: e8        -         inx
4d0d: 4c 04 4d  -         jmp !loop-
4d10: 68        -         pla
4d11: 8d 86 02  -         sta Two.CurrentCharColor
4d14: 4c 36 4d  -         jmp !no_key+
4d17: 0d        - memory: .byte Petscii.RETURN
4d18: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4d28: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4d34: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4d36: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
4d39: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
4d3c: f0 f8     -         beq !no_key-
4d3e: a2 00     -         ldx #$00
4d40: bd 4f 4d  -         lda address,x
4d43: f0 07     -         beq !done+
4d45: 20 d2 ff  -         jsr Kernal.CHROUT
4d48: e8        -         inx
4d49: 4c 40 4d  -         jmp !loop-
4d4c: 4c 51 4d  -         jmp !done+
4d4f: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4d51: a2 00     -         ldx #$00
4d53: 8e 62 54  -         stx TEST_NAME_COUNT
4d56: 60        -         rts
4d57: 15        -         .byte opcode(op, register)
4d58: 34 12     -         .word address.getValue()
4d5a: 10        -         .byte opcode(op, register)
4d5b: 6e 4c     -         .word address.getValue()
4d5d: 3f        -         .byte opcode($30, register) }
4d5e: ee 62 54  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
4d61: ad 86 02  -         lda Two.CurrentCharColor
4d64: 48        -         pha
4d65: a9 0f     -         lda #color
4d67: 8d 86 02  -         sta Two.CurrentCharColor
4d6a: a2 00     -         ldx #$00
4d6c: bd 7b 4d  -         lda address,x
4d6f: f0 07     -         beq !done+
4d71: 20 d2 ff  -         jsr Kernal.CHROUT
4d74: e8        -         inx
4d75: 4c 6c 4d  -         jmp !loop-
4d78: 4c 88 4d  -         jmp !done+
4d7b: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text preprocessorString	// store in memory
4d87: 00        -         .byte Petscii.NULL			// terminate
4d88: 68        -         pla
4d89: 8d 86 02  -         sta Two.CurrentCharColor
4d8c: 4c a1 4d  -         jmp !done+
4d8f: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4d91: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
4d9d: 2e 2e 2e  -         .text "..."
4da0: 00        -         .byte Petscii.NULL
4da1: 20 08 10  -         jsr SW16
4da4: 15        -         .byte opcode(op, register)
4da5: 21 43     -         .word address.getValue()
4da7: 0d        -         .byte $0d
4da8: 4e        -         .byte >(address.getValue()-1)
4da9: 9b        -         .byte <(address.getValue()-1)
4daa: 15        -         .byte opcode(op, register)
4dab: 34 12     -         .word address.getValue()
4dad: 0d        -         .byte $0d
4dae: 4f        -         .byte >(address.getValue()-1)
4daf: 0d        -         .byte <(address.getValue()-1)
4db0: 15        -         .byte opcode(op, register)
4db1: 21 43     -         .word address.getValue()
4db3: 00        -         .byte $00 }
4db4: ee 60 54  -         inc TEST_COUNT
4db7: ad 86 02  -         lda Two.CurrentCharColor
4dba: 48        -         pha
4dbb: a9 0e     -         lda #color
4dbd: 8d 86 02  -         sta Two.CurrentCharColor
4dc0: a2 00     -         ldx #$00
4dc2: bd d5 4d  -         lda address,x
4dc5: f0 07     -         beq !done+
4dc7: 20 d2 ff  -         jsr Kernal.CHROUT
4dca: e8        -         inx
4dcb: 4c c2 4d  -         jmp !loop-
4dce: 68        -         pla
4dcf: 8d 86 02  -         sta Two.CurrentCharColor
4dd2: 4c dc 4d  -         jmp !done+
4dd5: 20        - memory: .byte Petscii.SPACEBAR
4dd6: 53 41 4d 45                                      -         .text description
4dda: 3a        -         .text ":"
4ddb: 00        -         .byte Petscii.NULL
4ddc: a6 21     -         ldx rl(register.getValue())
4dde: a4 22     -         ldy rh(register.getValue())
4de0: e0 21     -         cpx #<value
4de2: d0 25     -         bne !failed+
4de4: c0 43     -         cpy #>value
4de6: d0 21     -         bne !failed+
4de8: ee 61 54  -         inc TEST_PASS_COUNT
4deb: ad 86 02  -         lda Two.CurrentCharColor
4dee: 48        -         pha
4def: a9 05     -         lda #color
4df1: 8d 86 02  -         sta Two.CurrentCharColor
4df4: a2 00     -         ldx #$00
4df6: bd 5c 54  -         lda address,x
4df9: f0 07     -         beq !done+
4dfb: 20 d2 ff  -         jsr Kernal.CHROUT
4dfe: e8        -         inx
4dff: 4c f6 4d  -         jmp !loop-
4e02: 68        -         pla
4e03: 8d 86 02  -         sta Two.CurrentCharColor
4e06: 4c 24 4e  -         jmp !done+
4e09: ad 86 02  -         lda Two.CurrentCharColor
4e0c: 48        -         pha
4e0d: a9 02     -         lda #color
4e0f: 8d 86 02  -         sta Two.CurrentCharColor
4e12: a2 00     -         ldx #$00
4e14: bd 5e 54  -         lda address,x
4e17: f0 07     -         beq !done+
4e19: 20 d2 ff  -         jsr Kernal.CHROUT
4e1c: e8        -         inx
4e1d: 4c 14 4e  -         jmp !loop-
4e20: 68        -         pla
4e21: 8d 86 02  -         sta Two.CurrentCharColor
4e24: a2 00     -         ldx #$00
4e26: bd 35 4e  -         lda address,x
4e29: f0 07     -         beq !done+
4e2b: 20 d2 ff  -         jsr Kernal.CHROUT
4e2e: e8        -         inx
4e2f: 4c 26 4e  -         jmp !loop-
4e32: 4c 37 4e  -         jmp !done+
4e35: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
4e37: ae 62 54  -         ldx TEST_NAME_COUNT
4e3a: e0 15     -         cpx #TESTS_PER_PAGE
4e3c: d0 5d     -         bne !exit+
4e3e: ad 86 02  -         lda Two.CurrentCharColor
4e41: 48        -         pha
4e42: a9 01     -         lda #color
4e44: 8d 86 02  -         sta Two.CurrentCharColor
4e47: a2 00     -         ldx #$00
4e49: bd 5c 4e  -         lda address,x
4e4c: f0 07     -         beq !done+
4e4e: 20 d2 ff  -         jsr Kernal.CHROUT
4e51: e8        -         inx
4e52: 4c 49 4e  -         jmp !loop-
4e55: 68        -         pla
4e56: 8d 86 02  -         sta Two.CurrentCharColor
4e59: 4c 7b 4e  -         jmp !no_key+
4e5c: 0d        - memory: .byte Petscii.RETURN
4e5d: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4e6d: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4e79: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4e7b: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
4e7e: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
4e81: f0 f8     -         beq !no_key-
4e83: a2 00     -         ldx #$00
4e85: bd 94 4e  -         lda address,x
4e88: f0 07     -         beq !done+
4e8a: 20 d2 ff  -         jsr Kernal.CHROUT
4e8d: e8        -         inx
4e8e: 4c 85 4e  -         jmp !loop-
4e91: 4c 96 4e  -         jmp !done+
4e94: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
4e96: a2 00     -         ldx #$00
4e98: 8e 62 54  -         stx TEST_NAME_COUNT
4e9b: 60        -         rts
4e9c: ee 60 54  -         inc TEST_COUNT
4e9f: ad 86 02  -         lda Two.CurrentCharColor
4ea2: 48        -         pha
4ea3: a9 0e     -         lda #color
4ea5: 8d 86 02  -         sta Two.CurrentCharColor
4ea8: a2 00     -         ldx #$00
4eaa: bd bd 4e  -         lda address,x
4ead: f0 07     -         beq !done+
4eaf: 20 d2 ff  -         jsr Kernal.CHROUT
4eb2: e8        -         inx
4eb3: 4c aa 4e  -         jmp !loop-
4eb6: 68        -         pla
4eb7: 8d 86 02  -         sta Two.CurrentCharColor
4eba: 4c c5 4e  -         jmp !done+
4ebd: 20        - memory: .byte Petscii.SPACEBAR
4ebe: 56 41 4c 55 45                                   -         .text description
4ec3: 3a        -         .text ":"
4ec4: 00        -         .byte Petscii.NULL
4ec5: a6 21     -         ldx rl(register.getValue())
4ec7: a4 22     -         ldy rh(register.getValue())
4ec9: e0 21     -         cpx #<value
4ecb: d0 25     -         bne !failed+
4ecd: c0 43     -         cpy #>value
4ecf: d0 21     -         bne !failed+
4ed1: ee 61 54  -         inc TEST_PASS_COUNT
4ed4: ad 86 02  -         lda Two.CurrentCharColor
4ed7: 48        -         pha
4ed8: a9 05     -         lda #color
4eda: 8d 86 02  -         sta Two.CurrentCharColor
4edd: a2 00     -         ldx #$00
4edf: bd 5c 54  -         lda address,x
4ee2: f0 07     -         beq !done+
4ee4: 20 d2 ff  -         jsr Kernal.CHROUT
4ee7: e8        -         inx
4ee8: 4c df 4e  -         jmp !loop-
4eeb: 68        -         pla
4eec: 8d 86 02  -         sta Two.CurrentCharColor
4eef: 4c 0d 4f  -         jmp !done+
4ef2: ad 86 02  -         lda Two.CurrentCharColor
4ef5: 48        -         pha
4ef6: a9 02     -         lda #color
4ef8: 8d 86 02  -         sta Two.CurrentCharColor
4efb: a2 00     -         ldx #$00
4efd: bd 5e 54  -         lda address,x
4f00: f0 07     -         beq !done+
4f02: 20 d2 ff  -         jsr Kernal.CHROUT
4f05: e8        -         inx
4f06: 4c fd 4e  -         jmp !loop-
4f09: 68        -         pla
4f0a: 8d 86 02  -         sta Two.CurrentCharColor
4f0d: 60        -         rts
4f0e: a9 fe     -         lda #>VALUE_3
4f10: 85 22     -         sta Sweet16_rh(REGISTER)
4f12: a9 ed     -         lda #<VALUE_3
4f14: 85 21     -         sta Sweet16_rl(REGISTER)
4f16: a6 21     -         ldx rl(register.getValue())
4f18: a4 22     -         ldy rh(register.getValue())
4f1a: ee 60 54  -         inc TEST_COUNT
4f1d: ad 86 02  -         lda Two.CurrentCharColor
4f20: 48        -         pha
4f21: a9 0e     -         lda #color
4f23: 8d 86 02  -         sta Two.CurrentCharColor
4f26: a2 00     -         ldx #$00
4f28: bd 3b 4f  -         lda address,x
4f2b: f0 07     -         beq !done+
4f2d: 20 d2 ff  -         jsr Kernal.CHROUT
4f30: e8        -         inx
4f31: 4c 28 4f  -         jmp !loop-
4f34: 68        -         pla
4f35: 8d 86 02  -         sta Two.CurrentCharColor
4f38: 4c 42 4f  -         jmp !done+
4f3b: 20        - memory: .byte Petscii.SPACEBAR
4f3c: 36 35 30 32                                      -         .text description
4f40: 3a        -         .text ":"
4f41: 00        -         .byte Petscii.NULL
4f42: a6 21     -         ldx rl(register.getValue())
4f44: a4 22     -         ldy rh(register.getValue())
4f46: e0 ed     -         cpx #<value
4f48: d0 25     -         bne !failed+
4f4a: c0 fe     -         cpy #>value
4f4c: d0 21     -         bne !failed+
4f4e: ee 61 54  -         inc TEST_PASS_COUNT
4f51: ad 86 02  -         lda Two.CurrentCharColor
4f54: 48        -         pha
4f55: a9 05     -         lda #color
4f57: 8d 86 02  -         sta Two.CurrentCharColor
4f5a: a2 00     -         ldx #$00
4f5c: bd 5c 54  -         lda address,x
4f5f: f0 07     -         beq !done+
4f61: 20 d2 ff  -         jsr Kernal.CHROUT
4f64: e8        -         inx
4f65: 4c 5c 4f  -         jmp !loop-
4f68: 68        -         pla
4f69: 8d 86 02  -         sta Two.CurrentCharColor
4f6c: 4c 8a 4f  -         jmp !done+
4f6f: ad 86 02  -         lda Two.CurrentCharColor
4f72: 48        -         pha
4f73: a9 02     -         lda #color
4f75: 8d 86 02  -         sta Two.CurrentCharColor
4f78: a2 00     -         ldx #$00
4f7a: bd 5e 54  -         lda address,x
4f7d: f0 07     -         beq !done+
4f7f: 20 d2 ff  -         jsr Kernal.CHROUT
4f82: e8        -         inx
4f83: 4c 7a 4f  -         jmp !loop-
4f86: 68        -         pla
4f87: 8d 86 02  -         sta Two.CurrentCharColor
4f8a: 60        -         rts
4f8b: ee 62 54  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
4f8e: ad 86 02  -         lda Two.CurrentCharColor
4f91: 48        -         pha
4f92: a9 0f     -         lda #color
4f94: 8d 86 02  -         sta Two.CurrentCharColor
4f97: a2 00     -         ldx #$00
4f99: bd a8 4f  -         lda address,x
4f9c: f0 07     -         beq !done+
4f9e: 20 d2 ff  -         jsr Kernal.CHROUT
4fa1: e8        -         inx
4fa2: 4c 99 4f  -         jmp !loop-
4fa5: 4c b5 4f  -         jmp !done+
4fa8: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text preprocessorString	// store in memory
4fb4: 00        -         .byte Petscii.NULL			// terminate
4fb5: 68        -         pla
4fb6: 8d 86 02  -         sta Two.CurrentCharColor
4fb9: 4c ce 4f  -         jmp !done+
4fbc: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
4fbe: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
4fca: 2e 2e 2e  -         .text "..."
4fcd: 00        -         .byte Petscii.NULL
4fce: 20 08 10  -         jsr SW16
4fd1: 0f        -         .byte $0f
4fd2: 63 54     -         .word address.getValue()
4fd4: 21        -         .byte rl(register.getValue())
4fd5: 00        -         .byte $00 }
4fd6: ee 60 54  -         inc TEST_COUNT
4fd9: ad 86 02  -         lda Two.CurrentCharColor
4fdc: 48        -         pha
4fdd: a9 0e     -         lda #color
4fdf: 8d 86 02  -         sta Two.CurrentCharColor
4fe2: a2 00     -         ldx #$00
4fe4: bd f7 4f  -         lda address,x
4fe7: f0 07     -         beq !done+
4fe9: 20 d2 ff  -         jsr Kernal.CHROUT
4fec: e8        -         inx
4fed: 4c e4 4f  -         jmp !loop-
4ff0: 68        -         pla
4ff1: 8d 86 02  -         sta Two.CurrentCharColor
4ff4: 4c 02 50  -         jmp !done+
4ff7: 20        - memory: .byte Petscii.SPACEBAR
4ff8: 54 45 53 54 20 4d 45 4d                          -         .text description
5000: 3a        -         .text ":"
5001: 00        -         .byte Petscii.NULL
5002: a6 21     -         ldx rl(register.getValue())
5004: a4 22     -         ldy rh(register.getValue())
5006: cc 63 54  -         cpy address
5009: d0 26     -         bne !failed+
500b: ec 64 54  -         cpx address+1
500e: d0 21     -         bne !failed+
5010: ee 61 54  -         inc TEST_PASS_COUNT
5013: ad 86 02  -         lda Two.CurrentCharColor
5016: 48        -         pha
5017: a9 05     -         lda #color
5019: 8d 86 02  -         sta Two.CurrentCharColor
501c: a2 00     -         ldx #$00
501e: bd 5c 54  -         lda address,x
5021: f0 07     -         beq !done+
5023: 20 d2 ff  -         jsr Kernal.CHROUT
5026: e8        -         inx
5027: 4c 1e 50  -         jmp !loop-
502a: 68        -         pla
502b: 8d 86 02  -         sta Two.CurrentCharColor
502e: 4c 4c 50  -         jmp !done+
5031: ad 86 02  -         lda Two.CurrentCharColor
5034: 48        -         pha
5035: a9 02     -         lda #color
5037: 8d 86 02  -         sta Two.CurrentCharColor
503a: a2 00     -         ldx #$00
503c: bd 5e 54  -         lda address,x
503f: f0 07     -         beq !done+
5041: 20 d2 ff  -         jsr Kernal.CHROUT
5044: e8        -         inx
5045: 4c 3c 50  -         jmp !loop-
5048: 68        -         pla
5049: 8d 86 02  -         sta Two.CurrentCharColor
504c: a2 00     -         ldx #$00
504e: bd 5d 50  -         lda address,x
5051: f0 07     -         beq !done+
5053: 20 d2 ff  -         jsr Kernal.CHROUT
5056: e8        -         inx
5057: 4c 4e 50  -         jmp !loop-
505a: 4c 5f 50  -         jmp !done+
505d: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
505f: ae 62 54  -         ldx TEST_NAME_COUNT
5062: e0 15     -         cpx #TESTS_PER_PAGE
5064: d0 5d     -         bne !exit+
5066: ad 86 02  -         lda Two.CurrentCharColor
5069: 48        -         pha
506a: a9 01     -         lda #color
506c: 8d 86 02  -         sta Two.CurrentCharColor
506f: a2 00     -         ldx #$00
5071: bd 84 50  -         lda address,x
5074: f0 07     -         beq !done+
5076: 20 d2 ff  -         jsr Kernal.CHROUT
5079: e8        -         inx
507a: 4c 71 50  -         jmp !loop-
507d: 68        -         pla
507e: 8d 86 02  -         sta Two.CurrentCharColor
5081: 4c a3 50  -         jmp !no_key+
5084: 0d        - memory: .byte Petscii.RETURN
5085: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
5095: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
50a1: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
50a3: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
50a6: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
50a9: f0 f8     -         beq !no_key-
50ab: a2 00     -         ldx #$00
50ad: bd bc 50  -         lda address,x
50b0: f0 07     -         beq !done+
50b2: 20 d2 ff  -         jsr Kernal.CHROUT
50b5: e8        -         inx
50b6: 4c ad 50  -         jmp !loop-
50b9: 4c be 50  -         jmp !done+
50bc: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
50be: a2 00     -         ldx #$00
50c0: 8e 62 54  -         stx TEST_NAME_COUNT
50c3: 60        -         rts
50c4: ee 62 54  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
50c7: ad 86 02  -         lda Two.CurrentCharColor
50ca: 48        -         pha
50cb: a9 0f     -         lda #color
50cd: 8d 86 02  -         sta Two.CurrentCharColor
50d0: a2 00     -         ldx #$00
50d2: bd e1 50  -         lda address,x
50d5: f0 07     -         beq !done+
50d7: 20 d2 ff  -         jsr Kernal.CHROUT
50da: e8        -         inx
50db: 4c d2 50  -         jmp !loop-
50de: 4c ec 50  -         jmp !done+
50e1: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text preprocessorString	// store in memory
50eb: 00        -         .byte Petscii.NULL			// terminate
50ec: 68        -         pla
50ed: 8d 86 02  -         sta Two.CurrentCharColor
50f0: 4c 03 51  -         jmp !done+
50f3: 20 20     - memory: .fill spacing, Petscii.SPACEBAR
50f5: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
50ff: 2e 2e 2e  -         .text "..."
5102: 00        -         .byte Petscii.NULL
5103: 20 08 10  -         jsr SW16
5106: 0e        -         .byte $0e
5107: 63 54     -         .word address.getValue()
5109: 21        -         .byte rl(register.getValue())
510a: 00        -         .byte $00 }
510b: ee 60 54  -         inc TEST_COUNT
510e: ad 86 02  -         lda Two.CurrentCharColor
5111: 48        -         pha
5112: a9 0e     -         lda #color
5114: 8d 86 02  -         sta Two.CurrentCharColor
5117: a2 00     -         ldx #$00
5119: bd 2c 51  -         lda address,x
511c: f0 07     -         beq !done+
511e: 20 d2 ff  -         jsr Kernal.CHROUT
5121: e8        -         inx
5122: 4c 19 51  -         jmp !loop-
5125: 68        -         pla
5126: 8d 86 02  -         sta Two.CurrentCharColor
5129: 4c 37 51  -         jmp !done+
512c: 20        - memory: .byte Petscii.SPACEBAR
512d: 54 45 53 54 20 4d 45 4d                          -         .text description
5135: 3a        -         .text ":"
5136: 00        -         .byte Petscii.NULL
5137: a6 21     -         ldx rl(register.getValue())
5139: a4 22     -         ldy rh(register.getValue())
513b: ec 63 54  -         cpx address
513e: d0 26     -         bne !failed+
5140: cc 64 54  -         cpy address+1
5143: d0 21     -         bne !failed+
5145: ee 61 54  -         inc TEST_PASS_COUNT
5148: ad 86 02  -         lda Two.CurrentCharColor
514b: 48        -         pha
514c: a9 05     -         lda #color
514e: 8d 86 02  -         sta Two.CurrentCharColor
5151: a2 00     -         ldx #$00
5153: bd 5c 54  -         lda address,x
5156: f0 07     -         beq !done+
5158: 20 d2 ff  -         jsr Kernal.CHROUT
515b: e8        -         inx
515c: 4c 53 51  -         jmp !loop-
515f: 68        -         pla
5160: 8d 86 02  -         sta Two.CurrentCharColor
5163: 4c 81 51  -         jmp !done+
5166: ad 86 02  -         lda Two.CurrentCharColor
5169: 48        -         pha
516a: a9 02     -         lda #color
516c: 8d 86 02  -         sta Two.CurrentCharColor
516f: a2 00     -         ldx #$00
5171: bd 5e 54  -         lda address,x
5174: f0 07     -         beq !done+
5176: 20 d2 ff  -         jsr Kernal.CHROUT
5179: e8        -         inx
517a: 4c 71 51  -         jmp !loop-
517d: 68        -         pla
517e: 8d 86 02  -         sta Two.CurrentCharColor
5181: a2 00     -         ldx #$00
5183: bd 92 51  -         lda address,x
5186: f0 07     -         beq !done+
5188: 20 d2 ff  -         jsr Kernal.CHROUT
518b: e8        -         inx
518c: 4c 83 51  -         jmp !loop-
518f: 4c 94 51  -         jmp !done+
5192: 0d 00     - memory: .byte Petscii.RETURN, Petscii.NULL
5194: ae 62 54  -         ldx TEST_NAME_COUNT
5197: e0 15     -         cpx #TESTS_PER_PAGE
5199: d0 5d     -         bne !exit+
519b: ad 86 02  -         lda Two.CurrentCharColor
519e: 48        -         pha
519f: a9 01     -         lda #color
51a1: 8d 86 02  -         sta Two.CurrentCharColor
51a4: a2 00     -         ldx #$00
51a6: bd b9 51  -         lda address,x
51a9: f0 07     -         beq !done+
51ab: 20 d2 ff  -         jsr Kernal.CHROUT
51ae: e8        -         inx
51af: 4c a6 51  -         jmp !loop-
51b2: 68        -         pla
51b3: 8d 86 02  -         sta Two.CurrentCharColor
51b6: 4c d8 51  -         jmp !no_key+
51b9: 0d        - memory: .byte Petscii.RETURN
51ba: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
51ca: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
51d6: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
51d8: 20 9f ff  -         jsr Kernal.SCNKEY   // scan keyboard
51db: 20 e4 ff  -         jsr Kernal.GETIN    // put result into A
51de: f0 f8     -         beq !no_key-
51e0: a2 00     -         ldx #$00
51e2: bd f1 51  -         lda address,x
51e5: f0 07     -         beq !done+
51e7: 20 d2 ff  -         jsr Kernal.CHROUT
51ea: e8        -         inx
51eb: 4c e2 51  -         jmp !loop-
51ee: 4c f3 51  -         jmp !done+
51f1: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
51f3: a2 00     -         ldx #$00
51f5: 8e 62 54  -         stx TEST_NAME_COUNT
51f8: 60        -         rts
51f9: a9 00     - TestRun:lda #color
51fb: 8d 20 d0  -         sta VIC.BorderColor
51fe: a9 00     -         lda #color
5200: 8d 21 d0  -         sta VIC.BackgroundColor
5203: a9 01     -         lda #color
5205: 8d 86 02  -         sta Two.CurrentCharColor
5208: 20 44 e5  -         jsr KernalJump.ClearScreen
520b: a9 00     -         lda #row
520d: 85 d3     -         sta Zero.CursorLogicalColumn
520f: a9 00     -         lda #column
5211: 85 d6     -         sta Zero.CursorPhysicalLineNumber
5213: 20 6c e5  -         jsr KernalJump.PointToScreenMemory
5216: a2 00     -         ldx #$00
5218: bd 27 52  -         lda address,x
521b: f0 07     -         beq !done+
521d: 20 d2 ff  -         jsr Kernal.CHROUT
5220: e8        -         inx
5221: 4c 18 52  -         jmp !loop-
5224: 4c 3b 52  -         jmp !done+
5227: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  -         .text preprocessorString	// store in memory
5237: 4e 45 52                                        
523a: 00        -         .byte Petscii.NULL			// terminate
523b: a2 00     -         ldx #$00
523d: bd 4c 52  -         lda address,x
5240: f0 07     -         beq !done+
5242: 20 d2 ff  -         jsr Kernal.CHROUT
5245: e8        -         inx
5246: 4c 3d 52  -         jmp !loop-
5249: 4c 4e 52  -         jmp !done+
524c: 0d 00     -         .byte Petscii.RETURN, Petscii.NULL
524e: a9 0c     -         lda #color
5250: 8d 86 02  -         sta Two.CurrentCharColor
5253: a9 00     -         lda #$00
5255: 8d 60 54  -         sta TEST_COUNT
5258: 8d 61 54  -         sta TEST_PASS_COUNT
525b: 8d 62 54  -         sta TEST_NAME_COUNT
525e: 20 00 20  -         jsr SET_TEST
5261: 20 21 21  -         jsr LOAD_TEST
5264: 20 43 22  -         jsr STORE_TEST
5267: 20 6a 23  -         jsr LOAD_INDIRECT_TEST
526a: 20 0a 25  -         jsr STORE_INDIRECT_TEST
526d: 20 28 27  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
5270: 20 da 28  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
5273: 20 f6 2a  -         jsr POP_INDIRECT_TEST
5276: 20 29 2f  -         jsr STORE_POP_INDIRECT_TEST
5279: 20 69 30  -         jsr ADD_TEST
527c: 20 09 32  -         jsr SUBTRACT_TEST
527f: 20 ae 33  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
5282: 20 42 36  -         jsr COMPARE_TEST
5285: 20 78 37  -         jsr INCREMENT_TEST
5288: 20 a5 38  -         jsr DECREMENT_TEST
528b: 20 d6 39  -         jsr RETURN_TO_6502_MODE_TEST
528e: 20 f6 3a  -         jsr BRANCH_ALWAYS_TEST
5291: 20 30 3c  -         jsr BRANCH_IF_NO_CARRY_TEST	
5294: 20 77 3d  -         jsr BRANCH_IF_CARRY_SET_TEST
5297: 20 be 3e  -         jsr BRANCH_IF_PLUS_TEST
529a: 20 ff 3f  -         jsr BRANCH_IF_MINUS_TEST
529d: 20 40 41  -         jsr BRANCH_IF_ZERO_TEST	
52a0: 20 79 42  -         jsr BRANCH_IF_NONZERO_TEST
52a3: 20 b8 43  -         jsr BRANCH_IF_MINUS_ONE_TEST
52a6: 20 f7 44  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
52a9: 20 38 46  -         jsr BREAK_TEST
52ac: 20 95 49  -         jsr BRANCH_TO_SUBROUTINE_TEST
52af: 20 e0 4a  -         jsr RETURN_FROM_SUBROUTINE_TEST
52b2: 20 20 4c  -         jsr ABSOLUTE_JUMP_TEST
52b5: 20 5e 4d  -         jsr EXTERNAL_JSR_TEST
52b8: 20 8b 4f  -         jsr SET_INDIRECT_TEST
52bb: 20 c4 50  -         jsr SET_MEMORY_TEST
52be: 20 d9 47  -         jsr INTERRUPT_BREAK_TEST
52c1: ad 86 02  -         lda Two.CurrentCharColor
52c4: 48        -         pha
52c5: a9 01     -         lda #color
52c7: 8d 86 02  -         sta Two.CurrentCharColor
52ca: a2 00     -         ldx #$00
52cc: bd 43 54  -         lda address,x
52cf: f0 07     -         beq !done+
52d1: 20 d2 ff  -         jsr Kernal.CHROUT
52d4: e8        -         inx
52d5: 4c cc 52  -         jmp !loop-
52d8: 68        -         pla
52d9: 8d 86 02  -         sta Two.CurrentCharColor
52dc: ad 61 54  -         lda value
52df: c9 64     -         cmp #three_digit
52e1: 90 5a     -         bcc !twoDigit+
52e3: ad 61 54  -         lda value
52e6: c9 64     -         cmp #reference
52e8: 90 09     -         bcc !done+
52ea: a0 00     -         ldy #$00		// counter
52ec: c8        -         iny				// count references's
52ed: e9 64     -         sbc #reference
52ef: c9 64     -         cmp #reference
52f1: b0 f9     -         bcs !loop-		// still larger than reference
52f3: 98        -         tya
52f4: 48        -         pha
52f5: 09 30     -         ora #$30
52f7: 20 d2 ff  -         jsr Kernal.CHROUT
52fa: 68        -         pla
52fb: a8        -         tay
52fc: ad 61 54  -         lda value
52ff: 38        -         sec
5300: e9 64     -         sbc #three_digit
5302: 88        -         dey
5303: d0 fa     -         bne !subby-
5305: 85 fe     -         sta zp
5307: a5 fe     -         lda value
5309: c9 0a     -         cmp #two_digit
530b: 90 28     -         bcc !oneDigit+
530d: a5 fe     -         lda value
530f: c9 0a     -         cmp #reference
5311: 90 09     -         bcc !done+
5313: a0 00     -         ldy #$00		// counter
5315: c8        -         iny				// count references's
5316: e9 0a     -         sbc #reference
5318: c9 0a     -         cmp #reference
531a: b0 f9     -         bcs !loop-		// still larger than reference
531c: 98        -         tya
531d: 48        -         pha
531e: 09 30     -         ora #$30
5320: 20 d2 ff  -         jsr Kernal.CHROUT
5323: 68        -         pla
5324: a8        -         tay
5325: a5 fe     -         lda value
5327: 38        -         sec
5328: e9 0a     -         sbc #two_digit
532a: 88        -         dey
532b: d0 fa     -         bne !subby-
532d: 09 30     -         ora #$30
532f: 20 d2 ff  -         jsr Kernal.CHROUT
5332: 4c 3a 53  -         jmp !done+
5335: 09 30     -         ora #$30
5337: 20 d2 ff  -         jsr Kernal.CHROUT
533a: 4c 73 53  -         jmp !done+
533d: ad 61 54  -         lda value
5340: c9 0a     -         cmp #two_digit
5342: 90 2a     -         bcc !oneDigit+
5344: ad 61 54  -         lda value
5347: c9 0a     -         cmp #reference
5349: 90 09     -         bcc !done+
534b: a0 00     -         ldy #$00		// counter
534d: c8        -         iny				// count references's
534e: e9 0a     -         sbc #reference
5350: c9 0a     -         cmp #reference
5352: b0 f9     -         bcs !loop-		// still larger than reference
5354: 98        -         tya
5355: 48        -         pha
5356: 09 30     -         ora #$30
5358: 20 d2 ff  -         jsr Kernal.CHROUT
535b: 68        -         pla
535c: a8        -         tay
535d: ad 61 54  -         lda value
5360: 38        -         sec
5361: e9 0a     -         sbc #two_digit
5363: 88        -         dey
5364: d0 fa     -         bne !subby-
5366: 09 30     -         ora #$30
5368: 20 d2 ff  -         jsr Kernal.CHROUT
536b: 4c 73 53  -         jmp !done+
536e: 09 30     -         ora #$30
5370: 20 d2 ff  -         jsr Kernal.CHROUT
5373: ad 86 02  -         lda Two.CurrentCharColor
5376: 48        -         pha
5377: a9 01     -         lda #color
5379: 8d 86 02  -         sta Two.CurrentCharColor
537c: a2 00     -         ldx #$00
537e: bd 55 54  -         lda address,x
5381: f0 07     -         beq !done+
5383: 20 d2 ff  -         jsr Kernal.CHROUT
5386: e8        -         inx
5387: 4c 7e 53  -         jmp !loop-
538a: 68        -         pla
538b: 8d 86 02  -         sta Two.CurrentCharColor
538e: ad 60 54  -         lda value
5391: c9 64     -         cmp #three_digit
5393: 90 5a     -         bcc !twoDigit+
5395: ad 60 54  -         lda value
5398: c9 64     -         cmp #reference
539a: 90 09     -         bcc !done+
539c: a0 00     -         ldy #$00		// counter
539e: c8        -         iny				// count references's
539f: e9 64     -         sbc #reference
53a1: c9 64     -         cmp #reference
53a3: b0 f9     -         bcs !loop-		// still larger than reference
53a5: 98        -         tya
53a6: 48        -         pha
53a7: 09 30     -         ora #$30
53a9: 20 d2 ff  -         jsr Kernal.CHROUT
53ac: 68        -         pla
53ad: a8        -         tay
53ae: ad 60 54  -         lda value
53b1: 38        -         sec
53b2: e9 64     -         sbc #three_digit
53b4: 88        -         dey
53b5: d0 fa     -         bne !subby-
53b7: 85 fe     -         sta zp
53b9: a5 fe     -         lda value
53bb: c9 0a     -         cmp #two_digit
53bd: 90 28     -         bcc !oneDigit+
53bf: a5 fe     -         lda value
53c1: c9 0a     -         cmp #reference
53c3: 90 09     -         bcc !done+
53c5: a0 00     -         ldy #$00		// counter
53c7: c8        -         iny				// count references's
53c8: e9 0a     -         sbc #reference
53ca: c9 0a     -         cmp #reference
53cc: b0 f9     -         bcs !loop-		// still larger than reference
53ce: 98        -         tya
53cf: 48        -         pha
53d0: 09 30     -         ora #$30
53d2: 20 d2 ff  -         jsr Kernal.CHROUT
53d5: 68        -         pla
53d6: a8        -         tay
53d7: a5 fe     -         lda value
53d9: 38        -         sec
53da: e9 0a     -         sbc #two_digit
53dc: 88        -         dey
53dd: d0 fa     -         bne !subby-
53df: 09 30     -         ora #$30
53e1: 20 d2 ff  -         jsr Kernal.CHROUT
53e4: 4c ec 53  -         jmp !done+
53e7: 09 30     -         ora #$30
53e9: 20 d2 ff  -         jsr Kernal.CHROUT
53ec: 4c 25 54  -         jmp !done+
53ef: ad 60 54  -         lda value
53f2: c9 0a     -         cmp #two_digit
53f4: 90 2a     -         bcc !oneDigit+
53f6: ad 60 54  -         lda value
53f9: c9 0a     -         cmp #reference
53fb: 90 09     -         bcc !done+
53fd: a0 00     -         ldy #$00		// counter
53ff: c8        -         iny				// count references's
5400: e9 0a     -         sbc #reference
5402: c9 0a     -         cmp #reference
5404: b0 f9     -         bcs !loop-		// still larger than reference
5406: 98        -         tya
5407: 48        -         pha
5408: 09 30     -         ora #$30
540a: 20 d2 ff  -         jsr Kernal.CHROUT
540d: 68        -         pla
540e: a8        -         tay
540f: ad 60 54  -         lda value
5412: 38        -         sec
5413: e9 0a     -         sbc #two_digit
5415: 88        -         dey
5416: d0 fa     -         bne !subby-
5418: 09 30     -         ora #$30
541a: 20 d2 ff  -         jsr Kernal.CHROUT
541d: 4c 25 54  -         jmp !done+
5420: 09 30     -         ora #$30
5422: 20 d2 ff  -         jsr Kernal.CHROUT
5425: ad 86 02  -         lda Two.CurrentCharColor
5428: 48        -         pha
5429: a9 01     -         lda #color
542b: 8d 86 02  -         sta Two.CurrentCharColor
542e: a2 00     -         ldx #$00
5430: bd 59 54  -         lda address,x
5433: f0 07     -         beq !done+
5435: 20 d2 ff  -         jsr Kernal.CHROUT
5438: e8        -         inx
5439: 4c 30 54  -         jmp !loop-
543c: 68        -         pla
543d: 8d 86 02  -         sta Two.CurrentCharColor
5440: 4c 5b 54  -         jmp !done+
5443: 0d        - memory: .byte Petscii.RETURN
5444: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
5454: 00        -         .byte Petscii.NULL
5455: 20 2f 20  - memory_2:.text " / "
5458: 00        -         .byte Petscii.NULL
5459: 0d 00     - memory_3:.byte Petscii.RETURN, Petscii.NULL
545b: 60        -         rts

[TestData]
545c: 73 00     -         .byte $73, Petscii.NULL
545e: 76 00     -         .byte $76, Petscii.NULL
5460: 00        -         .byte $00
5461: 00        -         .byte $00
5462: 00        -         .byte $00
5463: 12 34     -         .byte $12, $34
5465: 56 78     -         .byte $56, $78
5467: 9a bc     -         .byte $9a,$bc
5469: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  -         .fill TMS_SIZE, i
5479: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  -         .fill TMS_SIZE, $ff
5489: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill STACK_SIZE, 0
****************************** Segment: TestData *******************************
[TestData]
545c: 73 00     - TEST_SUCCESS:.byte $73, Petscii.NULL
545e: 76 00     - TEST_FAILURE:.byte $76, Petscii.NULL
5460: 00        - TEST_COUNT:.byte $00
5461: 00        - TEST_PASS_COUNT:.byte $00
5462: 00        - TEST_NAME_COUNT:.byte $00
5463: 12 34     - TEST_MEMORY:.byte $12, $34
5465: 56 78     - TEST_MEMORY_2:.byte $56, $78
5467: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
5469: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
5479: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
5489: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
