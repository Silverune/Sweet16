******************************* Segment: Default *******************************
******************************** Segment: Main *********************************
[Main]
0810: a9 74     - Main:   lda #<address
0812: 85 fb     -         sta lowByte
0814: a9 08     -         lda #>address 
0816: 85 fc     -         sta highByte
0818: a9 b1     -         lda #<address
081a: 85 fd     -         sta lowByte
081c: a9 0a     -         lda #>address 
081e: 85 fe     -         sta highByte
0820: a9 0a     -         lda #<address
0822: 85 4e     -         sta lowByte
0824: a9 00     -         lda #>address 
0826: 85 4f     -         sta highByte
0828: a0 00     -         ldy #$00
082a: 84 50     -         sty ZpVariables.Four.lo     // LSB size
082c: 84 51     -         sty ZpVariables.Four.hi     // MSH size
082e: a5 4f     -         lda ZpVariables.Three.hi
0830: c5 51     -         cmp ZpVariables.Four.hi
0832: f0 17     -         beq !msb_match+
0834: b1 fb     -         lda (ZpVariables.One.lo),y 
0836: 91 fd     -         sta (ZpVariables.Two.lo),y
0838: e6 50     -         inc ZpVariables.Four.lo
083a: f0 0a     -         beq inc_msb
083c: c8        -         iny
083d: d0 ef     -         bne !loop-
083f: e6 fc     -         inc ZpVariables.One.hi 	// inc MSB source 
0841: e6 fe     -         inc ZpVariables.Two.hi 	// inc MSB dest 
0843: 4c 2e 08  -         jmp !loop-
0846: e6 51     - inc_msb:inc ZpVariables.Four.hi
0848: 4c 3c 08  -         jmp !cont-
084b: a5 4e     -         lda ZpVariables.Three.lo
084d: c5 50     -         cmp ZpVariables.Four.lo
084f: f0 03     -         beq !done+
0851: 4c 34 08  -         jmp !copy-
0854: a9 0a     -         lda #<size
0856: 8d af 0a  -         sta managedBuffer.allocSize.lo
0859: a9 00     -         lda #>size
085b: 8d b0 0a  -         sta managedBuffer.allocSize.hi
085e: 20 91 3b  -         jsr TestRun
0861: 20 68 08  -         jsr Anykey
0864: 4c 71 08  -         jmp Reset
0867: 60        -         rts
0868: 20 9f ff  - Anykey: jsr scnkey  // scan keyboard
086b: 20 e4 ff  -         jsr getin	// put result into A
086e: f0 f8     -         beq !-	
0870: 60        -         rts
0871: 6c fc ff  - Reset:  jmp ($FFFC)

[Debug]
0874: 31 32 33 34 35 36 37 38 39 30                    - Debug:  .text testString
******************************* Segment: Sweet16 *******************************
[Sweet16]
087e: a9 00     - SW16_NONE:lda #$00
0880: 8d aa 0a  -         sta SW16_SAVE_RESTORE
0883: 4c 8b 08  -         jmp SW160
0886: a9 01     - SW16:   lda #$01
0888: 8d aa 0a  -         sta SW16_SAVE_RESTORE
088b: f0 03     - SW160:  beq SW16A
088d: 20 16 0a  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
0890: 68        - SW16A:  pla
0891: 85 35     -         sta R15L            // INIT SWEET16 PC
0893: 68        -         pla                 // FROM RETURN
0894: 85 36     -         sta R15H	        // ADDRESS
0896: 20 9c 08  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
0899: 4c 96 08  -         jmp  SW16B          // ONE SWEET16 INSTR.
089c: e6 35     - SW16C:  inc  R15L
089e: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
08a0: e6 36     -         inc  R15H
08a2: a9 09     - SW16D:  lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
08a4: 48        -         pha                 // PUSH ON STACK FOR RTS
08a5: a0 00     -         ldy  #$00
08a7: b1 35     -         lda  (R15L),Y       // FETCH INSTR
08a9: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
08ab: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
08ac: aa        -         tax                 // TO X REG FOR INDEXING
08ad: 4a        -         lsr
08ae: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
08b0: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
08b2: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
08b4: 4a        -         lsr
08b5: 4a        -         lsr                 // OPCODE*2 TO LSB'S
08b6: 4a        -         lsr
08b7: a8        -         tay                 // TO Y REG FOR INDEXING
08b8: b9 dd 08  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
08bb: 48        -         pha                 // ONTO STACK
08bc: 60        -         rts                 // GOTO REG-OP ROUTINE
08bd: e6 35     - TOBR:   inc  R15L
08bf: d0 02     -         bne  TOBR2          // INCR PC
08c1: e6 36     -         inc  R15H
08c3: bd e0 08  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
08c6: 48        -         pha                 // ONTO STACK FOR NON-REG OP
08c7: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
08c9: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
08ca: 60        -         rts                 // GOTO NON-REG OP ROUTINE
08cb: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
08cd: 95 18     -         sta  R0H,X
08cf: 88        -         dey
08d0: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
08d2: 95 17     -         sta  R0L,X
08d4: 98        -         tya                 // Y REG CONTAINS 1
08d5: 38        -         sec
08d6: 65 35     -         adc  R15L           // ADD 2 TO PC
08d8: 85 35     -         sta  R15L
08da: 90 02     -         bcc  SET2
08dc: e6 36     -         inc  R15H
08de: 60        - SET2:   rts

[Sweet16JumpTable]
08df: 00        -         .byte <SET-1          // 1X
08e0: f7        -         .byte  <RTN-1          // 0
08e1: 03        -         .byte  <LD-1           // 2X
08e2: 8b        -         .byte  <BR-1           // 1
08e3: 13        -         .byte  <ST-1           // 3X
08e4: 8c        -         .byte  <BNC-1          // 2
08e5: 2b        -         .byte  <LDAT-1         // 4X
08e6: 9d        -         .byte  <BC-1           // 3
08e7: 1c        -         .byte  <STAT-1         // 5X
08e8: a0        -         .byte  <BP-1           // 4
08e9: 35        -         .byte  <LDDAT-1        // 6X
08ea: a7        -         .byte  <BM-1           // 5
08eb: 3f        -         .byte  <STDAT-1        // 7X
08ec: ae        -         .byte  <BZ-1           // 6
08ed: e7        -         .byte  <POP-1          // 8X
08ee: b7        -         .byte  <BNZ-1          // 7
08ef: 49        -         .byte  <STPAT-1        // 9X
08f0: c0        -         .byte  <BM1-1          // 8
08f1: 73        -         .byte  <ADD-1          // AX
08f2: cb        -         .byte  <BNM1-1         // 9
08f3: 5c        -         .byte  <SUB-1          // BX
08f4: 0c        -         .byte  <BK-1           // A
08f5: eb        -         .byte  <POPD-1         // CX
08f6: d6        -         .byte  <RS-1           // B
08f7: 5e        -         .byte  <CPR-1          // DX
08f8: 81        -         .byte  <BS-1           // C
08f9: 24        -         .byte  <INR-1          // EX
08fa: 10        -         .byte  <XJSR-1         // D
08fb: 53        -         .byte  <DCR-1          // FX
08fc: 0d        -         .byte  <SETM-1         // E
08fd: d5        -         .byte  <NUL-1          // UNUSED
08fe: f4        -         .byte  <SETI-1         // F

[Sweet16Page]
0900: ea        -         nop                // otherwise RTS "cleverness" not so clever
0901: 4c cb 08  -         jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     -         lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        -         brk
090e: 4c 78 0a  -         jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  -         jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     -         lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     -         lda  R0L	
091f: 81 17     -         sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     -         sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     -         inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        -         rts
092c: a1 17     -         lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  -         jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  -         jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  -         jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     -         lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     -         dec  R0L,X
095c: 60        -         rts
095d: a0 00     -         ldy  #$00           // RESULT TO R0
095f: 38        -         sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  -         sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     -         lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     -         lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        -         clc
098d: b0 0e     -         bcs  BNC2           // NO CARRY TEST	
098f: b1 35     -         lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     -         adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        -         rts
099e: b0 ec     -         bcs  BR
09a0: 60        -         rts
09a1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        -         rts
09d7: a2 18     -         ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     -         ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  -         jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  -         jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  -         jmp  RTNZ
09fb: 20 54 09  -         jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     -         ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        -         pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  -         jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  -         sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  -         lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        -         pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c a2 08  -         jmp SW16D
0a44: b1 35     -         lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts

[Sweet16OutOfPage]
0a66: 20 44 0a  -         jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c a2 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  -         jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c a2 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     -         lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c a2 08  -         jmp SW16D				// back to SWEET16

[Sweet16Data]
0aa6: 00        -         .byte 0
0aa7: 00        -         .byte 0
0aa8: 00        -         .byte 0
0aa9: 00        -         .byte 0
0aaa: 00        -         .byte 0
******************************** Segment: Util *********************************
[UtilData]
0aab: 0d 00     -         .byte RETURN, NULL
0aad: ff 00     -         .byte <value, >value
0aaf: 00 00     -         .byte <value, >value
0ab1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill $ff, $00
0ad1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0af1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
******************************** Segment: Tests ********************************
[Set]
0bb0: ee f5 3d  - SET_TEST:inc TEST_NAME_COUNT
0bb3: ad 86 02  -         lda foreground_color
0bb6: 48        -         pha
0bb7: a9 0f     -         lda #color
0bb9: 8d 86 02  -         sta foreground_color
0bbc: a2 00     -         ldx #$00
0bbe: bd d1 0b  -         lda msg,x
0bc1: f0 07     -         beq !done+
0bc3: 20 d2 ff  -         jsr kernal_chrout
0bc6: e8        -         inx
0bc7: 4c be 0b  -         jmp !loop-
0bca: 68        -         pla
0bcb: 8d 86 02  -         sta foreground_color
0bce: 4c da 0b  -         jmp !done+
0bd1: 20 20     - memory: .fill spacing, spacebar
0bd3: 53 45 54  -         .text name
0bd6: 2e 2e 2e  -         .text "..."
0bd9: 00        -         .byte NULL
0bda: 20 86 08  -         jsr SW16
0bdd: 15        -         .byte opcode(op, register)
0bde: 34 12     -         .word address.getValue()
0be0: 00        -         .byte $00 }
0be1: ee f3 3d  -         inc TEST_COUNT
0be4: ad 86 02  -         lda foreground_color
0be7: 48        -         pha
0be8: a9 0e     -         lda #color
0bea: 8d 86 02  -         sta foreground_color
0bed: a2 00     -         ldx #$00
0bef: bd 02 0c  -         lda msg,x
0bf2: f0 07     -         beq !done+
0bf4: 20 d2 ff  -         jsr kernal_chrout
0bf7: e8        -         inx
0bf8: 4c ef 0b  -         jmp !loop-
0bfb: 68        -         pla
0bfc: 8d 86 02  -         sta foreground_color
0bff: 4c 0a 0c  -         jmp !done+
0c02: 20        - memory: .byte spacebar
0c03: 56 41 4c 55 45                                   -         .text description
0c08: 3a        -         .text ":"
0c09: 00        -         .byte NULL
0c0a: a6 21     -         ldx rl(register.getValue())
0c0c: a4 22     -         ldy rh(register.getValue())
0c0e: e0 34     -         cpx #<value
0c10: d0 25     -         bne !failed+
0c12: c0 12     -         cpy #>value
0c14: d0 21     -         bne !failed+
0c16: ee f4 3d  -         inc TEST_PASS_COUNT
0c19: ad 86 02  -         lda foreground_color
0c1c: 48        -         pha
0c1d: a9 05     -         lda #color
0c1f: 8d 86 02  -         sta foreground_color
0c22: a2 00     -         ldx #$00
0c24: bd ef 3d  -         lda msg,x
0c27: f0 07     -         beq !done+
0c29: 20 d2 ff  -         jsr kernal_chrout
0c2c: e8        -         inx
0c2d: 4c 24 0c  -         jmp !loop-
0c30: 68        -         pla
0c31: 8d 86 02  -         sta foreground_color
0c34: 4c 52 0c  -         jmp !done+
0c37: ad 86 02  -         lda foreground_color
0c3a: 48        -         pha
0c3b: a9 02     -         lda #color
0c3d: 8d 86 02  -         sta foreground_color
0c40: a2 00     -         ldx #$00
0c42: bd f1 3d  -         lda msg,x
0c45: f0 07     -         beq !done+
0c47: 20 d2 ff  -         jsr kernal_chrout
0c4a: e8        -         inx
0c4b: 4c 42 0c  -         jmp !loop-
0c4e: 68        -         pla
0c4f: 8d 86 02  -         sta foreground_color
0c52: a2 00     -         ldx #$00
0c54: bd 63 0c  -         lda msg,x
0c57: f0 07     -         beq !done+
0c59: 20 d2 ff  -         jsr kernal_chrout
0c5c: e8        -         inx
0c5d: 4c 54 0c  -         jmp !loop-
0c60: 4c 65 0c  -         jmp !done+
0c63: 0d 00     - memory: .byte RETURN, NULL
0c65: ae f5 3d  -         ldx TEST_NAME_COUNT
0c68: e0 15     -         cpx #TESTS_PER_PAGE
0c6a: d0 5d     -         bne !exit+
0c6c: ad 86 02  -         lda foreground_color
0c6f: 48        -         pha
0c70: a9 01     -         lda #color
0c72: 8d 86 02  -         sta foreground_color
0c75: a2 00     -         ldx #$00
0c77: bd 8a 0c  -         lda msg,x
0c7a: f0 07     -         beq !done+
0c7c: 20 d2 ff  -         jsr kernal_chrout
0c7f: e8        -         inx
0c80: 4c 77 0c  -         jmp !loop-
0c83: 68        -         pla
0c84: 8d 86 02  -         sta foreground_color
0c87: 4c a9 0c  -         jmp !no_key+
0c8a: 0d        - memory: .byte RETURN
0c8b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0c9b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0ca7: 0d 00     -         .byte RETURN, NULL
0ca9: 20 9f ff  -         jsr scnkey  // scan keyboard
0cac: 20 e4 ff  -         jsr getin	// put result into A
0caf: f0 f8     -         beq !no_key-
0cb1: a2 00     -         ldx #$00
0cb3: bd c2 0c  -         lda msg,x
0cb6: f0 07     -         beq !done+
0cb8: 20 d2 ff  -         jsr kernal_chrout
0cbb: e8        -         inx
0cbc: 4c b3 0c  -         jmp !loop-
0cbf: 4c c4 0c  -         jmp !done+
0cc2: 0d 00     - newline:.byte RETURN, NULL
0cc4: a2 00     -         ldx #$00
0cc6: 8e f5 3d  -         stx TEST_NAME_COUNT
0cc9: 60        -         rts

[Load]
0cca: ee f5 3d  - LOAD_TEST:inc TEST_NAME_COUNT
0ccd: ad 86 02  -         lda foreground_color
0cd0: 48        -         pha
0cd1: a9 0f     -         lda #color
0cd3: 8d 86 02  -         sta foreground_color
0cd6: a2 00     -         ldx #$00
0cd8: bd eb 0c  -         lda msg,x
0cdb: f0 07     -         beq !done+
0cdd: 20 d2 ff  -         jsr kernal_chrout
0ce0: e8        -         inx
0ce1: 4c d8 0c  -         jmp !loop-
0ce4: 68        -         pla
0ce5: 8d 86 02  -         sta foreground_color
0ce8: 4c f5 0c  -         jmp !done+
0ceb: 20 20     - memory: .fill spacing, spacebar
0ced: 4c 4f 41 44                                      -         .text name
0cf1: 2e 2e 2e  -         .text "..."
0cf4: 00        -         .byte NULL
0cf5: 20 86 08  -         jsr SW16
0cf8: 15        -         .byte opcode(op, register)
0cf9: 21 43     -         .word address.getValue()
0cfb: 25        -         .byte opcode($20, register) }
0cfc: 00        -         .byte $00 }
0cfd: ee f3 3d  -         inc TEST_COUNT
0d00: ad 86 02  -         lda foreground_color
0d03: 48        -         pha
0d04: a9 0e     -         lda #color
0d06: 8d 86 02  -         sta foreground_color
0d09: a2 00     -         ldx #$00
0d0b: bd 1e 0d  -         lda msg,x
0d0e: f0 07     -         beq !done+
0d10: 20 d2 ff  -         jsr kernal_chrout
0d13: e8        -         inx
0d14: 4c 0b 0d  -         jmp !loop-
0d17: 68        -         pla
0d18: 8d 86 02  -         sta foreground_color
0d1b: 4c 24 0d  -         jmp !done+
0d1e: 20        - memory: .byte spacebar
0d1f: 41 43 43  -         .text description
0d22: 3a        -         .text ":"
0d23: 00        -         .byte NULL
0d24: a6 17     -         ldx rl(register.getValue())
0d26: a4 18     -         ldy rh(register.getValue())
0d28: e0 21     -         cpx #<value
0d2a: d0 25     -         bne !failed+
0d2c: c0 43     -         cpy #>value
0d2e: d0 21     -         bne !failed+
0d30: ee f4 3d  -         inc TEST_PASS_COUNT
0d33: ad 86 02  -         lda foreground_color
0d36: 48        -         pha
0d37: a9 05     -         lda #color
0d39: 8d 86 02  -         sta foreground_color
0d3c: a2 00     -         ldx #$00
0d3e: bd ef 3d  -         lda msg,x
0d41: f0 07     -         beq !done+
0d43: 20 d2 ff  -         jsr kernal_chrout
0d46: e8        -         inx
0d47: 4c 3e 0d  -         jmp !loop-
0d4a: 68        -         pla
0d4b: 8d 86 02  -         sta foreground_color
0d4e: 4c 6c 0d  -         jmp !done+
0d51: ad 86 02  -         lda foreground_color
0d54: 48        -         pha
0d55: a9 02     -         lda #color
0d57: 8d 86 02  -         sta foreground_color
0d5a: a2 00     -         ldx #$00
0d5c: bd f1 3d  -         lda msg,x
0d5f: f0 07     -         beq !done+
0d61: 20 d2 ff  -         jsr kernal_chrout
0d64: e8        -         inx
0d65: 4c 5c 0d  -         jmp !loop-
0d68: 68        -         pla
0d69: 8d 86 02  -         sta foreground_color
0d6c: a2 00     -         ldx #$00
0d6e: bd 7d 0d  -         lda msg,x
0d71: f0 07     -         beq !done+
0d73: 20 d2 ff  -         jsr kernal_chrout
0d76: e8        -         inx
0d77: 4c 6e 0d  -         jmp !loop-
0d7a: 4c 7f 0d  -         jmp !done+
0d7d: 0d 00     - memory: .byte RETURN, NULL
0d7f: ae f5 3d  -         ldx TEST_NAME_COUNT
0d82: e0 15     -         cpx #TESTS_PER_PAGE
0d84: d0 5d     -         bne !exit+
0d86: ad 86 02  -         lda foreground_color
0d89: 48        -         pha
0d8a: a9 01     -         lda #color
0d8c: 8d 86 02  -         sta foreground_color
0d8f: a2 00     -         ldx #$00
0d91: bd a4 0d  -         lda msg,x
0d94: f0 07     -         beq !done+
0d96: 20 d2 ff  -         jsr kernal_chrout
0d99: e8        -         inx
0d9a: 4c 91 0d  -         jmp !loop-
0d9d: 68        -         pla
0d9e: 8d 86 02  -         sta foreground_color
0da1: 4c c3 0d  -         jmp !no_key+
0da4: 0d        - memory: .byte RETURN
0da5: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0db5: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0dc1: 0d 00     -         .byte RETURN, NULL
0dc3: 20 9f ff  -         jsr scnkey  // scan keyboard
0dc6: 20 e4 ff  -         jsr getin	// put result into A
0dc9: f0 f8     -         beq !no_key-
0dcb: a2 00     -         ldx #$00
0dcd: bd dc 0d  -         lda msg,x
0dd0: f0 07     -         beq !done+
0dd2: 20 d2 ff  -         jsr kernal_chrout
0dd5: e8        -         inx
0dd6: 4c cd 0d  -         jmp !loop-
0dd9: 4c de 0d  -         jmp !done+
0ddc: 0d 00     - newline:.byte RETURN, NULL
0dde: a2 00     -         ldx #$00
0de0: 8e f5 3d  -         stx TEST_NAME_COUNT
0de3: 60        -         rts
0de4: ee f5 3d  - STORE_TEST:inc TEST_NAME_COUNT
0de7: ad 86 02  -         lda foreground_color
0dea: 48        -         pha
0deb: a9 0f     -         lda #color
0ded: 8d 86 02  -         sta foreground_color
0df0: a2 00     -         ldx #$00
0df2: bd 05 0e  -         lda msg,x
0df5: f0 07     -         beq !done+
0df7: 20 d2 ff  -         jsr kernal_chrout
0dfa: e8        -         inx
0dfb: 4c f2 0d  -         jmp !loop-
0dfe: 68        -         pla
0dff: 8d 86 02  -         sta foreground_color
0e02: 4c 10 0e  -         jmp !done+
0e05: 20 20     - memory: .fill spacing, spacebar
0e07: 53 54 4f 52 45                                   -         .text name
0e0c: 2e 2e 2e  -         .text "..."
0e0f: 00        -         .byte NULL
0e10: 20 86 08  -         jsr SW16
0e13: 15        -         .byte opcode(op, register)
0e14: 34 12     -         .word address.getValue()
0e16: 25        -         .byte opcode($20, register) }
0e17: 36        -         .byte opcode($30, register) }
0e18: 00        -         .byte $00 }
0e19: ee f3 3d  -         inc TEST_COUNT
0e1c: ad 86 02  -         lda foreground_color
0e1f: 48        -         pha
0e20: a9 0e     -         lda #color
0e22: 8d 86 02  -         sta foreground_color
0e25: a2 00     -         ldx #$00
0e27: bd 3a 0e  -         lda msg,x
0e2a: f0 07     -         beq !done+
0e2c: 20 d2 ff  -         jsr kernal_chrout
0e2f: e8        -         inx
0e30: 4c 27 0e  -         jmp !loop-
0e33: 68        -         pla
0e34: 8d 86 02  -         sta foreground_color
0e37: 4c 42 0e  -         jmp !done+
0e3a: 20        - memory: .byte spacebar
0e3b: 56 41 4c 55 45                                   -         .text description
0e40: 3a        -         .text ":"
0e41: 00        -         .byte NULL
0e42: a6 23     -         ldx rl(register.getValue())
0e44: a4 24     -         ldy rh(register.getValue())
0e46: e0 34     -         cpx #<value
0e48: d0 25     -         bne !failed+
0e4a: c0 12     -         cpy #>value
0e4c: d0 21     -         bne !failed+
0e4e: ee f4 3d  -         inc TEST_PASS_COUNT
0e51: ad 86 02  -         lda foreground_color
0e54: 48        -         pha
0e55: a9 05     -         lda #color
0e57: 8d 86 02  -         sta foreground_color
0e5a: a2 00     -         ldx #$00
0e5c: bd ef 3d  -         lda msg,x
0e5f: f0 07     -         beq !done+
0e61: 20 d2 ff  -         jsr kernal_chrout
0e64: e8        -         inx
0e65: 4c 5c 0e  -         jmp !loop-
0e68: 68        -         pla
0e69: 8d 86 02  -         sta foreground_color
0e6c: 4c 8a 0e  -         jmp !done+
0e6f: ad 86 02  -         lda foreground_color
0e72: 48        -         pha
0e73: a9 02     -         lda #color
0e75: 8d 86 02  -         sta foreground_color
0e78: a2 00     -         ldx #$00
0e7a: bd f1 3d  -         lda msg,x
0e7d: f0 07     -         beq !done+
0e7f: 20 d2 ff  -         jsr kernal_chrout
0e82: e8        -         inx
0e83: 4c 7a 0e  -         jmp !loop-
0e86: 68        -         pla
0e87: 8d 86 02  -         sta foreground_color
0e8a: a2 00     -         ldx #$00
0e8c: bd 9b 0e  -         lda msg,x
0e8f: f0 07     -         beq !done+
0e91: 20 d2 ff  -         jsr kernal_chrout
0e94: e8        -         inx
0e95: 4c 8c 0e  -         jmp !loop-
0e98: 4c 9d 0e  -         jmp !done+
0e9b: 0d 00     - memory: .byte RETURN, NULL
0e9d: ae f5 3d  -         ldx TEST_NAME_COUNT
0ea0: e0 15     -         cpx #TESTS_PER_PAGE
0ea2: d0 5d     -         bne !exit+
0ea4: ad 86 02  -         lda foreground_color
0ea7: 48        -         pha
0ea8: a9 01     -         lda #color
0eaa: 8d 86 02  -         sta foreground_color
0ead: a2 00     -         ldx #$00
0eaf: bd c2 0e  -         lda msg,x
0eb2: f0 07     -         beq !done+
0eb4: 20 d2 ff  -         jsr kernal_chrout
0eb7: e8        -         inx
0eb8: 4c af 0e  -         jmp !loop-
0ebb: 68        -         pla
0ebc: 8d 86 02  -         sta foreground_color
0ebf: 4c e1 0e  -         jmp !no_key+
0ec2: 0d        - memory: .byte RETURN
0ec3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0ed3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0edf: 0d 00     -         .byte RETURN, NULL
0ee1: 20 9f ff  -         jsr scnkey  // scan keyboard
0ee4: 20 e4 ff  -         jsr getin	// put result into A
0ee7: f0 f8     -         beq !no_key-
0ee9: a2 00     -         ldx #$00
0eeb: bd fa 0e  -         lda msg,x
0eee: f0 07     -         beq !done+
0ef0: 20 d2 ff  -         jsr kernal_chrout
0ef3: e8        -         inx
0ef4: 4c eb 0e  -         jmp !loop-
0ef7: 4c fc 0e  -         jmp !done+
0efa: 0d 00     - newline:.byte RETURN, NULL
0efc: a2 00     -         ldx #$00
0efe: 8e f5 3d  -         stx TEST_NAME_COUNT
0f01: 60        -         rts
0f02: ee f5 3d  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
0f05: ad 86 02  -         lda foreground_color
0f08: 48        -         pha
0f09: a9 0f     -         lda #color
0f0b: 8d 86 02  -         sta foreground_color
0f0e: a2 00     -         ldx #$00
0f10: bd 23 0f  -         lda msg,x
0f13: f0 07     -         beq !done+
0f15: 20 d2 ff  -         jsr kernal_chrout
0f18: e8        -         inx
0f19: 4c 10 0f  -         jmp !loop-
0f1c: 68        -         pla
0f1d: 8d 86 02  -         sta foreground_color
0f20: 4c 36 0f  -         jmp !done+
0f23: 20 20     - memory: .fill spacing, spacebar
0f25: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
0f32: 2e 2e 2e  -         .text "..."
0f35: 00        -         .byte NULL
0f36: 20 86 08  -         jsr SW16
0f39: 15        -         .byte opcode(op, register)
0f3a: 0b 3e     -         .word address.getValue()
0f3c: 45        -         .byte opcode($40, register) }
0f3d: 00        -         .byte $00 }
0f3e: ee f3 3d  -         inc TEST_COUNT
0f41: ad 86 02  -         lda foreground_color
0f44: 48        -         pha
0f45: a9 0e     -         lda #color
0f47: 8d 86 02  -         sta foreground_color
0f4a: a2 00     -         ldx #$00
0f4c: bd 5f 0f  -         lda msg,x
0f4f: f0 07     -         beq !done+
0f51: 20 d2 ff  -         jsr kernal_chrout
0f54: e8        -         inx
0f55: 4c 4c 0f  -         jmp !loop-
0f58: 68        -         pla
0f59: 8d 86 02  -         sta foreground_color
0f5c: 4c 65 0f  -         jmp !done+
0f5f: 20        - memory: .byte spacebar
0f60: 41 43 43  -         .text description
0f63: 3a        -         .text ":"
0f64: 00        -         .byte NULL
0f65: a6 17     -         ldx rl(register.getValue())
0f67: a4 18     -         ldy rh(register.getValue())
0f69: ec 0b 3e  -         cpx address
0f6c: d0 21     -         bne !failed+
0f6e: ee f4 3d  -         inc TEST_PASS_COUNT
0f71: ad 86 02  -         lda foreground_color
0f74: 48        -         pha
0f75: a9 05     -         lda #color
0f77: 8d 86 02  -         sta foreground_color
0f7a: a2 00     -         ldx #$00
0f7c: bd ef 3d  -         lda msg,x
0f7f: f0 07     -         beq !done+
0f81: 20 d2 ff  -         jsr kernal_chrout
0f84: e8        -         inx
0f85: 4c 7c 0f  -         jmp !loop-
0f88: 68        -         pla
0f89: 8d 86 02  -         sta foreground_color
0f8c: 4c aa 0f  -         jmp !done+
0f8f: ad 86 02  -         lda foreground_color
0f92: 48        -         pha
0f93: a9 02     -         lda #color
0f95: 8d 86 02  -         sta foreground_color
0f98: a2 00     -         ldx #$00
0f9a: bd f1 3d  -         lda msg,x
0f9d: f0 07     -         beq !done+
0f9f: 20 d2 ff  -         jsr kernal_chrout
0fa2: e8        -         inx
0fa3: 4c 9a 0f  -         jmp !loop-
0fa6: 68        -         pla
0fa7: 8d 86 02  -         sta foreground_color
0faa: ee f3 3d  -         inc TEST_COUNT
0fad: ad 86 02  -         lda foreground_color
0fb0: 48        -         pha
0fb1: a9 0e     -         lda #color
0fb3: 8d 86 02  -         sta foreground_color
0fb6: a2 00     -         ldx #$00
0fb8: bd cb 0f  -         lda msg,x
0fbb: f0 07     -         beq !done+
0fbd: 20 d2 ff  -         jsr kernal_chrout
0fc0: e8        -         inx
0fc1: 4c b8 0f  -         jmp !loop-
0fc4: 68        -         pla
0fc5: 8d 86 02  -         sta foreground_color
0fc8: 4c d1 0f  -         jmp !done+
0fcb: 20        - memory: .byte spacebar
0fcc: 52 45 47  -         .text description
0fcf: 3a        -         .text ":"
0fd0: 00        -         .byte NULL
0fd1: a6 21     -         ldx rl(register.getValue())
0fd3: a4 22     -         ldy rh(register.getValue())
0fd5: e0 0c     -         cpx #<value
0fd7: d0 25     -         bne !failed+
0fd9: c0 3e     -         cpy #>value
0fdb: d0 21     -         bne !failed+
0fdd: ee f4 3d  -         inc TEST_PASS_COUNT
0fe0: ad 86 02  -         lda foreground_color
0fe3: 48        -         pha
0fe4: a9 05     -         lda #color
0fe6: 8d 86 02  -         sta foreground_color
0fe9: a2 00     -         ldx #$00
0feb: bd ef 3d  -         lda msg,x
0fee: f0 07     -         beq !done+
0ff0: 20 d2 ff  -         jsr kernal_chrout
0ff3: e8        -         inx
0ff4: 4c eb 0f  -         jmp !loop-
0ff7: 68        -         pla
0ff8: 8d 86 02  -         sta foreground_color
0ffb: 4c 19 10  -         jmp !done+
0ffe: ad 86 02  -         lda foreground_color
1001: 48        -         pha
1002: a9 02     -         lda #color
1004: 8d 86 02  -         sta foreground_color
1007: a2 00     -         ldx #$00
1009: bd f1 3d  -         lda msg,x
100c: f0 07     -         beq !done+
100e: 20 d2 ff  -         jsr kernal_chrout
1011: e8        -         inx
1012: 4c 09 10  -         jmp !loop-
1015: 68        -         pla
1016: 8d 86 02  -         sta foreground_color
1019: a2 00     -         ldx #$00
101b: bd 2a 10  -         lda msg,x
101e: f0 07     -         beq !done+
1020: 20 d2 ff  -         jsr kernal_chrout
1023: e8        -         inx
1024: 4c 1b 10  -         jmp !loop-
1027: 4c 2c 10  -         jmp !done+
102a: 0d 00     - memory: .byte RETURN, NULL
102c: ae f5 3d  -         ldx TEST_NAME_COUNT
102f: e0 15     -         cpx #TESTS_PER_PAGE
1031: d0 5d     -         bne !exit+
1033: ad 86 02  -         lda foreground_color
1036: 48        -         pha
1037: a9 01     -         lda #color
1039: 8d 86 02  -         sta foreground_color
103c: a2 00     -         ldx #$00
103e: bd 51 10  -         lda msg,x
1041: f0 07     -         beq !done+
1043: 20 d2 ff  -         jsr kernal_chrout
1046: e8        -         inx
1047: 4c 3e 10  -         jmp !loop-
104a: 68        -         pla
104b: 8d 86 02  -         sta foreground_color
104e: 4c 70 10  -         jmp !no_key+
1051: 0d        - memory: .byte RETURN
1052: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1062: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
106e: 0d 00     -         .byte RETURN, NULL
1070: 20 9f ff  -         jsr scnkey  // scan keyboard
1073: 20 e4 ff  -         jsr getin	// put result into A
1076: f0 f8     -         beq !no_key-
1078: a2 00     -         ldx #$00
107a: bd 89 10  -         lda msg,x
107d: f0 07     -         beq !done+
107f: 20 d2 ff  -         jsr kernal_chrout
1082: e8        -         inx
1083: 4c 7a 10  -         jmp !loop-
1086: 4c 8b 10  -         jmp !done+
1089: 0d 00     - newline:.byte RETURN, NULL
108b: a2 00     -         ldx #$00
108d: 8e f5 3d  -         stx TEST_NAME_COUNT
1090: 60        -         rts
1091: ee f5 3d  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
1094: ad 86 02  -         lda foreground_color
1097: 48        -         pha
1098: a9 0f     -         lda #color
109a: 8d 86 02  -         sta foreground_color
109d: a2 00     -         ldx #$00
109f: bd b2 10  -         lda msg,x
10a2: f0 07     -         beq !done+
10a4: 20 d2 ff  -         jsr kernal_chrout
10a7: e8        -         inx
10a8: 4c 9f 10  -         jmp !loop-
10ab: 68        -         pla
10ac: 8d 86 02  -         sta foreground_color
10af: 4c c6 10  -         jmp !done+
10b2: 20 20     - memory: .fill spacing, spacebar
10b4: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
10c2: 2e 2e 2e  -         .text "..."
10c5: 00        -         .byte NULL
10c6: 20 86 08  -         jsr SW16
10c9: 15        -         .byte opcode(op, register)
10ca: 0b 3e     -         .word address.getValue()
10cc: 16        -         .byte opcode(op, register)
10cd: 0d 3e     -         .word address.getValue()
10cf: 45        -         .byte opcode($40, register) }
10d0: 56        -         .byte opcode($50, register) }
10d1: 00        -         .byte $00 }
10d2: ee f3 3d  -         inc TEST_COUNT
10d5: ad 86 02  -         lda foreground_color
10d8: 48        -         pha
10d9: a9 0e     -         lda #color
10db: 8d 86 02  -         sta foreground_color
10de: a2 00     -         ldx #$00
10e0: bd f3 10  -         lda msg,x
10e3: f0 07     -         beq !done+
10e5: 20 d2 ff  -         jsr kernal_chrout
10e8: e8        -         inx
10e9: 4c e0 10  -         jmp !loop-
10ec: 68        -         pla
10ed: 8d 86 02  -         sta foreground_color
10f0: 4c f9 10  -         jmp !done+
10f3: 20        - memory: .byte spacebar
10f4: 4d 45 4d  -         .text description
10f7: 3a        -         .text ":"
10f8: 00        -         .byte NULL
10f9: a2 ff     -         ldx #$ff
10fb: e8        -         inx
10fc: e0 01     -         cpx #size
10fe: f0 0b     -         beq !success+
1100: bd 0b 3e  -         lda source,x
1103: dd 0d 3e  -         cmp dest,x
1106: f0 f3     -         beq !loop-
1108: 4c 2c 11  -         jmp !failed+
110b: ee f4 3d  -         inc TEST_PASS_COUNT
110e: ad 86 02  -         lda foreground_color
1111: 48        -         pha
1112: a9 05     -         lda #color
1114: 8d 86 02  -         sta foreground_color
1117: a2 00     -         ldx #$00
1119: bd ef 3d  -         lda msg,x
111c: f0 07     -         beq !done+
111e: 20 d2 ff  -         jsr kernal_chrout
1121: e8        -         inx
1122: 4c 19 11  -         jmp !loop-
1125: 68        -         pla
1126: 8d 86 02  -         sta foreground_color
1129: 4c 47 11  -         jmp !done+
112c: ad 86 02  -         lda foreground_color
112f: 48        -         pha
1130: a9 02     -         lda #color
1132: 8d 86 02  -         sta foreground_color
1135: a2 00     -         ldx #$00
1137: bd f1 3d  -         lda msg,x
113a: f0 07     -         beq !done+
113c: 20 d2 ff  -         jsr kernal_chrout
113f: e8        -         inx
1140: 4c 37 11  -         jmp !loop-
1143: 68        -         pla
1144: 8d 86 02  -         sta foreground_color
1147: ee f3 3d  -         inc TEST_COUNT
114a: ad 86 02  -         lda foreground_color
114d: 48        -         pha
114e: a9 0e     -         lda #color
1150: 8d 86 02  -         sta foreground_color
1153: a2 00     -         ldx #$00
1155: bd 68 11  -         lda msg,x
1158: f0 07     -         beq !done+
115a: 20 d2 ff  -         jsr kernal_chrout
115d: e8        -         inx
115e: 4c 55 11  -         jmp !loop-
1161: 68        -         pla
1162: 8d 86 02  -         sta foreground_color
1165: 4c 6e 11  -         jmp !done+
1168: 20        - memory: .byte spacebar
1169: 53 52 43  -         .text description
116c: 3a        -         .text ":"
116d: 00        -         .byte NULL
116e: a6 21     -         ldx rl(register.getValue())
1170: a4 22     -         ldy rh(register.getValue())
1172: e0 0c     -         cpx #<value
1174: d0 25     -         bne !failed+
1176: c0 3e     -         cpy #>value
1178: d0 21     -         bne !failed+
117a: ee f4 3d  -         inc TEST_PASS_COUNT
117d: ad 86 02  -         lda foreground_color
1180: 48        -         pha
1181: a9 05     -         lda #color
1183: 8d 86 02  -         sta foreground_color
1186: a2 00     -         ldx #$00
1188: bd ef 3d  -         lda msg,x
118b: f0 07     -         beq !done+
118d: 20 d2 ff  -         jsr kernal_chrout
1190: e8        -         inx
1191: 4c 88 11  -         jmp !loop-
1194: 68        -         pla
1195: 8d 86 02  -         sta foreground_color
1198: 4c b6 11  -         jmp !done+
119b: ad 86 02  -         lda foreground_color
119e: 48        -         pha
119f: a9 02     -         lda #color
11a1: 8d 86 02  -         sta foreground_color
11a4: a2 00     -         ldx #$00
11a6: bd f1 3d  -         lda msg,x
11a9: f0 07     -         beq !done+
11ab: 20 d2 ff  -         jsr kernal_chrout
11ae: e8        -         inx
11af: 4c a6 11  -         jmp !loop-
11b2: 68        -         pla
11b3: 8d 86 02  -         sta foreground_color
11b6: ee f3 3d  -         inc TEST_COUNT
11b9: ad 86 02  -         lda foreground_color
11bc: 48        -         pha
11bd: a9 0e     -         lda #color
11bf: 8d 86 02  -         sta foreground_color
11c2: a2 00     -         ldx #$00
11c4: bd d7 11  -         lda msg,x
11c7: f0 07     -         beq !done+
11c9: 20 d2 ff  -         jsr kernal_chrout
11cc: e8        -         inx
11cd: 4c c4 11  -         jmp !loop-
11d0: 68        -         pla
11d1: 8d 86 02  -         sta foreground_color
11d4: 4c dd 11  -         jmp !done+
11d7: 20        - memory: .byte spacebar
11d8: 44 53 54  -         .text description
11db: 3a        -         .text ":"
11dc: 00        -         .byte NULL
11dd: a6 23     -         ldx rl(register.getValue())
11df: a4 24     -         ldy rh(register.getValue())
11e1: e0 0e     -         cpx #<value
11e3: d0 25     -         bne !failed+
11e5: c0 3e     -         cpy #>value
11e7: d0 21     -         bne !failed+
11e9: ee f4 3d  -         inc TEST_PASS_COUNT
11ec: ad 86 02  -         lda foreground_color
11ef: 48        -         pha
11f0: a9 05     -         lda #color
11f2: 8d 86 02  -         sta foreground_color
11f5: a2 00     -         ldx #$00
11f7: bd ef 3d  -         lda msg,x
11fa: f0 07     -         beq !done+
11fc: 20 d2 ff  -         jsr kernal_chrout
11ff: e8        -         inx
1200: 4c f7 11  -         jmp !loop-
1203: 68        -         pla
1204: 8d 86 02  -         sta foreground_color
1207: 4c 25 12  -         jmp !done+
120a: ad 86 02  -         lda foreground_color
120d: 48        -         pha
120e: a9 02     -         lda #color
1210: 8d 86 02  -         sta foreground_color
1213: a2 00     -         ldx #$00
1215: bd f1 3d  -         lda msg,x
1218: f0 07     -         beq !done+
121a: 20 d2 ff  -         jsr kernal_chrout
121d: e8        -         inx
121e: 4c 15 12  -         jmp !loop-
1221: 68        -         pla
1222: 8d 86 02  -         sta foreground_color
1225: a2 00     -         ldx #$00
1227: bd 36 12  -         lda msg,x
122a: f0 07     -         beq !done+
122c: 20 d2 ff  -         jsr kernal_chrout
122f: e8        -         inx
1230: 4c 27 12  -         jmp !loop-
1233: 4c 38 12  -         jmp !done+
1236: 0d 00     - memory: .byte RETURN, NULL
1238: ae f5 3d  -         ldx TEST_NAME_COUNT
123b: e0 15     -         cpx #TESTS_PER_PAGE
123d: d0 5d     -         bne !exit+
123f: ad 86 02  -         lda foreground_color
1242: 48        -         pha
1243: a9 01     -         lda #color
1245: 8d 86 02  -         sta foreground_color
1248: a2 00     -         ldx #$00
124a: bd 5d 12  -         lda msg,x
124d: f0 07     -         beq !done+
124f: 20 d2 ff  -         jsr kernal_chrout
1252: e8        -         inx
1253: 4c 4a 12  -         jmp !loop-
1256: 68        -         pla
1257: 8d 86 02  -         sta foreground_color
125a: 4c 7c 12  -         jmp !no_key+
125d: 0d        - memory: .byte RETURN
125e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
126e: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
127a: 0d 00     -         .byte RETURN, NULL
127c: 20 9f ff  -         jsr scnkey  // scan keyboard
127f: 20 e4 ff  -         jsr getin	// put result into A
1282: f0 f8     -         beq !no_key-
1284: a2 00     -         ldx #$00
1286: bd 95 12  -         lda msg,x
1289: f0 07     -         beq !done+
128b: 20 d2 ff  -         jsr kernal_chrout
128e: e8        -         inx
128f: 4c 86 12  -         jmp !loop-
1292: 4c 97 12  -         jmp !done+
1295: 0d 00     - newline:.byte RETURN, NULL
1297: a2 00     -         ldx #$00
1299: 8e f5 3d  -         stx TEST_NAME_COUNT
129c: 60        -         rts
129d: ee f5 3d  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
12a0: ad 86 02  -         lda foreground_color
12a3: 48        -         pha
12a4: a9 0f     -         lda #color
12a6: 8d 86 02  -         sta foreground_color
12a9: a2 00     -         ldx #$00
12ab: bd be 12  -         lda msg,x
12ae: f0 07     -         beq !done+
12b0: 20 d2 ff  -         jsr kernal_chrout
12b3: e8        -         inx
12b4: 4c ab 12  -         jmp !loop-
12b7: 68        -         pla
12b8: 8d 86 02  -         sta foreground_color
12bb: 4c d8 12  -         jmp !done+
12be: 20 20     - memory: .fill spacing, spacebar
12c0: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
12d0: 52 45 43 54                                     
12d4: 2e 2e 2e  -         .text "..."
12d7: 00        -         .byte NULL
12d8: 20 86 08  -         jsr SW16
12db: 15        -         .byte opcode(op, register)
12dc: 0b 3e     -         .word address.getValue()
12de: 65        -         .byte opcode($60, register) }
12df: 00        -         .byte $00 }
12e0: ee f3 3d  -         inc TEST_COUNT
12e3: ad 86 02  -         lda foreground_color
12e6: 48        -         pha
12e7: a9 0e     -         lda #color
12e9: 8d 86 02  -         sta foreground_color
12ec: a2 00     -         ldx #$00
12ee: bd 01 13  -         lda msg,x
12f1: f0 07     -         beq !done+
12f3: 20 d2 ff  -         jsr kernal_chrout
12f6: e8        -         inx
12f7: 4c ee 12  -         jmp !loop-
12fa: 68        -         pla
12fb: 8d 86 02  -         sta foreground_color
12fe: 4c 07 13  -         jmp !done+
1301: 20        - memory: .byte spacebar
1302: 41 43 43  -         .text description
1305: 3a        -         .text ":"
1306: 00        -         .byte NULL
1307: a6 17     -         ldx rl(register.getValue())
1309: a4 18     -         ldy rh(register.getValue())
130b: ec 0b 3e  -         cpx address
130e: d0 26     -         bne !failed+
1310: cc 0c 3e  -         cpy address+1
1313: d0 21     -         bne !failed+
1315: ee f4 3d  -         inc TEST_PASS_COUNT
1318: ad 86 02  -         lda foreground_color
131b: 48        -         pha
131c: a9 05     -         lda #color
131e: 8d 86 02  -         sta foreground_color
1321: a2 00     -         ldx #$00
1323: bd ef 3d  -         lda msg,x
1326: f0 07     -         beq !done+
1328: 20 d2 ff  -         jsr kernal_chrout
132b: e8        -         inx
132c: 4c 23 13  -         jmp !loop-
132f: 68        -         pla
1330: 8d 86 02  -         sta foreground_color
1333: 4c 51 13  -         jmp !done+
1336: ad 86 02  -         lda foreground_color
1339: 48        -         pha
133a: a9 02     -         lda #color
133c: 8d 86 02  -         sta foreground_color
133f: a2 00     -         ldx #$00
1341: bd f1 3d  -         lda msg,x
1344: f0 07     -         beq !done+
1346: 20 d2 ff  -         jsr kernal_chrout
1349: e8        -         inx
134a: 4c 41 13  -         jmp !loop-
134d: 68        -         pla
134e: 8d 86 02  -         sta foreground_color
1351: ee f3 3d  -         inc TEST_COUNT
1354: ad 86 02  -         lda foreground_color
1357: 48        -         pha
1358: a9 0e     -         lda #color
135a: 8d 86 02  -         sta foreground_color
135d: a2 00     -         ldx #$00
135f: bd 72 13  -         lda msg,x
1362: f0 07     -         beq !done+
1364: 20 d2 ff  -         jsr kernal_chrout
1367: e8        -         inx
1368: 4c 5f 13  -         jmp !loop-
136b: 68        -         pla
136c: 8d 86 02  -         sta foreground_color
136f: 4c 77 13  -         jmp !done+
1372: 20        - memory: .byte spacebar
1373: 2b 32     -         .text description
1375: 3a        -         .text ":"
1376: 00        -         .byte NULL
1377: a6 21     -         ldx rl(register.getValue())
1379: a4 22     -         ldy rh(register.getValue())
137b: e0 0d     -         cpx #<value
137d: d0 25     -         bne !failed+
137f: c0 3e     -         cpy #>value
1381: d0 21     -         bne !failed+
1383: ee f4 3d  -         inc TEST_PASS_COUNT
1386: ad 86 02  -         lda foreground_color
1389: 48        -         pha
138a: a9 05     -         lda #color
138c: 8d 86 02  -         sta foreground_color
138f: a2 00     -         ldx #$00
1391: bd ef 3d  -         lda msg,x
1394: f0 07     -         beq !done+
1396: 20 d2 ff  -         jsr kernal_chrout
1399: e8        -         inx
139a: 4c 91 13  -         jmp !loop-
139d: 68        -         pla
139e: 8d 86 02  -         sta foreground_color
13a1: 4c bf 13  -         jmp !done+
13a4: ad 86 02  -         lda foreground_color
13a7: 48        -         pha
13a8: a9 02     -         lda #color
13aa: 8d 86 02  -         sta foreground_color
13ad: a2 00     -         ldx #$00
13af: bd f1 3d  -         lda msg,x
13b2: f0 07     -         beq !done+
13b4: 20 d2 ff  -         jsr kernal_chrout
13b7: e8        -         inx
13b8: 4c af 13  -         jmp !loop-
13bb: 68        -         pla
13bc: 8d 86 02  -         sta foreground_color
13bf: a2 00     -         ldx #$00
13c1: bd d0 13  -         lda msg,x
13c4: f0 07     -         beq !done+
13c6: 20 d2 ff  -         jsr kernal_chrout
13c9: e8        -         inx
13ca: 4c c1 13  -         jmp !loop-
13cd: 4c d2 13  -         jmp !done+
13d0: 0d 00     - memory: .byte RETURN, NULL
13d2: ae f5 3d  -         ldx TEST_NAME_COUNT
13d5: e0 15     -         cpx #TESTS_PER_PAGE
13d7: d0 5d     -         bne !exit+
13d9: ad 86 02  -         lda foreground_color
13dc: 48        -         pha
13dd: a9 01     -         lda #color
13df: 8d 86 02  -         sta foreground_color
13e2: a2 00     -         ldx #$00
13e4: bd f7 13  -         lda msg,x
13e7: f0 07     -         beq !done+
13e9: 20 d2 ff  -         jsr kernal_chrout
13ec: e8        -         inx
13ed: 4c e4 13  -         jmp !loop-
13f0: 68        -         pla
13f1: 8d 86 02  -         sta foreground_color
13f4: 4c 16 14  -         jmp !no_key+
13f7: 0d        - memory: .byte RETURN
13f8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1408: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1414: 0d 00     -         .byte RETURN, NULL
1416: 20 9f ff  -         jsr scnkey  // scan keyboard
1419: 20 e4 ff  -         jsr getin	// put result into A
141c: f0 f8     -         beq !no_key-
141e: a2 00     -         ldx #$00
1420: bd 2f 14  -         lda msg,x
1423: f0 07     -         beq !done+
1425: 20 d2 ff  -         jsr kernal_chrout
1428: e8        -         inx
1429: 4c 20 14  -         jmp !loop-
142c: 4c 31 14  -         jmp !done+
142f: 0d 00     - newline:.byte RETURN, NULL
1431: a2 00     -         ldx #$00
1433: 8e f5 3d  -         stx TEST_NAME_COUNT
1436: 60        -         rts
1437: ee f5 3d  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
143a: ad 86 02  -         lda foreground_color
143d: 48        -         pha
143e: a9 0f     -         lda #color
1440: 8d 86 02  -         sta foreground_color
1443: a2 00     -         ldx #$00
1445: bd 58 14  -         lda msg,x
1448: f0 07     -         beq !done+
144a: 20 d2 ff  -         jsr kernal_chrout
144d: e8        -         inx
144e: 4c 45 14  -         jmp !loop-
1451: 68        -         pla
1452: 8d 86 02  -         sta foreground_color
1455: 4c 6b 14  -         jmp !done+
1458: 20 20     - memory: .fill spacing, spacebar
145a: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
1467: 2e 2e 2e  -         .text "..."
146a: 00        -         .byte NULL
146b: 20 86 08  -         jsr SW16
146e: 15        -         .byte opcode(op, register)
146f: 0b 3e     -         .word address.getValue()
1471: 16        -         .byte opcode(op, register)
1472: 0d 3e     -         .word address.getValue()
1474: 65        -         .byte opcode($60, register) }
1475: 76        -         .byte opcode($70, register) }
1476: 00        -         .byte $00 }
1477: ee f3 3d  -         inc TEST_COUNT
147a: ad 86 02  -         lda foreground_color
147d: 48        -         pha
147e: a9 0e     -         lda #color
1480: 8d 86 02  -         sta foreground_color
1483: a2 00     -         ldx #$00
1485: bd 98 14  -         lda msg,x
1488: f0 07     -         beq !done+
148a: 20 d2 ff  -         jsr kernal_chrout
148d: e8        -         inx
148e: 4c 85 14  -         jmp !loop-
1491: 68        -         pla
1492: 8d 86 02  -         sta foreground_color
1495: 4c 9e 14  -         jmp !done+
1498: 20        - memory: .byte spacebar
1499: 4d 45 4d  -         .text description
149c: 3a        -         .text ":"
149d: 00        -         .byte NULL
149e: a2 ff     -         ldx #$ff
14a0: e8        -         inx
14a1: e0 02     -         cpx #size
14a3: f0 0b     -         beq !success+
14a5: bd 0b 3e  -         lda source,x
14a8: dd 0d 3e  -         cmp dest,x
14ab: f0 f3     -         beq !loop-
14ad: 4c d1 14  -         jmp !failed+
14b0: ee f4 3d  -         inc TEST_PASS_COUNT
14b3: ad 86 02  -         lda foreground_color
14b6: 48        -         pha
14b7: a9 05     -         lda #color
14b9: 8d 86 02  -         sta foreground_color
14bc: a2 00     -         ldx #$00
14be: bd ef 3d  -         lda msg,x
14c1: f0 07     -         beq !done+
14c3: 20 d2 ff  -         jsr kernal_chrout
14c6: e8        -         inx
14c7: 4c be 14  -         jmp !loop-
14ca: 68        -         pla
14cb: 8d 86 02  -         sta foreground_color
14ce: 4c ec 14  -         jmp !done+
14d1: ad 86 02  -         lda foreground_color
14d4: 48        -         pha
14d5: a9 02     -         lda #color
14d7: 8d 86 02  -         sta foreground_color
14da: a2 00     -         ldx #$00
14dc: bd f1 3d  -         lda msg,x
14df: f0 07     -         beq !done+
14e1: 20 d2 ff  -         jsr kernal_chrout
14e4: e8        -         inx
14e5: 4c dc 14  -         jmp !loop-
14e8: 68        -         pla
14e9: 8d 86 02  -         sta foreground_color
14ec: ee f3 3d  -         inc TEST_COUNT
14ef: ad 86 02  -         lda foreground_color
14f2: 48        -         pha
14f3: a9 0e     -         lda #color
14f5: 8d 86 02  -         sta foreground_color
14f8: a2 00     -         ldx #$00
14fa: bd 0d 15  -         lda msg,x
14fd: f0 07     -         beq !done+
14ff: 20 d2 ff  -         jsr kernal_chrout
1502: e8        -         inx
1503: 4c fa 14  -         jmp !loop-
1506: 68        -         pla
1507: 8d 86 02  -         sta foreground_color
150a: 4c 13 15  -         jmp !done+
150d: 20        - memory: .byte spacebar
150e: 53 2b 32  -         .text description
1511: 3a        -         .text ":"
1512: 00        -         .byte NULL
1513: a6 21     -         ldx rl(register.getValue())
1515: a4 22     -         ldy rh(register.getValue())
1517: e0 0d     -         cpx #<value
1519: d0 25     -         bne !failed+
151b: c0 3e     -         cpy #>value
151d: d0 21     -         bne !failed+
151f: ee f4 3d  -         inc TEST_PASS_COUNT
1522: ad 86 02  -         lda foreground_color
1525: 48        -         pha
1526: a9 05     -         lda #color
1528: 8d 86 02  -         sta foreground_color
152b: a2 00     -         ldx #$00
152d: bd ef 3d  -         lda msg,x
1530: f0 07     -         beq !done+
1532: 20 d2 ff  -         jsr kernal_chrout
1535: e8        -         inx
1536: 4c 2d 15  -         jmp !loop-
1539: 68        -         pla
153a: 8d 86 02  -         sta foreground_color
153d: 4c 5b 15  -         jmp !done+
1540: ad 86 02  -         lda foreground_color
1543: 48        -         pha
1544: a9 02     -         lda #color
1546: 8d 86 02  -         sta foreground_color
1549: a2 00     -         ldx #$00
154b: bd f1 3d  -         lda msg,x
154e: f0 07     -         beq !done+
1550: 20 d2 ff  -         jsr kernal_chrout
1553: e8        -         inx
1554: 4c 4b 15  -         jmp !loop-
1557: 68        -         pla
1558: 8d 86 02  -         sta foreground_color
155b: ee f3 3d  -         inc TEST_COUNT
155e: ad 86 02  -         lda foreground_color
1561: 48        -         pha
1562: a9 0e     -         lda #color
1564: 8d 86 02  -         sta foreground_color
1567: a2 00     -         ldx #$00
1569: bd 7c 15  -         lda msg,x
156c: f0 07     -         beq !done+
156e: 20 d2 ff  -         jsr kernal_chrout
1571: e8        -         inx
1572: 4c 69 15  -         jmp !loop-
1575: 68        -         pla
1576: 8d 86 02  -         sta foreground_color
1579: 4c 82 15  -         jmp !done+
157c: 20        - memory: .byte spacebar
157d: 44 2b 32  -         .text description
1580: 3a        -         .text ":"
1581: 00        -         .byte NULL
1582: a6 23     -         ldx rl(register.getValue())
1584: a4 24     -         ldy rh(register.getValue())
1586: e0 0f     -         cpx #<value
1588: d0 25     -         bne !failed+
158a: c0 3e     -         cpy #>value
158c: d0 21     -         bne !failed+
158e: ee f4 3d  -         inc TEST_PASS_COUNT
1591: ad 86 02  -         lda foreground_color
1594: 48        -         pha
1595: a9 05     -         lda #color
1597: 8d 86 02  -         sta foreground_color
159a: a2 00     -         ldx #$00
159c: bd ef 3d  -         lda msg,x
159f: f0 07     -         beq !done+
15a1: 20 d2 ff  -         jsr kernal_chrout
15a4: e8        -         inx
15a5: 4c 9c 15  -         jmp !loop-
15a8: 68        -         pla
15a9: 8d 86 02  -         sta foreground_color
15ac: 4c ca 15  -         jmp !done+
15af: ad 86 02  -         lda foreground_color
15b2: 48        -         pha
15b3: a9 02     -         lda #color
15b5: 8d 86 02  -         sta foreground_color
15b8: a2 00     -         ldx #$00
15ba: bd f1 3d  -         lda msg,x
15bd: f0 07     -         beq !done+
15bf: 20 d2 ff  -         jsr kernal_chrout
15c2: e8        -         inx
15c3: 4c ba 15  -         jmp !loop-
15c6: 68        -         pla
15c7: 8d 86 02  -         sta foreground_color
15ca: a2 00     -         ldx #$00
15cc: bd db 15  -         lda msg,x
15cf: f0 07     -         beq !done+
15d1: 20 d2 ff  -         jsr kernal_chrout
15d4: e8        -         inx
15d5: 4c cc 15  -         jmp !loop-
15d8: 4c dd 15  -         jmp !done+
15db: 0d 00     - memory: .byte RETURN, NULL
15dd: ae f5 3d  -         ldx TEST_NAME_COUNT
15e0: e0 15     -         cpx #TESTS_PER_PAGE
15e2: d0 5d     -         bne !exit+
15e4: ad 86 02  -         lda foreground_color
15e7: 48        -         pha
15e8: a9 01     -         lda #color
15ea: 8d 86 02  -         sta foreground_color
15ed: a2 00     -         ldx #$00
15ef: bd 02 16  -         lda msg,x
15f2: f0 07     -         beq !done+
15f4: 20 d2 ff  -         jsr kernal_chrout
15f7: e8        -         inx
15f8: 4c ef 15  -         jmp !loop-
15fb: 68        -         pla
15fc: 8d 86 02  -         sta foreground_color
15ff: 4c 21 16  -         jmp !no_key+
1602: 0d        - memory: .byte RETURN
1603: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1613: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
161f: 0d 00     -         .byte RETURN, NULL
1621: 20 9f ff  -         jsr scnkey  // scan keyboard
1624: 20 e4 ff  -         jsr getin	// put result into A
1627: f0 f8     -         beq !no_key-
1629: a2 00     -         ldx #$00
162b: bd 3a 16  -         lda msg,x
162e: f0 07     -         beq !done+
1630: 20 d2 ff  -         jsr kernal_chrout
1633: e8        -         inx
1634: 4c 2b 16  -         jmp !loop-
1637: 4c 3c 16  -         jmp !done+
163a: 0d 00     - newline:.byte RETURN, NULL
163c: a2 00     -         ldx #$00
163e: 8e f5 3d  -         stx TEST_NAME_COUNT
1641: 60        -         rts
1642: ee f5 3d  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1645: ad 86 02  -         lda foreground_color
1648: 48        -         pha
1649: a9 0f     -         lda #color
164b: 8d 86 02  -         sta foreground_color
164e: a2 00     -         ldx #$00
1650: bd 63 16  -         lda msg,x
1653: f0 07     -         beq !done+
1655: 20 d2 ff  -         jsr kernal_chrout
1658: e8        -         inx
1659: 4c 50 16  -         jmp !loop-
165c: 68        -         pla
165d: 8d 86 02  -         sta foreground_color
1660: 4c 77 16  -         jmp !done+
1663: 20 20     - memory: .fill spacing, spacebar
1665: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
1673: 2e 2e 2e  -         .text "..."
1676: 00        -         .byte NULL
1677: 20 86 08  -         jsr SW16
167a: 15        -         .byte opcode(op, register)
167b: 31 3e     -         .word address.getValue()
167d: 10        -         .byte opcode(op, register)
167e: 04 00     -         .word address.getValue()
1680: 55        -         .byte opcode($50, register) }
1681: 0d        -         .byte $0d
1682: 17        -         .byte >(address.getValue()-1)
1683: 16        -         .byte <(address.getValue()-1)
1684: 10        -         .byte opcode(op, register)
1685: 05 00     -         .word address.getValue()
1687: 55        -         .byte opcode($50, register) }
1688: 0d        -         .byte $0d
1689: 17        -         .byte >(address.getValue()-1)
168a: 81        -         .byte <(address.getValue()-1)
168b: 10        -         .byte opcode(op, register)
168c: 06 00     -         .word address.getValue()
168e: 55        -         .byte opcode($50, register) }
168f: 0d        -         .byte $0d
1690: 17        -         .byte >(address.getValue()-1)
1691: ec        -         .byte <(address.getValue()-1)
1692: 85        -         .byte opcode($80, register) }
1693: 0d        -         .byte $0d
1694: 18        -         .byte >(address.getValue()-1)
1695: 57        -         .byte <(address.getValue()-1)
1696: 85        -         .byte opcode($80, register) }
1697: 0d        -         .byte $0d
1698: 19        -         .byte >(address.getValue()-1)
1699: 72        -         .byte <(address.getValue()-1)
169a: 85        -         .byte opcode($80, register) }
169b: 0d        -         .byte $0d
169c: 19        -         .byte >(address.getValue()-1)
169d: e1        -         .byte <(address.getValue()-1)
169e: 00        -         .byte $00 }
169f: a2 00     -         ldx #$00
16a1: bd b0 16  -         lda msg,x
16a4: f0 07     -         beq !done+
16a6: 20 d2 ff  -         jsr kernal_chrout
16a9: e8        -         inx
16aa: 4c a1 16  -         jmp !loop-
16ad: 4c b2 16  -         jmp !done+
16b0: 0d 00     - memory: .byte RETURN, NULL
16b2: ae f5 3d  -         ldx TEST_NAME_COUNT
16b5: e0 15     -         cpx #TESTS_PER_PAGE
16b7: d0 5d     -         bne !exit+
16b9: ad 86 02  -         lda foreground_color
16bc: 48        -         pha
16bd: a9 01     -         lda #color
16bf: 8d 86 02  -         sta foreground_color
16c2: a2 00     -         ldx #$00
16c4: bd d7 16  -         lda msg,x
16c7: f0 07     -         beq !done+
16c9: 20 d2 ff  -         jsr kernal_chrout
16cc: e8        -         inx
16cd: 4c c4 16  -         jmp !loop-
16d0: 68        -         pla
16d1: 8d 86 02  -         sta foreground_color
16d4: 4c f6 16  -         jmp !no_key+
16d7: 0d        - memory: .byte RETURN
16d8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
16e8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
16f4: 0d 00     -         .byte RETURN, NULL
16f6: 20 9f ff  -         jsr scnkey  // scan keyboard
16f9: 20 e4 ff  -         jsr getin	// put result into A
16fc: f0 f8     -         beq !no_key-
16fe: a2 00     -         ldx #$00
1700: bd 0f 17  -         lda msg,x
1703: f0 07     -         beq !done+
1705: 20 d2 ff  -         jsr kernal_chrout
1708: e8        -         inx
1709: 4c 00 17  -         jmp !loop-
170c: 4c 11 17  -         jmp !done+
170f: 0d 00     - newline:.byte RETURN, NULL
1711: a2 00     -         ldx #$00
1713: 8e f5 3d  -         stx TEST_NAME_COUNT
1716: 60        -         rts
1717: ee f3 3d  -         inc TEST_COUNT
171a: ad 86 02  -         lda foreground_color
171d: 48        -         pha
171e: a9 0e     -         lda #color
1720: 8d 86 02  -         sta foreground_color
1723: a2 00     -         ldx #$00
1725: bd 38 17  -         lda msg,x
1728: f0 07     -         beq !done+
172a: 20 d2 ff  -         jsr kernal_chrout
172d: e8        -         inx
172e: 4c 25 17  -         jmp !loop-
1731: 68        -         pla
1732: 8d 86 02  -         sta foreground_color
1735: 4c 3c 17  -         jmp !done+
1738: 20        - memory: .byte spacebar
1739: 31        -         .text description
173a: 3a        -         .text ":"
173b: 00        -         .byte NULL
173c: a6 17     -         ldx rl(register.getValue())
173e: a4 18     -         ldy rh(register.getValue())
1740: ec 31 3e  -         cpx address
1743: d0 21     -         bne !failed+
1745: ee f4 3d  -         inc TEST_PASS_COUNT
1748: ad 86 02  -         lda foreground_color
174b: 48        -         pha
174c: a9 05     -         lda #color
174e: 8d 86 02  -         sta foreground_color
1751: a2 00     -         ldx #$00
1753: bd ef 3d  -         lda msg,x
1756: f0 07     -         beq !done+
1758: 20 d2 ff  -         jsr kernal_chrout
175b: e8        -         inx
175c: 4c 53 17  -         jmp !loop-
175f: 68        -         pla
1760: 8d 86 02  -         sta foreground_color
1763: 4c 81 17  -         jmp !done+
1766: ad 86 02  -         lda foreground_color
1769: 48        -         pha
176a: a9 02     -         lda #color
176c: 8d 86 02  -         sta foreground_color
176f: a2 00     -         ldx #$00
1771: bd f1 3d  -         lda msg,x
1774: f0 07     -         beq !done+
1776: 20 d2 ff  -         jsr kernal_chrout
1779: e8        -         inx
177a: 4c 71 17  -         jmp !loop-
177d: 68        -         pla
177e: 8d 86 02  -         sta foreground_color
1781: 60        -         rts
1782: ee f3 3d  -         inc TEST_COUNT
1785: ad 86 02  -         lda foreground_color
1788: 48        -         pha
1789: a9 0e     -         lda #color
178b: 8d 86 02  -         sta foreground_color
178e: a2 00     -         ldx #$00
1790: bd a3 17  -         lda msg,x
1793: f0 07     -         beq !done+
1795: 20 d2 ff  -         jsr kernal_chrout
1798: e8        -         inx
1799: 4c 90 17  -         jmp !loop-
179c: 68        -         pla
179d: 8d 86 02  -         sta foreground_color
17a0: 4c a7 17  -         jmp !done+
17a3: 20        - memory: .byte spacebar
17a4: 32        -         .text description
17a5: 3a        -         .text ":"
17a6: 00        -         .byte NULL
17a7: a6 17     -         ldx rl(register.getValue())
17a9: a4 18     -         ldy rh(register.getValue())
17ab: ec 32 3e  -         cpx address
17ae: d0 21     -         bne !failed+
17b0: ee f4 3d  -         inc TEST_PASS_COUNT
17b3: ad 86 02  -         lda foreground_color
17b6: 48        -         pha
17b7: a9 05     -         lda #color
17b9: 8d 86 02  -         sta foreground_color
17bc: a2 00     -         ldx #$00
17be: bd ef 3d  -         lda msg,x
17c1: f0 07     -         beq !done+
17c3: 20 d2 ff  -         jsr kernal_chrout
17c6: e8        -         inx
17c7: 4c be 17  -         jmp !loop-
17ca: 68        -         pla
17cb: 8d 86 02  -         sta foreground_color
17ce: 4c ec 17  -         jmp !done+
17d1: ad 86 02  -         lda foreground_color
17d4: 48        -         pha
17d5: a9 02     -         lda #color
17d7: 8d 86 02  -         sta foreground_color
17da: a2 00     -         ldx #$00
17dc: bd f1 3d  -         lda msg,x
17df: f0 07     -         beq !done+
17e1: 20 d2 ff  -         jsr kernal_chrout
17e4: e8        -         inx
17e5: 4c dc 17  -         jmp !loop-
17e8: 68        -         pla
17e9: 8d 86 02  -         sta foreground_color
17ec: 60        -         rts
17ed: ee f3 3d  -         inc TEST_COUNT
17f0: ad 86 02  -         lda foreground_color
17f3: 48        -         pha
17f4: a9 0e     -         lda #color
17f6: 8d 86 02  -         sta foreground_color
17f9: a2 00     -         ldx #$00
17fb: bd 0e 18  -         lda msg,x
17fe: f0 07     -         beq !done+
1800: 20 d2 ff  -         jsr kernal_chrout
1803: e8        -         inx
1804: 4c fb 17  -         jmp !loop-
1807: 68        -         pla
1808: 8d 86 02  -         sta foreground_color
180b: 4c 12 18  -         jmp !done+
180e: 20        - memory: .byte spacebar
180f: 33        -         .text description
1810: 3a        -         .text ":"
1811: 00        -         .byte NULL
1812: a6 17     -         ldx rl(register.getValue())
1814: a4 18     -         ldy rh(register.getValue())
1816: ec 33 3e  -         cpx address
1819: d0 21     -         bne !failed+
181b: ee f4 3d  -         inc TEST_PASS_COUNT
181e: ad 86 02  -         lda foreground_color
1821: 48        -         pha
1822: a9 05     -         lda #color
1824: 8d 86 02  -         sta foreground_color
1827: a2 00     -         ldx #$00
1829: bd ef 3d  -         lda msg,x
182c: f0 07     -         beq !done+
182e: 20 d2 ff  -         jsr kernal_chrout
1831: e8        -         inx
1832: 4c 29 18  -         jmp !loop-
1835: 68        -         pla
1836: 8d 86 02  -         sta foreground_color
1839: 4c 57 18  -         jmp !done+
183c: ad 86 02  -         lda foreground_color
183f: 48        -         pha
1840: a9 02     -         lda #color
1842: 8d 86 02  -         sta foreground_color
1845: a2 00     -         ldx #$00
1847: bd f1 3d  -         lda msg,x
184a: f0 07     -         beq !done+
184c: 20 d2 ff  -         jsr kernal_chrout
184f: e8        -         inx
1850: 4c 47 18  -         jmp !loop-
1853: 68        -         pla
1854: 8d 86 02  -         sta foreground_color
1857: 60        -         rts
1858: a2 00     -         ldx #$00
185a: bd 69 18  -         lda msg,x
185d: f0 07     -         beq !done+
185f: 20 d2 ff  -         jsr kernal_chrout
1862: e8        -         inx
1863: 4c 5a 18  -         jmp !loop-
1866: 4c 6b 18  -         jmp !done+
1869: 0d 00     - memory: .byte RETURN, NULL
186b: ae f5 3d  -         ldx TEST_NAME_COUNT
186e: e0 15     -         cpx #TESTS_PER_PAGE
1870: d0 5d     -         bne !exit+
1872: ad 86 02  -         lda foreground_color
1875: 48        -         pha
1876: a9 01     -         lda #color
1878: 8d 86 02  -         sta foreground_color
187b: a2 00     -         ldx #$00
187d: bd 90 18  -         lda msg,x
1880: f0 07     -         beq !done+
1882: 20 d2 ff  -         jsr kernal_chrout
1885: e8        -         inx
1886: 4c 7d 18  -         jmp !loop-
1889: 68        -         pla
188a: 8d 86 02  -         sta foreground_color
188d: 4c af 18  -         jmp !no_key+
1890: 0d        - memory: .byte RETURN
1891: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
18a1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
18ad: 0d 00     -         .byte RETURN, NULL
18af: 20 9f ff  -         jsr scnkey  // scan keyboard
18b2: 20 e4 ff  -         jsr getin	// put result into A
18b5: f0 f8     -         beq !no_key-
18b7: a2 00     -         ldx #$00
18b9: bd c8 18  -         lda msg,x
18bc: f0 07     -         beq !done+
18be: 20 d2 ff  -         jsr kernal_chrout
18c1: e8        -         inx
18c2: 4c b9 18  -         jmp !loop-
18c5: 4c ca 18  -         jmp !done+
18c8: 0d 00     - newline:.byte RETURN, NULL
18ca: a2 00     -         ldx #$00
18cc: 8e f5 3d  -         stx TEST_NAME_COUNT
18cf: ee f5 3d  -         inc TEST_NAME_COUNT
18d2: ad 86 02  -         lda foreground_color
18d5: 48        -         pha
18d6: a9 0f     -         lda #color
18d8: 8d 86 02  -         sta foreground_color
18db: a2 00     -         ldx #$00
18dd: bd f0 18  -         lda msg,x
18e0: f0 07     -         beq !done+
18e2: 20 d2 ff  -         jsr kernal_chrout
18e5: e8        -         inx
18e6: 4c dd 18  -         jmp !loop-
18e9: 68        -         pla
18ea: 8d 86 02  -         sta foreground_color
18ed: 4c 04 19  -         jmp !done+
18f0: 20 20     - memory: .fill spacing, spacebar
18f2: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
1900: 2e 2e 2e  -         .text "..."
1903: 00        -         .byte NULL
1904: ee f3 3d  -         inc TEST_COUNT
1907: ad 86 02  -         lda foreground_color
190a: 48        -         pha
190b: a9 0e     -         lda #color
190d: 8d 86 02  -         sta foreground_color
1910: a2 00     -         ldx #$00
1912: bd 25 19  -         lda msg,x
1915: f0 07     -         beq !done+
1917: 20 d2 ff  -         jsr kernal_chrout
191a: e8        -         inx
191b: 4c 12 19  -         jmp !loop-
191e: 68        -         pla
191f: 8d 86 02  -         sta foreground_color
1922: 4c 2a 19  -         jmp !done+
1925: 20        - memory: .byte spacebar
1926: 50 33     -         .text description
1928: 3a        -         .text ":"
1929: 00        -         .byte NULL
192a: a6 17     -         ldx rl(register.getValue())
192c: a4 18     -         ldy rh(register.getValue())
192e: e0 06     -         cpx #<value
1930: d0 25     -         bne !failed+
1932: c0 00     -         cpy #>value
1934: d0 21     -         bne !failed+
1936: ee f4 3d  -         inc TEST_PASS_COUNT
1939: ad 86 02  -         lda foreground_color
193c: 48        -         pha
193d: a9 05     -         lda #color
193f: 8d 86 02  -         sta foreground_color
1942: a2 00     -         ldx #$00
1944: bd ef 3d  -         lda msg,x
1947: f0 07     -         beq !done+
1949: 20 d2 ff  -         jsr kernal_chrout
194c: e8        -         inx
194d: 4c 44 19  -         jmp !loop-
1950: 68        -         pla
1951: 8d 86 02  -         sta foreground_color
1954: 4c 72 19  -         jmp !done+
1957: ad 86 02  -         lda foreground_color
195a: 48        -         pha
195b: a9 02     -         lda #color
195d: 8d 86 02  -         sta foreground_color
1960: a2 00     -         ldx #$00
1962: bd f1 3d  -         lda msg,x
1965: f0 07     -         beq !done+
1967: 20 d2 ff  -         jsr kernal_chrout
196a: e8        -         inx
196b: 4c 62 19  -         jmp !loop-
196e: 68        -         pla
196f: 8d 86 02  -         sta foreground_color
1972: 60        -         rts
1973: ee f3 3d  -         inc TEST_COUNT
1976: ad 86 02  -         lda foreground_color
1979: 48        -         pha
197a: a9 0e     -         lda #color
197c: 8d 86 02  -         sta foreground_color
197f: a2 00     -         ldx #$00
1981: bd 94 19  -         lda msg,x
1984: f0 07     -         beq !done+
1986: 20 d2 ff  -         jsr kernal_chrout
1989: e8        -         inx
198a: 4c 81 19  -         jmp !loop-
198d: 68        -         pla
198e: 8d 86 02  -         sta foreground_color
1991: 4c 99 19  -         jmp !done+
1994: 20        - memory: .byte spacebar
1995: 50 32     -         .text description
1997: 3a        -         .text ":"
1998: 00        -         .byte NULL
1999: a6 17     -         ldx rl(register.getValue())
199b: a4 18     -         ldy rh(register.getValue())
199d: e0 05     -         cpx #<value
199f: d0 25     -         bne !failed+
19a1: c0 00     -         cpy #>value
19a3: d0 21     -         bne !failed+
19a5: ee f4 3d  -         inc TEST_PASS_COUNT
19a8: ad 86 02  -         lda foreground_color
19ab: 48        -         pha
19ac: a9 05     -         lda #color
19ae: 8d 86 02  -         sta foreground_color
19b1: a2 00     -         ldx #$00
19b3: bd ef 3d  -         lda msg,x
19b6: f0 07     -         beq !done+
19b8: 20 d2 ff  -         jsr kernal_chrout
19bb: e8        -         inx
19bc: 4c b3 19  -         jmp !loop-
19bf: 68        -         pla
19c0: 8d 86 02  -         sta foreground_color
19c3: 4c e1 19  -         jmp !done+
19c6: ad 86 02  -         lda foreground_color
19c9: 48        -         pha
19ca: a9 02     -         lda #color
19cc: 8d 86 02  -         sta foreground_color
19cf: a2 00     -         ldx #$00
19d1: bd f1 3d  -         lda msg,x
19d4: f0 07     -         beq !done+
19d6: 20 d2 ff  -         jsr kernal_chrout
19d9: e8        -         inx
19da: 4c d1 19  -         jmp !loop-
19dd: 68        -         pla
19de: 8d 86 02  -         sta foreground_color
19e1: 60        -         rts
19e2: ee f3 3d  -         inc TEST_COUNT
19e5: ad 86 02  -         lda foreground_color
19e8: 48        -         pha
19e9: a9 0e     -         lda #color
19eb: 8d 86 02  -         sta foreground_color
19ee: a2 00     -         ldx #$00
19f0: bd 03 1a  -         lda msg,x
19f3: f0 07     -         beq !done+
19f5: 20 d2 ff  -         jsr kernal_chrout
19f8: e8        -         inx
19f9: 4c f0 19  -         jmp !loop-
19fc: 68        -         pla
19fd: 8d 86 02  -         sta foreground_color
1a00: 4c 08 1a  -         jmp !done+
1a03: 20        - memory: .byte spacebar
1a04: 50 31     -         .text description
1a06: 3a        -         .text ":"
1a07: 00        -         .byte NULL
1a08: a6 17     -         ldx rl(register.getValue())
1a0a: a4 18     -         ldy rh(register.getValue())
1a0c: e0 04     -         cpx #<value
1a0e: d0 25     -         bne !failed+
1a10: c0 00     -         cpy #>value
1a12: d0 21     -         bne !failed+
1a14: ee f4 3d  -         inc TEST_PASS_COUNT
1a17: ad 86 02  -         lda foreground_color
1a1a: 48        -         pha
1a1b: a9 05     -         lda #color
1a1d: 8d 86 02  -         sta foreground_color
1a20: a2 00     -         ldx #$00
1a22: bd ef 3d  -         lda msg,x
1a25: f0 07     -         beq !done+
1a27: 20 d2 ff  -         jsr kernal_chrout
1a2a: e8        -         inx
1a2b: 4c 22 1a  -         jmp !loop-
1a2e: 68        -         pla
1a2f: 8d 86 02  -         sta foreground_color
1a32: 4c 50 1a  -         jmp !done+
1a35: ad 86 02  -         lda foreground_color
1a38: 48        -         pha
1a39: a9 02     -         lda #color
1a3b: 8d 86 02  -         sta foreground_color
1a3e: a2 00     -         ldx #$00
1a40: bd f1 3d  -         lda msg,x
1a43: f0 07     -         beq !done+
1a45: 20 d2 ff  -         jsr kernal_chrout
1a48: e8        -         inx
1a49: 4c 40 1a  -         jmp !loop-
1a4c: 68        -         pla
1a4d: 8d 86 02  -         sta foreground_color
1a50: 60        -         rts
1a51: ee f5 3d  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1a54: ad 86 02  -         lda foreground_color
1a57: 48        -         pha
1a58: a9 0f     -         lda #color
1a5a: 8d 86 02  -         sta foreground_color
1a5d: a2 00     -         ldx #$00
1a5f: bd 72 1a  -         lda msg,x
1a62: f0 07     -         beq !done+
1a64: 20 d2 ff  -         jsr kernal_chrout
1a67: e8        -         inx
1a68: 4c 5f 1a  -         jmp !loop-
1a6b: 68        -         pla
1a6c: 8d 86 02  -         sta foreground_color
1a6f: 4c 85 1a  -         jmp !done+
1a72: 20 20     - memory: .fill spacing, spacebar
1a74: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
1a81: 2e 2e 2e  -         .text "..."
1a84: 00        -         .byte NULL
1a85: 20 86 08  -         jsr SW16
1a88: 14        -         .byte opcode(op, register)
1a89: 0d 3e     -         .word address.getValue()
1a8b: 15        -         .byte opcode(op, register)
1a8c: 0f 3e     -         .word address.getValue()
1a8e: 84        -         .byte opcode($80, register) }
1a8f: 95        -         .byte opcode($90, register) }
1a90: 84        -         .byte opcode($80, register) }
1a91: 95        -         .byte opcode($90, register) }
1a92: 00        -         .byte $00 }
1a93: ee f3 3d  -         inc TEST_COUNT
1a96: ad 86 02  -         lda foreground_color
1a99: 48        -         pha
1a9a: a9 0e     -         lda #color
1a9c: 8d 86 02  -         sta foreground_color
1a9f: a2 00     -         ldx #$00
1aa1: bd b4 1a  -         lda msg,x
1aa4: f0 07     -         beq !done+
1aa6: 20 d2 ff  -         jsr kernal_chrout
1aa9: e8        -         inx
1aaa: 4c a1 1a  -         jmp !loop-
1aad: 68        -         pla
1aae: 8d 86 02  -         sta foreground_color
1ab1: 4c ba 1a  -         jmp !done+
1ab4: 20        - memory: .byte spacebar
1ab5: 4d 45 4d  -         .text description
1ab8: 3a        -         .text ":"
1ab9: 00        -         .byte NULL
1aba: a2 ff     -         ldx #$ff
1abc: e8        -         inx
1abd: e0 02     -         cpx #size
1abf: f0 0b     -         beq !success+
1ac1: bd 0b 3e  -         lda source,x
1ac4: dd 0b 3e  -         cmp dest,x
1ac7: f0 f3     -         beq !loop-
1ac9: 4c ed 1a  -         jmp !failed+
1acc: ee f4 3d  -         inc TEST_PASS_COUNT
1acf: ad 86 02  -         lda foreground_color
1ad2: 48        -         pha
1ad3: a9 05     -         lda #color
1ad5: 8d 86 02  -         sta foreground_color
1ad8: a2 00     -         ldx #$00
1ada: bd ef 3d  -         lda msg,x
1add: f0 07     -         beq !done+
1adf: 20 d2 ff  -         jsr kernal_chrout
1ae2: e8        -         inx
1ae3: 4c da 1a  -         jmp !loop-
1ae6: 68        -         pla
1ae7: 8d 86 02  -         sta foreground_color
1aea: 4c 08 1b  -         jmp !done+
1aed: ad 86 02  -         lda foreground_color
1af0: 48        -         pha
1af1: a9 02     -         lda #color
1af3: 8d 86 02  -         sta foreground_color
1af6: a2 00     -         ldx #$00
1af8: bd f1 3d  -         lda msg,x
1afb: f0 07     -         beq !done+
1afd: 20 d2 ff  -         jsr kernal_chrout
1b00: e8        -         inx
1b01: 4c f8 1a  -         jmp !loop-
1b04: 68        -         pla
1b05: 8d 86 02  -         sta foreground_color
1b08: a2 00     -         ldx #$00
1b0a: bd 19 1b  -         lda msg,x
1b0d: f0 07     -         beq !done+
1b0f: 20 d2 ff  -         jsr kernal_chrout
1b12: e8        -         inx
1b13: 4c 0a 1b  -         jmp !loop-
1b16: 4c 1b 1b  -         jmp !done+
1b19: 0d 00     - memory: .byte RETURN, NULL
1b1b: ae f5 3d  -         ldx TEST_NAME_COUNT
1b1e: e0 15     -         cpx #TESTS_PER_PAGE
1b20: d0 5d     -         bne !exit+
1b22: ad 86 02  -         lda foreground_color
1b25: 48        -         pha
1b26: a9 01     -         lda #color
1b28: 8d 86 02  -         sta foreground_color
1b2b: a2 00     -         ldx #$00
1b2d: bd 40 1b  -         lda msg,x
1b30: f0 07     -         beq !done+
1b32: 20 d2 ff  -         jsr kernal_chrout
1b35: e8        -         inx
1b36: 4c 2d 1b  -         jmp !loop-
1b39: 68        -         pla
1b3a: 8d 86 02  -         sta foreground_color
1b3d: 4c 5f 1b  -         jmp !no_key+
1b40: 0d        - memory: .byte RETURN
1b41: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1b51: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1b5d: 0d 00     -         .byte RETURN, NULL
1b5f: 20 9f ff  -         jsr scnkey  // scan keyboard
1b62: 20 e4 ff  -         jsr getin	// put result into A
1b65: f0 f8     -         beq !no_key-
1b67: a2 00     -         ldx #$00
1b69: bd 78 1b  -         lda msg,x
1b6c: f0 07     -         beq !done+
1b6e: 20 d2 ff  -         jsr kernal_chrout
1b71: e8        -         inx
1b72: 4c 69 1b  -         jmp !loop-
1b75: 4c 7a 1b  -         jmp !done+
1b78: 0d 00     - newline:.byte RETURN, NULL
1b7a: a2 00     -         ldx #$00
1b7c: 8e f5 3d  -         stx TEST_NAME_COUNT
1b7f: 60        -         rts
1b80: ee f5 3d  - ADD_TEST:inc TEST_NAME_COUNT
1b83: ad 86 02  -         lda foreground_color
1b86: 48        -         pha
1b87: a9 0f     -         lda #color
1b89: 8d 86 02  -         sta foreground_color
1b8c: a2 00     -         ldx #$00
1b8e: bd a1 1b  -         lda msg,x
1b91: f0 07     -         beq !done+
1b93: 20 d2 ff  -         jsr kernal_chrout
1b96: e8        -         inx
1b97: 4c 8e 1b  -         jmp !loop-
1b9a: 68        -         pla
1b9b: 8d 86 02  -         sta foreground_color
1b9e: 4c af 1b  -         jmp !done+
1ba1: 20 20     - memory: .fill spacing, spacebar
1ba3: 41 44 44 49 54 49 4f 4e                          -         .text name
1bab: 2e 2e 2e  -         .text "..."
1bae: 00        -         .byte NULL
1baf: 20 86 08  -         jsr SW16
1bb2: 10        -         .byte opcode(op, register)
1bb3: 34 76     -         .word address.getValue()
1bb5: 11        -         .byte opcode(op, register)
1bb6: 27 42     -         .word address.getValue()
1bb8: a1        -         .byte opcode($a0, register) }
1bb9: 0d        -         .byte $0d
1bba: 1c        -         .byte >(address.getValue()-1)
1bbb: a3        -         .byte <(address.getValue()-1)
1bbc: a0        -         .byte opcode($a0, register) }
1bbd: 00        -         .byte $00 }
1bbe: ee f3 3d  -         inc TEST_COUNT
1bc1: ad 86 02  -         lda foreground_color
1bc4: 48        -         pha
1bc5: a9 0e     -         lda #color
1bc7: 8d 86 02  -         sta foreground_color
1bca: a2 00     -         ldx #$00
1bcc: bd df 1b  -         lda msg,x
1bcf: f0 07     -         beq !done+
1bd1: 20 d2 ff  -         jsr kernal_chrout
1bd4: e8        -         inx
1bd5: 4c cc 1b  -         jmp !loop-
1bd8: 68        -         pla
1bd9: 8d 86 02  -         sta foreground_color
1bdc: 4c e4 1b  -         jmp !done+
1bdf: 20        - memory: .byte spacebar
1be0: 58 32     -         .text description
1be2: 3a        -         .text ":"
1be3: 00        -         .byte NULL
1be4: a6 17     -         ldx rl(register.getValue())
1be6: a4 18     -         ldy rh(register.getValue())
1be8: e0 b6     -         cpx #<value
1bea: d0 25     -         bne !failed+
1bec: c0 70     -         cpy #>value
1bee: d0 21     -         bne !failed+
1bf0: ee f4 3d  -         inc TEST_PASS_COUNT
1bf3: ad 86 02  -         lda foreground_color
1bf6: 48        -         pha
1bf7: a9 05     -         lda #color
1bf9: 8d 86 02  -         sta foreground_color
1bfc: a2 00     -         ldx #$00
1bfe: bd ef 3d  -         lda msg,x
1c01: f0 07     -         beq !done+
1c03: 20 d2 ff  -         jsr kernal_chrout
1c06: e8        -         inx
1c07: 4c fe 1b  -         jmp !loop-
1c0a: 68        -         pla
1c0b: 8d 86 02  -         sta foreground_color
1c0e: 4c 2c 1c  -         jmp !done+
1c11: ad 86 02  -         lda foreground_color
1c14: 48        -         pha
1c15: a9 02     -         lda #color
1c17: 8d 86 02  -         sta foreground_color
1c1a: a2 00     -         ldx #$00
1c1c: bd f1 3d  -         lda msg,x
1c1f: f0 07     -         beq !done+
1c21: 20 d2 ff  -         jsr kernal_chrout
1c24: e8        -         inx
1c25: 4c 1c 1c  -         jmp !loop-
1c28: 68        -         pla
1c29: 8d 86 02  -         sta foreground_color
1c2c: a2 00     -         ldx #$00
1c2e: bd 3d 1c  -         lda msg,x
1c31: f0 07     -         beq !done+
1c33: 20 d2 ff  -         jsr kernal_chrout
1c36: e8        -         inx
1c37: 4c 2e 1c  -         jmp !loop-
1c3a: 4c 3f 1c  -         jmp !done+
1c3d: 0d 00     - memory: .byte RETURN, NULL
1c3f: ae f5 3d  -         ldx TEST_NAME_COUNT
1c42: e0 15     -         cpx #TESTS_PER_PAGE
1c44: d0 5d     -         bne !exit+
1c46: ad 86 02  -         lda foreground_color
1c49: 48        -         pha
1c4a: a9 01     -         lda #color
1c4c: 8d 86 02  -         sta foreground_color
1c4f: a2 00     -         ldx #$00
1c51: bd 64 1c  -         lda msg,x
1c54: f0 07     -         beq !done+
1c56: 20 d2 ff  -         jsr kernal_chrout
1c59: e8        -         inx
1c5a: 4c 51 1c  -         jmp !loop-
1c5d: 68        -         pla
1c5e: 8d 86 02  -         sta foreground_color
1c61: 4c 83 1c  -         jmp !no_key+
1c64: 0d        - memory: .byte RETURN
1c65: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1c75: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1c81: 0d 00     -         .byte RETURN, NULL
1c83: 20 9f ff  -         jsr scnkey  // scan keyboard
1c86: 20 e4 ff  -         jsr getin	// put result into A
1c89: f0 f8     -         beq !no_key-
1c8b: a2 00     -         ldx #$00
1c8d: bd 9c 1c  -         lda msg,x
1c90: f0 07     -         beq !done+
1c92: 20 d2 ff  -         jsr kernal_chrout
1c95: e8        -         inx
1c96: 4c 8d 1c  -         jmp !loop-
1c99: 4c 9e 1c  -         jmp !done+
1c9c: 0d 00     - newline:.byte RETURN, NULL
1c9e: a2 00     -         ldx #$00
1ca0: 8e f5 3d  -         stx TEST_NAME_COUNT
1ca3: 60        -         rts
1ca4: ee f3 3d  -         inc TEST_COUNT
1ca7: ad 86 02  -         lda foreground_color
1caa: 48        -         pha
1cab: a9 0e     -         lda #color
1cad: 8d 86 02  -         sta foreground_color
1cb0: a2 00     -         ldx #$00
1cb2: bd c5 1c  -         lda msg,x
1cb5: f0 07     -         beq !done+
1cb7: 20 d2 ff  -         jsr kernal_chrout
1cba: e8        -         inx
1cbb: 4c b2 1c  -         jmp !loop-
1cbe: 68        -         pla
1cbf: 8d 86 02  -         sta foreground_color
1cc2: 4c cb 1c  -         jmp !done+
1cc5: 20        - memory: .byte spacebar
1cc6: 41 44 44  -         .text description
1cc9: 3a        -         .text ":"
1cca: 00        -         .byte NULL
1ccb: a6 17     -         ldx rl(register.getValue())
1ccd: a4 18     -         ldy rh(register.getValue())
1ccf: e0 5b     -         cpx #<value
1cd1: d0 25     -         bne !failed+
1cd3: c0 b8     -         cpy #>value
1cd5: d0 21     -         bne !failed+
1cd7: ee f4 3d  -         inc TEST_PASS_COUNT
1cda: ad 86 02  -         lda foreground_color
1cdd: 48        -         pha
1cde: a9 05     -         lda #color
1ce0: 8d 86 02  -         sta foreground_color
1ce3: a2 00     -         ldx #$00
1ce5: bd ef 3d  -         lda msg,x
1ce8: f0 07     -         beq !done+
1cea: 20 d2 ff  -         jsr kernal_chrout
1ced: e8        -         inx
1cee: 4c e5 1c  -         jmp !loop-
1cf1: 68        -         pla
1cf2: 8d 86 02  -         sta foreground_color
1cf5: 4c 13 1d  -         jmp !done+
1cf8: ad 86 02  -         lda foreground_color
1cfb: 48        -         pha
1cfc: a9 02     -         lda #color
1cfe: 8d 86 02  -         sta foreground_color
1d01: a2 00     -         ldx #$00
1d03: bd f1 3d  -         lda msg,x
1d06: f0 07     -         beq !done+
1d08: 20 d2 ff  -         jsr kernal_chrout
1d0b: e8        -         inx
1d0c: 4c 03 1d  -         jmp !loop-
1d0f: 68        -         pla
1d10: 8d 86 02  -         sta foreground_color
1d13: 60        -         rts
1d14: ee f5 3d  - SUBTRACT_TEST:inc TEST_NAME_COUNT
1d17: ad 86 02  -         lda foreground_color
1d1a: 48        -         pha
1d1b: a9 0f     -         lda #color
1d1d: 8d 86 02  -         sta foreground_color
1d20: a2 00     -         ldx #$00
1d22: bd 35 1d  -         lda msg,x
1d25: f0 07     -         beq !done+
1d27: 20 d2 ff  -         jsr kernal_chrout
1d2a: e8        -         inx
1d2b: 4c 22 1d  -         jmp !loop-
1d2e: 68        -         pla
1d2f: 8d 86 02  -         sta foreground_color
1d32: 4c 46 1d  -         jmp !done+
1d35: 20 20     - memory: .fill spacing, spacebar
1d37: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
1d42: 2e 2e 2e  -         .text "..."
1d45: 00        -         .byte NULL
1d46: 20 86 08  -         jsr SW16
1d49: 10        -         .byte opcode(op, register)
1d4a: 34 76     -         .word address.getValue()
1d4c: 11        -         .byte opcode(op, register)
1d4d: 27 42     -         .word address.getValue()
1d4f: b1        -         .byte opcode($b0, register) }
1d50: 0d        -         .byte $0d
1d51: 1e        -         .byte >(address.getValue()-1)
1d52: 39        -         .byte <(address.getValue()-1)
1d53: b0        -         .byte opcode($b0, register) }
1d54: 00        -         .byte $00 }
1d55: ee f3 3d  -         inc TEST_COUNT
1d58: ad 86 02  -         lda foreground_color
1d5b: 48        -         pha
1d5c: a9 0e     -         lda #color
1d5e: 8d 86 02  -         sta foreground_color
1d61: a2 00     -         ldx #$00
1d63: bd 76 1d  -         lda msg,x
1d66: f0 07     -         beq !done+
1d68: 20 d2 ff  -         jsr kernal_chrout
1d6b: e8        -         inx
1d6c: 4c 63 1d  -         jmp !loop-
1d6f: 68        -         pla
1d70: 8d 86 02  -         sta foreground_color
1d73: 4c 7a 1d  -         jmp !done+
1d76: 20        - memory: .byte spacebar
1d77: 30        -         .text description
1d78: 3a        -         .text ":"
1d79: 00        -         .byte NULL
1d7a: a6 17     -         ldx rl(register.getValue())
1d7c: a4 18     -         ldy rh(register.getValue())
1d7e: e0 00     -         cpx #<value
1d80: d0 25     -         bne !failed+
1d82: c0 00     -         cpy #>value
1d84: d0 21     -         bne !failed+
1d86: ee f4 3d  -         inc TEST_PASS_COUNT
1d89: ad 86 02  -         lda foreground_color
1d8c: 48        -         pha
1d8d: a9 05     -         lda #color
1d8f: 8d 86 02  -         sta foreground_color
1d92: a2 00     -         ldx #$00
1d94: bd ef 3d  -         lda msg,x
1d97: f0 07     -         beq !done+
1d99: 20 d2 ff  -         jsr kernal_chrout
1d9c: e8        -         inx
1d9d: 4c 94 1d  -         jmp !loop-
1da0: 68        -         pla
1da1: 8d 86 02  -         sta foreground_color
1da4: 4c c2 1d  -         jmp !done+
1da7: ad 86 02  -         lda foreground_color
1daa: 48        -         pha
1dab: a9 02     -         lda #color
1dad: 8d 86 02  -         sta foreground_color
1db0: a2 00     -         ldx #$00
1db2: bd f1 3d  -         lda msg,x
1db5: f0 07     -         beq !done+
1db7: 20 d2 ff  -         jsr kernal_chrout
1dba: e8        -         inx
1dbb: 4c b2 1d  -         jmp !loop-
1dbe: 68        -         pla
1dbf: 8d 86 02  -         sta foreground_color
1dc2: a2 00     -         ldx #$00
1dc4: bd d3 1d  -         lda msg,x
1dc7: f0 07     -         beq !done+
1dc9: 20 d2 ff  -         jsr kernal_chrout
1dcc: e8        -         inx
1dcd: 4c c4 1d  -         jmp !loop-
1dd0: 4c d5 1d  -         jmp !done+
1dd3: 0d 00     - memory: .byte RETURN, NULL
1dd5: ae f5 3d  -         ldx TEST_NAME_COUNT
1dd8: e0 15     -         cpx #TESTS_PER_PAGE
1dda: d0 5d     -         bne !exit+
1ddc: ad 86 02  -         lda foreground_color
1ddf: 48        -         pha
1de0: a9 01     -         lda #color
1de2: 8d 86 02  -         sta foreground_color
1de5: a2 00     -         ldx #$00
1de7: bd fa 1d  -         lda msg,x
1dea: f0 07     -         beq !done+
1dec: 20 d2 ff  -         jsr kernal_chrout
1def: e8        -         inx
1df0: 4c e7 1d  -         jmp !loop-
1df3: 68        -         pla
1df4: 8d 86 02  -         sta foreground_color
1df7: 4c 19 1e  -         jmp !no_key+
1dfa: 0d        - memory: .byte RETURN
1dfb: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1e0b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1e17: 0d 00     -         .byte RETURN, NULL
1e19: 20 9f ff  -         jsr scnkey  // scan keyboard
1e1c: 20 e4 ff  -         jsr getin	// put result into A
1e1f: f0 f8     -         beq !no_key-
1e21: a2 00     -         ldx #$00
1e23: bd 32 1e  -         lda msg,x
1e26: f0 07     -         beq !done+
1e28: 20 d2 ff  -         jsr kernal_chrout
1e2b: e8        -         inx
1e2c: 4c 23 1e  -         jmp !loop-
1e2f: 4c 34 1e  -         jmp !done+
1e32: 0d 00     - newline:.byte RETURN, NULL
1e34: a2 00     -         ldx #$00
1e36: 8e f5 3d  -         stx TEST_NAME_COUNT
1e39: 60        -         rts
1e3a: ee f3 3d  -         inc TEST_COUNT
1e3d: ad 86 02  -         lda foreground_color
1e40: 48        -         pha
1e41: a9 0e     -         lda #color
1e43: 8d 86 02  -         sta foreground_color
1e46: a2 00     -         ldx #$00
1e48: bd 5b 1e  -         lda msg,x
1e4b: f0 07     -         beq !done+
1e4d: 20 d2 ff  -         jsr kernal_chrout
1e50: e8        -         inx
1e51: 4c 48 1e  -         jmp !loop-
1e54: 68        -         pla
1e55: 8d 86 02  -         sta foreground_color
1e58: 4c 61 1e  -         jmp !done+
1e5b: 20        - memory: .byte spacebar
1e5c: 53 55 42  -         .text description
1e5f: 3a        -         .text ":"
1e60: 00        -         .byte NULL
1e61: a6 17     -         ldx rl(register.getValue())
1e63: a4 18     -         ldy rh(register.getValue())
1e65: e0 0d     -         cpx #<value
1e67: d0 25     -         bne !failed+
1e69: c0 34     -         cpy #>value
1e6b: d0 21     -         bne !failed+
1e6d: ee f4 3d  -         inc TEST_PASS_COUNT
1e70: ad 86 02  -         lda foreground_color
1e73: 48        -         pha
1e74: a9 05     -         lda #color
1e76: 8d 86 02  -         sta foreground_color
1e79: a2 00     -         ldx #$00
1e7b: bd ef 3d  -         lda msg,x
1e7e: f0 07     -         beq !done+
1e80: 20 d2 ff  -         jsr kernal_chrout
1e83: e8        -         inx
1e84: 4c 7b 1e  -         jmp !loop-
1e87: 68        -         pla
1e88: 8d 86 02  -         sta foreground_color
1e8b: 4c a9 1e  -         jmp !done+
1e8e: ad 86 02  -         lda foreground_color
1e91: 48        -         pha
1e92: a9 02     -         lda #color
1e94: 8d 86 02  -         sta foreground_color
1e97: a2 00     -         ldx #$00
1e99: bd f1 3d  -         lda msg,x
1e9c: f0 07     -         beq !done+
1e9e: 20 d2 ff  -         jsr kernal_chrout
1ea1: e8        -         inx
1ea2: 4c 99 1e  -         jmp !loop-
1ea5: 68        -         pla
1ea6: 8d 86 02  -         sta foreground_color
1ea9: 60        -         rts	
1eaa: ee f5 3d  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
1ead: ad 86 02  -         lda foreground_color
1eb0: 48        -         pha
1eb1: a9 0f     -         lda #color
1eb3: 8d 86 02  -         sta foreground_color
1eb6: a2 00     -         ldx #$00
1eb8: bd cb 1e  -         lda msg,x
1ebb: f0 07     -         beq !done+
1ebd: 20 d2 ff  -         jsr kernal_chrout
1ec0: e8        -         inx
1ec1: 4c b8 1e  -         jmp !loop-
1ec4: 68        -         pla
1ec5: 8d 86 02  -         sta foreground_color
1ec8: 4c de 1e  -         jmp !done+
1ecb: 20 20     - memory: .fill spacing, spacebar
1ecd: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
1eda: 2e 2e 2e  -         .text "..."
1edd: 00        -         .byte NULL
1ede: 20 86 08  -         jsr SW16
1ee1: 15        -         .byte opcode(op, register)
1ee2: 31 3e     -         .word address.getValue()
1ee4: 10        -         .byte opcode(op, register)
1ee5: 0b 3e     -         .word address.getValue()
1ee7: 75        -         .byte opcode($70, register) }
1ee8: 0d        -         .byte $0d
1ee9: 1f        -         .byte >(address.getValue()-1)
1eea: dd        -         .byte <(address.getValue()-1)
1eeb: 10        -         .byte opcode(op, register)
1eec: 0d 3e     -         .word address.getValue()
1eee: 75        -         .byte opcode($70, register) }
1eef: 0d        -         .byte $0d
1ef0: 20        -         .byte >(address.getValue()-1)
1ef1: 4d        -         .byte <(address.getValue()-1)
1ef2: c5        -         .byte opcode($c0, register) }
1ef3: 0d        -         .byte $0d
1ef4: 20        -         .byte >(address.getValue()-1)
1ef5: bd        -         .byte <(address.getValue()-1)
1ef6: c5        -         .byte opcode($c0, register) }
1ef7: 00        -         .byte $00 }
1ef8: ee f3 3d  -         inc TEST_COUNT
1efb: ad 86 02  -         lda foreground_color
1efe: 48        -         pha
1eff: a9 0e     -         lda #color
1f01: 8d 86 02  -         sta foreground_color
1f04: a2 00     -         ldx #$00
1f06: bd 19 1f  -         lda msg,x
1f09: f0 07     -         beq !done+
1f0b: 20 d2 ff  -         jsr kernal_chrout
1f0e: e8        -         inx
1f0f: 4c 06 1f  -         jmp !loop-
1f12: 68        -         pla
1f13: 8d 86 02  -         sta foreground_color
1f16: 4c 1e 1f  -         jmp !done+
1f19: 20        - memory: .byte spacebar
1f1a: 50 31     -         .text description
1f1c: 3a        -         .text ":"
1f1d: 00        -         .byte NULL
1f1e: a6 17     -         ldx addr
1f20: e0 0b     -         cpx #<value
1f22: d0 27     -         bne !failed+
1f24: a6 18     -         ldx addr+1
1f26: e0 3e     -         cpx #>value
1f28: d0 21     -         bne !failed+
1f2a: ee f4 3d  -         inc TEST_PASS_COUNT
1f2d: ad 86 02  -         lda foreground_color
1f30: 48        -         pha
1f31: a9 05     -         lda #color
1f33: 8d 86 02  -         sta foreground_color
1f36: a2 00     -         ldx #$00
1f38: bd ef 3d  -         lda msg,x
1f3b: f0 07     -         beq !done+
1f3d: 20 d2 ff  -         jsr kernal_chrout
1f40: e8        -         inx
1f41: 4c 38 1f  -         jmp !loop-
1f44: 68        -         pla
1f45: 8d 86 02  -         sta foreground_color
1f48: 4c 66 1f  -         jmp !done+
1f4b: ad 86 02  -         lda foreground_color
1f4e: 48        -         pha
1f4f: a9 02     -         lda #color
1f51: 8d 86 02  -         sta foreground_color
1f54: a2 00     -         ldx #$00
1f56: bd f1 3d  -         lda msg,x
1f59: f0 07     -         beq !done+
1f5b: 20 d2 ff  -         jsr kernal_chrout
1f5e: e8        -         inx
1f5f: 4c 56 1f  -         jmp !loop-
1f62: 68        -         pla
1f63: 8d 86 02  -         sta foreground_color
1f66: a2 00     -         ldx #$00
1f68: bd 77 1f  -         lda msg,x
1f6b: f0 07     -         beq !done+
1f6d: 20 d2 ff  -         jsr kernal_chrout
1f70: e8        -         inx
1f71: 4c 68 1f  -         jmp !loop-
1f74: 4c 79 1f  -         jmp !done+
1f77: 0d 00     - memory: .byte RETURN, NULL
1f79: ae f5 3d  -         ldx TEST_NAME_COUNT
1f7c: e0 15     -         cpx #TESTS_PER_PAGE
1f7e: d0 5d     -         bne !exit+
1f80: ad 86 02  -         lda foreground_color
1f83: 48        -         pha
1f84: a9 01     -         lda #color
1f86: 8d 86 02  -         sta foreground_color
1f89: a2 00     -         ldx #$00
1f8b: bd 9e 1f  -         lda msg,x
1f8e: f0 07     -         beq !done+
1f90: 20 d2 ff  -         jsr kernal_chrout
1f93: e8        -         inx
1f94: 4c 8b 1f  -         jmp !loop-
1f97: 68        -         pla
1f98: 8d 86 02  -         sta foreground_color
1f9b: 4c bd 1f  -         jmp !no_key+
1f9e: 0d        - memory: .byte RETURN
1f9f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1faf: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1fbb: 0d 00     -         .byte RETURN, NULL
1fbd: 20 9f ff  -         jsr scnkey  // scan keyboard
1fc0: 20 e4 ff  -         jsr getin	// put result into A
1fc3: f0 f8     -         beq !no_key-
1fc5: a2 00     -         ldx #$00
1fc7: bd d6 1f  -         lda msg,x
1fca: f0 07     -         beq !done+
1fcc: 20 d2 ff  -         jsr kernal_chrout
1fcf: e8        -         inx
1fd0: 4c c7 1f  -         jmp !loop-
1fd3: 4c d8 1f  -         jmp !done+
1fd6: 0d 00     - newline:.byte RETURN, NULL
1fd8: a2 00     -         ldx #$00
1fda: 8e f5 3d  -         stx TEST_NAME_COUNT
1fdd: 60        -         rts
1fde: ee f3 3d  -         inc TEST_COUNT
1fe1: ad 86 02  -         lda foreground_color
1fe4: 48        -         pha
1fe5: a9 0e     -         lda #color
1fe7: 8d 86 02  -         sta foreground_color
1fea: a2 00     -         ldx #$00
1fec: bd ff 1f  -         lda msg,x
1fef: f0 07     -         beq !done+
1ff1: 20 d2 ff  -         jsr kernal_chrout
1ff4: e8        -         inx
1ff5: 4c ec 1f  -         jmp !loop-
1ff8: 68        -         pla
1ff9: 8d 86 02  -         sta foreground_color
1ffc: 4c 03 20  -         jmp !done+
1fff: 20        - memory: .byte spacebar
2000: 31        -         .text description
2001: 3a        -         .text ":"
2002: 00        -         .byte NULL
2003: ae 31 3e  -         ldx addr
2006: e0 0b     -         cpx #<value
2008: d0 28     -         bne !failed+
200a: ae 32 3e  -         ldx addr+1
200d: e0 3e     -         cpx #>value
200f: d0 21     -         bne !failed+
2011: ee f4 3d  -         inc TEST_PASS_COUNT
2014: ad 86 02  -         lda foreground_color
2017: 48        -         pha
2018: a9 05     -         lda #color
201a: 8d 86 02  -         sta foreground_color
201d: a2 00     -         ldx #$00
201f: bd ef 3d  -         lda msg,x
2022: f0 07     -         beq !done+
2024: 20 d2 ff  -         jsr kernal_chrout
2027: e8        -         inx
2028: 4c 1f 20  -         jmp !loop-
202b: 68        -         pla
202c: 8d 86 02  -         sta foreground_color
202f: 4c 4d 20  -         jmp !done+
2032: ad 86 02  -         lda foreground_color
2035: 48        -         pha
2036: a9 02     -         lda #color
2038: 8d 86 02  -         sta foreground_color
203b: a2 00     -         ldx #$00
203d: bd f1 3d  -         lda msg,x
2040: f0 07     -         beq !done+
2042: 20 d2 ff  -         jsr kernal_chrout
2045: e8        -         inx
2046: 4c 3d 20  -         jmp !loop-
2049: 68        -         pla
204a: 8d 86 02  -         sta foreground_color
204d: 60        -         rts
204e: ee f3 3d  -         inc TEST_COUNT
2051: ad 86 02  -         lda foreground_color
2054: 48        -         pha
2055: a9 0e     -         lda #color
2057: 8d 86 02  -         sta foreground_color
205a: a2 00     -         ldx #$00
205c: bd 6f 20  -         lda msg,x
205f: f0 07     -         beq !done+
2061: 20 d2 ff  -         jsr kernal_chrout
2064: e8        -         inx
2065: 4c 5c 20  -         jmp !loop-
2068: 68        -         pla
2069: 8d 86 02  -         sta foreground_color
206c: 4c 73 20  -         jmp !done+
206f: 20        - memory: .byte spacebar
2070: 32        -         .text description
2071: 3a        -         .text ":"
2072: 00        -         .byte NULL
2073: ae 33 3e  -         ldx addr
2076: e0 0d     -         cpx #<value
2078: d0 28     -         bne !failed+
207a: ae 34 3e  -         ldx addr+1
207d: e0 3e     -         cpx #>value
207f: d0 21     -         bne !failed+
2081: ee f4 3d  -         inc TEST_PASS_COUNT
2084: ad 86 02  -         lda foreground_color
2087: 48        -         pha
2088: a9 05     -         lda #color
208a: 8d 86 02  -         sta foreground_color
208d: a2 00     -         ldx #$00
208f: bd ef 3d  -         lda msg,x
2092: f0 07     -         beq !done+
2094: 20 d2 ff  -         jsr kernal_chrout
2097: e8        -         inx
2098: 4c 8f 20  -         jmp !loop-
209b: 68        -         pla
209c: 8d 86 02  -         sta foreground_color
209f: 4c bd 20  -         jmp !done+
20a2: ad 86 02  -         lda foreground_color
20a5: 48        -         pha
20a6: a9 02     -         lda #color
20a8: 8d 86 02  -         sta foreground_color
20ab: a2 00     -         ldx #$00
20ad: bd f1 3d  -         lda msg,x
20b0: f0 07     -         beq !done+
20b2: 20 d2 ff  -         jsr kernal_chrout
20b5: e8        -         inx
20b6: 4c ad 20  -         jmp !loop-
20b9: 68        -         pla
20ba: 8d 86 02  -         sta foreground_color
20bd: 60        -         rts
20be: ee f3 3d  -         inc TEST_COUNT
20c1: ad 86 02  -         lda foreground_color
20c4: 48        -         pha
20c5: a9 0e     -         lda #color
20c7: 8d 86 02  -         sta foreground_color
20ca: a2 00     -         ldx #$00
20cc: bd df 20  -         lda msg,x
20cf: f0 07     -         beq !done+
20d1: 20 d2 ff  -         jsr kernal_chrout
20d4: e8        -         inx
20d5: 4c cc 20  -         jmp !loop-
20d8: 68        -         pla
20d9: 8d 86 02  -         sta foreground_color
20dc: 4c e4 20  -         jmp !done+
20df: 20        - memory: .byte spacebar
20e0: 50 32     -         .text description
20e2: 3a        -         .text ":"
20e3: 00        -         .byte NULL
20e4: a6 17     -         ldx addr
20e6: e0 0d     -         cpx #<value
20e8: d0 27     -         bne !failed+
20ea: a6 18     -         ldx addr+1
20ec: e0 3e     -         cpx #>value
20ee: d0 21     -         bne !failed+
20f0: ee f4 3d  -         inc TEST_PASS_COUNT
20f3: ad 86 02  -         lda foreground_color
20f6: 48        -         pha
20f7: a9 05     -         lda #color
20f9: 8d 86 02  -         sta foreground_color
20fc: a2 00     -         ldx #$00
20fe: bd ef 3d  -         lda msg,x
2101: f0 07     -         beq !done+
2103: 20 d2 ff  -         jsr kernal_chrout
2106: e8        -         inx
2107: 4c fe 20  -         jmp !loop-
210a: 68        -         pla
210b: 8d 86 02  -         sta foreground_color
210e: 4c 2c 21  -         jmp !done+
2111: ad 86 02  -         lda foreground_color
2114: 48        -         pha
2115: a9 02     -         lda #color
2117: 8d 86 02  -         sta foreground_color
211a: a2 00     -         ldx #$00
211c: bd f1 3d  -         lda msg,x
211f: f0 07     -         beq !done+
2121: 20 d2 ff  -         jsr kernal_chrout
2124: e8        -         inx
2125: 4c 1c 21  -         jmp !loop-
2128: 68        -         pla
2129: 8d 86 02  -         sta foreground_color
212c: 60        -         rts
212d: ee f5 3d  - COMPARE_TEST:inc TEST_NAME_COUNT
2130: ad 86 02  -         lda foreground_color
2133: 48        -         pha
2134: a9 0f     -         lda #color
2136: 8d 86 02  -         sta foreground_color
2139: a2 00     -         ldx #$00
213b: bd 4e 21  -         lda msg,x
213e: f0 07     -         beq !done+
2140: 20 d2 ff  -         jsr kernal_chrout
2143: e8        -         inx
2144: 4c 3b 21  -         jmp !loop-
2147: 68        -         pla
2148: 8d 86 02  -         sta foreground_color
214b: 4c 5b 21  -         jmp !done+
214e: 20 20     - memory: .fill spacing, spacebar
2150: 43 4f 4d 50 41 52 45                             -         .text name
2157: 2e 2e 2e  -         .text "..."
215a: 00        -         .byte NULL
215b: 20 86 08  -         jsr SW16
215e: 15        -         .byte opcode(op, register)
215f: 11 3e     -         .word address.getValue()
2161: 16        -         .byte opcode(op, register)
2162: 21 3e     -         .word address.getValue()
2164: 14        -         .byte opcode(op, register)
2165: 00 00     -         .word address.getValue()
2167: e4        -         .byte opcode($e0, register) }
2168: b0        -         .byte opcode($b0, register) }
2169: 75        -         .byte opcode($70, register) }
216a: 25        -         .byte opcode($20, register) }
216b: d6        -         .byte opcode($d0, register) }
216c: 02 f9     -         .byte $02, effective_address(ea,*) }
216e: 00        -         .byte $00 }
216f: ee f3 3d  -         inc TEST_COUNT
2172: ad 86 02  -         lda foreground_color
2175: 48        -         pha
2176: a9 0e     -         lda #color
2178: 8d 86 02  -         sta foreground_color
217b: a2 00     -         ldx #$00
217d: bd 90 21  -         lda msg,x
2180: f0 07     -         beq !done+
2182: 20 d2 ff  -         jsr kernal_chrout
2185: e8        -         inx
2186: 4c 7d 21  -         jmp !loop-
2189: 68        -         pla
218a: 8d 86 02  -         sta foreground_color
218d: 4c 98 21  -         jmp !done+
2190: 20        - memory: .byte spacebar
2191: 43 4f 55 4e 54                                   -         .text description
2196: 3a        -         .text ":"
2197: 00        -         .byte NULL
2198: a6 1f     -         ldx rl(register.getValue())
219a: a4 20     -         ldy rh(register.getValue())
219c: e0 08     -         cpx #<value
219e: d0 25     -         bne !failed+
21a0: c0 00     -         cpy #>value
21a2: d0 21     -         bne !failed+
21a4: ee f4 3d  -         inc TEST_PASS_COUNT
21a7: ad 86 02  -         lda foreground_color
21aa: 48        -         pha
21ab: a9 05     -         lda #color
21ad: 8d 86 02  -         sta foreground_color
21b0: a2 00     -         ldx #$00
21b2: bd ef 3d  -         lda msg,x
21b5: f0 07     -         beq !done+
21b7: 20 d2 ff  -         jsr kernal_chrout
21ba: e8        -         inx
21bb: 4c b2 21  -         jmp !loop-
21be: 68        -         pla
21bf: 8d 86 02  -         sta foreground_color
21c2: 4c e0 21  -         jmp !done+
21c5: ad 86 02  -         lda foreground_color
21c8: 48        -         pha
21c9: a9 02     -         lda #color
21cb: 8d 86 02  -         sta foreground_color
21ce: a2 00     -         ldx #$00
21d0: bd f1 3d  -         lda msg,x
21d3: f0 07     -         beq !done+
21d5: 20 d2 ff  -         jsr kernal_chrout
21d8: e8        -         inx
21d9: 4c d0 21  -         jmp !loop-
21dc: 68        -         pla
21dd: 8d 86 02  -         sta foreground_color
21e0: a2 00     -         ldx #$00
21e2: bd f1 21  -         lda msg,x
21e5: f0 07     -         beq !done+
21e7: 20 d2 ff  -         jsr kernal_chrout
21ea: e8        -         inx
21eb: 4c e2 21  -         jmp !loop-
21ee: 4c f3 21  -         jmp !done+
21f1: 0d 00     - memory: .byte RETURN, NULL
21f3: ae f5 3d  -         ldx TEST_NAME_COUNT
21f6: e0 15     -         cpx #TESTS_PER_PAGE
21f8: d0 5d     -         bne !exit+
21fa: ad 86 02  -         lda foreground_color
21fd: 48        -         pha
21fe: a9 01     -         lda #color
2200: 8d 86 02  -         sta foreground_color
2203: a2 00     -         ldx #$00
2205: bd 18 22  -         lda msg,x
2208: f0 07     -         beq !done+
220a: 20 d2 ff  -         jsr kernal_chrout
220d: e8        -         inx
220e: 4c 05 22  -         jmp !loop-
2211: 68        -         pla
2212: 8d 86 02  -         sta foreground_color
2215: 4c 37 22  -         jmp !no_key+
2218: 0d        - memory: .byte RETURN
2219: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2229: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2235: 0d 00     -         .byte RETURN, NULL
2237: 20 9f ff  -         jsr scnkey  // scan keyboard
223a: 20 e4 ff  -         jsr getin	// put result into A
223d: f0 f8     -         beq !no_key-
223f: a2 00     -         ldx #$00
2241: bd 50 22  -         lda msg,x
2244: f0 07     -         beq !done+
2246: 20 d2 ff  -         jsr kernal_chrout
2249: e8        -         inx
224a: 4c 41 22  -         jmp !loop-
224d: 4c 52 22  -         jmp !done+
2250: 0d 00     - newline:.byte RETURN, NULL
2252: a2 00     -         ldx #$00
2254: 8e f5 3d  -         stx TEST_NAME_COUNT
2257: 60        -         rts	
2258: ee f5 3d  - INCREMENT_TEST:inc TEST_NAME_COUNT
225b: ad 86 02  -         lda foreground_color
225e: 48        -         pha
225f: a9 0f     -         lda #color
2261: 8d 86 02  -         sta foreground_color
2264: a2 00     -         ldx #$00
2266: bd 79 22  -         lda msg,x
2269: f0 07     -         beq !done+
226b: 20 d2 ff  -         jsr kernal_chrout
226e: e8        -         inx
226f: 4c 66 22  -         jmp !loop-
2272: 68        -         pla
2273: 8d 86 02  -         sta foreground_color
2276: 4c 88 22  -         jmp !done+
2279: 20 20     - memory: .fill spacing, spacebar
227b: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
2284: 2e 2e 2e  -         .text "..."
2287: 00        -         .byte NULL
2288: 20 86 08  -         jsr SW16
228b: 15        -         .byte opcode(op, register)
228c: 0b 3e     -         .word address.getValue()
228e: b0        -         .byte opcode($b0, register) }
228f: 55        -         .byte opcode($50, register) }
2290: e5        -         .byte opcode($e0, register) }
2291: 00        -         .byte $00 }
2292: ee f3 3d  -         inc TEST_COUNT
2295: ad 86 02  -         lda foreground_color
2298: 48        -         pha
2299: a9 0e     -         lda #color
229b: 8d 86 02  -         sta foreground_color
229e: a2 00     -         ldx #$00
22a0: bd b3 22  -         lda msg,x
22a3: f0 07     -         beq !done+
22a5: 20 d2 ff  -         jsr kernal_chrout
22a8: e8        -         inx
22a9: 4c a0 22  -         jmp !loop-
22ac: 68        -         pla
22ad: 8d 86 02  -         sta foreground_color
22b0: 4c b8 22  -         jmp !done+
22b3: 20        - memory: .byte spacebar
22b4: 2b 32     -         .text description
22b6: 3a        -         .text ":"
22b7: 00        -         .byte NULL
22b8: a6 21     -         ldx rl(register.getValue())
22ba: a4 22     -         ldy rh(register.getValue())
22bc: e0 0d     -         cpx #<value
22be: d0 25     -         bne !failed+
22c0: c0 3e     -         cpy #>value
22c2: d0 21     -         bne !failed+
22c4: ee f4 3d  -         inc TEST_PASS_COUNT
22c7: ad 86 02  -         lda foreground_color
22ca: 48        -         pha
22cb: a9 05     -         lda #color
22cd: 8d 86 02  -         sta foreground_color
22d0: a2 00     -         ldx #$00
22d2: bd ef 3d  -         lda msg,x
22d5: f0 07     -         beq !done+
22d7: 20 d2 ff  -         jsr kernal_chrout
22da: e8        -         inx
22db: 4c d2 22  -         jmp !loop-
22de: 68        -         pla
22df: 8d 86 02  -         sta foreground_color
22e2: 4c 00 23  -         jmp !done+
22e5: ad 86 02  -         lda foreground_color
22e8: 48        -         pha
22e9: a9 02     -         lda #color
22eb: 8d 86 02  -         sta foreground_color
22ee: a2 00     -         ldx #$00
22f0: bd f1 3d  -         lda msg,x
22f3: f0 07     -         beq !done+
22f5: 20 d2 ff  -         jsr kernal_chrout
22f8: e8        -         inx
22f9: 4c f0 22  -         jmp !loop-
22fc: 68        -         pla
22fd: 8d 86 02  -         sta foreground_color
2300: a2 00     -         ldx #$00
2302: bd 11 23  -         lda msg,x
2305: f0 07     -         beq !done+
2307: 20 d2 ff  -         jsr kernal_chrout
230a: e8        -         inx
230b: 4c 02 23  -         jmp !loop-
230e: 4c 13 23  -         jmp !done+
2311: 0d 00     - memory: .byte RETURN, NULL
2313: ae f5 3d  -         ldx TEST_NAME_COUNT
2316: e0 15     -         cpx #TESTS_PER_PAGE
2318: d0 5d     -         bne !exit+
231a: ad 86 02  -         lda foreground_color
231d: 48        -         pha
231e: a9 01     -         lda #color
2320: 8d 86 02  -         sta foreground_color
2323: a2 00     -         ldx #$00
2325: bd 38 23  -         lda msg,x
2328: f0 07     -         beq !done+
232a: 20 d2 ff  -         jsr kernal_chrout
232d: e8        -         inx
232e: 4c 25 23  -         jmp !loop-
2331: 68        -         pla
2332: 8d 86 02  -         sta foreground_color
2335: 4c 57 23  -         jmp !no_key+
2338: 0d        - memory: .byte RETURN
2339: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2349: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2355: 0d 00     -         .byte RETURN, NULL
2357: 20 9f ff  -         jsr scnkey  // scan keyboard
235a: 20 e4 ff  -         jsr getin	// put result into A
235d: f0 f8     -         beq !no_key-
235f: a2 00     -         ldx #$00
2361: bd 70 23  -         lda msg,x
2364: f0 07     -         beq !done+
2366: 20 d2 ff  -         jsr kernal_chrout
2369: e8        -         inx
236a: 4c 61 23  -         jmp !loop-
236d: 4c 72 23  -         jmp !done+
2370: 0d 00     - newline:.byte RETURN, NULL
2372: a2 00     -         ldx #$00
2374: 8e f5 3d  -         stx TEST_NAME_COUNT
2377: 60        -         rts
2378: ee f5 3d  - DECREMENT_TEST:inc TEST_NAME_COUNT
237b: ad 86 02  -         lda foreground_color
237e: 48        -         pha
237f: a9 0f     -         lda #color
2381: 8d 86 02  -         sta foreground_color
2384: a2 00     -         ldx #$00
2386: bd 99 23  -         lda msg,x
2389: f0 07     -         beq !done+
238b: 20 d2 ff  -         jsr kernal_chrout
238e: e8        -         inx
238f: 4c 86 23  -         jmp !loop-
2392: 68        -         pla
2393: 8d 86 02  -         sta foreground_color
2396: 4c a8 23  -         jmp !done+
2399: 20 20     - memory: .fill spacing, spacebar
239b: 44 45 43 52 45 4d 45 4e 54                       -         .text name
23a4: 2e 2e 2e  -         .text "..."
23a7: 00        -         .byte NULL
23a8: 20 86 08  -         jsr SW16
23ab: 15        -         .byte opcode(op, register)
23ac: 11 3e     -         .word address.getValue()
23ae: 14        -         .byte opcode(op, register)
23af: 10 00     -         .word address.getValue()
23b1: b0        -         .byte opcode($b0, register) }
23b2: 55        -         .byte opcode($50, register) }
23b3: f4        -         .byte opcode($f0, register) }
23b4: 07 fc     -         .byte $07, effective_address(ea,*) }
23b6: 00        -         .byte $00 }
23b7: ee f3 3d  -         inc TEST_COUNT
23ba: ad 86 02  -         lda foreground_color
23bd: 48        -         pha
23be: a9 0e     -         lda #color
23c0: 8d 86 02  -         sta foreground_color
23c3: a2 00     -         ldx #$00
23c5: bd d8 23  -         lda msg,x
23c8: f0 07     -         beq !done+
23ca: 20 d2 ff  -         jsr kernal_chrout
23cd: e8        -         inx
23ce: 4c c5 23  -         jmp !loop-
23d1: 68        -         pla
23d2: 8d 86 02  -         sta foreground_color
23d5: 4c dc 23  -         jmp !done+
23d8: 20        - memory: .byte spacebar
23d9: 30        -         .text description
23da: 3a        -         .text ":"
23db: 00        -         .byte NULL
23dc: a6 1f     -         ldx rl(register.getValue())
23de: a4 20     -         ldy rh(register.getValue())
23e0: e0 00     -         cpx #<value
23e2: d0 25     -         bne !failed+
23e4: c0 00     -         cpy #>value
23e6: d0 21     -         bne !failed+
23e8: ee f4 3d  -         inc TEST_PASS_COUNT
23eb: ad 86 02  -         lda foreground_color
23ee: 48        -         pha
23ef: a9 05     -         lda #color
23f1: 8d 86 02  -         sta foreground_color
23f4: a2 00     -         ldx #$00
23f6: bd ef 3d  -         lda msg,x
23f9: f0 07     -         beq !done+
23fb: 20 d2 ff  -         jsr kernal_chrout
23fe: e8        -         inx
23ff: 4c f6 23  -         jmp !loop-
2402: 68        -         pla
2403: 8d 86 02  -         sta foreground_color
2406: 4c 24 24  -         jmp !done+
2409: ad 86 02  -         lda foreground_color
240c: 48        -         pha
240d: a9 02     -         lda #color
240f: 8d 86 02  -         sta foreground_color
2412: a2 00     -         ldx #$00
2414: bd f1 3d  -         lda msg,x
2417: f0 07     -         beq !done+
2419: 20 d2 ff  -         jsr kernal_chrout
241c: e8        -         inx
241d: 4c 14 24  -         jmp !loop-
2420: 68        -         pla
2421: 8d 86 02  -         sta foreground_color
2424: a2 00     -         ldx #$00
2426: bd 35 24  -         lda msg,x
2429: f0 07     -         beq !done+
242b: 20 d2 ff  -         jsr kernal_chrout
242e: e8        -         inx
242f: 4c 26 24  -         jmp !loop-
2432: 4c 37 24  -         jmp !done+
2435: 0d 00     - memory: .byte RETURN, NULL
2437: ae f5 3d  -         ldx TEST_NAME_COUNT
243a: e0 15     -         cpx #TESTS_PER_PAGE
243c: d0 5d     -         bne !exit+
243e: ad 86 02  -         lda foreground_color
2441: 48        -         pha
2442: a9 01     -         lda #color
2444: 8d 86 02  -         sta foreground_color
2447: a2 00     -         ldx #$00
2449: bd 5c 24  -         lda msg,x
244c: f0 07     -         beq !done+
244e: 20 d2 ff  -         jsr kernal_chrout
2451: e8        -         inx
2452: 4c 49 24  -         jmp !loop-
2455: 68        -         pla
2456: 8d 86 02  -         sta foreground_color
2459: 4c 7b 24  -         jmp !no_key+
245c: 0d        - memory: .byte RETURN
245d: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
246d: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2479: 0d 00     -         .byte RETURN, NULL
247b: 20 9f ff  -         jsr scnkey  // scan keyboard
247e: 20 e4 ff  -         jsr getin	// put result into A
2481: f0 f8     -         beq !no_key-
2483: a2 00     -         ldx #$00
2485: bd 94 24  -         lda msg,x
2488: f0 07     -         beq !done+
248a: 20 d2 ff  -         jsr kernal_chrout
248d: e8        -         inx
248e: 4c 85 24  -         jmp !loop-
2491: 4c 96 24  -         jmp !done+
2494: 0d 00     - newline:.byte RETURN, NULL
2496: a2 00     -         ldx #$00
2498: 8e f5 3d  -         stx TEST_NAME_COUNT
249b: 60        -         rts
249c: ee f5 3d  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
249f: ad 86 02  -         lda foreground_color
24a2: 48        -         pha
24a3: a9 0f     -         lda #color
24a5: 8d 86 02  -         sta foreground_color
24a8: a2 00     -         ldx #$00
24aa: bd bd 24  -         lda msg,x
24ad: f0 07     -         beq !done+
24af: 20 d2 ff  -         jsr kernal_chrout
24b2: e8        -         inx
24b3: 4c aa 24  -         jmp !loop-
24b6: 68        -         pla
24b7: 8d 86 02  -         sta foreground_color
24ba: 4c cc 24  -         jmp !done+
24bd: 20 20     - memory: .fill spacing, spacebar
24bf: 36 35 30 32 20 4d 4f 44 45                       -         .text name
24c8: 2e 2e 2e  -         .text "..."
24cb: 00        -         .byte NULL
24cc: 20 86 08  -         jsr SW16
24cf: 00        -         .byte $00 }
24d0: ee f3 3d  -         inc TEST_COUNT
24d3: ad 86 02  -         lda foreground_color
24d6: 48        -         pha
24d7: a9 0e     -         lda #color
24d9: 8d 86 02  -         sta foreground_color
24dc: a2 00     -         ldx #$00
24de: bd f1 24  -         lda msg,x
24e1: f0 07     -         beq !done+
24e3: 20 d2 ff  -         jsr kernal_chrout
24e6: e8        -         inx
24e7: 4c de 24  -         jmp !loop-
24ea: 68        -         pla
24eb: 8d 86 02  -         sta foreground_color
24ee: 4c f7 24  -         jmp !done+
24f1: 20        - memory: .byte spacebar
24f2: 52 54 4e  -         .text description
24f5: 3a        -         .text ":"
24f6: 00        -         .byte NULL
24f7: a2 01     -         ldx #value
24f9: f0 21     -         beq !failed+
24fb: ee f4 3d  -         inc TEST_PASS_COUNT
24fe: ad 86 02  -         lda foreground_color
2501: 48        -         pha
2502: a9 05     -         lda #color
2504: 8d 86 02  -         sta foreground_color
2507: a2 00     -         ldx #$00
2509: bd ef 3d  -         lda msg,x
250c: f0 07     -         beq !done+
250e: 20 d2 ff  -         jsr kernal_chrout
2511: e8        -         inx
2512: 4c 09 25  -         jmp !loop-
2515: 68        -         pla
2516: 8d 86 02  -         sta foreground_color
2519: 4c 37 25  -         jmp !done+
251c: ad 86 02  -         lda foreground_color
251f: 48        -         pha
2520: a9 02     -         lda #color
2522: 8d 86 02  -         sta foreground_color
2525: a2 00     -         ldx #$00
2527: bd f1 3d  -         lda msg,x
252a: f0 07     -         beq !done+
252c: 20 d2 ff  -         jsr kernal_chrout
252f: e8        -         inx
2530: 4c 27 25  -         jmp !loop-
2533: 68        -         pla
2534: 8d 86 02  -         sta foreground_color
2537: a2 00     -         ldx #$00
2539: bd 48 25  -         lda msg,x
253c: f0 07     -         beq !done+
253e: 20 d2 ff  -         jsr kernal_chrout
2541: e8        -         inx
2542: 4c 39 25  -         jmp !loop-
2545: 4c 4a 25  -         jmp !done+
2548: 0d 00     - memory: .byte RETURN, NULL
254a: ae f5 3d  -         ldx TEST_NAME_COUNT
254d: e0 15     -         cpx #TESTS_PER_PAGE
254f: d0 5d     -         bne !exit+
2551: ad 86 02  -         lda foreground_color
2554: 48        -         pha
2555: a9 01     -         lda #color
2557: 8d 86 02  -         sta foreground_color
255a: a2 00     -         ldx #$00
255c: bd 6f 25  -         lda msg,x
255f: f0 07     -         beq !done+
2561: 20 d2 ff  -         jsr kernal_chrout
2564: e8        -         inx
2565: 4c 5c 25  -         jmp !loop-
2568: 68        -         pla
2569: 8d 86 02  -         sta foreground_color
256c: 4c 8e 25  -         jmp !no_key+
256f: 0d        - memory: .byte RETURN
2570: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2580: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
258c: 0d 00     -         .byte RETURN, NULL
258e: 20 9f ff  -         jsr scnkey  // scan keyboard
2591: 20 e4 ff  -         jsr getin	// put result into A
2594: f0 f8     -         beq !no_key-
2596: a2 00     -         ldx #$00
2598: bd a7 25  -         lda msg,x
259b: f0 07     -         beq !done+
259d: 20 d2 ff  -         jsr kernal_chrout
25a0: e8        -         inx
25a1: 4c 98 25  -         jmp !loop-
25a4: 4c a9 25  -         jmp !done+
25a7: 0d 00     - newline:.byte RETURN, NULL
25a9: a2 00     -         ldx #$00
25ab: 8e f5 3d  -         stx TEST_NAME_COUNT
25ae: 60        -         rts
25af: ee f5 3d  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
25b2: ad 86 02  -         lda foreground_color
25b5: 48        -         pha
25b6: a9 0f     -         lda #color
25b8: 8d 86 02  -         sta foreground_color
25bb: a2 00     -         ldx #$00
25bd: bd d0 25  -         lda msg,x
25c0: f0 07     -         beq !done+
25c2: 20 d2 ff  -         jsr kernal_chrout
25c5: e8        -         inx
25c6: 4c bd 25  -         jmp !loop-
25c9: 68        -         pla
25ca: 8d 86 02  -         sta foreground_color
25cd: 4c e3 25  -         jmp !done+
25d0: 20 20     - memory: .fill spacing, spacebar
25d2: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
25df: 2e 2e 2e  -         .text "..."
25e2: 00        -         .byte NULL
25e3: 20 86 08  -         jsr SW16
25e6: 01 00     -         .byte $01, effective_address(ea,*) }
25e8: 10        -         .byte opcode(op, register)
25e9: dc fe     -         .word address.getValue()
25eb: 01 05     -         .byte $01, effective_address(ea,*) }
25ed: 10        -         .byte opcode(op, register)
25ee: 23 01     -         .word address.getValue()
25f0: 01 00     -         .byte $01, effective_address(ea,*) }
25f2: 00        -         .byte $00 }
25f3: ee f3 3d  -         inc TEST_COUNT
25f6: ad 86 02  -         lda foreground_color
25f9: 48        -         pha
25fa: a9 0e     -         lda #color
25fc: 8d 86 02  -         sta foreground_color
25ff: a2 00     -         ldx #$00
2601: bd 14 26  -         lda msg,x
2604: f0 07     -         beq !done+
2606: 20 d2 ff  -         jsr kernal_chrout
2609: e8        -         inx
260a: 4c 01 26  -         jmp !loop-
260d: 68        -         pla
260e: 8d 86 02  -         sta foreground_color
2611: 4c 18 26  -         jmp !done+
2614: 20        - memory: .byte spacebar
2615: 31        -         .text description
2616: 3a        -         .text ":"
2617: 00        -         .byte NULL
2618: a6 17     -         ldx rl(register.getValue())
261a: a4 18     -         ldy rh(register.getValue())
261c: e0 dc     -         cpx #<value
261e: d0 25     -         bne !failed+
2620: c0 fe     -         cpy #>value
2622: d0 21     -         bne !failed+
2624: ee f4 3d  -         inc TEST_PASS_COUNT
2627: ad 86 02  -         lda foreground_color
262a: 48        -         pha
262b: a9 05     -         lda #color
262d: 8d 86 02  -         sta foreground_color
2630: a2 00     -         ldx #$00
2632: bd ef 3d  -         lda msg,x
2635: f0 07     -         beq !done+
2637: 20 d2 ff  -         jsr kernal_chrout
263a: e8        -         inx
263b: 4c 32 26  -         jmp !loop-
263e: 68        -         pla
263f: 8d 86 02  -         sta foreground_color
2642: 4c 60 26  -         jmp !done+
2645: ad 86 02  -         lda foreground_color
2648: 48        -         pha
2649: a9 02     -         lda #color
264b: 8d 86 02  -         sta foreground_color
264e: a2 00     -         ldx #$00
2650: bd f1 3d  -         lda msg,x
2653: f0 07     -         beq !done+
2655: 20 d2 ff  -         jsr kernal_chrout
2658: e8        -         inx
2659: 4c 50 26  -         jmp !loop-
265c: 68        -         pla
265d: 8d 86 02  -         sta foreground_color
2660: a2 00     -         ldx #$00
2662: bd 71 26  -         lda msg,x
2665: f0 07     -         beq !done+
2667: 20 d2 ff  -         jsr kernal_chrout
266a: e8        -         inx
266b: 4c 62 26  -         jmp !loop-
266e: 4c 73 26  -         jmp !done+
2671: 0d 00     - memory: .byte RETURN, NULL
2673: ae f5 3d  -         ldx TEST_NAME_COUNT
2676: e0 15     -         cpx #TESTS_PER_PAGE
2678: d0 5d     -         bne !exit+
267a: ad 86 02  -         lda foreground_color
267d: 48        -         pha
267e: a9 01     -         lda #color
2680: 8d 86 02  -         sta foreground_color
2683: a2 00     -         ldx #$00
2685: bd 98 26  -         lda msg,x
2688: f0 07     -         beq !done+
268a: 20 d2 ff  -         jsr kernal_chrout
268d: e8        -         inx
268e: 4c 85 26  -         jmp !loop-
2691: 68        -         pla
2692: 8d 86 02  -         sta foreground_color
2695: 4c b7 26  -         jmp !no_key+
2698: 0d        - memory: .byte RETURN
2699: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
26a9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
26b5: 0d 00     -         .byte RETURN, NULL
26b7: 20 9f ff  -         jsr scnkey  // scan keyboard
26ba: 20 e4 ff  -         jsr getin	// put result into A
26bd: f0 f8     -         beq !no_key-
26bf: a2 00     -         ldx #$00
26c1: bd d0 26  -         lda msg,x
26c4: f0 07     -         beq !done+
26c6: 20 d2 ff  -         jsr kernal_chrout
26c9: e8        -         inx
26ca: 4c c1 26  -         jmp !loop-
26cd: 4c d2 26  -         jmp !done+
26d0: 0d 00     - newline:.byte RETURN, NULL
26d2: a2 00     -         ldx #$00
26d4: 8e f5 3d  -         stx TEST_NAME_COUNT
26d7: 60        -         rts
26d8: ee f5 3d  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
26db: ad 86 02  -         lda foreground_color
26de: 48        -         pha
26df: a9 0f     -         lda #color
26e1: 8d 86 02  -         sta foreground_color
26e4: a2 00     -         ldx #$00
26e6: bd f9 26  -         lda msg,x
26e9: f0 07     -         beq !done+
26eb: 20 d2 ff  -         jsr kernal_chrout
26ee: e8        -         inx
26ef: 4c e6 26  -         jmp !loop-
26f2: 68        -         pla
26f3: 8d 86 02  -         sta foreground_color
26f6: 4c 0e 27  -         jmp !done+
26f9: 20 20     - memory: .fill spacing, spacebar
26fb: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
270a: 2e 2e 2e  -         .text "..."
270d: 00        -         .byte NULL
270e: 20 86 08  -         jsr SW16
2711: 15        -         .byte opcode(op, register)
2712: 00 10     -         .word address.getValue()
2714: 10        -         .byte opcode(op, register)
2715: ff ff     -         .word address.getValue()
2717: a5        -         .byte opcode($a0, register) }
2718: 02 02     -         .byte $02, effective_address(ea,*) }
271a: 01 05     -         .byte $01, effective_address(ea,*) }
271c: 10        -         .byte opcode(op, register)
271d: dc fe     -         .word address.getValue()
271f: 01 05     -         .byte $01, effective_address(ea,*) }
2721: 10        -         .byte opcode(op, register)
2722: 23 01     -         .word address.getValue()
2724: 01 00     -         .byte $01, effective_address(ea,*) }
2726: 00        -         .byte $00 }
2727: ee f3 3d  -         inc TEST_COUNT
272a: ad 86 02  -         lda foreground_color
272d: 48        -         pha
272e: a9 0e     -         lda #color
2730: 8d 86 02  -         sta foreground_color
2733: a2 00     -         ldx #$00
2735: bd 48 27  -         lda msg,x
2738: f0 07     -         beq !done+
273a: 20 d2 ff  -         jsr kernal_chrout
273d: e8        -         inx
273e: 4c 35 27  -         jmp !loop-
2741: 68        -         pla
2742: 8d 86 02  -         sta foreground_color
2745: 4c 4c 27  -         jmp !done+
2748: 20        - memory: .byte spacebar
2749: 32        -         .text description
274a: 3a        -         .text ":"
274b: 00        -         .byte NULL
274c: a6 17     -         ldx rl(register.getValue())
274e: a4 18     -         ldy rh(register.getValue())
2750: e0 23     -         cpx #<value
2752: d0 25     -         bne !failed+
2754: c0 01     -         cpy #>value
2756: d0 21     -         bne !failed+
2758: ee f4 3d  -         inc TEST_PASS_COUNT
275b: ad 86 02  -         lda foreground_color
275e: 48        -         pha
275f: a9 05     -         lda #color
2761: 8d 86 02  -         sta foreground_color
2764: a2 00     -         ldx #$00
2766: bd ef 3d  -         lda msg,x
2769: f0 07     -         beq !done+
276b: 20 d2 ff  -         jsr kernal_chrout
276e: e8        -         inx
276f: 4c 66 27  -         jmp !loop-
2772: 68        -         pla
2773: 8d 86 02  -         sta foreground_color
2776: 4c 94 27  -         jmp !done+
2779: ad 86 02  -         lda foreground_color
277c: 48        -         pha
277d: a9 02     -         lda #color
277f: 8d 86 02  -         sta foreground_color
2782: a2 00     -         ldx #$00
2784: bd f1 3d  -         lda msg,x
2787: f0 07     -         beq !done+
2789: 20 d2 ff  -         jsr kernal_chrout
278c: e8        -         inx
278d: 4c 84 27  -         jmp !loop-
2790: 68        -         pla
2791: 8d 86 02  -         sta foreground_color
2794: a2 00     -         ldx #$00
2796: bd a5 27  -         lda msg,x
2799: f0 07     -         beq !done+
279b: 20 d2 ff  -         jsr kernal_chrout
279e: e8        -         inx
279f: 4c 96 27  -         jmp !loop-
27a2: 4c a7 27  -         jmp !done+
27a5: 0d 00     - memory: .byte RETURN, NULL
27a7: ae f5 3d  -         ldx TEST_NAME_COUNT
27aa: e0 15     -         cpx #TESTS_PER_PAGE
27ac: d0 5d     -         bne !exit+
27ae: ad 86 02  -         lda foreground_color
27b1: 48        -         pha
27b2: a9 01     -         lda #color
27b4: 8d 86 02  -         sta foreground_color
27b7: a2 00     -         ldx #$00
27b9: bd cc 27  -         lda msg,x
27bc: f0 07     -         beq !done+
27be: 20 d2 ff  -         jsr kernal_chrout
27c1: e8        -         inx
27c2: 4c b9 27  -         jmp !loop-
27c5: 68        -         pla
27c6: 8d 86 02  -         sta foreground_color
27c9: 4c eb 27  -         jmp !no_key+
27cc: 0d        - memory: .byte RETURN
27cd: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
27dd: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
27e9: 0d 00     -         .byte RETURN, NULL
27eb: 20 9f ff  -         jsr scnkey  // scan keyboard
27ee: 20 e4 ff  -         jsr getin	// put result into A
27f1: f0 f8     -         beq !no_key-
27f3: a2 00     -         ldx #$00
27f5: bd 04 28  -         lda msg,x
27f8: f0 07     -         beq !done+
27fa: 20 d2 ff  -         jsr kernal_chrout
27fd: e8        -         inx
27fe: 4c f5 27  -         jmp !loop-
2801: 4c 06 28  -         jmp !done+
2804: 0d 00     - newline:.byte RETURN, NULL
2806: a2 00     -         ldx #$00
2808: 8e f5 3d  -         stx TEST_NAME_COUNT
280b: 60        -         rts
280c: ee f5 3d  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
280f: ad 86 02  -         lda foreground_color
2812: 48        -         pha
2813: a9 0f     -         lda #color
2815: 8d 86 02  -         sta foreground_color
2818: a2 00     -         ldx #$00
281a: bd 2d 28  -         lda msg,x
281d: f0 07     -         beq !done+
281f: 20 d2 ff  -         jsr kernal_chrout
2822: e8        -         inx
2823: 4c 1a 28  -         jmp !loop-
2826: 68        -         pla
2827: 8d 86 02  -         sta foreground_color
282a: 4c 42 28  -         jmp !done+
282d: 20 20     - memory: .fill spacing, spacebar
282f: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
283e: 2e 2e 2e  -         .text "..."
2841: 00        -         .byte NULL
2842: 20 86 08  -         jsr SW16
2845: 15        -         .byte opcode(op, register)
2846: 00 10     -         .word address.getValue()
2848: 10        -         .byte opcode(op, register)
2849: ff ff     -         .word address.getValue()
284b: a5        -         .byte opcode($a0, register) }
284c: 03 02     -         .byte $03, effective_address(ea,*) }
284e: 01 05     -         .byte $01, effective_address(ea,*) }
2850: 10        -         .byte opcode(op, register)
2851: dc fe     -         .word address.getValue()
2853: 01 05     -         .byte $01, effective_address(ea,*) }
2855: 10        -         .byte opcode(op, register)
2856: 23 01     -         .word address.getValue()
2858: 01 00     -         .byte $01, effective_address(ea,*) }
285a: 00        -         .byte $00 }
285b: ee f3 3d  -         inc TEST_COUNT
285e: ad 86 02  -         lda foreground_color
2861: 48        -         pha
2862: a9 0e     -         lda #color
2864: 8d 86 02  -         sta foreground_color
2867: a2 00     -         ldx #$00
2869: bd 7c 28  -         lda msg,x
286c: f0 07     -         beq !done+
286e: 20 d2 ff  -         jsr kernal_chrout
2871: e8        -         inx
2872: 4c 69 28  -         jmp !loop-
2875: 68        -         pla
2876: 8d 86 02  -         sta foreground_color
2879: 4c 80 28  -         jmp !done+
287c: 20        - memory: .byte spacebar
287d: 31        -         .text description
287e: 3a        -         .text ":"
287f: 00        -         .byte NULL
2880: a6 17     -         ldx rl(register.getValue())
2882: a4 18     -         ldy rh(register.getValue())
2884: e0 dc     -         cpx #<value
2886: d0 25     -         bne !failed+
2888: c0 fe     -         cpy #>value
288a: d0 21     -         bne !failed+
288c: ee f4 3d  -         inc TEST_PASS_COUNT
288f: ad 86 02  -         lda foreground_color
2892: 48        -         pha
2893: a9 05     -         lda #color
2895: 8d 86 02  -         sta foreground_color
2898: a2 00     -         ldx #$00
289a: bd ef 3d  -         lda msg,x
289d: f0 07     -         beq !done+
289f: 20 d2 ff  -         jsr kernal_chrout
28a2: e8        -         inx
28a3: 4c 9a 28  -         jmp !loop-
28a6: 68        -         pla
28a7: 8d 86 02  -         sta foreground_color
28aa: 4c c8 28  -         jmp !done+
28ad: ad 86 02  -         lda foreground_color
28b0: 48        -         pha
28b1: a9 02     -         lda #color
28b3: 8d 86 02  -         sta foreground_color
28b6: a2 00     -         ldx #$00
28b8: bd f1 3d  -         lda msg,x
28bb: f0 07     -         beq !done+
28bd: 20 d2 ff  -         jsr kernal_chrout
28c0: e8        -         inx
28c1: 4c b8 28  -         jmp !loop-
28c4: 68        -         pla
28c5: 8d 86 02  -         sta foreground_color
28c8: a2 00     -         ldx #$00
28ca: bd d9 28  -         lda msg,x
28cd: f0 07     -         beq !done+
28cf: 20 d2 ff  -         jsr kernal_chrout
28d2: e8        -         inx
28d3: 4c ca 28  -         jmp !loop-
28d6: 4c db 28  -         jmp !done+
28d9: 0d 00     - memory: .byte RETURN, NULL
28db: ae f5 3d  -         ldx TEST_NAME_COUNT
28de: e0 15     -         cpx #TESTS_PER_PAGE
28e0: d0 5d     -         bne !exit+
28e2: ad 86 02  -         lda foreground_color
28e5: 48        -         pha
28e6: a9 01     -         lda #color
28e8: 8d 86 02  -         sta foreground_color
28eb: a2 00     -         ldx #$00
28ed: bd 00 29  -         lda msg,x
28f0: f0 07     -         beq !done+
28f2: 20 d2 ff  -         jsr kernal_chrout
28f5: e8        -         inx
28f6: 4c ed 28  -         jmp !loop-
28f9: 68        -         pla
28fa: 8d 86 02  -         sta foreground_color
28fd: 4c 1f 29  -         jmp !no_key+
2900: 0d        - memory: .byte RETURN
2901: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2911: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
291d: 0d 00     -         .byte RETURN, NULL
291f: 20 9f ff  -         jsr scnkey  // scan keyboard
2922: 20 e4 ff  -         jsr getin	// put result into A
2925: f0 f8     -         beq !no_key-
2927: a2 00     -         ldx #$00
2929: bd 38 29  -         lda msg,x
292c: f0 07     -         beq !done+
292e: 20 d2 ff  -         jsr kernal_chrout
2931: e8        -         inx
2932: 4c 29 29  -         jmp !loop-
2935: 4c 3a 29  -         jmp !done+
2938: 0d 00     - newline:.byte RETURN, NULL
293a: a2 00     -         ldx #$00
293c: 8e f5 3d  -         stx TEST_NAME_COUNT
293f: 60        -         rts
2940: ee f5 3d  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
2943: ad 86 02  -         lda foreground_color
2946: 48        -         pha
2947: a9 0f     -         lda #color
2949: 8d 86 02  -         sta foreground_color
294c: a2 00     -         ldx #$00
294e: bd 61 29  -         lda msg,x
2951: f0 07     -         beq !done+
2953: 20 d2 ff  -         jsr kernal_chrout
2956: e8        -         inx
2957: 4c 4e 29  -         jmp !loop-
295a: 68        -         pla
295b: 8d 86 02  -         sta foreground_color
295e: 4c 74 29  -         jmp !done+
2961: 20 20     - memory: .fill spacing, spacebar
2963: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
2970: 2e 2e 2e  -         .text "..."
2973: 00        -         .byte NULL
2974: 20 86 08  -         jsr SW16
2977: 15        -         .byte opcode(op, register)
2978: 11 3e     -         .word address.getValue()
297a: 14        -         .byte opcode(op, register)
297b: 21 3e     -         .word address.getValue()
297d: b0        -         .byte opcode($b0, register) }
297e: 55        -         .byte opcode($50, register) }
297f: 24        -         .byte opcode($20, register) }
2980: d5        -         .byte opcode($d0, register) }
2981: 04 fa     -         .byte $04, effective_address(ea,*) }
2983: 00        -         .byte $00 }
2984: ee f3 3d  -         inc TEST_COUNT
2987: ad 86 02  -         lda foreground_color
298a: 48        -         pha
298b: a9 0e     -         lda #color
298d: 8d 86 02  -         sta foreground_color
2990: a2 00     -         ldx #$00
2992: bd a5 29  -         lda msg,x
2995: f0 07     -         beq !done+
2997: 20 d2 ff  -         jsr kernal_chrout
299a: e8        -         inx
299b: 4c 92 29  -         jmp !loop-
299e: 68        -         pla
299f: 8d 86 02  -         sta foreground_color
29a2: 4c ab 29  -         jmp !done+
29a5: 20        - memory: .byte spacebar
29a6: 43 4c 52  -         .text description
29a9: 3a        -         .text ":"
29aa: 00        -         .byte NULL
29ab: a2 ff     -         ldx #$ff
29ad: e8        -         inx
29ae: e0 10     -         cpx #size
29b0: f0 0a     -         beq !success+
29b2: a9 00     -         lda #constant
29b4: dd 11 3e  -         cmp source,x
29b7: f0 f4     -         beq !loop-
29b9: 4c dd 29  -         jmp !failed+
29bc: ee f4 3d  -         inc TEST_PASS_COUNT
29bf: ad 86 02  -         lda foreground_color
29c2: 48        -         pha
29c3: a9 05     -         lda #color
29c5: 8d 86 02  -         sta foreground_color
29c8: a2 00     -         ldx #$00
29ca: bd ef 3d  -         lda msg,x
29cd: f0 07     -         beq !done+
29cf: 20 d2 ff  -         jsr kernal_chrout
29d2: e8        -         inx
29d3: 4c ca 29  -         jmp !loop-
29d6: 68        -         pla
29d7: 8d 86 02  -         sta foreground_color
29da: 4c f8 29  -         jmp !done+
29dd: ad 86 02  -         lda foreground_color
29e0: 48        -         pha
29e1: a9 02     -         lda #color
29e3: 8d 86 02  -         sta foreground_color
29e6: a2 00     -         ldx #$00
29e8: bd f1 3d  -         lda msg,x
29eb: f0 07     -         beq !done+
29ed: 20 d2 ff  -         jsr kernal_chrout
29f0: e8        -         inx
29f1: 4c e8 29  -         jmp !loop-
29f4: 68        -         pla
29f5: 8d 86 02  -         sta foreground_color
29f8: a2 00     -         ldx #$00
29fa: bd 09 2a  -         lda msg,x
29fd: f0 07     -         beq !done+
29ff: 20 d2 ff  -         jsr kernal_chrout
2a02: e8        -         inx
2a03: 4c fa 29  -         jmp !loop-
2a06: 4c 0b 2a  -         jmp !done+
2a09: 0d 00     - memory: .byte RETURN, NULL
2a0b: ae f5 3d  -         ldx TEST_NAME_COUNT
2a0e: e0 15     -         cpx #TESTS_PER_PAGE
2a10: d0 5d     -         bne !exit+
2a12: ad 86 02  -         lda foreground_color
2a15: 48        -         pha
2a16: a9 01     -         lda #color
2a18: 8d 86 02  -         sta foreground_color
2a1b: a2 00     -         ldx #$00
2a1d: bd 30 2a  -         lda msg,x
2a20: f0 07     -         beq !done+
2a22: 20 d2 ff  -         jsr kernal_chrout
2a25: e8        -         inx
2a26: 4c 1d 2a  -         jmp !loop-
2a29: 68        -         pla
2a2a: 8d 86 02  -         sta foreground_color
2a2d: 4c 4f 2a  -         jmp !no_key+
2a30: 0d        - memory: .byte RETURN
2a31: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2a41: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2a4d: 0d 00     -         .byte RETURN, NULL
2a4f: 20 9f ff  -         jsr scnkey  // scan keyboard
2a52: 20 e4 ff  -         jsr getin	// put result into A
2a55: f0 f8     -         beq !no_key-
2a57: a2 00     -         ldx #$00
2a59: bd 68 2a  -         lda msg,x
2a5c: f0 07     -         beq !done+
2a5e: 20 d2 ff  -         jsr kernal_chrout
2a61: e8        -         inx
2a62: 4c 59 2a  -         jmp !loop-
2a65: 4c 6a 2a  -         jmp !done+
2a68: 0d 00     - newline:.byte RETURN, NULL
2a6a: a2 00     -         ldx #$00
2a6c: 8e f5 3d  -         stx TEST_NAME_COUNT
2a6f: 60        -         rts
2a70: ee f5 3d  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
2a73: ad 86 02  -         lda foreground_color
2a76: 48        -         pha
2a77: a9 0f     -         lda #color
2a79: 8d 86 02  -         sta foreground_color
2a7c: a2 00     -         ldx #$00
2a7e: bd 91 2a  -         lda msg,x
2a81: f0 07     -         beq !done+
2a83: 20 d2 ff  -         jsr kernal_chrout
2a86: e8        -         inx
2a87: 4c 7e 2a  -         jmp !loop-
2a8a: 68        -         pla
2a8b: 8d 86 02  -         sta foreground_color
2a8e: 4c a4 2a  -         jmp !done+
2a91: 20 20     - memory: .fill spacing, spacebar
2a93: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
2aa0: 2e 2e 2e  -         .text "..."
2aa3: 00        -         .byte NULL
2aa4: 20 86 08  -         jsr SW16
2aa7: 15        -         .byte opcode(op, register)
2aa8: 0a 00     -         .word address.getValue()
2aaa: b0        -         .byte opcode($b0, register) }
2aab: b5        -         .byte opcode($b0, register) }
2aac: 05 07     -         .byte $05, effective_address(ea,*) }
2aae: 01 00     -         .byte $01, effective_address(ea,*) }
2ab0: 10        -         .byte opcode(op, register)
2ab1: dc fe     -         .word address.getValue()
2ab3: 01 05     -         .byte $01, effective_address(ea,*) }
2ab5: 10        -         .byte opcode(op, register)
2ab6: 23 01     -         .word address.getValue()
2ab8: 01 00     -         .byte $01, effective_address(ea,*) }
2aba: 00        -         .byte $00 }
2abb: ee f3 3d  -         inc TEST_COUNT
2abe: ad 86 02  -         lda foreground_color
2ac1: 48        -         pha
2ac2: a9 0e     -         lda #color
2ac4: 8d 86 02  -         sta foreground_color
2ac7: a2 00     -         ldx #$00
2ac9: bd dc 2a  -         lda msg,x
2acc: f0 07     -         beq !done+
2ace: 20 d2 ff  -         jsr kernal_chrout
2ad1: e8        -         inx
2ad2: 4c c9 2a  -         jmp !loop-
2ad5: 68        -         pla
2ad6: 8d 86 02  -         sta foreground_color
2ad9: 4c e0 2a  -         jmp !done+
2adc: 20        - memory: .byte spacebar
2add: 32        -         .text description
2ade: 3a        -         .text ":"
2adf: 00        -         .byte NULL
2ae0: a6 17     -         ldx rl(register.getValue())
2ae2: a4 18     -         ldy rh(register.getValue())
2ae4: e0 23     -         cpx #<value
2ae6: d0 25     -         bne !failed+
2ae8: c0 01     -         cpy #>value
2aea: d0 21     -         bne !failed+
2aec: ee f4 3d  -         inc TEST_PASS_COUNT
2aef: ad 86 02  -         lda foreground_color
2af2: 48        -         pha
2af3: a9 05     -         lda #color
2af5: 8d 86 02  -         sta foreground_color
2af8: a2 00     -         ldx #$00
2afa: bd ef 3d  -         lda msg,x
2afd: f0 07     -         beq !done+
2aff: 20 d2 ff  -         jsr kernal_chrout
2b02: e8        -         inx
2b03: 4c fa 2a  -         jmp !loop-
2b06: 68        -         pla
2b07: 8d 86 02  -         sta foreground_color
2b0a: 4c 28 2b  -         jmp !done+
2b0d: ad 86 02  -         lda foreground_color
2b10: 48        -         pha
2b11: a9 02     -         lda #color
2b13: 8d 86 02  -         sta foreground_color
2b16: a2 00     -         ldx #$00
2b18: bd f1 3d  -         lda msg,x
2b1b: f0 07     -         beq !done+
2b1d: 20 d2 ff  -         jsr kernal_chrout
2b20: e8        -         inx
2b21: 4c 18 2b  -         jmp !loop-
2b24: 68        -         pla
2b25: 8d 86 02  -         sta foreground_color
2b28: a2 00     -         ldx #$00
2b2a: bd 39 2b  -         lda msg,x
2b2d: f0 07     -         beq !done+
2b2f: 20 d2 ff  -         jsr kernal_chrout
2b32: e8        -         inx
2b33: 4c 2a 2b  -         jmp !loop-
2b36: 4c 3b 2b  -         jmp !done+
2b39: 0d 00     - memory: .byte RETURN, NULL
2b3b: ae f5 3d  -         ldx TEST_NAME_COUNT
2b3e: e0 15     -         cpx #TESTS_PER_PAGE
2b40: d0 5d     -         bne !exit+
2b42: ad 86 02  -         lda foreground_color
2b45: 48        -         pha
2b46: a9 01     -         lda #color
2b48: 8d 86 02  -         sta foreground_color
2b4b: a2 00     -         ldx #$00
2b4d: bd 60 2b  -         lda msg,x
2b50: f0 07     -         beq !done+
2b52: 20 d2 ff  -         jsr kernal_chrout
2b55: e8        -         inx
2b56: 4c 4d 2b  -         jmp !loop-
2b59: 68        -         pla
2b5a: 8d 86 02  -         sta foreground_color
2b5d: 4c 7f 2b  -         jmp !no_key+
2b60: 0d        - memory: .byte RETURN
2b61: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2b71: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2b7d: 0d 00     -         .byte RETURN, NULL
2b7f: 20 9f ff  -         jsr scnkey  // scan keyboard
2b82: 20 e4 ff  -         jsr getin	// put result into A
2b85: f0 f8     -         beq !no_key-
2b87: a2 00     -         ldx #$00
2b89: bd 98 2b  -         lda msg,x
2b8c: f0 07     -         beq !done+
2b8e: 20 d2 ff  -         jsr kernal_chrout
2b91: e8        -         inx
2b92: 4c 89 2b  -         jmp !loop-
2b95: 4c 9a 2b  -         jmp !done+
2b98: 0d 00     - newline:.byte RETURN, NULL
2b9a: a2 00     -         ldx #$00
2b9c: 8e f5 3d  -         stx TEST_NAME_COUNT
2b9f: 60        -         rts
2ba0: ee f5 3d  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
2ba3: ad 86 02  -         lda foreground_color
2ba6: 48        -         pha
2ba7: a9 0f     -         lda #color
2ba9: 8d 86 02  -         sta foreground_color
2bac: a2 00     -         ldx #$00
2bae: bd c1 2b  -         lda msg,x
2bb1: f0 07     -         beq !done+
2bb3: 20 d2 ff  -         jsr kernal_chrout
2bb6: e8        -         inx
2bb7: 4c ae 2b  -         jmp !loop-
2bba: 68        -         pla
2bbb: 8d 86 02  -         sta foreground_color
2bbe: 4c d2 2b  -         jmp !done+
2bc1: 20 20     - memory: .fill spacing, spacebar
2bc3: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
2bce: 2e 2e 2e  -         .text "..."
2bd1: 00        -         .byte NULL
2bd2: 20 86 08  -         jsr SW16
2bd5: b0        -         .byte opcode($b0, register) }
2bd6: 06 07     -         .byte $06, effective_address(ea,*) }
2bd8: 01 00     -         .byte $01, effective_address(ea,*) }
2bda: 10        -         .byte opcode(op, register)
2bdb: dc fe     -         .word address.getValue()
2bdd: 01 05     -         .byte $01, effective_address(ea,*) }
2bdf: 10        -         .byte opcode(op, register)
2be0: 23 01     -         .word address.getValue()
2be2: 01 00     -         .byte $01, effective_address(ea,*) }
2be4: 00        -         .byte $00 }
2be5: ee f3 3d  -         inc TEST_COUNT
2be8: ad 86 02  -         lda foreground_color
2beb: 48        -         pha
2bec: a9 0e     -         lda #color
2bee: 8d 86 02  -         sta foreground_color
2bf1: a2 00     -         ldx #$00
2bf3: bd 06 2c  -         lda msg,x
2bf6: f0 07     -         beq !done+
2bf8: 20 d2 ff  -         jsr kernal_chrout
2bfb: e8        -         inx
2bfc: 4c f3 2b  -         jmp !loop-
2bff: 68        -         pla
2c00: 8d 86 02  -         sta foreground_color
2c03: 4c 0a 2c  -         jmp !done+
2c06: 20        - memory: .byte spacebar
2c07: 32        -         .text description
2c08: 3a        -         .text ":"
2c09: 00        -         .byte NULL
2c0a: a6 17     -         ldx rl(register.getValue())
2c0c: a4 18     -         ldy rh(register.getValue())
2c0e: e0 23     -         cpx #<value
2c10: d0 25     -         bne !failed+
2c12: c0 01     -         cpy #>value
2c14: d0 21     -         bne !failed+
2c16: ee f4 3d  -         inc TEST_PASS_COUNT
2c19: ad 86 02  -         lda foreground_color
2c1c: 48        -         pha
2c1d: a9 05     -         lda #color
2c1f: 8d 86 02  -         sta foreground_color
2c22: a2 00     -         ldx #$00
2c24: bd ef 3d  -         lda msg,x
2c27: f0 07     -         beq !done+
2c29: 20 d2 ff  -         jsr kernal_chrout
2c2c: e8        -         inx
2c2d: 4c 24 2c  -         jmp !loop-
2c30: 68        -         pla
2c31: 8d 86 02  -         sta foreground_color
2c34: 4c 52 2c  -         jmp !done+
2c37: ad 86 02  -         lda foreground_color
2c3a: 48        -         pha
2c3b: a9 02     -         lda #color
2c3d: 8d 86 02  -         sta foreground_color
2c40: a2 00     -         ldx #$00
2c42: bd f1 3d  -         lda msg,x
2c45: f0 07     -         beq !done+
2c47: 20 d2 ff  -         jsr kernal_chrout
2c4a: e8        -         inx
2c4b: 4c 42 2c  -         jmp !loop-
2c4e: 68        -         pla
2c4f: 8d 86 02  -         sta foreground_color
2c52: a2 00     -         ldx #$00
2c54: bd 63 2c  -         lda msg,x
2c57: f0 07     -         beq !done+
2c59: 20 d2 ff  -         jsr kernal_chrout
2c5c: e8        -         inx
2c5d: 4c 54 2c  -         jmp !loop-
2c60: 4c 65 2c  -         jmp !done+
2c63: 0d 00     - memory: .byte RETURN, NULL
2c65: ae f5 3d  -         ldx TEST_NAME_COUNT
2c68: e0 15     -         cpx #TESTS_PER_PAGE
2c6a: d0 5d     -         bne !exit+
2c6c: ad 86 02  -         lda foreground_color
2c6f: 48        -         pha
2c70: a9 01     -         lda #color
2c72: 8d 86 02  -         sta foreground_color
2c75: a2 00     -         ldx #$00
2c77: bd 8a 2c  -         lda msg,x
2c7a: f0 07     -         beq !done+
2c7c: 20 d2 ff  -         jsr kernal_chrout
2c7f: e8        -         inx
2c80: 4c 77 2c  -         jmp !loop-
2c83: 68        -         pla
2c84: 8d 86 02  -         sta foreground_color
2c87: 4c a9 2c  -         jmp !no_key+
2c8a: 0d        - memory: .byte RETURN
2c8b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2c9b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2ca7: 0d 00     -         .byte RETURN, NULL
2ca9: 20 9f ff  -         jsr scnkey  // scan keyboard
2cac: 20 e4 ff  -         jsr getin	// put result into A
2caf: f0 f8     -         beq !no_key-
2cb1: a2 00     -         ldx #$00
2cb3: bd c2 2c  -         lda msg,x
2cb6: f0 07     -         beq !done+
2cb8: 20 d2 ff  -         jsr kernal_chrout
2cbb: e8        -         inx
2cbc: 4c b3 2c  -         jmp !loop-
2cbf: 4c c4 2c  -         jmp !done+
2cc2: 0d 00     - newline:.byte RETURN, NULL
2cc4: a2 00     -         ldx #$00
2cc6: 8e f5 3d  -         stx TEST_NAME_COUNT
2cc9: 60        -         rts
2cca: ee f5 3d  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
2ccd: ad 86 02  -         lda foreground_color
2cd0: 48        -         pha
2cd1: a9 0f     -         lda #color
2cd3: 8d 86 02  -         sta foreground_color
2cd6: a2 00     -         ldx #$00
2cd8: bd eb 2c  -         lda msg,x
2cdb: f0 07     -         beq !done+
2cdd: 20 d2 ff  -         jsr kernal_chrout
2ce0: e8        -         inx
2ce1: 4c d8 2c  -         jmp !loop-
2ce4: 68        -         pla
2ce5: 8d 86 02  -         sta foreground_color
2ce8: 4c fd 2c  -         jmp !done+
2ceb: 20 20     - memory: .fill spacing, spacebar
2ced: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
2cf9: 2e 2e 2e  -         .text "..."
2cfc: 00        -         .byte NULL
2cfd: 20 86 08  -         jsr SW16
2d00: 15        -         .byte opcode(op, register)
2d01: 0a 00     -         .word address.getValue()
2d03: b0        -         .byte opcode($b0, register) }
2d04: a5        -         .byte opcode($a0, register) }
2d05: 07 07     -         .byte $07, effective_address(ea,*) }
2d07: 01 00     -         .byte $01, effective_address(ea,*) }
2d09: 10        -         .byte opcode(op, register)
2d0a: dc fe     -         .word address.getValue()
2d0c: 01 05     -         .byte $01, effective_address(ea,*) }
2d0e: 10        -         .byte opcode(op, register)
2d0f: 23 01     -         .word address.getValue()
2d11: 01 00     -         .byte $01, effective_address(ea,*) }
2d13: 00        -         .byte $00 }
2d14: ee f3 3d  -         inc TEST_COUNT
2d17: ad 86 02  -         lda foreground_color
2d1a: 48        -         pha
2d1b: a9 0e     -         lda #color
2d1d: 8d 86 02  -         sta foreground_color
2d20: a2 00     -         ldx #$00
2d22: bd 35 2d  -         lda msg,x
2d25: f0 07     -         beq !done+
2d27: 20 d2 ff  -         jsr kernal_chrout
2d2a: e8        -         inx
2d2b: 4c 22 2d  -         jmp !loop-
2d2e: 68        -         pla
2d2f: 8d 86 02  -         sta foreground_color
2d32: 4c 39 2d  -         jmp !done+
2d35: 20        - memory: .byte spacebar
2d36: 32        -         .text description
2d37: 3a        -         .text ":"
2d38: 00        -         .byte NULL
2d39: a6 17     -         ldx rl(register.getValue())
2d3b: a4 18     -         ldy rh(register.getValue())
2d3d: e0 23     -         cpx #<value
2d3f: d0 25     -         bne !failed+
2d41: c0 01     -         cpy #>value
2d43: d0 21     -         bne !failed+
2d45: ee f4 3d  -         inc TEST_PASS_COUNT
2d48: ad 86 02  -         lda foreground_color
2d4b: 48        -         pha
2d4c: a9 05     -         lda #color
2d4e: 8d 86 02  -         sta foreground_color
2d51: a2 00     -         ldx #$00
2d53: bd ef 3d  -         lda msg,x
2d56: f0 07     -         beq !done+
2d58: 20 d2 ff  -         jsr kernal_chrout
2d5b: e8        -         inx
2d5c: 4c 53 2d  -         jmp !loop-
2d5f: 68        -         pla
2d60: 8d 86 02  -         sta foreground_color
2d63: 4c 81 2d  -         jmp !done+
2d66: ad 86 02  -         lda foreground_color
2d69: 48        -         pha
2d6a: a9 02     -         lda #color
2d6c: 8d 86 02  -         sta foreground_color
2d6f: a2 00     -         ldx #$00
2d71: bd f1 3d  -         lda msg,x
2d74: f0 07     -         beq !done+
2d76: 20 d2 ff  -         jsr kernal_chrout
2d79: e8        -         inx
2d7a: 4c 71 2d  -         jmp !loop-
2d7d: 68        -         pla
2d7e: 8d 86 02  -         sta foreground_color
2d81: a2 00     -         ldx #$00
2d83: bd 92 2d  -         lda msg,x
2d86: f0 07     -         beq !done+
2d88: 20 d2 ff  -         jsr kernal_chrout
2d8b: e8        -         inx
2d8c: 4c 83 2d  -         jmp !loop-
2d8f: 4c 94 2d  -         jmp !done+
2d92: 0d 00     - memory: .byte RETURN, NULL
2d94: ae f5 3d  -         ldx TEST_NAME_COUNT
2d97: e0 15     -         cpx #TESTS_PER_PAGE
2d99: d0 5d     -         bne !exit+
2d9b: ad 86 02  -         lda foreground_color
2d9e: 48        -         pha
2d9f: a9 01     -         lda #color
2da1: 8d 86 02  -         sta foreground_color
2da4: a2 00     -         ldx #$00
2da6: bd b9 2d  -         lda msg,x
2da9: f0 07     -         beq !done+
2dab: 20 d2 ff  -         jsr kernal_chrout
2dae: e8        -         inx
2daf: 4c a6 2d  -         jmp !loop-
2db2: 68        -         pla
2db3: 8d 86 02  -         sta foreground_color
2db6: 4c d8 2d  -         jmp !no_key+
2db9: 0d        - memory: .byte RETURN
2dba: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2dca: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2dd6: 0d 00     -         .byte RETURN, NULL
2dd8: 20 9f ff  -         jsr scnkey  // scan keyboard
2ddb: 20 e4 ff  -         jsr getin	// put result into A
2dde: f0 f8     -         beq !no_key-
2de0: a2 00     -         ldx #$00
2de2: bd f1 2d  -         lda msg,x
2de5: f0 07     -         beq !done+
2de7: 20 d2 ff  -         jsr kernal_chrout
2dea: e8        -         inx
2deb: 4c e2 2d  -         jmp !loop-
2dee: 4c f3 2d  -         jmp !done+
2df1: 0d 00     - newline:.byte RETURN, NULL
2df3: a2 00     -         ldx #$00
2df5: 8e f5 3d  -         stx TEST_NAME_COUNT
2df8: 60        -         rts
2df9: ee f5 3d  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
2dfc: ad 86 02  -         lda foreground_color
2dff: 48        -         pha
2e00: a9 0f     -         lda #color
2e02: 8d 86 02  -         sta foreground_color
2e05: a2 00     -         ldx #$00
2e07: bd 1a 2e  -         lda msg,x
2e0a: f0 07     -         beq !done+
2e0c: 20 d2 ff  -         jsr kernal_chrout
2e0f: e8        -         inx
2e10: 4c 07 2e  -         jmp !loop-
2e13: 68        -         pla
2e14: 8d 86 02  -         sta foreground_color
2e17: 4c 2c 2e  -         jmp !done+
2e1a: 20 20     - memory: .fill spacing, spacebar
2e1c: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
2e28: 2e 2e 2e  -         .text "..."
2e2b: 00        -         .byte NULL
2e2c: 20 86 08  -         jsr SW16
2e2f: 15        -         .byte opcode(op, register)
2e30: 01 00     -         .word address.getValue()
2e32: b0        -         .byte opcode($b0, register) }
2e33: b5        -         .byte opcode($b0, register) }
2e34: 08 07     -         .byte $08, effective_address(ea,*) }
2e36: 01 00     -         .byte $01, effective_address(ea,*) }
2e38: 10        -         .byte opcode(op, register)
2e39: dc fe     -         .word address.getValue()
2e3b: 01 05     -         .byte $01, effective_address(ea,*) }
2e3d: 10        -         .byte opcode(op, register)
2e3e: 23 01     -         .word address.getValue()
2e40: 01 00     -         .byte $01, effective_address(ea,*) }
2e42: 00        -         .byte $00 }
2e43: ee f3 3d  -         inc TEST_COUNT
2e46: ad 86 02  -         lda foreground_color
2e49: 48        -         pha
2e4a: a9 0e     -         lda #color
2e4c: 8d 86 02  -         sta foreground_color
2e4f: a2 00     -         ldx #$00
2e51: bd 64 2e  -         lda msg,x
2e54: f0 07     -         beq !done+
2e56: 20 d2 ff  -         jsr kernal_chrout
2e59: e8        -         inx
2e5a: 4c 51 2e  -         jmp !loop-
2e5d: 68        -         pla
2e5e: 8d 86 02  -         sta foreground_color
2e61: 4c 68 2e  -         jmp !done+
2e64: 20        - memory: .byte spacebar
2e65: 32        -         .text description
2e66: 3a        -         .text ":"
2e67: 00        -         .byte NULL
2e68: a6 17     -         ldx rl(register.getValue())
2e6a: a4 18     -         ldy rh(register.getValue())
2e6c: e0 23     -         cpx #<value
2e6e: d0 25     -         bne !failed+
2e70: c0 01     -         cpy #>value
2e72: d0 21     -         bne !failed+
2e74: ee f4 3d  -         inc TEST_PASS_COUNT
2e77: ad 86 02  -         lda foreground_color
2e7a: 48        -         pha
2e7b: a9 05     -         lda #color
2e7d: 8d 86 02  -         sta foreground_color
2e80: a2 00     -         ldx #$00
2e82: bd ef 3d  -         lda msg,x
2e85: f0 07     -         beq !done+
2e87: 20 d2 ff  -         jsr kernal_chrout
2e8a: e8        -         inx
2e8b: 4c 82 2e  -         jmp !loop-
2e8e: 68        -         pla
2e8f: 8d 86 02  -         sta foreground_color
2e92: 4c b0 2e  -         jmp !done+
2e95: ad 86 02  -         lda foreground_color
2e98: 48        -         pha
2e99: a9 02     -         lda #color
2e9b: 8d 86 02  -         sta foreground_color
2e9e: a2 00     -         ldx #$00
2ea0: bd f1 3d  -         lda msg,x
2ea3: f0 07     -         beq !done+
2ea5: 20 d2 ff  -         jsr kernal_chrout
2ea8: e8        -         inx
2ea9: 4c a0 2e  -         jmp !loop-
2eac: 68        -         pla
2ead: 8d 86 02  -         sta foreground_color
2eb0: a2 00     -         ldx #$00
2eb2: bd c1 2e  -         lda msg,x
2eb5: f0 07     -         beq !done+
2eb7: 20 d2 ff  -         jsr kernal_chrout
2eba: e8        -         inx
2ebb: 4c b2 2e  -         jmp !loop-
2ebe: 4c c3 2e  -         jmp !done+
2ec1: 0d 00     - memory: .byte RETURN, NULL
2ec3: ae f5 3d  -         ldx TEST_NAME_COUNT
2ec6: e0 15     -         cpx #TESTS_PER_PAGE
2ec8: d0 5d     -         bne !exit+
2eca: ad 86 02  -         lda foreground_color
2ecd: 48        -         pha
2ece: a9 01     -         lda #color
2ed0: 8d 86 02  -         sta foreground_color
2ed3: a2 00     -         ldx #$00
2ed5: bd e8 2e  -         lda msg,x
2ed8: f0 07     -         beq !done+
2eda: 20 d2 ff  -         jsr kernal_chrout
2edd: e8        -         inx
2ede: 4c d5 2e  -         jmp !loop-
2ee1: 68        -         pla
2ee2: 8d 86 02  -         sta foreground_color
2ee5: 4c 07 2f  -         jmp !no_key+
2ee8: 0d        - memory: .byte RETURN
2ee9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2ef9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2f05: 0d 00     -         .byte RETURN, NULL
2f07: 20 9f ff  -         jsr scnkey  // scan keyboard
2f0a: 20 e4 ff  -         jsr getin	// put result into A
2f0d: f0 f8     -         beq !no_key-
2f0f: a2 00     -         ldx #$00
2f11: bd 20 2f  -         lda msg,x
2f14: f0 07     -         beq !done+
2f16: 20 d2 ff  -         jsr kernal_chrout
2f19: e8        -         inx
2f1a: 4c 11 2f  -         jmp !loop-
2f1d: 4c 22 2f  -         jmp !done+
2f20: 0d 00     - newline:.byte RETURN, NULL
2f22: a2 00     -         ldx #$00
2f24: 8e f5 3d  -         stx TEST_NAME_COUNT
2f27: 60        -         rts
2f28: ee f5 3d  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
2f2b: ad 86 02  -         lda foreground_color
2f2e: 48        -         pha
2f2f: a9 0f     -         lda #color
2f31: 8d 86 02  -         sta foreground_color
2f34: a2 00     -         ldx #$00
2f36: bd 49 2f  -         lda msg,x
2f39: f0 07     -         beq !done+
2f3b: 20 d2 ff  -         jsr kernal_chrout
2f3e: e8        -         inx
2f3f: 4c 36 2f  -         jmp !loop-
2f42: 68        -         pla
2f43: 8d 86 02  -         sta foreground_color
2f46: 4c 5c 2f  -         jmp !done+
2f49: 20 20     - memory: .fill spacing, spacebar
2f4b: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
2f58: 2e 2e 2e  -         .text "..."
2f5b: 00        -         .byte NULL
2f5c: 20 86 08  -         jsr SW16
2f5f: 15        -         .byte opcode(op, register)
2f60: 02 00     -         .word address.getValue()
2f62: b0        -         .byte opcode($b0, register) }
2f63: b5        -         .byte opcode($b0, register) }
2f64: 09 07     -         .byte $09, effective_address(ea,*) }
2f66: 01 00     -         .byte $01, effective_address(ea,*) }
2f68: 10        -         .byte opcode(op, register)
2f69: dc fe     -         .word address.getValue()
2f6b: 01 05     -         .byte $01, effective_address(ea,*) }
2f6d: 10        -         .byte opcode(op, register)
2f6e: 23 01     -         .word address.getValue()
2f70: 01 00     -         .byte $01, effective_address(ea,*) }
2f72: 00        -         .byte $00 }
2f73: ee f3 3d  -         inc TEST_COUNT
2f76: ad 86 02  -         lda foreground_color
2f79: 48        -         pha
2f7a: a9 0e     -         lda #color
2f7c: 8d 86 02  -         sta foreground_color
2f7f: a2 00     -         ldx #$00
2f81: bd 94 2f  -         lda msg,x
2f84: f0 07     -         beq !done+
2f86: 20 d2 ff  -         jsr kernal_chrout
2f89: e8        -         inx
2f8a: 4c 81 2f  -         jmp !loop-
2f8d: 68        -         pla
2f8e: 8d 86 02  -         sta foreground_color
2f91: 4c 98 2f  -         jmp !done+
2f94: 20        - memory: .byte spacebar
2f95: 32        -         .text description
2f96: 3a        -         .text ":"
2f97: 00        -         .byte NULL
2f98: a6 17     -         ldx rl(register.getValue())
2f9a: a4 18     -         ldy rh(register.getValue())
2f9c: e0 23     -         cpx #<value
2f9e: d0 25     -         bne !failed+
2fa0: c0 01     -         cpy #>value
2fa2: d0 21     -         bne !failed+
2fa4: ee f4 3d  -         inc TEST_PASS_COUNT
2fa7: ad 86 02  -         lda foreground_color
2faa: 48        -         pha
2fab: a9 05     -         lda #color
2fad: 8d 86 02  -         sta foreground_color
2fb0: a2 00     -         ldx #$00
2fb2: bd ef 3d  -         lda msg,x
2fb5: f0 07     -         beq !done+
2fb7: 20 d2 ff  -         jsr kernal_chrout
2fba: e8        -         inx
2fbb: 4c b2 2f  -         jmp !loop-
2fbe: 68        -         pla
2fbf: 8d 86 02  -         sta foreground_color
2fc2: 4c e0 2f  -         jmp !done+
2fc5: ad 86 02  -         lda foreground_color
2fc8: 48        -         pha
2fc9: a9 02     -         lda #color
2fcb: 8d 86 02  -         sta foreground_color
2fce: a2 00     -         ldx #$00
2fd0: bd f1 3d  -         lda msg,x
2fd3: f0 07     -         beq !done+
2fd5: 20 d2 ff  -         jsr kernal_chrout
2fd8: e8        -         inx
2fd9: 4c d0 2f  -         jmp !loop-
2fdc: 68        -         pla
2fdd: 8d 86 02  -         sta foreground_color
2fe0: a2 00     -         ldx #$00
2fe2: bd f1 2f  -         lda msg,x
2fe5: f0 07     -         beq !done+
2fe7: 20 d2 ff  -         jsr kernal_chrout
2fea: e8        -         inx
2feb: 4c e2 2f  -         jmp !loop-
2fee: 4c f3 2f  -         jmp !done+
2ff1: 0d 00     - memory: .byte RETURN, NULL
2ff3: ae f5 3d  -         ldx TEST_NAME_COUNT
2ff6: e0 15     -         cpx #TESTS_PER_PAGE
2ff8: d0 5d     -         bne !exit+
2ffa: ad 86 02  -         lda foreground_color
2ffd: 48        -         pha
2ffe: a9 01     -         lda #color
3000: 8d 86 02  -         sta foreground_color
3003: a2 00     -         ldx #$00
3005: bd 18 30  -         lda msg,x
3008: f0 07     -         beq !done+
300a: 20 d2 ff  -         jsr kernal_chrout
300d: e8        -         inx
300e: 4c 05 30  -         jmp !loop-
3011: 68        -         pla
3012: 8d 86 02  -         sta foreground_color
3015: 4c 37 30  -         jmp !no_key+
3018: 0d        - memory: .byte RETURN
3019: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3029: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3035: 0d 00     -         .byte RETURN, NULL
3037: 20 9f ff  -         jsr scnkey  // scan keyboard
303a: 20 e4 ff  -         jsr getin	// put result into A
303d: f0 f8     -         beq !no_key-
303f: a2 00     -         ldx #$00
3041: bd 50 30  -         lda msg,x
3044: f0 07     -         beq !done+
3046: 20 d2 ff  -         jsr kernal_chrout
3049: e8        -         inx
304a: 4c 41 30  -         jmp !loop-
304d: 4c 52 30  -         jmp !done+
3050: 0d 00     - newline:.byte RETURN, NULL
3052: a2 00     -         ldx #$00
3054: 8e f5 3d  -         stx TEST_NAME_COUNT
3057: 60        -         rts
3058: ee f5 3d  - BREAK_TEST:inc TEST_NAME_COUNT
305b: ad 86 02  -         lda foreground_color
305e: 48        -         pha
305f: a9 0f     -         lda #color
3061: 8d 86 02  -         sta foreground_color
3064: a2 00     -         ldx #$00
3066: bd 79 30  -         lda msg,x
3069: f0 07     -         beq !done+
306b: 20 d2 ff  -         jsr kernal_chrout
306e: e8        -         inx
306f: 4c 66 30  -         jmp !loop-
3072: 68        -         pla
3073: 8d 86 02  -         sta foreground_color
3076: 4c 84 30  -         jmp !done+
3079: 20 20     - memory: .fill spacing, spacebar
307b: 42 52 45 41 4b                                   -         .text name
3080: 2e 2e 2e  -         .text "..."
3083: 00        -         .byte NULL
3084: a9 35     -         lda #<handler
3086: 8d 16 03  -         sta address
3089: a9 0a     -         lda #>handler
308b: 8d 17 03  -         sta address+1
308e: 20 86 08  -         jsr SW16
3091: 10        -         .byte opcode(op, register)
3092: ed fe     -         .word address.getValue()
3094: 0a        -         .byte $0a }
3095: 0d        -         .byte $0d
3096: 31        -         .byte >(address.getValue()-1)
3097: 81        -         .byte <(address.getValue()-1)
3098: 10        -         .byte opcode(op, register)
3099: 23 01     -         .word address.getValue()
309b: 0a        -         .byte $0a }
309c: 00        -         .byte $00 }
309d: ee f3 3d  -         inc TEST_COUNT
30a0: ad 86 02  -         lda foreground_color
30a3: 48        -         pha
30a4: a9 0e     -         lda #color
30a6: 8d 86 02  -         sta foreground_color
30a9: a2 00     -         ldx #$00
30ab: bd be 30  -         lda msg,x
30ae: f0 07     -         beq !done+
30b0: 20 d2 ff  -         jsr kernal_chrout
30b3: e8        -         inx
30b4: 4c ab 30  -         jmp !loop-
30b7: 68        -         pla
30b8: 8d 86 02  -         sta foreground_color
30bb: 4c c2 30  -         jmp !done+
30be: 20        - memory: .byte spacebar
30bf: 32        -         .text description
30c0: 3a        -         .text ":"
30c1: 00        -         .byte NULL
30c2: a6 17     -         ldx rl(register.getValue())
30c4: a4 18     -         ldy rh(register.getValue())
30c6: e0 23     -         cpx #<value
30c8: d0 25     -         bne !failed+
30ca: c0 01     -         cpy #>value
30cc: d0 21     -         bne !failed+
30ce: ee f4 3d  -         inc TEST_PASS_COUNT
30d1: ad 86 02  -         lda foreground_color
30d4: 48        -         pha
30d5: a9 05     -         lda #color
30d7: 8d 86 02  -         sta foreground_color
30da: a2 00     -         ldx #$00
30dc: bd ef 3d  -         lda msg,x
30df: f0 07     -         beq !done+
30e1: 20 d2 ff  -         jsr kernal_chrout
30e4: e8        -         inx
30e5: 4c dc 30  -         jmp !loop-
30e8: 68        -         pla
30e9: 8d 86 02  -         sta foreground_color
30ec: 4c 0a 31  -         jmp !done+
30ef: ad 86 02  -         lda foreground_color
30f2: 48        -         pha
30f3: a9 02     -         lda #color
30f5: 8d 86 02  -         sta foreground_color
30f8: a2 00     -         ldx #$00
30fa: bd f1 3d  -         lda msg,x
30fd: f0 07     -         beq !done+
30ff: 20 d2 ff  -         jsr kernal_chrout
3102: e8        -         inx
3103: 4c fa 30  -         jmp !loop-
3106: 68        -         pla
3107: 8d 86 02  -         sta foreground_color
310a: a2 00     -         ldx #$00
310c: bd 1b 31  -         lda msg,x
310f: f0 07     -         beq !done+
3111: 20 d2 ff  -         jsr kernal_chrout
3114: e8        -         inx
3115: 4c 0c 31  -         jmp !loop-
3118: 4c 1d 31  -         jmp !done+
311b: 0d 00     - memory: .byte RETURN, NULL
311d: ae f5 3d  -         ldx TEST_NAME_COUNT
3120: e0 15     -         cpx #TESTS_PER_PAGE
3122: d0 5d     -         bne !exit+
3124: ad 86 02  -         lda foreground_color
3127: 48        -         pha
3128: a9 01     -         lda #color
312a: 8d 86 02  -         sta foreground_color
312d: a2 00     -         ldx #$00
312f: bd 42 31  -         lda msg,x
3132: f0 07     -         beq !done+
3134: 20 d2 ff  -         jsr kernal_chrout
3137: e8        -         inx
3138: 4c 2f 31  -         jmp !loop-
313b: 68        -         pla
313c: 8d 86 02  -         sta foreground_color
313f: 4c 61 31  -         jmp !no_key+
3142: 0d        - memory: .byte RETURN
3143: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3153: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
315f: 0d 00     -         .byte RETURN, NULL
3161: 20 9f ff  -         jsr scnkey  // scan keyboard
3164: 20 e4 ff  -         jsr getin	// put result into A
3167: f0 f8     -         beq !no_key-
3169: a2 00     -         ldx #$00
316b: bd 7a 31  -         lda msg,x
316e: f0 07     -         beq !done+
3170: 20 d2 ff  -         jsr kernal_chrout
3173: e8        -         inx
3174: 4c 6b 31  -         jmp !loop-
3177: 4c 7c 31  -         jmp !done+
317a: 0d 00     - newline:.byte RETURN, NULL
317c: a2 00     -         ldx #$00
317e: 8e f5 3d  -         stx TEST_NAME_COUNT
3181: 60        -         rts
3182: ee f3 3d  -         inc TEST_COUNT
3185: ad 86 02  -         lda foreground_color
3188: 48        -         pha
3189: a9 0e     -         lda #color
318b: 8d 86 02  -         sta foreground_color
318e: a2 00     -         ldx #$00
3190: bd a3 31  -         lda msg,x
3193: f0 07     -         beq !done+
3195: 20 d2 ff  -         jsr kernal_chrout
3198: e8        -         inx
3199: 4c 90 31  -         jmp !loop-
319c: 68        -         pla
319d: 8d 86 02  -         sta foreground_color
31a0: 4c a7 31  -         jmp !done+
31a3: 20        - memory: .byte spacebar
31a4: 31        -         .text description
31a5: 3a        -         .text ":"
31a6: 00        -         .byte NULL
31a7: a6 17     -         ldx rl(register.getValue())
31a9: a4 18     -         ldy rh(register.getValue())
31ab: e0 ed     -         cpx #<value
31ad: d0 25     -         bne !failed+
31af: c0 fe     -         cpy #>value
31b1: d0 21     -         bne !failed+
31b3: ee f4 3d  -         inc TEST_PASS_COUNT
31b6: ad 86 02  -         lda foreground_color
31b9: 48        -         pha
31ba: a9 05     -         lda #color
31bc: 8d 86 02  -         sta foreground_color
31bf: a2 00     -         ldx #$00
31c1: bd ef 3d  -         lda msg,x
31c4: f0 07     -         beq !done+
31c6: 20 d2 ff  -         jsr kernal_chrout
31c9: e8        -         inx
31ca: 4c c1 31  -         jmp !loop-
31cd: 68        -         pla
31ce: 8d 86 02  -         sta foreground_color
31d1: 4c ef 31  -         jmp !done+
31d4: ad 86 02  -         lda foreground_color
31d7: 48        -         pha
31d8: a9 02     -         lda #color
31da: 8d 86 02  -         sta foreground_color
31dd: a2 00     -         ldx #$00
31df: bd f1 3d  -         lda msg,x
31e2: f0 07     -         beq !done+
31e4: 20 d2 ff  -         jsr kernal_chrout
31e7: e8        -         inx
31e8: 4c df 31  -         jmp !loop-
31eb: 68        -         pla
31ec: 8d 86 02  -         sta foreground_color
31ef: 60        -         rts
31f0: ee f5 3d  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
31f3: ad 86 02  -         lda foreground_color
31f6: 48        -         pha
31f7: a9 0f     -         lda #color
31f9: 8d 86 02  -         sta foreground_color
31fc: a2 00     -         ldx #$00
31fe: bd 11 32  -         lda msg,x
3201: f0 07     -         beq !done+
3203: 20 d2 ff  -         jsr kernal_chrout
3206: e8        -         inx
3207: 4c fe 31  -         jmp !loop-
320a: 68        -         pla
320b: 8d 86 02  -         sta foreground_color
320e: 4c 20 32  -         jmp !done+
3211: 20 20     - memory: .fill spacing, spacebar
3213: 49 4e 54 20 42 52 45 41 4b                       -         .text name
321c: 2e 2e 2e  -         .text "..."
321f: 00        -         .byte NULL
3220: a9 35     -         lda #<handler
3222: 8d 16 03  -         sta address
3225: a9 0a     -         lda #>handler
3227: 8d 17 03  -         sta address+1
322a: 20 86 08  -         jsr SW16
322d: 10        -         .byte opcode(op, register)
322e: ed fe     -         .word address.getValue()
3230: 0a        -         .byte $0a }
3231: 0d        -         .byte $0d
3232: 32        -         .byte >(address.getValue()-1)
3233: b3        -         .byte <(address.getValue()-1)
3234: 10        -         .byte opcode(op, register)
3235: 23 01     -         .word address.getValue()
3237: 0a        -         .byte $0a }
3238: 0d        -         .byte $0d
3239: 33        -         .byte >(address.getValue()-1)
323a: 21        -         .byte <(address.getValue()-1)
323b: 00        -         .byte $00 }
323c: a2 00     -         ldx #$00
323e: bd 4d 32  -         lda msg,x
3241: f0 07     -         beq !done+
3243: 20 d2 ff  -         jsr kernal_chrout
3246: e8        -         inx
3247: 4c 3e 32  -         jmp !loop-
324a: 4c 4f 32  -         jmp !done+
324d: 0d 00     - memory: .byte RETURN, NULL
324f: ae f5 3d  -         ldx TEST_NAME_COUNT
3252: e0 15     -         cpx #TESTS_PER_PAGE
3254: d0 5d     -         bne !exit+
3256: ad 86 02  -         lda foreground_color
3259: 48        -         pha
325a: a9 01     -         lda #color
325c: 8d 86 02  -         sta foreground_color
325f: a2 00     -         ldx #$00
3261: bd 74 32  -         lda msg,x
3264: f0 07     -         beq !done+
3266: 20 d2 ff  -         jsr kernal_chrout
3269: e8        -         inx
326a: 4c 61 32  -         jmp !loop-
326d: 68        -         pla
326e: 8d 86 02  -         sta foreground_color
3271: 4c 93 32  -         jmp !no_key+
3274: 0d        - memory: .byte RETURN
3275: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3285: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3291: 0d 00     -         .byte RETURN, NULL
3293: 20 9f ff  -         jsr scnkey  // scan keyboard
3296: 20 e4 ff  -         jsr getin	// put result into A
3299: f0 f8     -         beq !no_key-
329b: a2 00     -         ldx #$00
329d: bd ac 32  -         lda msg,x
32a0: f0 07     -         beq !done+
32a2: 20 d2 ff  -         jsr kernal_chrout
32a5: e8        -         inx
32a6: 4c 9d 32  -         jmp !loop-
32a9: 4c ae 32  -         jmp !done+
32ac: 0d 00     - newline:.byte RETURN, NULL
32ae: a2 00     -         ldx #$00
32b0: 8e f5 3d  -         stx TEST_NAME_COUNT
32b3: 60        -         rts
32b4: ee f3 3d  -         inc TEST_COUNT
32b7: ad 86 02  -         lda foreground_color
32ba: 48        -         pha
32bb: a9 0e     -         lda #color
32bd: 8d 86 02  -         sta foreground_color
32c0: a2 00     -         ldx #$00
32c2: bd d5 32  -         lda msg,x
32c5: f0 07     -         beq !done+
32c7: 20 d2 ff  -         jsr kernal_chrout
32ca: e8        -         inx
32cb: 4c c2 32  -         jmp !loop-
32ce: 68        -         pla
32cf: 8d 86 02  -         sta foreground_color
32d2: 4c d9 32  -         jmp !done+
32d5: 20        - memory: .byte spacebar
32d6: 31        -         .text description
32d7: 3a        -         .text ":"
32d8: 00        -         .byte NULL
32d9: a6 17     -         ldx rl(register.getValue())
32db: a4 18     -         ldy rh(register.getValue())
32dd: e0 ed     -         cpx #<value
32df: d0 25     -         bne !failed+
32e1: c0 fe     -         cpy #>value
32e3: d0 21     -         bne !failed+
32e5: ee f4 3d  -         inc TEST_PASS_COUNT
32e8: ad 86 02  -         lda foreground_color
32eb: 48        -         pha
32ec: a9 05     -         lda #color
32ee: 8d 86 02  -         sta foreground_color
32f1: a2 00     -         ldx #$00
32f3: bd ef 3d  -         lda msg,x
32f6: f0 07     -         beq !done+
32f8: 20 d2 ff  -         jsr kernal_chrout
32fb: e8        -         inx
32fc: 4c f3 32  -         jmp !loop-
32ff: 68        -         pla
3300: 8d 86 02  -         sta foreground_color
3303: 4c 21 33  -         jmp !done+
3306: ad 86 02  -         lda foreground_color
3309: 48        -         pha
330a: a9 02     -         lda #color
330c: 8d 86 02  -         sta foreground_color
330f: a2 00     -         ldx #$00
3311: bd f1 3d  -         lda msg,x
3314: f0 07     -         beq !done+
3316: 20 d2 ff  -         jsr kernal_chrout
3319: e8        -         inx
331a: 4c 11 33  -         jmp !loop-
331d: 68        -         pla
331e: 8d 86 02  -         sta foreground_color
3321: 60        -         rts
3322: ee f3 3d  -         inc TEST_COUNT
3325: ad 86 02  -         lda foreground_color
3328: 48        -         pha
3329: a9 0e     -         lda #color
332b: 8d 86 02  -         sta foreground_color
332e: a2 00     -         ldx #$00
3330: bd 43 33  -         lda msg,x
3333: f0 07     -         beq !done+
3335: 20 d2 ff  -         jsr kernal_chrout
3338: e8        -         inx
3339: 4c 30 33  -         jmp !loop-
333c: 68        -         pla
333d: 8d 86 02  -         sta foreground_color
3340: 4c 47 33  -         jmp !done+
3343: 20        - memory: .byte spacebar
3344: 32        -         .text description
3345: 3a        -         .text ":"
3346: 00        -         .byte NULL
3347: a6 17     -         ldx rl(register.getValue())
3349: a4 18     -         ldy rh(register.getValue())
334b: e0 23     -         cpx #<value
334d: d0 25     -         bne !failed+
334f: c0 01     -         cpy #>value
3351: d0 21     -         bne !failed+
3353: ee f4 3d  -         inc TEST_PASS_COUNT
3356: ad 86 02  -         lda foreground_color
3359: 48        -         pha
335a: a9 05     -         lda #color
335c: 8d 86 02  -         sta foreground_color
335f: a2 00     -         ldx #$00
3361: bd ef 3d  -         lda msg,x
3364: f0 07     -         beq !done+
3366: 20 d2 ff  -         jsr kernal_chrout
3369: e8        -         inx
336a: 4c 61 33  -         jmp !loop-
336d: 68        -         pla
336e: 8d 86 02  -         sta foreground_color
3371: 4c 8f 33  -         jmp !done+
3374: ad 86 02  -         lda foreground_color
3377: 48        -         pha
3378: a9 02     -         lda #color
337a: 8d 86 02  -         sta foreground_color
337d: a2 00     -         ldx #$00
337f: bd f1 3d  -         lda msg,x
3382: f0 07     -         beq !done+
3384: 20 d2 ff  -         jsr kernal_chrout
3387: e8        -         inx
3388: 4c 7f 33  -         jmp !loop-
338b: 68        -         pla
338c: 8d 86 02  -         sta foreground_color
338f: 60        -         rts
3390: ee f5 3d  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
3393: ad 86 02  -         lda foreground_color
3396: 48        -         pha
3397: a9 0f     -         lda #color
3399: 8d 86 02  -         sta foreground_color
339c: a2 00     -         ldx #$00
339e: bd b1 33  -         lda msg,x
33a1: f0 07     -         beq !done+
33a3: 20 d2 ff  -         jsr kernal_chrout
33a6: e8        -         inx
33a7: 4c 9e 33  -         jmp !loop-
33aa: 68        -         pla
33ab: 8d 86 02  -         sta foreground_color
33ae: 4c c4 33  -         jmp !done+
33b1: 20 20     - memory: .fill spacing, spacebar
33b3: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
33c0: 2e 2e 2e  -         .text "..."
33c3: 00        -         .byte NULL
33c4: 20 86 08  -         jsr SW16
33c7: 15        -         .byte opcode(op, register)
33c8: 11 3e     -         .word address.getValue()
33ca: 14        -         .byte opcode(op, register)
33cb: 21 3e     -         .word address.getValue()
33cd: 16        -         .byte opcode(op, register)
33ce: 21 3e     -         .word address.getValue()
33d0: 0c 04     -         .byte $0c, effective_address(ea,*) }
33d2: 00        -         .byte $00 }
33d3: 4c dd 33  -         jmp !done+
33d6: 45        -         .byte opcode($40, register) }
33d7: 56        -         .byte opcode($50, register) }
33d8: 24        -         .byte opcode($20, register) }
33d9: d5        -         .byte opcode($d0, register) }
33da: 04 fa     -         .byte $04, effective_address(ea,*) }
33dc: 0b        -         .byte $0b }
33dd: ee f3 3d  -         inc TEST_COUNT
33e0: ad 86 02  -         lda foreground_color
33e3: 48        -         pha
33e4: a9 0e     -         lda #color
33e6: 8d 86 02  -         sta foreground_color
33e9: a2 00     -         ldx #$00
33eb: bd fe 33  -         lda msg,x
33ee: f0 07     -         beq !done+
33f0: 20 d2 ff  -         jsr kernal_chrout
33f3: e8        -         inx
33f4: 4c eb 33  -         jmp !loop-
33f7: 68        -         pla
33f8: 8d 86 02  -         sta foreground_color
33fb: 4c 04 34  -         jmp !done+
33fe: 20        - memory: .byte spacebar
33ff: 4d 45 4d  -         .text description
3402: 3a        -         .text ":"
3403: 00        -         .byte NULL
3404: a2 ff     -         ldx #$ff
3406: e8        -         inx
3407: e0 10     -         cpx #size
3409: f0 0b     -         beq !success+
340b: bd 11 3e  -         lda source,x
340e: dd 21 3e  -         cmp dest,x
3411: f0 f3     -         beq !loop-
3413: 4c 37 34  -         jmp !failed+
3416: ee f4 3d  -         inc TEST_PASS_COUNT
3419: ad 86 02  -         lda foreground_color
341c: 48        -         pha
341d: a9 05     -         lda #color
341f: 8d 86 02  -         sta foreground_color
3422: a2 00     -         ldx #$00
3424: bd ef 3d  -         lda msg,x
3427: f0 07     -         beq !done+
3429: 20 d2 ff  -         jsr kernal_chrout
342c: e8        -         inx
342d: 4c 24 34  -         jmp !loop-
3430: 68        -         pla
3431: 8d 86 02  -         sta foreground_color
3434: 4c 52 34  -         jmp !done+
3437: ad 86 02  -         lda foreground_color
343a: 48        -         pha
343b: a9 02     -         lda #color
343d: 8d 86 02  -         sta foreground_color
3440: a2 00     -         ldx #$00
3442: bd f1 3d  -         lda msg,x
3445: f0 07     -         beq !done+
3447: 20 d2 ff  -         jsr kernal_chrout
344a: e8        -         inx
344b: 4c 42 34  -         jmp !loop-
344e: 68        -         pla
344f: 8d 86 02  -         sta foreground_color
3452: a2 00     -         ldx #$00
3454: bd 63 34  -         lda msg,x
3457: f0 07     -         beq !done+
3459: 20 d2 ff  -         jsr kernal_chrout
345c: e8        -         inx
345d: 4c 54 34  -         jmp !loop-
3460: 4c 65 34  -         jmp !done+
3463: 0d 00     - memory: .byte RETURN, NULL
3465: ae f5 3d  -         ldx TEST_NAME_COUNT
3468: e0 15     -         cpx #TESTS_PER_PAGE
346a: d0 5d     -         bne !exit+
346c: ad 86 02  -         lda foreground_color
346f: 48        -         pha
3470: a9 01     -         lda #color
3472: 8d 86 02  -         sta foreground_color
3475: a2 00     -         ldx #$00
3477: bd 8a 34  -         lda msg,x
347a: f0 07     -         beq !done+
347c: 20 d2 ff  -         jsr kernal_chrout
347f: e8        -         inx
3480: 4c 77 34  -         jmp !loop-
3483: 68        -         pla
3484: 8d 86 02  -         sta foreground_color
3487: 4c a9 34  -         jmp !no_key+
348a: 0d        - memory: .byte RETURN
348b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
349b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
34a7: 0d 00     -         .byte RETURN, NULL
34a9: 20 9f ff  -         jsr scnkey  // scan keyboard
34ac: 20 e4 ff  -         jsr getin	// put result into A
34af: f0 f8     -         beq !no_key-
34b1: a2 00     -         ldx #$00
34b3: bd c2 34  -         lda msg,x
34b6: f0 07     -         beq !done+
34b8: 20 d2 ff  -         jsr kernal_chrout
34bb: e8        -         inx
34bc: 4c b3 34  -         jmp !loop-
34bf: 4c c4 34  -         jmp !done+
34c2: 0d 00     - newline:.byte RETURN, NULL
34c4: a2 00     -         ldx #$00
34c6: 8e f5 3d  -         stx TEST_NAME_COUNT
34c9: 60        -         rts
34ca: ee f5 3d  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
34cd: ad 86 02  -         lda foreground_color
34d0: 48        -         pha
34d1: a9 0f     -         lda #color
34d3: 8d 86 02  -         sta foreground_color
34d6: a2 00     -         ldx #$00
34d8: bd eb 34  -         lda msg,x
34db: f0 07     -         beq !done+
34dd: 20 d2 ff  -         jsr kernal_chrout
34e0: e8        -         inx
34e1: 4c d8 34  -         jmp !loop-
34e4: 68        -         pla
34e5: 8d 86 02  -         sta foreground_color
34e8: 4c 00 35  -         jmp !done+
34eb: 20 20     - memory: .fill spacing, spacebar
34ed: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
34fc: 2e 2e 2e  -         .text "..."
34ff: 00        -         .byte NULL
3500: 20 86 08  -         jsr SW16
3503: 10        -         .byte opcode(op, register)
3504: 34 12     -         .word address.getValue()
3506: 0c 04     -         .byte $0c, effective_address(ea,*) }
3508: 00        -         .byte $00 }
3509: 4c 10 35  -         jmp !done+
350c: 10        -         .byte opcode(op, register)
350d: 78 56     -         .word address.getValue()
350f: 0b        -         .byte $0b }
3510: ee f3 3d  -         inc TEST_COUNT
3513: ad 86 02  -         lda foreground_color
3516: 48        -         pha
3517: a9 0e     -         lda #color
3519: 8d 86 02  -         sta foreground_color
351c: a2 00     -         ldx #$00
351e: bd 31 35  -         lda msg,x
3521: f0 07     -         beq !done+
3523: 20 d2 ff  -         jsr kernal_chrout
3526: e8        -         inx
3527: 4c 1e 35  -         jmp !loop-
352a: 68        -         pla
352b: 8d 86 02  -         sta foreground_color
352e: 4c 37 35  -         jmp !done+
3531: 20        - memory: .byte spacebar
3532: 53 55 42  -         .text description
3535: 3a        -         .text ":"
3536: 00        -         .byte NULL
3537: a6 17     -         ldx rl(register.getValue())
3539: a4 18     -         ldy rh(register.getValue())
353b: e0 78     -         cpx #<value
353d: d0 25     -         bne !failed+
353f: c0 56     -         cpy #>value
3541: d0 21     -         bne !failed+
3543: ee f4 3d  -         inc TEST_PASS_COUNT
3546: ad 86 02  -         lda foreground_color
3549: 48        -         pha
354a: a9 05     -         lda #color
354c: 8d 86 02  -         sta foreground_color
354f: a2 00     -         ldx #$00
3551: bd ef 3d  -         lda msg,x
3554: f0 07     -         beq !done+
3556: 20 d2 ff  -         jsr kernal_chrout
3559: e8        -         inx
355a: 4c 51 35  -         jmp !loop-
355d: 68        -         pla
355e: 8d 86 02  -         sta foreground_color
3561: 4c 7f 35  -         jmp !done+
3564: ad 86 02  -         lda foreground_color
3567: 48        -         pha
3568: a9 02     -         lda #color
356a: 8d 86 02  -         sta foreground_color
356d: a2 00     -         ldx #$00
356f: bd f1 3d  -         lda msg,x
3572: f0 07     -         beq !done+
3574: 20 d2 ff  -         jsr kernal_chrout
3577: e8        -         inx
3578: 4c 6f 35  -         jmp !loop-
357b: 68        -         pla
357c: 8d 86 02  -         sta foreground_color
357f: a2 00     -         ldx #$00
3581: bd 90 35  -         lda msg,x
3584: f0 07     -         beq !done+
3586: 20 d2 ff  -         jsr kernal_chrout
3589: e8        -         inx
358a: 4c 81 35  -         jmp !loop-
358d: 4c 92 35  -         jmp !done+
3590: 0d 00     - memory: .byte RETURN, NULL
3592: ae f5 3d  -         ldx TEST_NAME_COUNT
3595: e0 15     -         cpx #TESTS_PER_PAGE
3597: d0 5d     -         bne !exit+
3599: ad 86 02  -         lda foreground_color
359c: 48        -         pha
359d: a9 01     -         lda #color
359f: 8d 86 02  -         sta foreground_color
35a2: a2 00     -         ldx #$00
35a4: bd b7 35  -         lda msg,x
35a7: f0 07     -         beq !done+
35a9: 20 d2 ff  -         jsr kernal_chrout
35ac: e8        -         inx
35ad: 4c a4 35  -         jmp !loop-
35b0: 68        -         pla
35b1: 8d 86 02  -         sta foreground_color
35b4: 4c d6 35  -         jmp !no_key+
35b7: 0d        - memory: .byte RETURN
35b8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
35c8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
35d4: 0d 00     -         .byte RETURN, NULL
35d6: 20 9f ff  -         jsr scnkey  // scan keyboard
35d9: 20 e4 ff  -         jsr getin	// put result into A
35dc: f0 f8     -         beq !no_key-
35de: a2 00     -         ldx #$00
35e0: bd ef 35  -         lda msg,x
35e3: f0 07     -         beq !done+
35e5: 20 d2 ff  -         jsr kernal_chrout
35e8: e8        -         inx
35e9: 4c e0 35  -         jmp !loop-
35ec: 4c f1 35  -         jmp !done+
35ef: 0d 00     - newline:.byte RETURN, NULL
35f1: a2 00     -         ldx #$00
35f3: 8e f5 3d  -         stx TEST_NAME_COUNT
35f6: 60        -         rts
35f7: ee f5 3d  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
35fa: ad 86 02  -         lda foreground_color
35fd: 48        -         pha
35fe: a9 0f     -         lda #color
3600: 8d 86 02  -         sta foreground_color
3603: a2 00     -         ldx #$00
3605: bd 18 36  -         lda msg,x
3608: f0 07     -         beq !done+
360a: 20 d2 ff  -         jsr kernal_chrout
360d: e8        -         inx
360e: 4c 05 36  -         jmp !loop-
3611: 68        -         pla
3612: 8d 86 02  -         sta foreground_color
3615: 4c 2b 36  -         jmp !done+
3618: 20 20     - memory: .fill spacing, spacebar
361a: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
3627: 2e 2e 2e  -         .text "..."
362a: 00        -         .byte NULL
362b: 20 86 08  -         jsr SW16
362e: 15        -         .byte opcode(op, register)
362f: 00 00     -         .word address.getValue()
3631: 10        -         .byte opcode(op, register)
3632: 1c 37     -         .word address.getValue()
3634: 3f        -         .byte opcode($30, register) }
3635: 00        -         .byte $00 }
3636: ee f3 3d  -         inc TEST_COUNT
3639: ad 86 02  -         lda foreground_color
363c: 48        -         pha
363d: a9 0e     -         lda #color
363f: 8d 86 02  -         sta foreground_color
3642: a2 00     -         ldx #$00
3644: bd 57 36  -         lda msg,x
3647: f0 07     -         beq !done+
3649: 20 d2 ff  -         jsr kernal_chrout
364c: e8        -         inx
364d: 4c 44 36  -         jmp !loop-
3650: 68        -         pla
3651: 8d 86 02  -         sta foreground_color
3654: 4c 5d 36  -         jmp !done+
3657: 20        - memory: .byte spacebar
3658: 53 45 54  -         .text description
365b: 3a        -         .text ":"
365c: 00        -         .byte NULL
365d: a6 21     -         ldx rl(register.getValue())
365f: a4 22     -         ldy rh(register.getValue())
3661: e0 34     -         cpx #<value
3663: d0 25     -         bne !failed+
3665: c0 12     -         cpy #>value
3667: d0 21     -         bne !failed+
3669: ee f4 3d  -         inc TEST_PASS_COUNT
366c: ad 86 02  -         lda foreground_color
366f: 48        -         pha
3670: a9 05     -         lda #color
3672: 8d 86 02  -         sta foreground_color
3675: a2 00     -         ldx #$00
3677: bd ef 3d  -         lda msg,x
367a: f0 07     -         beq !done+
367c: 20 d2 ff  -         jsr kernal_chrout
367f: e8        -         inx
3680: 4c 77 36  -         jmp !loop-
3683: 68        -         pla
3684: 8d 86 02  -         sta foreground_color
3687: 4c a5 36  -         jmp !done+
368a: ad 86 02  -         lda foreground_color
368d: 48        -         pha
368e: a9 02     -         lda #color
3690: 8d 86 02  -         sta foreground_color
3693: a2 00     -         ldx #$00
3695: bd f1 3d  -         lda msg,x
3698: f0 07     -         beq !done+
369a: 20 d2 ff  -         jsr kernal_chrout
369d: e8        -         inx
369e: 4c 95 36  -         jmp !loop-
36a1: 68        -         pla
36a2: 8d 86 02  -         sta foreground_color
36a5: a2 00     -         ldx #$00
36a7: bd b6 36  -         lda msg,x
36aa: f0 07     -         beq !done+
36ac: 20 d2 ff  -         jsr kernal_chrout
36af: e8        -         inx
36b0: 4c a7 36  -         jmp !loop-
36b3: 4c b8 36  -         jmp !done+
36b6: 0d 00     - memory: .byte RETURN, NULL
36b8: ae f5 3d  -         ldx TEST_NAME_COUNT
36bb: e0 15     -         cpx #TESTS_PER_PAGE
36bd: d0 5d     -         bne !exit+
36bf: ad 86 02  -         lda foreground_color
36c2: 48        -         pha
36c3: a9 01     -         lda #color
36c5: 8d 86 02  -         sta foreground_color
36c8: a2 00     -         ldx #$00
36ca: bd dd 36  -         lda msg,x
36cd: f0 07     -         beq !done+
36cf: 20 d2 ff  -         jsr kernal_chrout
36d2: e8        -         inx
36d3: 4c ca 36  -         jmp !loop-
36d6: 68        -         pla
36d7: 8d 86 02  -         sta foreground_color
36da: 4c fc 36  -         jmp !no_key+
36dd: 0d        - memory: .byte RETURN
36de: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
36ee: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
36fa: 0d 00     -         .byte RETURN, NULL
36fc: 20 9f ff  -         jsr scnkey  // scan keyboard
36ff: 20 e4 ff  -         jsr getin	// put result into A
3702: f0 f8     -         beq !no_key-
3704: a2 00     -         ldx #$00
3706: bd 15 37  -         lda msg,x
3709: f0 07     -         beq !done+
370b: 20 d2 ff  -         jsr kernal_chrout
370e: e8        -         inx
370f: 4c 06 37  -         jmp !loop-
3712: 4c 17 37  -         jmp !done+
3715: 0d 00     - newline:.byte RETURN, NULL
3717: a2 00     -         ldx #$00
3719: 8e f5 3d  -         stx TEST_NAME_COUNT
371c: 60        -         rts
371d: 15        -         .byte opcode(op, register)
371e: 34 12     -         .word address.getValue()
3720: 10        -         .byte opcode(op, register)
3721: 34 36     -         .word address.getValue()
3723: 3f        -         .byte opcode($30, register) }
3724: ee f5 3d  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
3727: ad 86 02  -         lda foreground_color
372a: 48        -         pha
372b: a9 0f     -         lda #color
372d: 8d 86 02  -         sta foreground_color
3730: a2 00     -         ldx #$00
3732: bd 45 37  -         lda msg,x
3735: f0 07     -         beq !done+
3737: 20 d2 ff  -         jsr kernal_chrout
373a: e8        -         inx
373b: 4c 32 37  -         jmp !loop-
373e: 68        -         pla
373f: 8d 86 02  -         sta foreground_color
3742: 4c 57 37  -         jmp !done+
3745: 20 20     - memory: .fill spacing, spacebar
3747: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
3753: 2e 2e 2e  -         .text "..."
3756: 00        -         .byte NULL
3757: 20 86 08  -         jsr SW16
375a: 15        -         .byte opcode(op, register)
375b: 21 43     -         .word address.getValue()
375d: 0d        -         .byte $0d
375e: 38        -         .byte >(address.getValue()-1)
375f: 51        -         .byte <(address.getValue()-1)
3760: 15        -         .byte opcode(op, register)
3761: 34 12     -         .word address.getValue()
3763: 0d        -         .byte $0d
3764: 38        -         .byte >(address.getValue()-1)
3765: c3        -         .byte <(address.getValue()-1)
3766: 15        -         .byte opcode(op, register)
3767: 21 43     -         .word address.getValue()
3769: 00        -         .byte $00 }
376a: ee f3 3d  -         inc TEST_COUNT
376d: ad 86 02  -         lda foreground_color
3770: 48        -         pha
3771: a9 0e     -         lda #color
3773: 8d 86 02  -         sta foreground_color
3776: a2 00     -         ldx #$00
3778: bd 8b 37  -         lda msg,x
377b: f0 07     -         beq !done+
377d: 20 d2 ff  -         jsr kernal_chrout
3780: e8        -         inx
3781: 4c 78 37  -         jmp !loop-
3784: 68        -         pla
3785: 8d 86 02  -         sta foreground_color
3788: 4c 92 37  -         jmp !done+
378b: 20        - memory: .byte spacebar
378c: 53 41 4d 45                                      -         .text description
3790: 3a        -         .text ":"
3791: 00        -         .byte NULL
3792: a6 21     -         ldx rl(register.getValue())
3794: a4 22     -         ldy rh(register.getValue())
3796: e0 21     -         cpx #<value
3798: d0 25     -         bne !failed+
379a: c0 43     -         cpy #>value
379c: d0 21     -         bne !failed+
379e: ee f4 3d  -         inc TEST_PASS_COUNT
37a1: ad 86 02  -         lda foreground_color
37a4: 48        -         pha
37a5: a9 05     -         lda #color
37a7: 8d 86 02  -         sta foreground_color
37aa: a2 00     -         ldx #$00
37ac: bd ef 3d  -         lda msg,x
37af: f0 07     -         beq !done+
37b1: 20 d2 ff  -         jsr kernal_chrout
37b4: e8        -         inx
37b5: 4c ac 37  -         jmp !loop-
37b8: 68        -         pla
37b9: 8d 86 02  -         sta foreground_color
37bc: 4c da 37  -         jmp !done+
37bf: ad 86 02  -         lda foreground_color
37c2: 48        -         pha
37c3: a9 02     -         lda #color
37c5: 8d 86 02  -         sta foreground_color
37c8: a2 00     -         ldx #$00
37ca: bd f1 3d  -         lda msg,x
37cd: f0 07     -         beq !done+
37cf: 20 d2 ff  -         jsr kernal_chrout
37d2: e8        -         inx
37d3: 4c ca 37  -         jmp !loop-
37d6: 68        -         pla
37d7: 8d 86 02  -         sta foreground_color
37da: a2 00     -         ldx #$00
37dc: bd eb 37  -         lda msg,x
37df: f0 07     -         beq !done+
37e1: 20 d2 ff  -         jsr kernal_chrout
37e4: e8        -         inx
37e5: 4c dc 37  -         jmp !loop-
37e8: 4c ed 37  -         jmp !done+
37eb: 0d 00     - memory: .byte RETURN, NULL
37ed: ae f5 3d  -         ldx TEST_NAME_COUNT
37f0: e0 15     -         cpx #TESTS_PER_PAGE
37f2: d0 5d     -         bne !exit+
37f4: ad 86 02  -         lda foreground_color
37f7: 48        -         pha
37f8: a9 01     -         lda #color
37fa: 8d 86 02  -         sta foreground_color
37fd: a2 00     -         ldx #$00
37ff: bd 12 38  -         lda msg,x
3802: f0 07     -         beq !done+
3804: 20 d2 ff  -         jsr kernal_chrout
3807: e8        -         inx
3808: 4c ff 37  -         jmp !loop-
380b: 68        -         pla
380c: 8d 86 02  -         sta foreground_color
380f: 4c 31 38  -         jmp !no_key+
3812: 0d        - memory: .byte RETURN
3813: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3823: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
382f: 0d 00     -         .byte RETURN, NULL
3831: 20 9f ff  -         jsr scnkey  // scan keyboard
3834: 20 e4 ff  -         jsr getin	// put result into A
3837: f0 f8     -         beq !no_key-
3839: a2 00     -         ldx #$00
383b: bd 4a 38  -         lda msg,x
383e: f0 07     -         beq !done+
3840: 20 d2 ff  -         jsr kernal_chrout
3843: e8        -         inx
3844: 4c 3b 38  -         jmp !loop-
3847: 4c 4c 38  -         jmp !done+
384a: 0d 00     - newline:.byte RETURN, NULL
384c: a2 00     -         ldx #$00
384e: 8e f5 3d  -         stx TEST_NAME_COUNT
3851: 60        -         rts
3852: ee f3 3d  -         inc TEST_COUNT
3855: ad 86 02  -         lda foreground_color
3858: 48        -         pha
3859: a9 0e     -         lda #color
385b: 8d 86 02  -         sta foreground_color
385e: a2 00     -         ldx #$00
3860: bd 73 38  -         lda msg,x
3863: f0 07     -         beq !done+
3865: 20 d2 ff  -         jsr kernal_chrout
3868: e8        -         inx
3869: 4c 60 38  -         jmp !loop-
386c: 68        -         pla
386d: 8d 86 02  -         sta foreground_color
3870: 4c 7b 38  -         jmp !done+
3873: 20        - memory: .byte spacebar
3874: 56 41 4c 55 45                                   -         .text description
3879: 3a        -         .text ":"
387a: 00        -         .byte NULL
387b: a6 21     -         ldx rl(register.getValue())
387d: a4 22     -         ldy rh(register.getValue())
387f: e0 21     -         cpx #<value
3881: d0 25     -         bne !failed+
3883: c0 43     -         cpy #>value
3885: d0 21     -         bne !failed+
3887: ee f4 3d  -         inc TEST_PASS_COUNT
388a: ad 86 02  -         lda foreground_color
388d: 48        -         pha
388e: a9 05     -         lda #color
3890: 8d 86 02  -         sta foreground_color
3893: a2 00     -         ldx #$00
3895: bd ef 3d  -         lda msg,x
3898: f0 07     -         beq !done+
389a: 20 d2 ff  -         jsr kernal_chrout
389d: e8        -         inx
389e: 4c 95 38  -         jmp !loop-
38a1: 68        -         pla
38a2: 8d 86 02  -         sta foreground_color
38a5: 4c c3 38  -         jmp !done+
38a8: ad 86 02  -         lda foreground_color
38ab: 48        -         pha
38ac: a9 02     -         lda #color
38ae: 8d 86 02  -         sta foreground_color
38b1: a2 00     -         ldx #$00
38b3: bd f1 3d  -         lda msg,x
38b6: f0 07     -         beq !done+
38b8: 20 d2 ff  -         jsr kernal_chrout
38bb: e8        -         inx
38bc: 4c b3 38  -         jmp !loop-
38bf: 68        -         pla
38c0: 8d 86 02  -         sta foreground_color
38c3: 60        -         rts
38c4: a9 fe     -         lda #>VALUE_3
38c6: 85 22     -         sta rh(REGISTER)
38c8: a9 ed     -         lda #<VALUE_3
38ca: 85 21     -         sta rl(REGISTER)
38cc: a6 21     -         ldx rl(register.getValue())
38ce: a4 22     -         ldy rh(register.getValue())
38d0: ee f3 3d  -         inc TEST_COUNT
38d3: ad 86 02  -         lda foreground_color
38d6: 48        -         pha
38d7: a9 0e     -         lda #color
38d9: 8d 86 02  -         sta foreground_color
38dc: a2 00     -         ldx #$00
38de: bd f1 38  -         lda msg,x
38e1: f0 07     -         beq !done+
38e3: 20 d2 ff  -         jsr kernal_chrout
38e6: e8        -         inx
38e7: 4c de 38  -         jmp !loop-
38ea: 68        -         pla
38eb: 8d 86 02  -         sta foreground_color
38ee: 4c f8 38  -         jmp !done+
38f1: 20        - memory: .byte spacebar
38f2: 36 35 30 32                                      -         .text description
38f6: 3a        -         .text ":"
38f7: 00        -         .byte NULL
38f8: a6 21     -         ldx rl(register.getValue())
38fa: a4 22     -         ldy rh(register.getValue())
38fc: e0 ed     -         cpx #<value
38fe: d0 25     -         bne !failed+
3900: c0 fe     -         cpy #>value
3902: d0 21     -         bne !failed+
3904: ee f4 3d  -         inc TEST_PASS_COUNT
3907: ad 86 02  -         lda foreground_color
390a: 48        -         pha
390b: a9 05     -         lda #color
390d: 8d 86 02  -         sta foreground_color
3910: a2 00     -         ldx #$00
3912: bd ef 3d  -         lda msg,x
3915: f0 07     -         beq !done+
3917: 20 d2 ff  -         jsr kernal_chrout
391a: e8        -         inx
391b: 4c 12 39  -         jmp !loop-
391e: 68        -         pla
391f: 8d 86 02  -         sta foreground_color
3922: 4c 40 39  -         jmp !done+
3925: ad 86 02  -         lda foreground_color
3928: 48        -         pha
3929: a9 02     -         lda #color
392b: 8d 86 02  -         sta foreground_color
392e: a2 00     -         ldx #$00
3930: bd f1 3d  -         lda msg,x
3933: f0 07     -         beq !done+
3935: 20 d2 ff  -         jsr kernal_chrout
3938: e8        -         inx
3939: 4c 30 39  -         jmp !loop-
393c: 68        -         pla
393d: 8d 86 02  -         sta foreground_color
3940: 60        -         rts
3941: ee f5 3d  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
3944: ad 86 02  -         lda foreground_color
3947: 48        -         pha
3948: a9 0f     -         lda #color
394a: 8d 86 02  -         sta foreground_color
394d: a2 00     -         ldx #$00
394f: bd 62 39  -         lda msg,x
3952: f0 07     -         beq !done+
3954: 20 d2 ff  -         jsr kernal_chrout
3957: e8        -         inx
3958: 4c 4f 39  -         jmp !loop-
395b: 68        -         pla
395c: 8d 86 02  -         sta foreground_color
395f: 4c 74 39  -         jmp !done+
3962: 20 20     - memory: .fill spacing, spacebar
3964: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
3970: 2e 2e 2e  -         .text "..."
3973: 00        -         .byte NULL
3974: 20 86 08  -         jsr SW16
3977: 0f        -         .byte $0f
3978: 0b 3e     -         .word address.getValue()
397a: 21        -         .byte rl(register.getValue())
397b: 00        -         .byte $00 }
397c: ee f3 3d  -         inc TEST_COUNT
397f: ad 86 02  -         lda foreground_color
3982: 48        -         pha
3983: a9 0e     -         lda #color
3985: 8d 86 02  -         sta foreground_color
3988: a2 00     -         ldx #$00
398a: bd 9d 39  -         lda msg,x
398d: f0 07     -         beq !done+
398f: 20 d2 ff  -         jsr kernal_chrout
3992: e8        -         inx
3993: 4c 8a 39  -         jmp !loop-
3996: 68        -         pla
3997: 8d 86 02  -         sta foreground_color
399a: 4c a8 39  -         jmp !done+
399d: 20        - memory: .byte spacebar
399e: 54 45 53 54 20 4d 45 4d                          -         .text description
39a6: 3a        -         .text ":"
39a7: 00        -         .byte NULL
39a8: a6 21     -         ldx rl(register.getValue())
39aa: a4 22     -         ldy rh(register.getValue())
39ac: cc 0b 3e  -         cpy address
39af: d0 26     -         bne !failed+
39b1: ec 0c 3e  -         cpx address+1
39b4: d0 21     -         bne !failed+
39b6: ee f4 3d  -         inc TEST_PASS_COUNT
39b9: ad 86 02  -         lda foreground_color
39bc: 48        -         pha
39bd: a9 05     -         lda #color
39bf: 8d 86 02  -         sta foreground_color
39c2: a2 00     -         ldx #$00
39c4: bd ef 3d  -         lda msg,x
39c7: f0 07     -         beq !done+
39c9: 20 d2 ff  -         jsr kernal_chrout
39cc: e8        -         inx
39cd: 4c c4 39  -         jmp !loop-
39d0: 68        -         pla
39d1: 8d 86 02  -         sta foreground_color
39d4: 4c f2 39  -         jmp !done+
39d7: ad 86 02  -         lda foreground_color
39da: 48        -         pha
39db: a9 02     -         lda #color
39dd: 8d 86 02  -         sta foreground_color
39e0: a2 00     -         ldx #$00
39e2: bd f1 3d  -         lda msg,x
39e5: f0 07     -         beq !done+
39e7: 20 d2 ff  -         jsr kernal_chrout
39ea: e8        -         inx
39eb: 4c e2 39  -         jmp !loop-
39ee: 68        -         pla
39ef: 8d 86 02  -         sta foreground_color
39f2: a2 00     -         ldx #$00
39f4: bd 03 3a  -         lda msg,x
39f7: f0 07     -         beq !done+
39f9: 20 d2 ff  -         jsr kernal_chrout
39fc: e8        -         inx
39fd: 4c f4 39  -         jmp !loop-
3a00: 4c 05 3a  -         jmp !done+
3a03: 0d 00     - memory: .byte RETURN, NULL
3a05: ae f5 3d  -         ldx TEST_NAME_COUNT
3a08: e0 15     -         cpx #TESTS_PER_PAGE
3a0a: d0 5d     -         bne !exit+
3a0c: ad 86 02  -         lda foreground_color
3a0f: 48        -         pha
3a10: a9 01     -         lda #color
3a12: 8d 86 02  -         sta foreground_color
3a15: a2 00     -         ldx #$00
3a17: bd 2a 3a  -         lda msg,x
3a1a: f0 07     -         beq !done+
3a1c: 20 d2 ff  -         jsr kernal_chrout
3a1f: e8        -         inx
3a20: 4c 17 3a  -         jmp !loop-
3a23: 68        -         pla
3a24: 8d 86 02  -         sta foreground_color
3a27: 4c 49 3a  -         jmp !no_key+
3a2a: 0d        - memory: .byte RETURN
3a2b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3a3b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3a47: 0d 00     -         .byte RETURN, NULL
3a49: 20 9f ff  -         jsr scnkey  // scan keyboard
3a4c: 20 e4 ff  -         jsr getin	// put result into A
3a4f: f0 f8     -         beq !no_key-
3a51: a2 00     -         ldx #$00
3a53: bd 62 3a  -         lda msg,x
3a56: f0 07     -         beq !done+
3a58: 20 d2 ff  -         jsr kernal_chrout
3a5b: e8        -         inx
3a5c: 4c 53 3a  -         jmp !loop-
3a5f: 4c 64 3a  -         jmp !done+
3a62: 0d 00     - newline:.byte RETURN, NULL
3a64: a2 00     -         ldx #$00
3a66: 8e f5 3d  -         stx TEST_NAME_COUNT
3a69: 60        -         rts
3a6a: ee f5 3d  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
3a6d: ad 86 02  -         lda foreground_color
3a70: 48        -         pha
3a71: a9 0f     -         lda #color
3a73: 8d 86 02  -         sta foreground_color
3a76: a2 00     -         ldx #$00
3a78: bd 8b 3a  -         lda msg,x
3a7b: f0 07     -         beq !done+
3a7d: 20 d2 ff  -         jsr kernal_chrout
3a80: e8        -         inx
3a81: 4c 78 3a  -         jmp !loop-
3a84: 68        -         pla
3a85: 8d 86 02  -         sta foreground_color
3a88: 4c 9b 3a  -         jmp !done+
3a8b: 20 20     - memory: .fill spacing, spacebar
3a8d: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
3a97: 2e 2e 2e  -         .text "..."
3a9a: 00        -         .byte NULL
3a9b: 20 86 08  -         jsr SW16
3a9e: 0e        -         .byte $0e
3a9f: 0b 3e     -         .word address.getValue()
3aa1: 21        -         .byte rl(register.getValue())
3aa2: 00        -         .byte $00 }
3aa3: ee f3 3d  -         inc TEST_COUNT
3aa6: ad 86 02  -         lda foreground_color
3aa9: 48        -         pha
3aaa: a9 0e     -         lda #color
3aac: 8d 86 02  -         sta foreground_color
3aaf: a2 00     -         ldx #$00
3ab1: bd c4 3a  -         lda msg,x
3ab4: f0 07     -         beq !done+
3ab6: 20 d2 ff  -         jsr kernal_chrout
3ab9: e8        -         inx
3aba: 4c b1 3a  -         jmp !loop-
3abd: 68        -         pla
3abe: 8d 86 02  -         sta foreground_color
3ac1: 4c cf 3a  -         jmp !done+
3ac4: 20        - memory: .byte spacebar
3ac5: 54 45 53 54 20 4d 45 4d                          -         .text description
3acd: 3a        -         .text ":"
3ace: 00        -         .byte NULL
3acf: a6 21     -         ldx rl(register.getValue())
3ad1: a4 22     -         ldy rh(register.getValue())
3ad3: ec 0b 3e  -         cpx address
3ad6: d0 26     -         bne !failed+
3ad8: cc 0c 3e  -         cpy address+1
3adb: d0 21     -         bne !failed+
3add: ee f4 3d  -         inc TEST_PASS_COUNT
3ae0: ad 86 02  -         lda foreground_color
3ae3: 48        -         pha
3ae4: a9 05     -         lda #color
3ae6: 8d 86 02  -         sta foreground_color
3ae9: a2 00     -         ldx #$00
3aeb: bd ef 3d  -         lda msg,x
3aee: f0 07     -         beq !done+
3af0: 20 d2 ff  -         jsr kernal_chrout
3af3: e8        -         inx
3af4: 4c eb 3a  -         jmp !loop-
3af7: 68        -         pla
3af8: 8d 86 02  -         sta foreground_color
3afb: 4c 19 3b  -         jmp !done+
3afe: ad 86 02  -         lda foreground_color
3b01: 48        -         pha
3b02: a9 02     -         lda #color
3b04: 8d 86 02  -         sta foreground_color
3b07: a2 00     -         ldx #$00
3b09: bd f1 3d  -         lda msg,x
3b0c: f0 07     -         beq !done+
3b0e: 20 d2 ff  -         jsr kernal_chrout
3b11: e8        -         inx
3b12: 4c 09 3b  -         jmp !loop-
3b15: 68        -         pla
3b16: 8d 86 02  -         sta foreground_color
3b19: a2 00     -         ldx #$00
3b1b: bd 2a 3b  -         lda msg,x
3b1e: f0 07     -         beq !done+
3b20: 20 d2 ff  -         jsr kernal_chrout
3b23: e8        -         inx
3b24: 4c 1b 3b  -         jmp !loop-
3b27: 4c 2c 3b  -         jmp !done+
3b2a: 0d 00     - memory: .byte RETURN, NULL
3b2c: ae f5 3d  -         ldx TEST_NAME_COUNT
3b2f: e0 15     -         cpx #TESTS_PER_PAGE
3b31: d0 5d     -         bne !exit+
3b33: ad 86 02  -         lda foreground_color
3b36: 48        -         pha
3b37: a9 01     -         lda #color
3b39: 8d 86 02  -         sta foreground_color
3b3c: a2 00     -         ldx #$00
3b3e: bd 51 3b  -         lda msg,x
3b41: f0 07     -         beq !done+
3b43: 20 d2 ff  -         jsr kernal_chrout
3b46: e8        -         inx
3b47: 4c 3e 3b  -         jmp !loop-
3b4a: 68        -         pla
3b4b: 8d 86 02  -         sta foreground_color
3b4e: 4c 70 3b  -         jmp !no_key+
3b51: 0d        - memory: .byte RETURN
3b52: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3b62: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3b6e: 0d 00     -         .byte RETURN, NULL
3b70: 20 9f ff  -         jsr scnkey  // scan keyboard
3b73: 20 e4 ff  -         jsr getin	// put result into A
3b76: f0 f8     -         beq !no_key-
3b78: a2 00     -         ldx #$00
3b7a: bd 89 3b  -         lda msg,x
3b7d: f0 07     -         beq !done+
3b7f: 20 d2 ff  -         jsr kernal_chrout
3b82: e8        -         inx
3b83: 4c 7a 3b  -         jmp !loop-
3b86: 4c 8b 3b  -         jmp !done+
3b89: 0d 00     - newline:.byte RETURN, NULL
3b8b: a2 00     -         ldx #$00
3b8d: 8e f5 3d  -         stx TEST_NAME_COUNT
3b90: 60        -         rts
3b91: a9 00     - TestRun:lda #color
3b93: 8d 20 d0  -         sta border_color
3b96: a9 00     -         lda #color
3b98: 8d 21 d0  -         sta background_color
3b9b: a9 01     -         lda #color
3b9d: 8d 86 02  -         sta foreground_color
3ba0: a2 00     -         ldx #color
3ba2: 8e 21 d0  -         stx background_color
3ba5: a9 20     -         lda #spacebar
3ba7: a2 00     -         ldx #$00
3ba9: 9d 00 04  -         sta screen,x
3bac: 9d 00 05  -         sta screen+$100,x
3baf: 9d 00 06  -         sta screen+$200,x
3bb2: 9d 00 07  -         sta screen+$300,x
3bb5: e8        -         inx
3bb6: d0 f1     -         bne !loop-
3bb8: a9 00     -         lda #row
3bba: 85 d6     -         sta cursor_row
3bbc: a9 00     -         lda #column
3bbe: 85 d3     -         sta cursor_col
3bc0: a2 00     -         ldx #$00
3bc2: bd d1 3b  -         lda msg,x
3bc5: f0 07     -         beq !done+
3bc7: 20 d2 ff  -         jsr kernal_chrout
3bca: e8        -         inx
3bcb: 4c c2 3b  -         jmp !loop-
3bce: 4c d3 3b  -         jmp !done+
3bd1: 0d 00     - newline:.byte RETURN, NULL
3bd3: a2 00     -         ldx #$00
3bd5: bd f6 3d  -         lda msg,x
3bd8: f0 07     -         beq !done+
3bda: 20 d2 ff  -         jsr kernal_chrout
3bdd: e8        -         inx
3bde: 4c d5 3b  -         jmp !loop-
3be1: a9 0c     -         lda #color
3be3: 8d 86 02  -         sta foreground_color
3be6: a9 00     -         lda #$00
3be8: 8d f3 3d  -         sta TEST_COUNT
3beb: 8d f4 3d  -         sta TEST_PASS_COUNT
3bee: 8d f5 3d  -         sta TEST_NAME_COUNT
3bf1: 20 b0 0b  -         jsr SET_TEST
3bf4: 20 ca 0c  -         jsr LOAD_TEST
3bf7: 20 e4 0d  -         jsr STORE_TEST
3bfa: 20 02 0f  -         jsr LOAD_INDIRECT_TEST
3bfd: 20 91 10  -         jsr STORE_INDIRECT_TEST
3c00: 20 9d 12  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
3c03: 20 37 14  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
3c06: 20 42 16  -         jsr POP_INDIRECT_TEST
3c09: 20 51 1a  -         jsr STORE_POP_INDIRECT_TEST
3c0c: 20 80 1b  -         jsr ADD_TEST
3c0f: 20 14 1d  -         jsr SUBTRACT_TEST
3c12: 20 aa 1e  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
3c15: 20 2d 21  -         jsr COMPARE_TEST
3c18: 20 58 22  -         jsr INCREMENT_TEST
3c1b: 20 78 23  -         jsr DECREMENT_TEST
3c1e: 20 9c 24  -         jsr RETURN_TO_6502_MODE_TEST
3c21: 20 af 25  -         jsr BRANCH_ALWAYS_TEST
3c24: 20 d8 26  -         jsr BRANCH_IF_NO_CARRY_TEST	
3c27: 20 0c 28  -         jsr BRANCH_IF_CARRY_SET_TEST
3c2a: 20 40 29  -         jsr BRANCH_IF_PLUS_TEST
3c2d: 20 70 2a  -         jsr BRANCH_IF_MINUS_TEST
3c30: 20 a0 2b  -         jsr BRANCH_IF_ZERO_TEST	
3c33: 20 ca 2c  -         jsr BRANCH_IF_NONZERO_TEST
3c36: 20 f9 2d  -         jsr BRANCH_IF_MINUS_ONE_TEST
3c39: 20 28 2f  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
3c3c: 20 58 30  -         jsr BREAK_TEST
3c3f: 20 90 33  -         jsr BRANCH_TO_SUBROUTINE_TEST
3c42: 20 ca 34  -         jsr RETURN_FROM_SUBROUTINE_TEST
3c45: 20 f7 35  -         jsr ABSOLUTE_JUMP_TEST
3c48: 20 24 37  -         jsr EXTERNAL_JSR_TEST
3c4b: 20 41 39  -         jsr SET_INDIRECT_TEST
3c4e: 20 6a 3a  -         jsr SET_MEMORY_TEST
3c51: 20 f0 31  -         jsr INTERRUPT_BREAK_TEST
3c54: ad 86 02  -         lda foreground_color
3c57: 48        -         pha
3c58: a9 01     -         lda #color
3c5a: 8d 86 02  -         sta foreground_color
3c5d: a2 00     -         ldx #$00
3c5f: bd d6 3d  -         lda msg,x
3c62: f0 07     -         beq !done+
3c64: 20 d2 ff  -         jsr kernal_chrout
3c67: e8        -         inx
3c68: 4c 5f 3c  -         jmp !loop-
3c6b: 68        -         pla
3c6c: 8d 86 02  -         sta foreground_color
3c6f: ad f4 3d  -         lda value
3c72: c9 64     -         cmp #three_digit
3c74: 90 5a     -         bcc !twoDigit+
3c76: ad f4 3d  -         lda value
3c79: c9 64     -         cmp #reference
3c7b: 90 09     -         bcc !done+
3c7d: a0 00     -         ldy #$00		// counter
3c7f: c8        -         iny				// count references's
3c80: e9 64     -         sbc #reference
3c82: c9 64     -         cmp #reference
3c84: b0 f9     -         bcs !loop-		// still larger than reference
3c86: 98        -         tya
3c87: 48        -         pha
3c88: 09 30     -         ora #$30
3c8a: 20 d2 ff  -         jsr kernal_chrout
3c8d: 68        -         pla
3c8e: a8        -         tay
3c8f: ad f4 3d  -         lda value
3c92: 38        -         sec
3c93: e9 64     -         sbc #three_digit
3c95: 88        -         dey
3c96: d0 fa     -         bne !subby-
3c98: 85 fe     -         sta zp
3c9a: a5 fe     -         lda value
3c9c: c9 0a     -         cmp #two_digit
3c9e: 90 28     -         bcc !oneDigit+
3ca0: a5 fe     -         lda value
3ca2: c9 0a     -         cmp #reference
3ca4: 90 09     -         bcc !done+
3ca6: a0 00     -         ldy #$00		// counter
3ca8: c8        -         iny				// count references's
3ca9: e9 0a     -         sbc #reference
3cab: c9 0a     -         cmp #reference
3cad: b0 f9     -         bcs !loop-		// still larger than reference
3caf: 98        -         tya
3cb0: 48        -         pha
3cb1: 09 30     -         ora #$30
3cb3: 20 d2 ff  -         jsr kernal_chrout
3cb6: 68        -         pla
3cb7: a8        -         tay
3cb8: a5 fe     -         lda value
3cba: 38        -         sec
3cbb: e9 0a     -         sbc #two_digit
3cbd: 88        -         dey
3cbe: d0 fa     -         bne !subby-
3cc0: 09 30     -         ora #$30
3cc2: 20 d2 ff  -         jsr kernal_chrout
3cc5: 4c cd 3c  -         jmp !done+
3cc8: 09 30     -         ora #$30
3cca: 20 d2 ff  -         jsr kernal_chrout
3ccd: 4c 06 3d  -         jmp !done+
3cd0: ad f4 3d  -         lda value
3cd3: c9 0a     -         cmp #two_digit
3cd5: 90 2a     -         bcc !oneDigit+
3cd7: ad f4 3d  -         lda value
3cda: c9 0a     -         cmp #reference
3cdc: 90 09     -         bcc !done+
3cde: a0 00     -         ldy #$00		// counter
3ce0: c8        -         iny				// count references's
3ce1: e9 0a     -         sbc #reference
3ce3: c9 0a     -         cmp #reference
3ce5: b0 f9     -         bcs !loop-		// still larger than reference
3ce7: 98        -         tya
3ce8: 48        -         pha
3ce9: 09 30     -         ora #$30
3ceb: 20 d2 ff  -         jsr kernal_chrout
3cee: 68        -         pla
3cef: a8        -         tay
3cf0: ad f4 3d  -         lda value
3cf3: 38        -         sec
3cf4: e9 0a     -         sbc #two_digit
3cf6: 88        -         dey
3cf7: d0 fa     -         bne !subby-
3cf9: 09 30     -         ora #$30
3cfb: 20 d2 ff  -         jsr kernal_chrout
3cfe: 4c 06 3d  -         jmp !done+
3d01: 09 30     -         ora #$30
3d03: 20 d2 ff  -         jsr kernal_chrout
3d06: ad 86 02  -         lda foreground_color
3d09: 48        -         pha
3d0a: a9 01     -         lda #color
3d0c: 8d 86 02  -         sta foreground_color
3d0f: a2 00     -         ldx #$00
3d11: bd e8 3d  -         lda msg,x
3d14: f0 07     -         beq !done+
3d16: 20 d2 ff  -         jsr kernal_chrout
3d19: e8        -         inx
3d1a: 4c 11 3d  -         jmp !loop-
3d1d: 68        -         pla
3d1e: 8d 86 02  -         sta foreground_color
3d21: ad f3 3d  -         lda value
3d24: c9 64     -         cmp #three_digit
3d26: 90 5a     -         bcc !twoDigit+
3d28: ad f3 3d  -         lda value
3d2b: c9 64     -         cmp #reference
3d2d: 90 09     -         bcc !done+
3d2f: a0 00     -         ldy #$00		// counter
3d31: c8        -         iny				// count references's
3d32: e9 64     -         sbc #reference
3d34: c9 64     -         cmp #reference
3d36: b0 f9     -         bcs !loop-		// still larger than reference
3d38: 98        -         tya
3d39: 48        -         pha
3d3a: 09 30     -         ora #$30
3d3c: 20 d2 ff  -         jsr kernal_chrout
3d3f: 68        -         pla
3d40: a8        -         tay
3d41: ad f3 3d  -         lda value
3d44: 38        -         sec
3d45: e9 64     -         sbc #three_digit
3d47: 88        -         dey
3d48: d0 fa     -         bne !subby-
3d4a: 85 fe     -         sta zp
3d4c: a5 fe     -         lda value
3d4e: c9 0a     -         cmp #two_digit
3d50: 90 28     -         bcc !oneDigit+
3d52: a5 fe     -         lda value
3d54: c9 0a     -         cmp #reference
3d56: 90 09     -         bcc !done+
3d58: a0 00     -         ldy #$00		// counter
3d5a: c8        -         iny				// count references's
3d5b: e9 0a     -         sbc #reference
3d5d: c9 0a     -         cmp #reference
3d5f: b0 f9     -         bcs !loop-		// still larger than reference
3d61: 98        -         tya
3d62: 48        -         pha
3d63: 09 30     -         ora #$30
3d65: 20 d2 ff  -         jsr kernal_chrout
3d68: 68        -         pla
3d69: a8        -         tay
3d6a: a5 fe     -         lda value
3d6c: 38        -         sec
3d6d: e9 0a     -         sbc #two_digit
3d6f: 88        -         dey
3d70: d0 fa     -         bne !subby-
3d72: 09 30     -         ora #$30
3d74: 20 d2 ff  -         jsr kernal_chrout
3d77: 4c 7f 3d  -         jmp !done+
3d7a: 09 30     -         ora #$30
3d7c: 20 d2 ff  -         jsr kernal_chrout
3d7f: 4c b8 3d  -         jmp !done+
3d82: ad f3 3d  -         lda value
3d85: c9 0a     -         cmp #two_digit
3d87: 90 2a     -         bcc !oneDigit+
3d89: ad f3 3d  -         lda value
3d8c: c9 0a     -         cmp #reference
3d8e: 90 09     -         bcc !done+
3d90: a0 00     -         ldy #$00		// counter
3d92: c8        -         iny				// count references's
3d93: e9 0a     -         sbc #reference
3d95: c9 0a     -         cmp #reference
3d97: b0 f9     -         bcs !loop-		// still larger than reference
3d99: 98        -         tya
3d9a: 48        -         pha
3d9b: 09 30     -         ora #$30
3d9d: 20 d2 ff  -         jsr kernal_chrout
3da0: 68        -         pla
3da1: a8        -         tay
3da2: ad f3 3d  -         lda value
3da5: 38        -         sec
3da6: e9 0a     -         sbc #two_digit
3da8: 88        -         dey
3da9: d0 fa     -         bne !subby-
3dab: 09 30     -         ora #$30
3dad: 20 d2 ff  -         jsr kernal_chrout
3db0: 4c b8 3d  -         jmp !done+
3db3: 09 30     -         ora #$30
3db5: 20 d2 ff  -         jsr kernal_chrout
3db8: ad 86 02  -         lda foreground_color
3dbb: 48        -         pha
3dbc: a9 01     -         lda #color
3dbe: 8d 86 02  -         sta foreground_color
3dc1: a2 00     -         ldx #$00
3dc3: bd ec 3d  -         lda msg,x
3dc6: f0 07     -         beq !done+
3dc8: 20 d2 ff  -         jsr kernal_chrout
3dcb: e8        -         inx
3dcc: 4c c3 3d  -         jmp !loop-
3dcf: 68        -         pla
3dd0: 8d 86 02  -         sta foreground_color
3dd3: 4c ee 3d  -         jmp !done+
3dd6: 0d        - memory: .byte RETURN
3dd7: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
3de7: 00        -         .byte NULL
3de8: 20 2f 20  - memory_2:.text " / "
3deb: 00        -         .byte NULL
3dec: 0d 00     - memory_3:.byte RETURN, NULL
3dee: 60        -         rts

[TestData]
3def: 73 00     -         .byte $73, $00
3df1: 76 00     -         .byte $76, $00
3df3: 00        -         .byte $00
3df4: 00        -         .byte $00
3df5: 00        -         .byte $00
3df6: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  -         .text "SWEET16 TEST RUNNER"
3e06: 4e 45 52                                        
3e09: 0d 00     -         .byte RETURN, NULL
3e0b: 12 34     -         .byte $12,$34
3e0d: 56 78     -         .byte $56,$78
3e0f: 9a bc     -         .byte $9a,$bc
3e11: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  -         .fill TMS_SIZE, i
3e21: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  -         .fill TMS_SIZE, $ff
3e31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill STACK_SIZE, 0
****************************** Segment: UtilData *******************************
[UtilData]
0aab: 0d 00     - Newline:.byte RETURN, NULL
0aad: ff 00     - ManagedBuffer256,totalSize,lo,hi-1:.byte <value, >value
0aaf: 00 00     - allocSize,lo,hi-1:.byte <value, >value
0ab1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - buffer: .fill $ff, $00
0ad1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0af1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
************************** Segment: Sweet16JumpTable ***************************
[Sweet16JumpTable]
08df: 00        - OPTBL:  .byte <SET-1          // 1X
08e0: f7        - BRTBL:  .byte  <RTN-1          // 0
08e1: 03        -         .byte  <LD-1           // 2X
08e2: 8b        -         .byte  <BR-1           // 1
08e3: 13        -         .byte  <ST-1           // 3X
08e4: 8c        -         .byte  <BNC-1          // 2
08e5: 2b        -         .byte  <LDAT-1         // 4X
08e6: 9d        -         .byte  <BC-1           // 3
08e7: 1c        -         .byte  <STAT-1         // 5X
08e8: a0        -         .byte  <BP-1           // 4
08e9: 35        -         .byte  <LDDAT-1        // 6X
08ea: a7        -         .byte  <BM-1           // 5
08eb: 3f        -         .byte  <STDAT-1        // 7X
08ec: ae        -         .byte  <BZ-1           // 6
08ed: e7        -         .byte  <POP-1          // 8X
08ee: b7        -         .byte  <BNZ-1          // 7
08ef: 49        -         .byte  <STPAT-1        // 9X
08f0: c0        -         .byte  <BM1-1          // 8
08f1: 73        -         .byte  <ADD-1          // AX
08f2: cb        -         .byte  <BNM1-1         // 9
08f3: 5c        -         .byte  <SUB-1          // BX
08f4: 0c        -         .byte  <BK-1           // A
08f5: eb        -         .byte  <POPD-1         // CX
08f6: d6        -         .byte  <RS-1           // B
08f7: 5e        -         .byte  <CPR-1          // DX
08f8: 81        -         .byte  <BS-1           // C
08f9: 24        -         .byte  <INR-1          // EX
08fa: 10        -         .byte  <XJSR-1         // D
08fb: 53        -         .byte  <DCR-1          // FX
08fc: 0d        -         .byte  <SETM-1         // E
08fd: d5        -         .byte  <NUL-1          // UNUSED
08fe: f4        -         .byte  <SETI-1         // F
***************************** Segment: Sweet16Page *****************************
[Sweet16Page]
0900: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
0901: 4c cb 08  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     - LD:     lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        - BK:     brk
090e: 4c 78 0a  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     - ST:     lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     - STAT:   lda  R0L	
091f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     - INR:    inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        - INR2:   rts
092c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  - STPAT:  jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     - DCR:    lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     - DCR2:   dec  R0L,X
095c: 60        -         rts
095d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
095f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  - SUB2:   sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     - ADD:    lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        - BR:     clc
098d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
098f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     - BR2:    adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        - BNC2:   rts
099e: b0 ec     - BC:     bcs  BR
09a0: 60        -         rts
09a1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        - NUL:    rts
09d7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  - POPD:   jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  - SETI:   jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  - RTN:    jmp  RTNZ
09fb: 20 54 09  - POP2:   jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  - SAVE:   sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  - RESTORE:lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        - BREAK_HANDLER:pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c a2 08  -         jmp SW16D
0a44: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts
************************** Segment: Sweet16OutOfPage ***************************
[Sweet16OutOfPage]
0a66: 20 44 0a  - SETI_OUTOFPAGE:jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c a2 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  - SETM_OUTOFPAGE:jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c a2 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c a2 08  -         jmp SW16D				// back to SWEET16
***************************** Segment: Sweet16Data *****************************
[Sweet16Data]
0aa6: 00        - ACCUMULATOR:.byte 0
0aa7: 00        - XREG:   .byte 0
0aa8: 00        - YREG:   .byte 0
0aa9: 00        - STATUS: .byte 0
0aaa: 00        - SW16_SAVE_RESTORE:.byte 0
****************************** Segment: TestData *******************************
[TestData]
3def: 73 00     - TEST_SUCCESS:.byte $73, $00
3df1: 76 00     - TEST_FAILURE:.byte $76, $00
3df3: 00        - TEST_COUNT:.byte $00
3df4: 00        - TEST_PASS_COUNT:.byte $00
3df5: 00        - TEST_NAME_COUNT:.byte $00
3df6: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  - TEST_TITLE:.text "SWEET16 TEST RUNNER"
3e06: 4e 45 52                                        
3e09: 0d 00     -         .byte RETURN, NULL
3e0b: 12 34     - TEST_MEMORY:.byte $12,$34
3e0d: 56 78     - TEST_MEMORY_2:.byte $56,$78
3e0f: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
3e11: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
3e21: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
3e31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
