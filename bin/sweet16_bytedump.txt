******************************* Segment: Default *******************************
******************************** Segment: Main *********************************
[Main]
0810: 20 16 08  - Main:   jsr loadAll
0813: 20 3d 09  -         jsr ready
0816: a9 00     - loadAll:lda #color
0818: 8d 20 d0  -         sta border_color
081b: a9 00     -         lda #color
081d: 8d 21 d0  -         sta background_color
0820: 20 44 e5  -         jsr $e544
0823: a2 00     -         ldx #$00
0825: bd 34 08  -         lda msg,x
0828: f0 07     -         beq !done+
082a: 20 d2 ff  -         jsr kernal_chrout
082d: e8        -         inx
082e: 4c 25 08  -         jmp !loop-
0831: 4c 3d 08  -         jmp !done+
0834: 53 57 45 45 54 31 36                             -         .text msg
083b: 0d 00     -         .byte RETURN, NULL
083d: a2 00     -         ldx #$00
083f: bd 4e 08  -         lda msg,x
0842: f0 07     -         beq !done+
0844: 20 d2 ff  -         jsr kernal_chrout
0847: e8        -         inx
0848: 4c 3f 08  -         jmp !loop-
084b: 4c 50 08  -         jmp !done+
084e: 0d 00     -         .byte RETURN, NULL
0850: a2 00     -         ldx #$00
0852: bd 61 08  -         lda msg,x
0855: f0 07     -         beq !done+
0857: 20 d2 ff  -         jsr kernal_chrout
085a: e8        -         inx
085b: 4c 52 08  -         jmp !loop-
085e: 4c 6f 08  -         jmp !done+
0861: 43 48 45 43 4b 49 4e 47 20 46 4f 52 20           -         .text msg
086e: 00        -         .byte NULL
086f: a2 00     -         ldx #$00
0871: bd 80 08  -         lda msg,x
0874: f0 07     -         beq !done+
0876: 20 d2 ff  -         jsr kernal_chrout
0879: e8        -         inx
087a: 4c 71 08  -         jmp !loop-
087d: 4c 84 08  -         jmp !done+
0880: 4c 49 42  -         .text msg
0883: 00        -         .byte NULL
0884: a2 00     -         ldx #$00
0886: bd 95 08  -         lda msg,x
0889: f0 07     -         beq !done+
088b: 20 d2 ff  -         jsr kernal_chrout
088e: e8        -         inx
088f: 4c 86 08  -         jmp !loop-
0892: 4c 99 08  -         jmp !done+
0895: 2e 2e 2e  -         .text msg
0898: 00        -         .byte NULL
0899: ad 50 09  -         lda baseAddr
089c: c5 fe     -         cmp $fe
089e: d0 09     -         bne !nope+
08a0: ad 51 09  -         lda baseAddr+1
08a3: c5 ed     -         cmp $ed
08a5: d0 02     -         bne !nope+
08a7: a9 00     -         lda #$00
08a9: a9 01     -         lda #$01
08ab: f0 66     -         beq !loaded+
08ad: a2 00     -         ldx #$00
08af: bd be 08  -         lda msg,x
08b2: f0 07     -         beq !done+
08b4: 20 d2 ff  -         jsr kernal_chrout
08b7: e8        -         inx
08b8: 4c af 08  -         jmp !loop-
08bb: 4c c9 08  -         jmp !done+
08be: 4c 4f 41 44 49 4e 47 20 2d 20                    -         .text msg
08c8: 00        -         .byte NULL

[WHEREAMI]
08c9: a9 2b     -         lda #<address
08cb: 85 fb     -         sta lowByte
08cd: a9 09     -         lda #>address 
08cf: 85 fc     -         sta highByte
08d1: a9 b1     -         lda #<address
08d3: 85 fd     -         sta lowByte
08d5: a9 0b     -         lda #>address 
08d7: 85 fe     -         sta highByte
08d9: a9 11     -         lda #<address
08db: 85 4e     -         sta lowByte
08dd: a9 00     -         lda #>address 
08df: 85 4f     -         sta highByte
08e1: 20 b0 0c  -         jsr CopyMemoryZeroPageSize

[SIZE_SET]
08e4: a9 11     -         lda #<size
08e6: 8d af 0b  -         sta managedBuffer.allocSize.lo
08e9: a9 00     -         lda #>size
08eb: 8d b0 0b  -         sta managedBuffer.allocSize.hi

[HERE2]
08ee: a9 ad     -         lda #<address
08f0: 85 fb     -         sta lowByte
08f2: a9 0b     -         lda #>address 
08f4: 85 fc     -         sta highByte

[CRAZY]
08f6: 20 dd 0c  -         jsr LoadPrgFileFromManagedBuffer
08f9: a2 00     -         ldx #$00
08fb: bd 0a 09  -         lda msg,x
08fe: f0 07     -         beq !done+
0900: 20 d2 ff  -         jsr kernal_chrout
0903: e8        -         inx
0904: 4c fb 08  -         jmp !loop-
0907: 4c 10 09  -         jmp !done+
090a: 44 4f 4e 45                                      -         .text msg
090e: 0d 00     -         .byte RETURN, NULL
0910: 4c 3c 09  -         jmp !done+
0913: a2 00     -         ldx #$00
0915: bd 24 09  -         lda msg,x
0918: f0 07     -         beq !done+
091a: 20 d2 ff  -         jsr kernal_chrout
091d: e8        -         inx
091e: 4c 15 09  -         jmp !loop-
0921: 4c 28 09  -         jmp !done+
0924: 4f 4b     -         .text msg
0926: 0d 00     -         .byte RETURN, NULL
0928: 4c 3c 09  -         jmp !done+
092b: 2d 2d 2d 20 20 20 20 4c 49 42 20 20 20 20 2d 2d  -         .text filename
093b: 2d                                              
093c: 60        -         rts
093d: 20 44 09  - ready:  jsr Anykey
0940: 4c 4d 09  -         jmp Reset
0943: 60        -         rts
0944: 20 9f ff  - Anykey: jsr scnkey  // scan keyboard
0947: 20 e4 ff  -         jsr getin	// put result into A
094a: f0 f8     -         beq !-	
094c: 60        -         rts
094d: 6c fc ff  - Reset:  jmp ($FFFC)
**************************** Segment: Sweet16Patch *****************************
[Sweet16Patch]
0950: fe ed     - sweet16_patch:.byte $fe, $ed
******************************* Segment: Sweet16 *******************************
[Sweet16]
0950: a9 00     - SW16_NONE:lda #$00
0952: 8d aa 0b  -         sta SW16_SAVE_RESTORE
0955: 4c 5d 09  -         jmp SW160
0958: a9 01     - SW16:   lda #$01
095a: 8d aa 0b  -         sta SW16_SAVE_RESTORE
095d: f0 03     - SW160:  beq SW16A
095f: 20 16 0b  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
0962: 68        - SW16A:  pla
0963: 85 35     -         sta R15L            // INIT SWEET16 PC
0965: 68        -         pla                 // FROM RETURN
0966: 85 36     -         sta R15H	        // ADDRESS
0968: 20 6e 09  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
096b: 4c 68 09  -         jmp  SW16B          // ONE SWEET16 INSTR.
096e: e6 35     - SW16C:  inc  R15L
0970: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
0972: e6 36     -         inc  R15H
0974: a9 0a     - SW16D:  lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
0976: 48        -         pha                 // PUSH ON STACK FOR RTS
0977: a0 00     -         ldy  #$00
0979: b1 35     -         lda  (R15L),Y       // FETCH INSTR
097b: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
097d: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
097e: aa        -         tax                 // TO X REG FOR INDEXING
097f: 4a        -         lsr
0980: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
0982: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
0984: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
0986: 4a        -         lsr
0987: 4a        -         lsr                 // OPCODE*2 TO LSB'S
0988: 4a        -         lsr
0989: a8        -         tay                 // TO Y REG FOR INDEXING
098a: b9 af 09  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
098d: 48        -         pha                 // ONTO STACK
098e: 60        -         rts                 // GOTO REG-OP ROUTINE
098f: e6 35     - TOBR:   inc  R15L
0991: d0 02     -         bne  TOBR2          // INCR PC
0993: e6 36     -         inc  R15H
0995: bd b2 09  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
0998: 48        -         pha                 // ONTO STACK FOR NON-REG OP
0999: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
099b: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
099c: 60        -         rts                 // GOTO NON-REG OP ROUTINE
099d: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
099f: 95 18     -         sta  R0H,X
09a1: 88        -         dey
09a2: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
09a4: 95 17     -         sta  R0L,X
09a6: 98        -         tya                 // Y REG CONTAINS 1
09a7: 38        -         sec
09a8: 65 35     -         adc  R15L           // ADD 2 TO PC
09aa: 85 35     -         sta  R15L
09ac: 90 02     -         bcc  SET2
09ae: e6 36     -         inc  R15H
09b0: 60        - SET2:   rts

[Sweet16JumpTable]
09b1: 00        -         .byte <SET-1          // 1X
09b2: f7        -         .byte  <RTN-1          // 0
09b3: 03        -         .byte  <LD-1           // 2X
09b4: 8b        -         .byte  <BR-1           // 1
09b5: 13        -         .byte  <ST-1           // 3X
09b6: 8c        -         .byte  <BNC-1          // 2
09b7: 2b        -         .byte  <LDAT-1         // 4X
09b8: 9d        -         .byte  <BC-1           // 3
09b9: 1c        -         .byte  <STAT-1         // 5X
09ba: a0        -         .byte  <BP-1           // 4
09bb: 35        -         .byte  <LDDAT-1        // 6X
09bc: a7        -         .byte  <BM-1           // 5
09bd: 3f        -         .byte  <STDAT-1        // 7X
09be: ae        -         .byte  <BZ-1           // 6
09bf: e7        -         .byte  <POP-1          // 8X
09c0: b7        -         .byte  <BNZ-1          // 7
09c1: 49        -         .byte  <STPAT-1        // 9X
09c2: c0        -         .byte  <BM1-1          // 8
09c3: 73        -         .byte  <ADD-1          // AX
09c4: cb        -         .byte  <BNM1-1         // 9
09c5: 5c        -         .byte  <SUB-1          // BX
09c6: 0c        -         .byte  <BK-1           // A
09c7: eb        -         .byte  <POPD-1         // CX
09c8: d6        -         .byte  <RS-1           // B
09c9: 5e        -         .byte  <CPR-1          // DX
09ca: 81        -         .byte  <BS-1           // C
09cb: 24        -         .byte  <INR-1          // EX
09cc: 10        -         .byte  <XJSR-1         // D
09cd: 53        -         .byte  <DCR-1          // FX
09ce: 0d        -         .byte  <SETM-1         // E
09cf: d5        -         .byte  <NUL-1          // UNUSED
09d0: f4        -         .byte  <SETI-1         // F

[Sweet16Page]
0a00: ea        -         nop                // otherwise RTS "cleverness" not so clever
0a01: 4c 9d 09  -         jmp SETZ           // ALWAYS TAKEN (moved out of page)
0a04: b5 17     -         lda  R0L,X
0a06: 85 17     -         sta  R0L
0a08: b5 18     -         lda  R0H,X          // MOVE RX TO R0
0a0a: 85 18     -         sta  R0H
0a0c: 60        -         rts
0a0d: 00        -         brk
0a0e: 4c 78 0b  -         jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0a11: 4c 8a 0b  -         jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0a14: a5 17     -         lda  R0L
0a16: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0a18: a5 18     -         lda  R0H
0a1a: 95 18     -         sta  R0H,X
0a1c: 60        -         rts
0a1d: a5 17     -         lda  R0L	
0a1f: 81 17     -         sta  (R0L,X)        // STORE BYTE INDIRECT
0a21: a0 00     -         ldy  #$00
0a23: 84 34     -         sty  R14H           // INDICATE R0 IS RESULT NEG
0a25: f6 17     -         inc  R0L,X
0a27: d0 02     -         bne  INR2           // INCR RX
0a29: f6 18     -         inc  R0H,X	
0a2b: 60        -         rts
0a2c: a1 17     -         lda  (R0L,X)        // LOAD INDIRECT (RX)
0a2e: 85 17     -         sta  R0L            // TO R0
0a30: a0 00     -         ldy  #$00
0a32: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0a34: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0a36: 20 2c 0a  -         jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0a39: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
0a3b: 85 18     -         sta  R0H
0a3d: 4c 25 0a  -         jmp  INR            // INCR RX
0a40: 20 1d 0a  -         jsr  STAT           // STORE INDIRECT LOW ORDER
0a43: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0a45: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0a47: 4c 25 0a  -         jmp  INR            // INCR RX AND RETURN
0a4a: 20 54 0a  -         jsr  DCR            // DECR RX
0a4d: a5 17     -         lda  R0L
0a4f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0a51: 4c 04 0b  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0a54: b5 17     -         lda  R0L,X
0a56: d0 02     -         bne  DCR2           // DECR RX
0a58: d6 18     -         dec  R0H,X
0a5a: d6 17     -         dec  R0L,X
0a5c: 60        -         rts
0a5d: a0 00     -         ldy  #$00           // RESULT TO R0
0a5f: 38        -         sec                 // NOTE Y REG = 13*2 FOR CPR
0a60: a5 17     -         lda  R0L
0a62: f5 17     -         sbc  R0L,X
0a64: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0a67: a5 18     -         lda  R0H
0a69: f5 18     -         sbc  R0H,X
0a6b: 99 18 00  -         sta  R0H,Y
0a6e: 98        -         tya                 // LAST RESULT REG*2
0a6f: 69 00     -         adc  #$00           // CARRY TO LSB
0a71: 85 34     -         sta  R14H
0a73: 60        -         rts
0a74: a5 17     -         lda  R0L
0a76: 75 17     -         adc  R0L,X
0a78: 85 17     -         sta  R0L            // R0+RX TO R0
0a7a: a5 18     -         lda  R0H
0a7c: 75 18     -         adc  R0H,X
0a7e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0a80: f0 e9     -         beq  SUB2           // FINISH ADD
0a82: a5 35     -         lda  R15L           // NOTE X REG IS 12*2!
0a84: 20 1f 0a  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0a87: a5 36     -         lda  R15H
0a89: 20 1f 0a  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
0a8c: 18        -         clc
0a8d: b0 0e     -         bcs  BNC2           // NO CARRY TEST	
0a8f: b1 35     -         lda  (R15L),Y       // DISPLACEMENT BYTE
0a91: 10 01     -         bpl  BR2
0a93: 88        -         dey
0a94: 65 35     -         adc  R15L           // ADD TO PC
0a96: 85 35     -         sta  R15L
0a98: 98        -         tya
0a99: 65 36     -         adc  R15H
0a9b: 85 36     -         sta  R15H
0a9d: 60        -         rts
0a9e: b0 ec     -         bcs  BR
0aa0: 60        -         rts
0aa1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
0aa2: aa        -         tax                 // TO X REG FOR INDEXING
0aa3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
0aa5: 10 e8     -         bpl  BR1            // BRANCH IF SO
0aa7: 60        -         rts
0aa8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
0aa9: aa        -         tax
0aaa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
0aac: 30 e1     -         bmi  BR1
0aae: 60        -         rts
0aaf: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
0ab0: aa        -         tax
0ab1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
0ab3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
0ab5: f0 d8     -         beq  BR1            // BRANCH IF SO
0ab7: 60        -         rts
0ab8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
0ab9: aa        -         tax
0aba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
0abc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
0abe: d0 cf     -         bne  BR1            // BRANCH IF SO
0ac0: 60        -         rts	
0ac1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
0ac2: aa        -         tax
0ac3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
0ac5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
0ac7: 49 ff     -         eor  #$FF
0ac9: f0 c4     -         beq  BR1            // BRANCH IF SO
0acb: 60        -         rts
0acc: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
0acd: aa        -         tax
0ace: b5 17     -         lda  R0L,X
0ad0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
0ad2: 49 ff     -         eor  #$FF
0ad4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
0ad6: 60        -         rts
0ad7: a2 18     -         ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
0ad9: 20 54 0a  -         jsr  DCR            // DECR STACK POINTER
0adc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
0ade: 85 36     -         sta  R15H
0ae0: 20 54 0a  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
0ae3: a1 17     -         lda  (R0L,X)
0ae5: 85 35     -         sta  R15L
0ae7: 60        -         rts
0ae8: a0 00     -         ldy  #$00           // HIGH ORDER BYTE = 0
0aea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
0aec: 20 54 0a  -         jsr  DCR            // DECR RX
0aef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
0af1: a8        -         tay                 // SAVE IN Y REG	
0af2: 4c fb 0a  -         jmp POP2
0af5: 4c 66 0b  -         jmp SETI_OUTOFPAGE
0af8: 4c 09 0b  -         jmp  RTNZ
0afb: 20 54 0a  -         jsr  DCR            // DECR RX
0afe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0b00: 85 17     -         sta  R0L            // TO R0
0b02: 84 18     -         sty  R0H
0b04: a0 00     -         ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0b06: 84 34     -         sty  R14H
0b08: 60        -         rts
0b09: 68        -         pla                 // POP RETURN ADDRESS
0b0a: 68        -         pla
0b0b: ad aa 0b  -         lda SW16_SAVE_RESTORE
0b0e: f0 03     -         beq RESTORED
0b10: 20 26 0b  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0b13: 6c 35 00  -         jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0b16: 8d a6 0b  -         sta ACCUMULATOR
0b19: 8e a7 0b  -         stx XREG
0b1c: 8c a8 0b  -         sty YREG
0b1f: 08        -         php
0b20: 68        -         pla
0b21: 8d a9 0b  -         sta STATUS
0b24: d8        -         cld
0b25: 60        -         rts
0b26: ad a9 0b  -         lda STATUS
0b29: 48        -         pha
0b2a: ad a6 0b  -         lda ACCUMULATOR
0b2d: ae a7 0b  -         ldx XREG
0b30: ac a8 0b  -         ldy YREG
0b33: 28        -         plp
0b34: 60        -         rts
0b35: 68        -         pla		// Y
0b36: a8        -         tay		// restore Y
0b37: 68        -         pla		// X
0b38: aa        -         tax		// restore X
0b39: 68        -         pla		// restore A
0b3a: 85 37     -         sta RL(ZP)
0b3c: 28        -         plp		// restore Status Flags
0b3d: 68        -         pla		// PCL discard - not useful
0b3e: 68        -         pla		// PCH discard - not useful
0b3f: a5 37     -         lda RL(ZP)
0b41: 4c 74 09  -         jmp SW16D
0b44: b1 35     -         lda (R15L),Y       		// dest addr high
0b46: 85 37     -         sta RL(ZP)
0b48: e6 35     -         inc R15L
0b4a: d0 02     -         bne !incremented+ 		// inc PC
0b4c: e6 36     -         inc R15H
0b4e: b1 35     -         lda (R15L),Y       		// dest addr low
0b50: 85 38     -         sta RH(ZP)
0b52: e6 35     -         inc R15L
0b54: d0 02     -         bne !incremented+ 		// inc PC
0b56: e6 36     -         inc R15H
0b58: b1 35     -         lda (R15L),Y       		// dest register
0b5a: e6 35     -         inc R15L
0b5c: d0 02     -         bne !incremented+ 		// inc PC
0b5e: e6 36     -         inc R15H
0b60: a8        -         tay
0b61: e6 37     -         inc RL(ZP)
0b63: a2 37     -         ldx #RL(ZP)
0b65: 60        -         rts

[Sweet16OutOfPage]
0b66: 20 44 0b  -         jsr SETIM_COMMON
0b69: a1 00     -         lda ($00,X)
0b6b: 99 00 00  -         sta $00,Y				// low order
0b6e: c6 37     -         dec RL(ZP)
0b70: a1 00     -         lda ($00,X)
0b72: 99 01 00  -         sta $01,Y				// high order
0b75: 4c 74 09  -         jmp SW16D				// back to SWEET16
0b78: 20 44 0b  -         jsr SETIM_COMMON
0b7b: a1 00     -         lda ($00,X)
0b7d: 99 01 00  -         sta $01,Y				// high order
0b80: c6 37     -         dec RL(ZP)
0b82: a1 00     -         lda ($00,X)
0b84: 99 00 00  -         sta $00,Y				// low order
0b87: 4c 74 09  -         jmp SW16D				// back to SWEET16
0b8a: a9 0b     -         lda #>((!returned+)-1)	// so we know where to come back to as we're
0b8c: 48        -         pha						// using rts as jmps here
0b8d: a9 a2     -         lda #<((!returned+)-1)
0b8f: 48        -         pha
0b90: b1 35     -         lda (R15L),Y       		// high order byte
0b92: 48        -         pha
0b93: e6 35     -         inc R15L
0b95: d0 02     -         bne !incremented+ 		// inc PC
0b97: e6 36     -         inc R15H
0b99: b1 35     -         lda (R15L),Y       		// low order byte
0b9b: 48        -         pha
0b9c: e6 35     -         inc R15L
0b9e: d0 02     -         bne !incremented+ 		// inc PC
0ba0: e6 36     -         inc R15H
0ba2: 60        -         rts				   		// this performs jump from stack
0ba3: 4c 74 09  -         jmp SW16D				// back to SWEET16

[Sweet16Data]
0ba6: 00        -         .byte 0
0ba7: 00        -         .byte 0
0ba8: 00        -         .byte 0
0ba9: 00        -         .byte 0
0baa: 00        -         .byte 0
******************************** Segment: Util *********************************
[UtilData]
0bab: 0d 00     -         .byte RETURN, NULL

[ManagedBuffer256]
0bad: ff 00     -         .byte <value, >value
0baf: 00 00     -         .byte <value, >value
0bb1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill $ff, $00
0bd1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0bf1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
0cb0: a0 00     -         ldy #$00
0cb2: 84 50     -         sty ZpVar.Four.lo     // LSB size
0cb4: 84 51     -         sty ZpVar.Four.hi     // MSH size
0cb6: a5 4f     -         lda ZpVar.Three.hi
0cb8: c5 51     -         cmp ZpVar.Four.hi
0cba: f0 17     -         beq !msb_match+
0cbc: b1 fb     -         lda (ZpVar.One.lo),y 
0cbe: 91 fd     -         sta (ZpVar.Two.lo),y
0cc0: e6 50     -         inc ZpVar.Four.lo
0cc2: f0 0a     -         beq inc_msb
0cc4: c8        -         iny
0cc5: d0 ef     -         bne !loop-
0cc7: e6 fc     -         inc ZpVar.One.hi 	// inc MSB source 
0cc9: e6 fe     -         inc ZpVar.Two.hi 	// inc MSB dest 
0ccb: 4c b6 0c  -         jmp !loop-
0cce: e6 51     -         inc ZpVar.Four.hi
0cd0: 4c c4 0c  -         jmp !cont-
0cd3: a5 4e     -         lda ZpVar.Three.lo
0cd5: c5 50     -         cmp ZpVar.Four.lo
0cd7: f0 03     -         beq !done+
0cd9: 4c bc 0c  -         jmp !copy-
0cdc: 60        -         rts

[HERE]
0cdd: a0 02     -         ldy #2
0cdf: b1 fb     -         lda (ZpVar.One),Y
0ce1: 48        -         pha           // store length on stack
0ce2: 18        -         clc
0ce3: a9 04     -         lda #$4
0ce5: 65 fb     -         adc ZpVar.One
0ce7: aa        -         tax
0ce8: a4 fc     -         ldy ZpVar.One.hi
0cea: 68        -         pla
0ceb: 20 bd ff  -         jsr $ffbd     // call setnam
0cee: a9 01     -         lda #$01
0cf0: a6 ba     -         ldx $ba       // last used device number
0cf2: d0 02     -         bne !skip+
0cf4: a2 08     -         ldx #$08      // default to device 8
0cf6: a0 01     -         ldy #$01      // not $01 means: load to address stored in file
0cf8: 20 ba ff  -         jsr $ffba     // call setlfs
0cfb: a9 00     -         lda #$00      // $00 means: load to memory (not verify)
0cfd: 20 d5 ff  -         jsr $ffd5     // call load
0d00: b0 03     -         bcs !error+    // if carry set, a load error has happened
0d02: 4c dd 0d  -         jmp !done+
0d05: 85 50     -         sta ZpVar.Four
0d07: a2 00     -         ldx #$00
0d09: bd d5 0d  -         lda msg,x
0d0c: f0 07     -         beq !done+
0d0e: 20 d2 ff  -         jsr kernal_chrout
0d11: e8        -         inx
0d12: 4c 09 0d  -         jmp !loop-
0d15: a5 50     -         lda value
0d17: c9 64     -         cmp #three_digit
0d19: 90 58     -         bcc !twoDigit+
0d1b: a5 50     -         lda value
0d1d: c9 64     -         cmp #reference
0d1f: 90 09     -         bcc !done+
0d21: a0 00     -         ldy #$00		// counter
0d23: c8        -         iny				// count references's
0d24: e9 64     -         sbc #reference
0d26: c9 64     -         cmp #reference
0d28: b0 f9     -         bcs !loop-		// still larger than reference
0d2a: 98        -         tya
0d2b: 48        -         pha
0d2c: 09 30     -         ora #$30
0d2e: 20 d2 ff  -         jsr kernal_chrout
0d31: 68        -         pla
0d32: a8        -         tay
0d33: a5 50     -         lda value
0d35: 38        -         sec
0d36: e9 64     -         sbc #three_digit
0d38: 88        -         dey
0d39: d0 fa     -         bne !subby-
0d3b: 85 fe     -         sta zp
0d3d: a5 fe     -         lda value
0d3f: c9 0a     -         cmp #two_digit
0d41: 90 28     -         bcc !oneDigit+
0d43: a5 fe     -         lda value
0d45: c9 0a     -         cmp #reference
0d47: 90 09     -         bcc !done+
0d49: a0 00     -         ldy #$00		// counter
0d4b: c8        -         iny				// count references's
0d4c: e9 0a     -         sbc #reference
0d4e: c9 0a     -         cmp #reference
0d50: b0 f9     -         bcs !loop-		// still larger than reference
0d52: 98        -         tya
0d53: 48        -         pha
0d54: 09 30     -         ora #$30
0d56: 20 d2 ff  -         jsr kernal_chrout
0d59: 68        -         pla
0d5a: a8        -         tay
0d5b: a5 fe     -         lda value
0d5d: 38        -         sec
0d5e: e9 0a     -         sbc #two_digit
0d60: 88        -         dey
0d61: d0 fa     -         bne !subby-
0d63: 09 30     -         ora #$30
0d65: 20 d2 ff  -         jsr kernal_chrout
0d68: 4c 70 0d  -         jmp !done+
0d6b: 09 30     -         ora #$30
0d6d: 20 d2 ff  -         jsr kernal_chrout
0d70: 4c a6 0d  -         jmp !done+
0d73: a5 50     -         lda value
0d75: c9 0a     -         cmp #two_digit
0d77: 90 28     -         bcc !oneDigit+
0d79: a5 50     -         lda value
0d7b: c9 0a     -         cmp #reference
0d7d: 90 09     -         bcc !done+
0d7f: a0 00     -         ldy #$00		// counter
0d81: c8        -         iny				// count references's
0d82: e9 0a     -         sbc #reference
0d84: c9 0a     -         cmp #reference
0d86: b0 f9     -         bcs !loop-		// still larger than reference
0d88: 98        -         tya
0d89: 48        -         pha
0d8a: 09 30     -         ora #$30
0d8c: 20 d2 ff  -         jsr kernal_chrout
0d8f: 68        -         pla
0d90: a8        -         tay
0d91: a5 50     -         lda value
0d93: 38        -         sec
0d94: e9 0a     -         sbc #two_digit
0d96: 88        -         dey
0d97: d0 fa     -         bne !subby-
0d99: 09 30     -         ora #$30
0d9b: 20 d2 ff  -         jsr kernal_chrout
0d9e: 4c a6 0d  -         jmp !done+
0da1: 09 30     -         ora #$30
0da3: 20 d2 ff  -         jsr kernal_chrout
0da6: a5 50     -         lda ZpVar.Four
0da8: c9 04     -         cmp #$04
0daa: f0 17     -         beq !fileNotFound+
0dac: 4c ac 0d  -         jmp *
0daf: 20 3e 20 46 49 4c 45 20 4e 4f 54 20 46 4f 55 4e  -         .text " > FILE NOT FOUND: "
0dbf: 44 3a 20                                        
0dc2: 00        -         .byte NULL
0dc3: a2 00     -         ldx #$00
0dc5: bd af 0d  -         lda msg,x
0dc8: f0 07     -         beq !done+
0dca: 20 d2 ff  -         jsr kernal_chrout
0dcd: e8        -         inx
0dce: 4c c5 0d  -         jmp !loop-
0dd1: 4c d1 0d  -         jmp *
0dd4: 60        -         rts
0dd5: 45 52 52 4f 52 3a 20                             -         .text "ERROR: "
0ddc: 00        -         .byte NULL
0ddd: 60        -         rts
******************************** Segment: Tests ********************************
[Set]
0dde: ee 23 40  - SET_TEST:inc TEST_NAME_COUNT
0de1: ad 86 02  -         lda foreground_color
0de4: 48        -         pha
0de5: a9 0f     -         lda #color
0de7: 8d 86 02  -         sta foreground_color
0dea: a2 00     -         ldx #$00
0dec: bd ff 0d  -         lda msg,x
0def: f0 07     -         beq !done+
0df1: 20 d2 ff  -         jsr kernal_chrout
0df4: e8        -         inx
0df5: 4c ec 0d  -         jmp !loop-
0df8: 68        -         pla
0df9: 8d 86 02  -         sta foreground_color
0dfc: 4c 08 0e  -         jmp !done+
0dff: 20 20     - memory: .fill spacing, spacebar
0e01: 53 45 54  -         .text name
0e04: 2e 2e 2e  -         .text "..."
0e07: 00        -         .byte NULL
0e08: 20 58 09  -         jsr SW16
0e0b: 15        -         .byte opcode(op, register)
0e0c: 34 12     -         .word address.getValue()
0e0e: 00        -         .byte $00 }
0e0f: ee 21 40  -         inc TEST_COUNT
0e12: ad 86 02  -         lda foreground_color
0e15: 48        -         pha
0e16: a9 0e     -         lda #color
0e18: 8d 86 02  -         sta foreground_color
0e1b: a2 00     -         ldx #$00
0e1d: bd 30 0e  -         lda msg,x
0e20: f0 07     -         beq !done+
0e22: 20 d2 ff  -         jsr kernal_chrout
0e25: e8        -         inx
0e26: 4c 1d 0e  -         jmp !loop-
0e29: 68        -         pla
0e2a: 8d 86 02  -         sta foreground_color
0e2d: 4c 38 0e  -         jmp !done+
0e30: 20        - memory: .byte spacebar
0e31: 56 41 4c 55 45                                   -         .text description
0e36: 3a        -         .text ":"
0e37: 00        -         .byte NULL
0e38: a6 21     -         ldx rl(register.getValue())
0e3a: a4 22     -         ldy rh(register.getValue())
0e3c: e0 34     -         cpx #<value
0e3e: d0 25     -         bne !failed+
0e40: c0 12     -         cpy #>value
0e42: d0 21     -         bne !failed+
0e44: ee 22 40  -         inc TEST_PASS_COUNT
0e47: ad 86 02  -         lda foreground_color
0e4a: 48        -         pha
0e4b: a9 05     -         lda #color
0e4d: 8d 86 02  -         sta foreground_color
0e50: a2 00     -         ldx #$00
0e52: bd 1d 40  -         lda msg,x
0e55: f0 07     -         beq !done+
0e57: 20 d2 ff  -         jsr kernal_chrout
0e5a: e8        -         inx
0e5b: 4c 52 0e  -         jmp !loop-
0e5e: 68        -         pla
0e5f: 8d 86 02  -         sta foreground_color
0e62: 4c 80 0e  -         jmp !done+
0e65: ad 86 02  -         lda foreground_color
0e68: 48        -         pha
0e69: a9 02     -         lda #color
0e6b: 8d 86 02  -         sta foreground_color
0e6e: a2 00     -         ldx #$00
0e70: bd 1f 40  -         lda msg,x
0e73: f0 07     -         beq !done+
0e75: 20 d2 ff  -         jsr kernal_chrout
0e78: e8        -         inx
0e79: 4c 70 0e  -         jmp !loop-
0e7c: 68        -         pla
0e7d: 8d 86 02  -         sta foreground_color
0e80: a2 00     -         ldx #$00
0e82: bd 91 0e  -         lda msg,x
0e85: f0 07     -         beq !done+
0e87: 20 d2 ff  -         jsr kernal_chrout
0e8a: e8        -         inx
0e8b: 4c 82 0e  -         jmp !loop-
0e8e: 4c 93 0e  -         jmp !done+
0e91: 0d 00     - memory: .byte RETURN, NULL
0e93: ae 23 40  -         ldx TEST_NAME_COUNT
0e96: e0 15     -         cpx #TESTS_PER_PAGE
0e98: d0 5d     -         bne !exit+
0e9a: ad 86 02  -         lda foreground_color
0e9d: 48        -         pha
0e9e: a9 01     -         lda #color
0ea0: 8d 86 02  -         sta foreground_color
0ea3: a2 00     -         ldx #$00
0ea5: bd b8 0e  -         lda msg,x
0ea8: f0 07     -         beq !done+
0eaa: 20 d2 ff  -         jsr kernal_chrout
0ead: e8        -         inx
0eae: 4c a5 0e  -         jmp !loop-
0eb1: 68        -         pla
0eb2: 8d 86 02  -         sta foreground_color
0eb5: 4c d7 0e  -         jmp !no_key+
0eb8: 0d        - memory: .byte RETURN
0eb9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0ec9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0ed5: 0d 00     -         .byte RETURN, NULL
0ed7: 20 9f ff  -         jsr scnkey  // scan keyboard
0eda: 20 e4 ff  -         jsr getin	// put result into A
0edd: f0 f8     -         beq !no_key-
0edf: a2 00     -         ldx #$00
0ee1: bd f0 0e  -         lda msg,x
0ee4: f0 07     -         beq !done+
0ee6: 20 d2 ff  -         jsr kernal_chrout
0ee9: e8        -         inx
0eea: 4c e1 0e  -         jmp !loop-
0eed: 4c f2 0e  -         jmp !done+
0ef0: 0d 00     - newline:.byte RETURN, NULL
0ef2: a2 00     -         ldx #$00
0ef4: 8e 23 40  -         stx TEST_NAME_COUNT
0ef7: 60        -         rts

[Load]
0ef8: ee 23 40  - LOAD_TEST:inc TEST_NAME_COUNT
0efb: ad 86 02  -         lda foreground_color
0efe: 48        -         pha
0eff: a9 0f     -         lda #color
0f01: 8d 86 02  -         sta foreground_color
0f04: a2 00     -         ldx #$00
0f06: bd 19 0f  -         lda msg,x
0f09: f0 07     -         beq !done+
0f0b: 20 d2 ff  -         jsr kernal_chrout
0f0e: e8        -         inx
0f0f: 4c 06 0f  -         jmp !loop-
0f12: 68        -         pla
0f13: 8d 86 02  -         sta foreground_color
0f16: 4c 23 0f  -         jmp !done+
0f19: 20 20     - memory: .fill spacing, spacebar
0f1b: 4c 4f 41 44                                      -         .text name
0f1f: 2e 2e 2e  -         .text "..."
0f22: 00        -         .byte NULL
0f23: 20 58 09  -         jsr SW16
0f26: 15        -         .byte opcode(op, register)
0f27: 21 43     -         .word address.getValue()
0f29: 25        -         .byte opcode($20, register) }
0f2a: 00        -         .byte $00 }
0f2b: ee 21 40  -         inc TEST_COUNT
0f2e: ad 86 02  -         lda foreground_color
0f31: 48        -         pha
0f32: a9 0e     -         lda #color
0f34: 8d 86 02  -         sta foreground_color
0f37: a2 00     -         ldx #$00
0f39: bd 4c 0f  -         lda msg,x
0f3c: f0 07     -         beq !done+
0f3e: 20 d2 ff  -         jsr kernal_chrout
0f41: e8        -         inx
0f42: 4c 39 0f  -         jmp !loop-
0f45: 68        -         pla
0f46: 8d 86 02  -         sta foreground_color
0f49: 4c 52 0f  -         jmp !done+
0f4c: 20        - memory: .byte spacebar
0f4d: 41 43 43  -         .text description
0f50: 3a        -         .text ":"
0f51: 00        -         .byte NULL
0f52: a6 17     -         ldx rl(register.getValue())
0f54: a4 18     -         ldy rh(register.getValue())
0f56: e0 21     -         cpx #<value
0f58: d0 25     -         bne !failed+
0f5a: c0 43     -         cpy #>value
0f5c: d0 21     -         bne !failed+
0f5e: ee 22 40  -         inc TEST_PASS_COUNT
0f61: ad 86 02  -         lda foreground_color
0f64: 48        -         pha
0f65: a9 05     -         lda #color
0f67: 8d 86 02  -         sta foreground_color
0f6a: a2 00     -         ldx #$00
0f6c: bd 1d 40  -         lda msg,x
0f6f: f0 07     -         beq !done+
0f71: 20 d2 ff  -         jsr kernal_chrout
0f74: e8        -         inx
0f75: 4c 6c 0f  -         jmp !loop-
0f78: 68        -         pla
0f79: 8d 86 02  -         sta foreground_color
0f7c: 4c 9a 0f  -         jmp !done+
0f7f: ad 86 02  -         lda foreground_color
0f82: 48        -         pha
0f83: a9 02     -         lda #color
0f85: 8d 86 02  -         sta foreground_color
0f88: a2 00     -         ldx #$00
0f8a: bd 1f 40  -         lda msg,x
0f8d: f0 07     -         beq !done+
0f8f: 20 d2 ff  -         jsr kernal_chrout
0f92: e8        -         inx
0f93: 4c 8a 0f  -         jmp !loop-
0f96: 68        -         pla
0f97: 8d 86 02  -         sta foreground_color
0f9a: a2 00     -         ldx #$00
0f9c: bd ab 0f  -         lda msg,x
0f9f: f0 07     -         beq !done+
0fa1: 20 d2 ff  -         jsr kernal_chrout
0fa4: e8        -         inx
0fa5: 4c 9c 0f  -         jmp !loop-
0fa8: 4c ad 0f  -         jmp !done+
0fab: 0d 00     - memory: .byte RETURN, NULL
0fad: ae 23 40  -         ldx TEST_NAME_COUNT
0fb0: e0 15     -         cpx #TESTS_PER_PAGE
0fb2: d0 5d     -         bne !exit+
0fb4: ad 86 02  -         lda foreground_color
0fb7: 48        -         pha
0fb8: a9 01     -         lda #color
0fba: 8d 86 02  -         sta foreground_color
0fbd: a2 00     -         ldx #$00
0fbf: bd d2 0f  -         lda msg,x
0fc2: f0 07     -         beq !done+
0fc4: 20 d2 ff  -         jsr kernal_chrout
0fc7: e8        -         inx
0fc8: 4c bf 0f  -         jmp !loop-
0fcb: 68        -         pla
0fcc: 8d 86 02  -         sta foreground_color
0fcf: 4c f1 0f  -         jmp !no_key+
0fd2: 0d        - memory: .byte RETURN
0fd3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0fe3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0fef: 0d 00     -         .byte RETURN, NULL
0ff1: 20 9f ff  -         jsr scnkey  // scan keyboard
0ff4: 20 e4 ff  -         jsr getin	// put result into A
0ff7: f0 f8     -         beq !no_key-
0ff9: a2 00     -         ldx #$00
0ffb: bd 0a 10  -         lda msg,x
0ffe: f0 07     -         beq !done+
1000: 20 d2 ff  -         jsr kernal_chrout
1003: e8        -         inx
1004: 4c fb 0f  -         jmp !loop-
1007: 4c 0c 10  -         jmp !done+
100a: 0d 00     - newline:.byte RETURN, NULL
100c: a2 00     -         ldx #$00
100e: 8e 23 40  -         stx TEST_NAME_COUNT
1011: 60        -         rts
1012: ee 23 40  - STORE_TEST:inc TEST_NAME_COUNT
1015: ad 86 02  -         lda foreground_color
1018: 48        -         pha
1019: a9 0f     -         lda #color
101b: 8d 86 02  -         sta foreground_color
101e: a2 00     -         ldx #$00
1020: bd 33 10  -         lda msg,x
1023: f0 07     -         beq !done+
1025: 20 d2 ff  -         jsr kernal_chrout
1028: e8        -         inx
1029: 4c 20 10  -         jmp !loop-
102c: 68        -         pla
102d: 8d 86 02  -         sta foreground_color
1030: 4c 3e 10  -         jmp !done+
1033: 20 20     - memory: .fill spacing, spacebar
1035: 53 54 4f 52 45                                   -         .text name
103a: 2e 2e 2e  -         .text "..."
103d: 00        -         .byte NULL
103e: 20 58 09  -         jsr SW16
1041: 15        -         .byte opcode(op, register)
1042: 34 12     -         .word address.getValue()
1044: 25        -         .byte opcode($20, register) }
1045: 36        -         .byte opcode($30, register) }
1046: 00        -         .byte $00 }
1047: ee 21 40  -         inc TEST_COUNT
104a: ad 86 02  -         lda foreground_color
104d: 48        -         pha
104e: a9 0e     -         lda #color
1050: 8d 86 02  -         sta foreground_color
1053: a2 00     -         ldx #$00
1055: bd 68 10  -         lda msg,x
1058: f0 07     -         beq !done+
105a: 20 d2 ff  -         jsr kernal_chrout
105d: e8        -         inx
105e: 4c 55 10  -         jmp !loop-
1061: 68        -         pla
1062: 8d 86 02  -         sta foreground_color
1065: 4c 70 10  -         jmp !done+
1068: 20        - memory: .byte spacebar
1069: 56 41 4c 55 45                                   -         .text description
106e: 3a        -         .text ":"
106f: 00        -         .byte NULL
1070: a6 23     -         ldx rl(register.getValue())
1072: a4 24     -         ldy rh(register.getValue())
1074: e0 34     -         cpx #<value
1076: d0 25     -         bne !failed+
1078: c0 12     -         cpy #>value
107a: d0 21     -         bne !failed+
107c: ee 22 40  -         inc TEST_PASS_COUNT
107f: ad 86 02  -         lda foreground_color
1082: 48        -         pha
1083: a9 05     -         lda #color
1085: 8d 86 02  -         sta foreground_color
1088: a2 00     -         ldx #$00
108a: bd 1d 40  -         lda msg,x
108d: f0 07     -         beq !done+
108f: 20 d2 ff  -         jsr kernal_chrout
1092: e8        -         inx
1093: 4c 8a 10  -         jmp !loop-
1096: 68        -         pla
1097: 8d 86 02  -         sta foreground_color
109a: 4c b8 10  -         jmp !done+
109d: ad 86 02  -         lda foreground_color
10a0: 48        -         pha
10a1: a9 02     -         lda #color
10a3: 8d 86 02  -         sta foreground_color
10a6: a2 00     -         ldx #$00
10a8: bd 1f 40  -         lda msg,x
10ab: f0 07     -         beq !done+
10ad: 20 d2 ff  -         jsr kernal_chrout
10b0: e8        -         inx
10b1: 4c a8 10  -         jmp !loop-
10b4: 68        -         pla
10b5: 8d 86 02  -         sta foreground_color
10b8: a2 00     -         ldx #$00
10ba: bd c9 10  -         lda msg,x
10bd: f0 07     -         beq !done+
10bf: 20 d2 ff  -         jsr kernal_chrout
10c2: e8        -         inx
10c3: 4c ba 10  -         jmp !loop-
10c6: 4c cb 10  -         jmp !done+
10c9: 0d 00     - memory: .byte RETURN, NULL
10cb: ae 23 40  -         ldx TEST_NAME_COUNT
10ce: e0 15     -         cpx #TESTS_PER_PAGE
10d0: d0 5d     -         bne !exit+
10d2: ad 86 02  -         lda foreground_color
10d5: 48        -         pha
10d6: a9 01     -         lda #color
10d8: 8d 86 02  -         sta foreground_color
10db: a2 00     -         ldx #$00
10dd: bd f0 10  -         lda msg,x
10e0: f0 07     -         beq !done+
10e2: 20 d2 ff  -         jsr kernal_chrout
10e5: e8        -         inx
10e6: 4c dd 10  -         jmp !loop-
10e9: 68        -         pla
10ea: 8d 86 02  -         sta foreground_color
10ed: 4c 0f 11  -         jmp !no_key+
10f0: 0d        - memory: .byte RETURN
10f1: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1101: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
110d: 0d 00     -         .byte RETURN, NULL
110f: 20 9f ff  -         jsr scnkey  // scan keyboard
1112: 20 e4 ff  -         jsr getin	// put result into A
1115: f0 f8     -         beq !no_key-
1117: a2 00     -         ldx #$00
1119: bd 28 11  -         lda msg,x
111c: f0 07     -         beq !done+
111e: 20 d2 ff  -         jsr kernal_chrout
1121: e8        -         inx
1122: 4c 19 11  -         jmp !loop-
1125: 4c 2a 11  -         jmp !done+
1128: 0d 00     - newline:.byte RETURN, NULL
112a: a2 00     -         ldx #$00
112c: 8e 23 40  -         stx TEST_NAME_COUNT
112f: 60        -         rts
1130: ee 23 40  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
1133: ad 86 02  -         lda foreground_color
1136: 48        -         pha
1137: a9 0f     -         lda #color
1139: 8d 86 02  -         sta foreground_color
113c: a2 00     -         ldx #$00
113e: bd 51 11  -         lda msg,x
1141: f0 07     -         beq !done+
1143: 20 d2 ff  -         jsr kernal_chrout
1146: e8        -         inx
1147: 4c 3e 11  -         jmp !loop-
114a: 68        -         pla
114b: 8d 86 02  -         sta foreground_color
114e: 4c 64 11  -         jmp !done+
1151: 20 20     - memory: .fill spacing, spacebar
1153: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
1160: 2e 2e 2e  -         .text "..."
1163: 00        -         .byte NULL
1164: 20 58 09  -         jsr SW16
1167: 15        -         .byte opcode(op, register)
1168: 39 40     -         .word address.getValue()
116a: 45        -         .byte opcode($40, register) }
116b: 00        -         .byte $00 }
116c: ee 21 40  -         inc TEST_COUNT
116f: ad 86 02  -         lda foreground_color
1172: 48        -         pha
1173: a9 0e     -         lda #color
1175: 8d 86 02  -         sta foreground_color
1178: a2 00     -         ldx #$00
117a: bd 8d 11  -         lda msg,x
117d: f0 07     -         beq !done+
117f: 20 d2 ff  -         jsr kernal_chrout
1182: e8        -         inx
1183: 4c 7a 11  -         jmp !loop-
1186: 68        -         pla
1187: 8d 86 02  -         sta foreground_color
118a: 4c 93 11  -         jmp !done+
118d: 20        - memory: .byte spacebar
118e: 41 43 43  -         .text description
1191: 3a        -         .text ":"
1192: 00        -         .byte NULL
1193: a6 17     -         ldx rl(register.getValue())
1195: a4 18     -         ldy rh(register.getValue())
1197: ec 39 40  -         cpx address
119a: d0 21     -         bne !failed+
119c: ee 22 40  -         inc TEST_PASS_COUNT
119f: ad 86 02  -         lda foreground_color
11a2: 48        -         pha
11a3: a9 05     -         lda #color
11a5: 8d 86 02  -         sta foreground_color
11a8: a2 00     -         ldx #$00
11aa: bd 1d 40  -         lda msg,x
11ad: f0 07     -         beq !done+
11af: 20 d2 ff  -         jsr kernal_chrout
11b2: e8        -         inx
11b3: 4c aa 11  -         jmp !loop-
11b6: 68        -         pla
11b7: 8d 86 02  -         sta foreground_color
11ba: 4c d8 11  -         jmp !done+
11bd: ad 86 02  -         lda foreground_color
11c0: 48        -         pha
11c1: a9 02     -         lda #color
11c3: 8d 86 02  -         sta foreground_color
11c6: a2 00     -         ldx #$00
11c8: bd 1f 40  -         lda msg,x
11cb: f0 07     -         beq !done+
11cd: 20 d2 ff  -         jsr kernal_chrout
11d0: e8        -         inx
11d1: 4c c8 11  -         jmp !loop-
11d4: 68        -         pla
11d5: 8d 86 02  -         sta foreground_color
11d8: ee 21 40  -         inc TEST_COUNT
11db: ad 86 02  -         lda foreground_color
11de: 48        -         pha
11df: a9 0e     -         lda #color
11e1: 8d 86 02  -         sta foreground_color
11e4: a2 00     -         ldx #$00
11e6: bd f9 11  -         lda msg,x
11e9: f0 07     -         beq !done+
11eb: 20 d2 ff  -         jsr kernal_chrout
11ee: e8        -         inx
11ef: 4c e6 11  -         jmp !loop-
11f2: 68        -         pla
11f3: 8d 86 02  -         sta foreground_color
11f6: 4c ff 11  -         jmp !done+
11f9: 20        - memory: .byte spacebar
11fa: 52 45 47  -         .text description
11fd: 3a        -         .text ":"
11fe: 00        -         .byte NULL
11ff: a6 21     -         ldx rl(register.getValue())
1201: a4 22     -         ldy rh(register.getValue())
1203: e0 3a     -         cpx #<value
1205: d0 25     -         bne !failed+
1207: c0 40     -         cpy #>value
1209: d0 21     -         bne !failed+
120b: ee 22 40  -         inc TEST_PASS_COUNT
120e: ad 86 02  -         lda foreground_color
1211: 48        -         pha
1212: a9 05     -         lda #color
1214: 8d 86 02  -         sta foreground_color
1217: a2 00     -         ldx #$00
1219: bd 1d 40  -         lda msg,x
121c: f0 07     -         beq !done+
121e: 20 d2 ff  -         jsr kernal_chrout
1221: e8        -         inx
1222: 4c 19 12  -         jmp !loop-
1225: 68        -         pla
1226: 8d 86 02  -         sta foreground_color
1229: 4c 47 12  -         jmp !done+
122c: ad 86 02  -         lda foreground_color
122f: 48        -         pha
1230: a9 02     -         lda #color
1232: 8d 86 02  -         sta foreground_color
1235: a2 00     -         ldx #$00
1237: bd 1f 40  -         lda msg,x
123a: f0 07     -         beq !done+
123c: 20 d2 ff  -         jsr kernal_chrout
123f: e8        -         inx
1240: 4c 37 12  -         jmp !loop-
1243: 68        -         pla
1244: 8d 86 02  -         sta foreground_color
1247: a2 00     -         ldx #$00
1249: bd 58 12  -         lda msg,x
124c: f0 07     -         beq !done+
124e: 20 d2 ff  -         jsr kernal_chrout
1251: e8        -         inx
1252: 4c 49 12  -         jmp !loop-
1255: 4c 5a 12  -         jmp !done+
1258: 0d 00     - memory: .byte RETURN, NULL
125a: ae 23 40  -         ldx TEST_NAME_COUNT
125d: e0 15     -         cpx #TESTS_PER_PAGE
125f: d0 5d     -         bne !exit+
1261: ad 86 02  -         lda foreground_color
1264: 48        -         pha
1265: a9 01     -         lda #color
1267: 8d 86 02  -         sta foreground_color
126a: a2 00     -         ldx #$00
126c: bd 7f 12  -         lda msg,x
126f: f0 07     -         beq !done+
1271: 20 d2 ff  -         jsr kernal_chrout
1274: e8        -         inx
1275: 4c 6c 12  -         jmp !loop-
1278: 68        -         pla
1279: 8d 86 02  -         sta foreground_color
127c: 4c 9e 12  -         jmp !no_key+
127f: 0d        - memory: .byte RETURN
1280: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1290: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
129c: 0d 00     -         .byte RETURN, NULL
129e: 20 9f ff  -         jsr scnkey  // scan keyboard
12a1: 20 e4 ff  -         jsr getin	// put result into A
12a4: f0 f8     -         beq !no_key-
12a6: a2 00     -         ldx #$00
12a8: bd b7 12  -         lda msg,x
12ab: f0 07     -         beq !done+
12ad: 20 d2 ff  -         jsr kernal_chrout
12b0: e8        -         inx
12b1: 4c a8 12  -         jmp !loop-
12b4: 4c b9 12  -         jmp !done+
12b7: 0d 00     - newline:.byte RETURN, NULL
12b9: a2 00     -         ldx #$00
12bb: 8e 23 40  -         stx TEST_NAME_COUNT
12be: 60        -         rts
12bf: ee 23 40  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
12c2: ad 86 02  -         lda foreground_color
12c5: 48        -         pha
12c6: a9 0f     -         lda #color
12c8: 8d 86 02  -         sta foreground_color
12cb: a2 00     -         ldx #$00
12cd: bd e0 12  -         lda msg,x
12d0: f0 07     -         beq !done+
12d2: 20 d2 ff  -         jsr kernal_chrout
12d5: e8        -         inx
12d6: 4c cd 12  -         jmp !loop-
12d9: 68        -         pla
12da: 8d 86 02  -         sta foreground_color
12dd: 4c f4 12  -         jmp !done+
12e0: 20 20     - memory: .fill spacing, spacebar
12e2: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
12f0: 2e 2e 2e  -         .text "..."
12f3: 00        -         .byte NULL
12f4: 20 58 09  -         jsr SW16
12f7: 15        -         .byte opcode(op, register)
12f8: 39 40     -         .word address.getValue()
12fa: 16        -         .byte opcode(op, register)
12fb: 3b 40     -         .word address.getValue()
12fd: 45        -         .byte opcode($40, register) }
12fe: 56        -         .byte opcode($50, register) }
12ff: 00        -         .byte $00 }
1300: ee 21 40  -         inc TEST_COUNT
1303: ad 86 02  -         lda foreground_color
1306: 48        -         pha
1307: a9 0e     -         lda #color
1309: 8d 86 02  -         sta foreground_color
130c: a2 00     -         ldx #$00
130e: bd 21 13  -         lda msg,x
1311: f0 07     -         beq !done+
1313: 20 d2 ff  -         jsr kernal_chrout
1316: e8        -         inx
1317: 4c 0e 13  -         jmp !loop-
131a: 68        -         pla
131b: 8d 86 02  -         sta foreground_color
131e: 4c 27 13  -         jmp !done+
1321: 20        - memory: .byte spacebar
1322: 4d 45 4d  -         .text description
1325: 3a        -         .text ":"
1326: 00        -         .byte NULL
1327: a2 ff     -         ldx #$ff
1329: e8        -         inx
132a: e0 01     -         cpx #size
132c: f0 0b     -         beq !success+
132e: bd 39 40  -         lda source,x
1331: dd 3b 40  -         cmp dest,x
1334: f0 f3     -         beq !loop-
1336: 4c 5a 13  -         jmp !failed+
1339: ee 22 40  -         inc TEST_PASS_COUNT
133c: ad 86 02  -         lda foreground_color
133f: 48        -         pha
1340: a9 05     -         lda #color
1342: 8d 86 02  -         sta foreground_color
1345: a2 00     -         ldx #$00
1347: bd 1d 40  -         lda msg,x
134a: f0 07     -         beq !done+
134c: 20 d2 ff  -         jsr kernal_chrout
134f: e8        -         inx
1350: 4c 47 13  -         jmp !loop-
1353: 68        -         pla
1354: 8d 86 02  -         sta foreground_color
1357: 4c 75 13  -         jmp !done+
135a: ad 86 02  -         lda foreground_color
135d: 48        -         pha
135e: a9 02     -         lda #color
1360: 8d 86 02  -         sta foreground_color
1363: a2 00     -         ldx #$00
1365: bd 1f 40  -         lda msg,x
1368: f0 07     -         beq !done+
136a: 20 d2 ff  -         jsr kernal_chrout
136d: e8        -         inx
136e: 4c 65 13  -         jmp !loop-
1371: 68        -         pla
1372: 8d 86 02  -         sta foreground_color
1375: ee 21 40  -         inc TEST_COUNT
1378: ad 86 02  -         lda foreground_color
137b: 48        -         pha
137c: a9 0e     -         lda #color
137e: 8d 86 02  -         sta foreground_color
1381: a2 00     -         ldx #$00
1383: bd 96 13  -         lda msg,x
1386: f0 07     -         beq !done+
1388: 20 d2 ff  -         jsr kernal_chrout
138b: e8        -         inx
138c: 4c 83 13  -         jmp !loop-
138f: 68        -         pla
1390: 8d 86 02  -         sta foreground_color
1393: 4c 9c 13  -         jmp !done+
1396: 20        - memory: .byte spacebar
1397: 53 52 43  -         .text description
139a: 3a        -         .text ":"
139b: 00        -         .byte NULL
139c: a6 21     -         ldx rl(register.getValue())
139e: a4 22     -         ldy rh(register.getValue())
13a0: e0 3a     -         cpx #<value
13a2: d0 25     -         bne !failed+
13a4: c0 40     -         cpy #>value
13a6: d0 21     -         bne !failed+
13a8: ee 22 40  -         inc TEST_PASS_COUNT
13ab: ad 86 02  -         lda foreground_color
13ae: 48        -         pha
13af: a9 05     -         lda #color
13b1: 8d 86 02  -         sta foreground_color
13b4: a2 00     -         ldx #$00
13b6: bd 1d 40  -         lda msg,x
13b9: f0 07     -         beq !done+
13bb: 20 d2 ff  -         jsr kernal_chrout
13be: e8        -         inx
13bf: 4c b6 13  -         jmp !loop-
13c2: 68        -         pla
13c3: 8d 86 02  -         sta foreground_color
13c6: 4c e4 13  -         jmp !done+
13c9: ad 86 02  -         lda foreground_color
13cc: 48        -         pha
13cd: a9 02     -         lda #color
13cf: 8d 86 02  -         sta foreground_color
13d2: a2 00     -         ldx #$00
13d4: bd 1f 40  -         lda msg,x
13d7: f0 07     -         beq !done+
13d9: 20 d2 ff  -         jsr kernal_chrout
13dc: e8        -         inx
13dd: 4c d4 13  -         jmp !loop-
13e0: 68        -         pla
13e1: 8d 86 02  -         sta foreground_color
13e4: ee 21 40  -         inc TEST_COUNT
13e7: ad 86 02  -         lda foreground_color
13ea: 48        -         pha
13eb: a9 0e     -         lda #color
13ed: 8d 86 02  -         sta foreground_color
13f0: a2 00     -         ldx #$00
13f2: bd 05 14  -         lda msg,x
13f5: f0 07     -         beq !done+
13f7: 20 d2 ff  -         jsr kernal_chrout
13fa: e8        -         inx
13fb: 4c f2 13  -         jmp !loop-
13fe: 68        -         pla
13ff: 8d 86 02  -         sta foreground_color
1402: 4c 0b 14  -         jmp !done+
1405: 20        - memory: .byte spacebar
1406: 44 53 54  -         .text description
1409: 3a        -         .text ":"
140a: 00        -         .byte NULL
140b: a6 23     -         ldx rl(register.getValue())
140d: a4 24     -         ldy rh(register.getValue())
140f: e0 3c     -         cpx #<value
1411: d0 25     -         bne !failed+
1413: c0 40     -         cpy #>value
1415: d0 21     -         bne !failed+
1417: ee 22 40  -         inc TEST_PASS_COUNT
141a: ad 86 02  -         lda foreground_color
141d: 48        -         pha
141e: a9 05     -         lda #color
1420: 8d 86 02  -         sta foreground_color
1423: a2 00     -         ldx #$00
1425: bd 1d 40  -         lda msg,x
1428: f0 07     -         beq !done+
142a: 20 d2 ff  -         jsr kernal_chrout
142d: e8        -         inx
142e: 4c 25 14  -         jmp !loop-
1431: 68        -         pla
1432: 8d 86 02  -         sta foreground_color
1435: 4c 53 14  -         jmp !done+
1438: ad 86 02  -         lda foreground_color
143b: 48        -         pha
143c: a9 02     -         lda #color
143e: 8d 86 02  -         sta foreground_color
1441: a2 00     -         ldx #$00
1443: bd 1f 40  -         lda msg,x
1446: f0 07     -         beq !done+
1448: 20 d2 ff  -         jsr kernal_chrout
144b: e8        -         inx
144c: 4c 43 14  -         jmp !loop-
144f: 68        -         pla
1450: 8d 86 02  -         sta foreground_color
1453: a2 00     -         ldx #$00
1455: bd 64 14  -         lda msg,x
1458: f0 07     -         beq !done+
145a: 20 d2 ff  -         jsr kernal_chrout
145d: e8        -         inx
145e: 4c 55 14  -         jmp !loop-
1461: 4c 66 14  -         jmp !done+
1464: 0d 00     - memory: .byte RETURN, NULL
1466: ae 23 40  -         ldx TEST_NAME_COUNT
1469: e0 15     -         cpx #TESTS_PER_PAGE
146b: d0 5d     -         bne !exit+
146d: ad 86 02  -         lda foreground_color
1470: 48        -         pha
1471: a9 01     -         lda #color
1473: 8d 86 02  -         sta foreground_color
1476: a2 00     -         ldx #$00
1478: bd 8b 14  -         lda msg,x
147b: f0 07     -         beq !done+
147d: 20 d2 ff  -         jsr kernal_chrout
1480: e8        -         inx
1481: 4c 78 14  -         jmp !loop-
1484: 68        -         pla
1485: 8d 86 02  -         sta foreground_color
1488: 4c aa 14  -         jmp !no_key+
148b: 0d        - memory: .byte RETURN
148c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
149c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
14a8: 0d 00     -         .byte RETURN, NULL
14aa: 20 9f ff  -         jsr scnkey  // scan keyboard
14ad: 20 e4 ff  -         jsr getin	// put result into A
14b0: f0 f8     -         beq !no_key-
14b2: a2 00     -         ldx #$00
14b4: bd c3 14  -         lda msg,x
14b7: f0 07     -         beq !done+
14b9: 20 d2 ff  -         jsr kernal_chrout
14bc: e8        -         inx
14bd: 4c b4 14  -         jmp !loop-
14c0: 4c c5 14  -         jmp !done+
14c3: 0d 00     - newline:.byte RETURN, NULL
14c5: a2 00     -         ldx #$00
14c7: 8e 23 40  -         stx TEST_NAME_COUNT
14ca: 60        -         rts
14cb: ee 23 40  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
14ce: ad 86 02  -         lda foreground_color
14d1: 48        -         pha
14d2: a9 0f     -         lda #color
14d4: 8d 86 02  -         sta foreground_color
14d7: a2 00     -         ldx #$00
14d9: bd ec 14  -         lda msg,x
14dc: f0 07     -         beq !done+
14de: 20 d2 ff  -         jsr kernal_chrout
14e1: e8        -         inx
14e2: 4c d9 14  -         jmp !loop-
14e5: 68        -         pla
14e6: 8d 86 02  -         sta foreground_color
14e9: 4c 06 15  -         jmp !done+
14ec: 20 20     - memory: .fill spacing, spacebar
14ee: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
14fe: 52 45 43 54                                     
1502: 2e 2e 2e  -         .text "..."
1505: 00        -         .byte NULL
1506: 20 58 09  -         jsr SW16
1509: 15        -         .byte opcode(op, register)
150a: 39 40     -         .word address.getValue()
150c: 65        -         .byte opcode($60, register) }
150d: 00        -         .byte $00 }
150e: ee 21 40  -         inc TEST_COUNT
1511: ad 86 02  -         lda foreground_color
1514: 48        -         pha
1515: a9 0e     -         lda #color
1517: 8d 86 02  -         sta foreground_color
151a: a2 00     -         ldx #$00
151c: bd 2f 15  -         lda msg,x
151f: f0 07     -         beq !done+
1521: 20 d2 ff  -         jsr kernal_chrout
1524: e8        -         inx
1525: 4c 1c 15  -         jmp !loop-
1528: 68        -         pla
1529: 8d 86 02  -         sta foreground_color
152c: 4c 35 15  -         jmp !done+
152f: 20        - memory: .byte spacebar
1530: 41 43 43  -         .text description
1533: 3a        -         .text ":"
1534: 00        -         .byte NULL
1535: a6 17     -         ldx rl(register.getValue())
1537: a4 18     -         ldy rh(register.getValue())
1539: ec 39 40  -         cpx address
153c: d0 26     -         bne !failed+
153e: cc 3a 40  -         cpy address+1
1541: d0 21     -         bne !failed+
1543: ee 22 40  -         inc TEST_PASS_COUNT
1546: ad 86 02  -         lda foreground_color
1549: 48        -         pha
154a: a9 05     -         lda #color
154c: 8d 86 02  -         sta foreground_color
154f: a2 00     -         ldx #$00
1551: bd 1d 40  -         lda msg,x
1554: f0 07     -         beq !done+
1556: 20 d2 ff  -         jsr kernal_chrout
1559: e8        -         inx
155a: 4c 51 15  -         jmp !loop-
155d: 68        -         pla
155e: 8d 86 02  -         sta foreground_color
1561: 4c 7f 15  -         jmp !done+
1564: ad 86 02  -         lda foreground_color
1567: 48        -         pha
1568: a9 02     -         lda #color
156a: 8d 86 02  -         sta foreground_color
156d: a2 00     -         ldx #$00
156f: bd 1f 40  -         lda msg,x
1572: f0 07     -         beq !done+
1574: 20 d2 ff  -         jsr kernal_chrout
1577: e8        -         inx
1578: 4c 6f 15  -         jmp !loop-
157b: 68        -         pla
157c: 8d 86 02  -         sta foreground_color
157f: ee 21 40  -         inc TEST_COUNT
1582: ad 86 02  -         lda foreground_color
1585: 48        -         pha
1586: a9 0e     -         lda #color
1588: 8d 86 02  -         sta foreground_color
158b: a2 00     -         ldx #$00
158d: bd a0 15  -         lda msg,x
1590: f0 07     -         beq !done+
1592: 20 d2 ff  -         jsr kernal_chrout
1595: e8        -         inx
1596: 4c 8d 15  -         jmp !loop-
1599: 68        -         pla
159a: 8d 86 02  -         sta foreground_color
159d: 4c a5 15  -         jmp !done+
15a0: 20        - memory: .byte spacebar
15a1: 2b 32     -         .text description
15a3: 3a        -         .text ":"
15a4: 00        -         .byte NULL
15a5: a6 21     -         ldx rl(register.getValue())
15a7: a4 22     -         ldy rh(register.getValue())
15a9: e0 3b     -         cpx #<value
15ab: d0 25     -         bne !failed+
15ad: c0 40     -         cpy #>value
15af: d0 21     -         bne !failed+
15b1: ee 22 40  -         inc TEST_PASS_COUNT
15b4: ad 86 02  -         lda foreground_color
15b7: 48        -         pha
15b8: a9 05     -         lda #color
15ba: 8d 86 02  -         sta foreground_color
15bd: a2 00     -         ldx #$00
15bf: bd 1d 40  -         lda msg,x
15c2: f0 07     -         beq !done+
15c4: 20 d2 ff  -         jsr kernal_chrout
15c7: e8        -         inx
15c8: 4c bf 15  -         jmp !loop-
15cb: 68        -         pla
15cc: 8d 86 02  -         sta foreground_color
15cf: 4c ed 15  -         jmp !done+
15d2: ad 86 02  -         lda foreground_color
15d5: 48        -         pha
15d6: a9 02     -         lda #color
15d8: 8d 86 02  -         sta foreground_color
15db: a2 00     -         ldx #$00
15dd: bd 1f 40  -         lda msg,x
15e0: f0 07     -         beq !done+
15e2: 20 d2 ff  -         jsr kernal_chrout
15e5: e8        -         inx
15e6: 4c dd 15  -         jmp !loop-
15e9: 68        -         pla
15ea: 8d 86 02  -         sta foreground_color
15ed: a2 00     -         ldx #$00
15ef: bd fe 15  -         lda msg,x
15f2: f0 07     -         beq !done+
15f4: 20 d2 ff  -         jsr kernal_chrout
15f7: e8        -         inx
15f8: 4c ef 15  -         jmp !loop-
15fb: 4c 00 16  -         jmp !done+
15fe: 0d 00     - memory: .byte RETURN, NULL
1600: ae 23 40  -         ldx TEST_NAME_COUNT
1603: e0 15     -         cpx #TESTS_PER_PAGE
1605: d0 5d     -         bne !exit+
1607: ad 86 02  -         lda foreground_color
160a: 48        -         pha
160b: a9 01     -         lda #color
160d: 8d 86 02  -         sta foreground_color
1610: a2 00     -         ldx #$00
1612: bd 25 16  -         lda msg,x
1615: f0 07     -         beq !done+
1617: 20 d2 ff  -         jsr kernal_chrout
161a: e8        -         inx
161b: 4c 12 16  -         jmp !loop-
161e: 68        -         pla
161f: 8d 86 02  -         sta foreground_color
1622: 4c 44 16  -         jmp !no_key+
1625: 0d        - memory: .byte RETURN
1626: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1636: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1642: 0d 00     -         .byte RETURN, NULL
1644: 20 9f ff  -         jsr scnkey  // scan keyboard
1647: 20 e4 ff  -         jsr getin	// put result into A
164a: f0 f8     -         beq !no_key-
164c: a2 00     -         ldx #$00
164e: bd 5d 16  -         lda msg,x
1651: f0 07     -         beq !done+
1653: 20 d2 ff  -         jsr kernal_chrout
1656: e8        -         inx
1657: 4c 4e 16  -         jmp !loop-
165a: 4c 5f 16  -         jmp !done+
165d: 0d 00     - newline:.byte RETURN, NULL
165f: a2 00     -         ldx #$00
1661: 8e 23 40  -         stx TEST_NAME_COUNT
1664: 60        -         rts
1665: ee 23 40  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
1668: ad 86 02  -         lda foreground_color
166b: 48        -         pha
166c: a9 0f     -         lda #color
166e: 8d 86 02  -         sta foreground_color
1671: a2 00     -         ldx #$00
1673: bd 86 16  -         lda msg,x
1676: f0 07     -         beq !done+
1678: 20 d2 ff  -         jsr kernal_chrout
167b: e8        -         inx
167c: 4c 73 16  -         jmp !loop-
167f: 68        -         pla
1680: 8d 86 02  -         sta foreground_color
1683: 4c 99 16  -         jmp !done+
1686: 20 20     - memory: .fill spacing, spacebar
1688: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
1695: 2e 2e 2e  -         .text "..."
1698: 00        -         .byte NULL
1699: 20 58 09  -         jsr SW16
169c: 15        -         .byte opcode(op, register)
169d: 39 40     -         .word address.getValue()
169f: 16        -         .byte opcode(op, register)
16a0: 3b 40     -         .word address.getValue()
16a2: 65        -         .byte opcode($60, register) }
16a3: 76        -         .byte opcode($70, register) }
16a4: 00        -         .byte $00 }
16a5: ee 21 40  -         inc TEST_COUNT
16a8: ad 86 02  -         lda foreground_color
16ab: 48        -         pha
16ac: a9 0e     -         lda #color
16ae: 8d 86 02  -         sta foreground_color
16b1: a2 00     -         ldx #$00
16b3: bd c6 16  -         lda msg,x
16b6: f0 07     -         beq !done+
16b8: 20 d2 ff  -         jsr kernal_chrout
16bb: e8        -         inx
16bc: 4c b3 16  -         jmp !loop-
16bf: 68        -         pla
16c0: 8d 86 02  -         sta foreground_color
16c3: 4c cc 16  -         jmp !done+
16c6: 20        - memory: .byte spacebar
16c7: 4d 45 4d  -         .text description
16ca: 3a        -         .text ":"
16cb: 00        -         .byte NULL
16cc: a2 ff     -         ldx #$ff
16ce: e8        -         inx
16cf: e0 02     -         cpx #size
16d1: f0 0b     -         beq !success+
16d3: bd 39 40  -         lda source,x
16d6: dd 3b 40  -         cmp dest,x
16d9: f0 f3     -         beq !loop-
16db: 4c ff 16  -         jmp !failed+
16de: ee 22 40  -         inc TEST_PASS_COUNT
16e1: ad 86 02  -         lda foreground_color
16e4: 48        -         pha
16e5: a9 05     -         lda #color
16e7: 8d 86 02  -         sta foreground_color
16ea: a2 00     -         ldx #$00
16ec: bd 1d 40  -         lda msg,x
16ef: f0 07     -         beq !done+
16f1: 20 d2 ff  -         jsr kernal_chrout
16f4: e8        -         inx
16f5: 4c ec 16  -         jmp !loop-
16f8: 68        -         pla
16f9: 8d 86 02  -         sta foreground_color
16fc: 4c 1a 17  -         jmp !done+
16ff: ad 86 02  -         lda foreground_color
1702: 48        -         pha
1703: a9 02     -         lda #color
1705: 8d 86 02  -         sta foreground_color
1708: a2 00     -         ldx #$00
170a: bd 1f 40  -         lda msg,x
170d: f0 07     -         beq !done+
170f: 20 d2 ff  -         jsr kernal_chrout
1712: e8        -         inx
1713: 4c 0a 17  -         jmp !loop-
1716: 68        -         pla
1717: 8d 86 02  -         sta foreground_color
171a: ee 21 40  -         inc TEST_COUNT
171d: ad 86 02  -         lda foreground_color
1720: 48        -         pha
1721: a9 0e     -         lda #color
1723: 8d 86 02  -         sta foreground_color
1726: a2 00     -         ldx #$00
1728: bd 3b 17  -         lda msg,x
172b: f0 07     -         beq !done+
172d: 20 d2 ff  -         jsr kernal_chrout
1730: e8        -         inx
1731: 4c 28 17  -         jmp !loop-
1734: 68        -         pla
1735: 8d 86 02  -         sta foreground_color
1738: 4c 41 17  -         jmp !done+
173b: 20        - memory: .byte spacebar
173c: 53 2b 32  -         .text description
173f: 3a        -         .text ":"
1740: 00        -         .byte NULL
1741: a6 21     -         ldx rl(register.getValue())
1743: a4 22     -         ldy rh(register.getValue())
1745: e0 3b     -         cpx #<value
1747: d0 25     -         bne !failed+
1749: c0 40     -         cpy #>value
174b: d0 21     -         bne !failed+
174d: ee 22 40  -         inc TEST_PASS_COUNT
1750: ad 86 02  -         lda foreground_color
1753: 48        -         pha
1754: a9 05     -         lda #color
1756: 8d 86 02  -         sta foreground_color
1759: a2 00     -         ldx #$00
175b: bd 1d 40  -         lda msg,x
175e: f0 07     -         beq !done+
1760: 20 d2 ff  -         jsr kernal_chrout
1763: e8        -         inx
1764: 4c 5b 17  -         jmp !loop-
1767: 68        -         pla
1768: 8d 86 02  -         sta foreground_color
176b: 4c 89 17  -         jmp !done+
176e: ad 86 02  -         lda foreground_color
1771: 48        -         pha
1772: a9 02     -         lda #color
1774: 8d 86 02  -         sta foreground_color
1777: a2 00     -         ldx #$00
1779: bd 1f 40  -         lda msg,x
177c: f0 07     -         beq !done+
177e: 20 d2 ff  -         jsr kernal_chrout
1781: e8        -         inx
1782: 4c 79 17  -         jmp !loop-
1785: 68        -         pla
1786: 8d 86 02  -         sta foreground_color
1789: ee 21 40  -         inc TEST_COUNT
178c: ad 86 02  -         lda foreground_color
178f: 48        -         pha
1790: a9 0e     -         lda #color
1792: 8d 86 02  -         sta foreground_color
1795: a2 00     -         ldx #$00
1797: bd aa 17  -         lda msg,x
179a: f0 07     -         beq !done+
179c: 20 d2 ff  -         jsr kernal_chrout
179f: e8        -         inx
17a0: 4c 97 17  -         jmp !loop-
17a3: 68        -         pla
17a4: 8d 86 02  -         sta foreground_color
17a7: 4c b0 17  -         jmp !done+
17aa: 20        - memory: .byte spacebar
17ab: 44 2b 32  -         .text description
17ae: 3a        -         .text ":"
17af: 00        -         .byte NULL
17b0: a6 23     -         ldx rl(register.getValue())
17b2: a4 24     -         ldy rh(register.getValue())
17b4: e0 3d     -         cpx #<value
17b6: d0 25     -         bne !failed+
17b8: c0 40     -         cpy #>value
17ba: d0 21     -         bne !failed+
17bc: ee 22 40  -         inc TEST_PASS_COUNT
17bf: ad 86 02  -         lda foreground_color
17c2: 48        -         pha
17c3: a9 05     -         lda #color
17c5: 8d 86 02  -         sta foreground_color
17c8: a2 00     -         ldx #$00
17ca: bd 1d 40  -         lda msg,x
17cd: f0 07     -         beq !done+
17cf: 20 d2 ff  -         jsr kernal_chrout
17d2: e8        -         inx
17d3: 4c ca 17  -         jmp !loop-
17d6: 68        -         pla
17d7: 8d 86 02  -         sta foreground_color
17da: 4c f8 17  -         jmp !done+
17dd: ad 86 02  -         lda foreground_color
17e0: 48        -         pha
17e1: a9 02     -         lda #color
17e3: 8d 86 02  -         sta foreground_color
17e6: a2 00     -         ldx #$00
17e8: bd 1f 40  -         lda msg,x
17eb: f0 07     -         beq !done+
17ed: 20 d2 ff  -         jsr kernal_chrout
17f0: e8        -         inx
17f1: 4c e8 17  -         jmp !loop-
17f4: 68        -         pla
17f5: 8d 86 02  -         sta foreground_color
17f8: a2 00     -         ldx #$00
17fa: bd 09 18  -         lda msg,x
17fd: f0 07     -         beq !done+
17ff: 20 d2 ff  -         jsr kernal_chrout
1802: e8        -         inx
1803: 4c fa 17  -         jmp !loop-
1806: 4c 0b 18  -         jmp !done+
1809: 0d 00     - memory: .byte RETURN, NULL
180b: ae 23 40  -         ldx TEST_NAME_COUNT
180e: e0 15     -         cpx #TESTS_PER_PAGE
1810: d0 5d     -         bne !exit+
1812: ad 86 02  -         lda foreground_color
1815: 48        -         pha
1816: a9 01     -         lda #color
1818: 8d 86 02  -         sta foreground_color
181b: a2 00     -         ldx #$00
181d: bd 30 18  -         lda msg,x
1820: f0 07     -         beq !done+
1822: 20 d2 ff  -         jsr kernal_chrout
1825: e8        -         inx
1826: 4c 1d 18  -         jmp !loop-
1829: 68        -         pla
182a: 8d 86 02  -         sta foreground_color
182d: 4c 4f 18  -         jmp !no_key+
1830: 0d        - memory: .byte RETURN
1831: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1841: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
184d: 0d 00     -         .byte RETURN, NULL
184f: 20 9f ff  -         jsr scnkey  // scan keyboard
1852: 20 e4 ff  -         jsr getin	// put result into A
1855: f0 f8     -         beq !no_key-
1857: a2 00     -         ldx #$00
1859: bd 68 18  -         lda msg,x
185c: f0 07     -         beq !done+
185e: 20 d2 ff  -         jsr kernal_chrout
1861: e8        -         inx
1862: 4c 59 18  -         jmp !loop-
1865: 4c 6a 18  -         jmp !done+
1868: 0d 00     - newline:.byte RETURN, NULL
186a: a2 00     -         ldx #$00
186c: 8e 23 40  -         stx TEST_NAME_COUNT
186f: 60        -         rts
1870: ee 23 40  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1873: ad 86 02  -         lda foreground_color
1876: 48        -         pha
1877: a9 0f     -         lda #color
1879: 8d 86 02  -         sta foreground_color
187c: a2 00     -         ldx #$00
187e: bd 91 18  -         lda msg,x
1881: f0 07     -         beq !done+
1883: 20 d2 ff  -         jsr kernal_chrout
1886: e8        -         inx
1887: 4c 7e 18  -         jmp !loop-
188a: 68        -         pla
188b: 8d 86 02  -         sta foreground_color
188e: 4c a5 18  -         jmp !done+
1891: 20 20     - memory: .fill spacing, spacebar
1893: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
18a1: 2e 2e 2e  -         .text "..."
18a4: 00        -         .byte NULL
18a5: 20 58 09  -         jsr SW16
18a8: 15        -         .byte opcode(op, register)
18a9: 5f 40     -         .word address.getValue()
18ab: 10        -         .byte opcode(op, register)
18ac: 04 00     -         .word address.getValue()
18ae: 55        -         .byte opcode($50, register) }
18af: 0d        -         .byte $0d
18b0: 19        -         .byte >(address.getValue()-1)
18b1: 44        -         .byte <(address.getValue()-1)
18b2: 10        -         .byte opcode(op, register)
18b3: 05 00     -         .word address.getValue()
18b5: 55        -         .byte opcode($50, register) }
18b6: 0d        -         .byte $0d
18b7: 19        -         .byte >(address.getValue()-1)
18b8: af        -         .byte <(address.getValue()-1)
18b9: 10        -         .byte opcode(op, register)
18ba: 06 00     -         .word address.getValue()
18bc: 55        -         .byte opcode($50, register) }
18bd: 0d        -         .byte $0d
18be: 1a        -         .byte >(address.getValue()-1)
18bf: 1a        -         .byte <(address.getValue()-1)
18c0: 85        -         .byte opcode($80, register) }
18c1: 0d        -         .byte $0d
18c2: 1a        -         .byte >(address.getValue()-1)
18c3: 85        -         .byte <(address.getValue()-1)
18c4: 85        -         .byte opcode($80, register) }
18c5: 0d        -         .byte $0d
18c6: 1b        -         .byte >(address.getValue()-1)
18c7: a0        -         .byte <(address.getValue()-1)
18c8: 85        -         .byte opcode($80, register) }
18c9: 0d        -         .byte $0d
18ca: 1c        -         .byte >(address.getValue()-1)
18cb: 0f        -         .byte <(address.getValue()-1)
18cc: 00        -         .byte $00 }
18cd: a2 00     -         ldx #$00
18cf: bd de 18  -         lda msg,x
18d2: f0 07     -         beq !done+
18d4: 20 d2 ff  -         jsr kernal_chrout
18d7: e8        -         inx
18d8: 4c cf 18  -         jmp !loop-
18db: 4c e0 18  -         jmp !done+
18de: 0d 00     - memory: .byte RETURN, NULL
18e0: ae 23 40  -         ldx TEST_NAME_COUNT
18e3: e0 15     -         cpx #TESTS_PER_PAGE
18e5: d0 5d     -         bne !exit+
18e7: ad 86 02  -         lda foreground_color
18ea: 48        -         pha
18eb: a9 01     -         lda #color
18ed: 8d 86 02  -         sta foreground_color
18f0: a2 00     -         ldx #$00
18f2: bd 05 19  -         lda msg,x
18f5: f0 07     -         beq !done+
18f7: 20 d2 ff  -         jsr kernal_chrout
18fa: e8        -         inx
18fb: 4c f2 18  -         jmp !loop-
18fe: 68        -         pla
18ff: 8d 86 02  -         sta foreground_color
1902: 4c 24 19  -         jmp !no_key+
1905: 0d        - memory: .byte RETURN
1906: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1916: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1922: 0d 00     -         .byte RETURN, NULL
1924: 20 9f ff  -         jsr scnkey  // scan keyboard
1927: 20 e4 ff  -         jsr getin	// put result into A
192a: f0 f8     -         beq !no_key-
192c: a2 00     -         ldx #$00
192e: bd 3d 19  -         lda msg,x
1931: f0 07     -         beq !done+
1933: 20 d2 ff  -         jsr kernal_chrout
1936: e8        -         inx
1937: 4c 2e 19  -         jmp !loop-
193a: 4c 3f 19  -         jmp !done+
193d: 0d 00     - newline:.byte RETURN, NULL
193f: a2 00     -         ldx #$00
1941: 8e 23 40  -         stx TEST_NAME_COUNT
1944: 60        -         rts
1945: ee 21 40  -         inc TEST_COUNT
1948: ad 86 02  -         lda foreground_color
194b: 48        -         pha
194c: a9 0e     -         lda #color
194e: 8d 86 02  -         sta foreground_color
1951: a2 00     -         ldx #$00
1953: bd 66 19  -         lda msg,x
1956: f0 07     -         beq !done+
1958: 20 d2 ff  -         jsr kernal_chrout
195b: e8        -         inx
195c: 4c 53 19  -         jmp !loop-
195f: 68        -         pla
1960: 8d 86 02  -         sta foreground_color
1963: 4c 6a 19  -         jmp !done+
1966: 20        - memory: .byte spacebar
1967: 31        -         .text description
1968: 3a        -         .text ":"
1969: 00        -         .byte NULL
196a: a6 17     -         ldx rl(register.getValue())
196c: a4 18     -         ldy rh(register.getValue())
196e: ec 5f 40  -         cpx address
1971: d0 21     -         bne !failed+
1973: ee 22 40  -         inc TEST_PASS_COUNT
1976: ad 86 02  -         lda foreground_color
1979: 48        -         pha
197a: a9 05     -         lda #color
197c: 8d 86 02  -         sta foreground_color
197f: a2 00     -         ldx #$00
1981: bd 1d 40  -         lda msg,x
1984: f0 07     -         beq !done+
1986: 20 d2 ff  -         jsr kernal_chrout
1989: e8        -         inx
198a: 4c 81 19  -         jmp !loop-
198d: 68        -         pla
198e: 8d 86 02  -         sta foreground_color
1991: 4c af 19  -         jmp !done+
1994: ad 86 02  -         lda foreground_color
1997: 48        -         pha
1998: a9 02     -         lda #color
199a: 8d 86 02  -         sta foreground_color
199d: a2 00     -         ldx #$00
199f: bd 1f 40  -         lda msg,x
19a2: f0 07     -         beq !done+
19a4: 20 d2 ff  -         jsr kernal_chrout
19a7: e8        -         inx
19a8: 4c 9f 19  -         jmp !loop-
19ab: 68        -         pla
19ac: 8d 86 02  -         sta foreground_color
19af: 60        -         rts
19b0: ee 21 40  -         inc TEST_COUNT
19b3: ad 86 02  -         lda foreground_color
19b6: 48        -         pha
19b7: a9 0e     -         lda #color
19b9: 8d 86 02  -         sta foreground_color
19bc: a2 00     -         ldx #$00
19be: bd d1 19  -         lda msg,x
19c1: f0 07     -         beq !done+
19c3: 20 d2 ff  -         jsr kernal_chrout
19c6: e8        -         inx
19c7: 4c be 19  -         jmp !loop-
19ca: 68        -         pla
19cb: 8d 86 02  -         sta foreground_color
19ce: 4c d5 19  -         jmp !done+
19d1: 20        - memory: .byte spacebar
19d2: 32        -         .text description
19d3: 3a        -         .text ":"
19d4: 00        -         .byte NULL
19d5: a6 17     -         ldx rl(register.getValue())
19d7: a4 18     -         ldy rh(register.getValue())
19d9: ec 60 40  -         cpx address
19dc: d0 21     -         bne !failed+
19de: ee 22 40  -         inc TEST_PASS_COUNT
19e1: ad 86 02  -         lda foreground_color
19e4: 48        -         pha
19e5: a9 05     -         lda #color
19e7: 8d 86 02  -         sta foreground_color
19ea: a2 00     -         ldx #$00
19ec: bd 1d 40  -         lda msg,x
19ef: f0 07     -         beq !done+
19f1: 20 d2 ff  -         jsr kernal_chrout
19f4: e8        -         inx
19f5: 4c ec 19  -         jmp !loop-
19f8: 68        -         pla
19f9: 8d 86 02  -         sta foreground_color
19fc: 4c 1a 1a  -         jmp !done+
19ff: ad 86 02  -         lda foreground_color
1a02: 48        -         pha
1a03: a9 02     -         lda #color
1a05: 8d 86 02  -         sta foreground_color
1a08: a2 00     -         ldx #$00
1a0a: bd 1f 40  -         lda msg,x
1a0d: f0 07     -         beq !done+
1a0f: 20 d2 ff  -         jsr kernal_chrout
1a12: e8        -         inx
1a13: 4c 0a 1a  -         jmp !loop-
1a16: 68        -         pla
1a17: 8d 86 02  -         sta foreground_color
1a1a: 60        -         rts
1a1b: ee 21 40  -         inc TEST_COUNT
1a1e: ad 86 02  -         lda foreground_color
1a21: 48        -         pha
1a22: a9 0e     -         lda #color
1a24: 8d 86 02  -         sta foreground_color
1a27: a2 00     -         ldx #$00
1a29: bd 3c 1a  -         lda msg,x
1a2c: f0 07     -         beq !done+
1a2e: 20 d2 ff  -         jsr kernal_chrout
1a31: e8        -         inx
1a32: 4c 29 1a  -         jmp !loop-
1a35: 68        -         pla
1a36: 8d 86 02  -         sta foreground_color
1a39: 4c 40 1a  -         jmp !done+
1a3c: 20        - memory: .byte spacebar
1a3d: 33        -         .text description
1a3e: 3a        -         .text ":"
1a3f: 00        -         .byte NULL
1a40: a6 17     -         ldx rl(register.getValue())
1a42: a4 18     -         ldy rh(register.getValue())
1a44: ec 61 40  -         cpx address
1a47: d0 21     -         bne !failed+
1a49: ee 22 40  -         inc TEST_PASS_COUNT
1a4c: ad 86 02  -         lda foreground_color
1a4f: 48        -         pha
1a50: a9 05     -         lda #color
1a52: 8d 86 02  -         sta foreground_color
1a55: a2 00     -         ldx #$00
1a57: bd 1d 40  -         lda msg,x
1a5a: f0 07     -         beq !done+
1a5c: 20 d2 ff  -         jsr kernal_chrout
1a5f: e8        -         inx
1a60: 4c 57 1a  -         jmp !loop-
1a63: 68        -         pla
1a64: 8d 86 02  -         sta foreground_color
1a67: 4c 85 1a  -         jmp !done+
1a6a: ad 86 02  -         lda foreground_color
1a6d: 48        -         pha
1a6e: a9 02     -         lda #color
1a70: 8d 86 02  -         sta foreground_color
1a73: a2 00     -         ldx #$00
1a75: bd 1f 40  -         lda msg,x
1a78: f0 07     -         beq !done+
1a7a: 20 d2 ff  -         jsr kernal_chrout
1a7d: e8        -         inx
1a7e: 4c 75 1a  -         jmp !loop-
1a81: 68        -         pla
1a82: 8d 86 02  -         sta foreground_color
1a85: 60        -         rts
1a86: a2 00     -         ldx #$00
1a88: bd 97 1a  -         lda msg,x
1a8b: f0 07     -         beq !done+
1a8d: 20 d2 ff  -         jsr kernal_chrout
1a90: e8        -         inx
1a91: 4c 88 1a  -         jmp !loop-
1a94: 4c 99 1a  -         jmp !done+
1a97: 0d 00     - memory: .byte RETURN, NULL
1a99: ae 23 40  -         ldx TEST_NAME_COUNT
1a9c: e0 15     -         cpx #TESTS_PER_PAGE
1a9e: d0 5d     -         bne !exit+
1aa0: ad 86 02  -         lda foreground_color
1aa3: 48        -         pha
1aa4: a9 01     -         lda #color
1aa6: 8d 86 02  -         sta foreground_color
1aa9: a2 00     -         ldx #$00
1aab: bd be 1a  -         lda msg,x
1aae: f0 07     -         beq !done+
1ab0: 20 d2 ff  -         jsr kernal_chrout
1ab3: e8        -         inx
1ab4: 4c ab 1a  -         jmp !loop-
1ab7: 68        -         pla
1ab8: 8d 86 02  -         sta foreground_color
1abb: 4c dd 1a  -         jmp !no_key+
1abe: 0d        - memory: .byte RETURN
1abf: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1acf: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1adb: 0d 00     -         .byte RETURN, NULL
1add: 20 9f ff  -         jsr scnkey  // scan keyboard
1ae0: 20 e4 ff  -         jsr getin	// put result into A
1ae3: f0 f8     -         beq !no_key-
1ae5: a2 00     -         ldx #$00
1ae7: bd f6 1a  -         lda msg,x
1aea: f0 07     -         beq !done+
1aec: 20 d2 ff  -         jsr kernal_chrout
1aef: e8        -         inx
1af0: 4c e7 1a  -         jmp !loop-
1af3: 4c f8 1a  -         jmp !done+
1af6: 0d 00     - newline:.byte RETURN, NULL
1af8: a2 00     -         ldx #$00
1afa: 8e 23 40  -         stx TEST_NAME_COUNT
1afd: ee 23 40  -         inc TEST_NAME_COUNT
1b00: ad 86 02  -         lda foreground_color
1b03: 48        -         pha
1b04: a9 0f     -         lda #color
1b06: 8d 86 02  -         sta foreground_color
1b09: a2 00     -         ldx #$00
1b0b: bd 1e 1b  -         lda msg,x
1b0e: f0 07     -         beq !done+
1b10: 20 d2 ff  -         jsr kernal_chrout
1b13: e8        -         inx
1b14: 4c 0b 1b  -         jmp !loop-
1b17: 68        -         pla
1b18: 8d 86 02  -         sta foreground_color
1b1b: 4c 32 1b  -         jmp !done+
1b1e: 20 20     - memory: .fill spacing, spacebar
1b20: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
1b2e: 2e 2e 2e  -         .text "..."
1b31: 00        -         .byte NULL
1b32: ee 21 40  -         inc TEST_COUNT
1b35: ad 86 02  -         lda foreground_color
1b38: 48        -         pha
1b39: a9 0e     -         lda #color
1b3b: 8d 86 02  -         sta foreground_color
1b3e: a2 00     -         ldx #$00
1b40: bd 53 1b  -         lda msg,x
1b43: f0 07     -         beq !done+
1b45: 20 d2 ff  -         jsr kernal_chrout
1b48: e8        -         inx
1b49: 4c 40 1b  -         jmp !loop-
1b4c: 68        -         pla
1b4d: 8d 86 02  -         sta foreground_color
1b50: 4c 58 1b  -         jmp !done+
1b53: 20        - memory: .byte spacebar
1b54: 50 33     -         .text description
1b56: 3a        -         .text ":"
1b57: 00        -         .byte NULL
1b58: a6 17     -         ldx rl(register.getValue())
1b5a: a4 18     -         ldy rh(register.getValue())
1b5c: e0 06     -         cpx #<value
1b5e: d0 25     -         bne !failed+
1b60: c0 00     -         cpy #>value
1b62: d0 21     -         bne !failed+
1b64: ee 22 40  -         inc TEST_PASS_COUNT
1b67: ad 86 02  -         lda foreground_color
1b6a: 48        -         pha
1b6b: a9 05     -         lda #color
1b6d: 8d 86 02  -         sta foreground_color
1b70: a2 00     -         ldx #$00
1b72: bd 1d 40  -         lda msg,x
1b75: f0 07     -         beq !done+
1b77: 20 d2 ff  -         jsr kernal_chrout
1b7a: e8        -         inx
1b7b: 4c 72 1b  -         jmp !loop-
1b7e: 68        -         pla
1b7f: 8d 86 02  -         sta foreground_color
1b82: 4c a0 1b  -         jmp !done+
1b85: ad 86 02  -         lda foreground_color
1b88: 48        -         pha
1b89: a9 02     -         lda #color
1b8b: 8d 86 02  -         sta foreground_color
1b8e: a2 00     -         ldx #$00
1b90: bd 1f 40  -         lda msg,x
1b93: f0 07     -         beq !done+
1b95: 20 d2 ff  -         jsr kernal_chrout
1b98: e8        -         inx
1b99: 4c 90 1b  -         jmp !loop-
1b9c: 68        -         pla
1b9d: 8d 86 02  -         sta foreground_color
1ba0: 60        -         rts
1ba1: ee 21 40  -         inc TEST_COUNT
1ba4: ad 86 02  -         lda foreground_color
1ba7: 48        -         pha
1ba8: a9 0e     -         lda #color
1baa: 8d 86 02  -         sta foreground_color
1bad: a2 00     -         ldx #$00
1baf: bd c2 1b  -         lda msg,x
1bb2: f0 07     -         beq !done+
1bb4: 20 d2 ff  -         jsr kernal_chrout
1bb7: e8        -         inx
1bb8: 4c af 1b  -         jmp !loop-
1bbb: 68        -         pla
1bbc: 8d 86 02  -         sta foreground_color
1bbf: 4c c7 1b  -         jmp !done+
1bc2: 20        - memory: .byte spacebar
1bc3: 50 32     -         .text description
1bc5: 3a        -         .text ":"
1bc6: 00        -         .byte NULL
1bc7: a6 17     -         ldx rl(register.getValue())
1bc9: a4 18     -         ldy rh(register.getValue())
1bcb: e0 05     -         cpx #<value
1bcd: d0 25     -         bne !failed+
1bcf: c0 00     -         cpy #>value
1bd1: d0 21     -         bne !failed+
1bd3: ee 22 40  -         inc TEST_PASS_COUNT
1bd6: ad 86 02  -         lda foreground_color
1bd9: 48        -         pha
1bda: a9 05     -         lda #color
1bdc: 8d 86 02  -         sta foreground_color
1bdf: a2 00     -         ldx #$00
1be1: bd 1d 40  -         lda msg,x
1be4: f0 07     -         beq !done+
1be6: 20 d2 ff  -         jsr kernal_chrout
1be9: e8        -         inx
1bea: 4c e1 1b  -         jmp !loop-
1bed: 68        -         pla
1bee: 8d 86 02  -         sta foreground_color
1bf1: 4c 0f 1c  -         jmp !done+
1bf4: ad 86 02  -         lda foreground_color
1bf7: 48        -         pha
1bf8: a9 02     -         lda #color
1bfa: 8d 86 02  -         sta foreground_color
1bfd: a2 00     -         ldx #$00
1bff: bd 1f 40  -         lda msg,x
1c02: f0 07     -         beq !done+
1c04: 20 d2 ff  -         jsr kernal_chrout
1c07: e8        -         inx
1c08: 4c ff 1b  -         jmp !loop-
1c0b: 68        -         pla
1c0c: 8d 86 02  -         sta foreground_color
1c0f: 60        -         rts
1c10: ee 21 40  -         inc TEST_COUNT
1c13: ad 86 02  -         lda foreground_color
1c16: 48        -         pha
1c17: a9 0e     -         lda #color
1c19: 8d 86 02  -         sta foreground_color
1c1c: a2 00     -         ldx #$00
1c1e: bd 31 1c  -         lda msg,x
1c21: f0 07     -         beq !done+
1c23: 20 d2 ff  -         jsr kernal_chrout
1c26: e8        -         inx
1c27: 4c 1e 1c  -         jmp !loop-
1c2a: 68        -         pla
1c2b: 8d 86 02  -         sta foreground_color
1c2e: 4c 36 1c  -         jmp !done+
1c31: 20        - memory: .byte spacebar
1c32: 50 31     -         .text description
1c34: 3a        -         .text ":"
1c35: 00        -         .byte NULL
1c36: a6 17     -         ldx rl(register.getValue())
1c38: a4 18     -         ldy rh(register.getValue())
1c3a: e0 04     -         cpx #<value
1c3c: d0 25     -         bne !failed+
1c3e: c0 00     -         cpy #>value
1c40: d0 21     -         bne !failed+
1c42: ee 22 40  -         inc TEST_PASS_COUNT
1c45: ad 86 02  -         lda foreground_color
1c48: 48        -         pha
1c49: a9 05     -         lda #color
1c4b: 8d 86 02  -         sta foreground_color
1c4e: a2 00     -         ldx #$00
1c50: bd 1d 40  -         lda msg,x
1c53: f0 07     -         beq !done+
1c55: 20 d2 ff  -         jsr kernal_chrout
1c58: e8        -         inx
1c59: 4c 50 1c  -         jmp !loop-
1c5c: 68        -         pla
1c5d: 8d 86 02  -         sta foreground_color
1c60: 4c 7e 1c  -         jmp !done+
1c63: ad 86 02  -         lda foreground_color
1c66: 48        -         pha
1c67: a9 02     -         lda #color
1c69: 8d 86 02  -         sta foreground_color
1c6c: a2 00     -         ldx #$00
1c6e: bd 1f 40  -         lda msg,x
1c71: f0 07     -         beq !done+
1c73: 20 d2 ff  -         jsr kernal_chrout
1c76: e8        -         inx
1c77: 4c 6e 1c  -         jmp !loop-
1c7a: 68        -         pla
1c7b: 8d 86 02  -         sta foreground_color
1c7e: 60        -         rts
1c7f: ee 23 40  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1c82: ad 86 02  -         lda foreground_color
1c85: 48        -         pha
1c86: a9 0f     -         lda #color
1c88: 8d 86 02  -         sta foreground_color
1c8b: a2 00     -         ldx #$00
1c8d: bd a0 1c  -         lda msg,x
1c90: f0 07     -         beq !done+
1c92: 20 d2 ff  -         jsr kernal_chrout
1c95: e8        -         inx
1c96: 4c 8d 1c  -         jmp !loop-
1c99: 68        -         pla
1c9a: 8d 86 02  -         sta foreground_color
1c9d: 4c b3 1c  -         jmp !done+
1ca0: 20 20     - memory: .fill spacing, spacebar
1ca2: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
1caf: 2e 2e 2e  -         .text "..."
1cb2: 00        -         .byte NULL
1cb3: 20 58 09  -         jsr SW16
1cb6: 14        -         .byte opcode(op, register)
1cb7: 3b 40     -         .word address.getValue()
1cb9: 15        -         .byte opcode(op, register)
1cba: 3d 40     -         .word address.getValue()
1cbc: 84        -         .byte opcode($80, register) }
1cbd: 95        -         .byte opcode($90, register) }
1cbe: 84        -         .byte opcode($80, register) }
1cbf: 95        -         .byte opcode($90, register) }
1cc0: 00        -         .byte $00 }
1cc1: ee 21 40  -         inc TEST_COUNT
1cc4: ad 86 02  -         lda foreground_color
1cc7: 48        -         pha
1cc8: a9 0e     -         lda #color
1cca: 8d 86 02  -         sta foreground_color
1ccd: a2 00     -         ldx #$00
1ccf: bd e2 1c  -         lda msg,x
1cd2: f0 07     -         beq !done+
1cd4: 20 d2 ff  -         jsr kernal_chrout
1cd7: e8        -         inx
1cd8: 4c cf 1c  -         jmp !loop-
1cdb: 68        -         pla
1cdc: 8d 86 02  -         sta foreground_color
1cdf: 4c e8 1c  -         jmp !done+
1ce2: 20        - memory: .byte spacebar
1ce3: 4d 45 4d  -         .text description
1ce6: 3a        -         .text ":"
1ce7: 00        -         .byte NULL
1ce8: a2 ff     -         ldx #$ff
1cea: e8        -         inx
1ceb: e0 02     -         cpx #size
1ced: f0 0b     -         beq !success+
1cef: bd 39 40  -         lda source,x
1cf2: dd 39 40  -         cmp dest,x
1cf5: f0 f3     -         beq !loop-
1cf7: 4c 1b 1d  -         jmp !failed+
1cfa: ee 22 40  -         inc TEST_PASS_COUNT
1cfd: ad 86 02  -         lda foreground_color
1d00: 48        -         pha
1d01: a9 05     -         lda #color
1d03: 8d 86 02  -         sta foreground_color
1d06: a2 00     -         ldx #$00
1d08: bd 1d 40  -         lda msg,x
1d0b: f0 07     -         beq !done+
1d0d: 20 d2 ff  -         jsr kernal_chrout
1d10: e8        -         inx
1d11: 4c 08 1d  -         jmp !loop-
1d14: 68        -         pla
1d15: 8d 86 02  -         sta foreground_color
1d18: 4c 36 1d  -         jmp !done+
1d1b: ad 86 02  -         lda foreground_color
1d1e: 48        -         pha
1d1f: a9 02     -         lda #color
1d21: 8d 86 02  -         sta foreground_color
1d24: a2 00     -         ldx #$00
1d26: bd 1f 40  -         lda msg,x
1d29: f0 07     -         beq !done+
1d2b: 20 d2 ff  -         jsr kernal_chrout
1d2e: e8        -         inx
1d2f: 4c 26 1d  -         jmp !loop-
1d32: 68        -         pla
1d33: 8d 86 02  -         sta foreground_color
1d36: a2 00     -         ldx #$00
1d38: bd 47 1d  -         lda msg,x
1d3b: f0 07     -         beq !done+
1d3d: 20 d2 ff  -         jsr kernal_chrout
1d40: e8        -         inx
1d41: 4c 38 1d  -         jmp !loop-
1d44: 4c 49 1d  -         jmp !done+
1d47: 0d 00     - memory: .byte RETURN, NULL
1d49: ae 23 40  -         ldx TEST_NAME_COUNT
1d4c: e0 15     -         cpx #TESTS_PER_PAGE
1d4e: d0 5d     -         bne !exit+
1d50: ad 86 02  -         lda foreground_color
1d53: 48        -         pha
1d54: a9 01     -         lda #color
1d56: 8d 86 02  -         sta foreground_color
1d59: a2 00     -         ldx #$00
1d5b: bd 6e 1d  -         lda msg,x
1d5e: f0 07     -         beq !done+
1d60: 20 d2 ff  -         jsr kernal_chrout
1d63: e8        -         inx
1d64: 4c 5b 1d  -         jmp !loop-
1d67: 68        -         pla
1d68: 8d 86 02  -         sta foreground_color
1d6b: 4c 8d 1d  -         jmp !no_key+
1d6e: 0d        - memory: .byte RETURN
1d6f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1d7f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1d8b: 0d 00     -         .byte RETURN, NULL
1d8d: 20 9f ff  -         jsr scnkey  // scan keyboard
1d90: 20 e4 ff  -         jsr getin	// put result into A
1d93: f0 f8     -         beq !no_key-
1d95: a2 00     -         ldx #$00
1d97: bd a6 1d  -         lda msg,x
1d9a: f0 07     -         beq !done+
1d9c: 20 d2 ff  -         jsr kernal_chrout
1d9f: e8        -         inx
1da0: 4c 97 1d  -         jmp !loop-
1da3: 4c a8 1d  -         jmp !done+
1da6: 0d 00     - newline:.byte RETURN, NULL
1da8: a2 00     -         ldx #$00
1daa: 8e 23 40  -         stx TEST_NAME_COUNT
1dad: 60        -         rts
1dae: ee 23 40  - ADD_TEST:inc TEST_NAME_COUNT
1db1: ad 86 02  -         lda foreground_color
1db4: 48        -         pha
1db5: a9 0f     -         lda #color
1db7: 8d 86 02  -         sta foreground_color
1dba: a2 00     -         ldx #$00
1dbc: bd cf 1d  -         lda msg,x
1dbf: f0 07     -         beq !done+
1dc1: 20 d2 ff  -         jsr kernal_chrout
1dc4: e8        -         inx
1dc5: 4c bc 1d  -         jmp !loop-
1dc8: 68        -         pla
1dc9: 8d 86 02  -         sta foreground_color
1dcc: 4c dd 1d  -         jmp !done+
1dcf: 20 20     - memory: .fill spacing, spacebar
1dd1: 41 44 44 49 54 49 4f 4e                          -         .text name
1dd9: 2e 2e 2e  -         .text "..."
1ddc: 00        -         .byte NULL
1ddd: 20 58 09  -         jsr SW16
1de0: 10        -         .byte opcode(op, register)
1de1: 34 76     -         .word address.getValue()
1de3: 11        -         .byte opcode(op, register)
1de4: 27 42     -         .word address.getValue()
1de6: a1        -         .byte opcode($a0, register) }
1de7: 0d        -         .byte $0d
1de8: 1e        -         .byte >(address.getValue()-1)
1de9: d1        -         .byte <(address.getValue()-1)
1dea: a0        -         .byte opcode($a0, register) }
1deb: 00        -         .byte $00 }
1dec: ee 21 40  -         inc TEST_COUNT
1def: ad 86 02  -         lda foreground_color
1df2: 48        -         pha
1df3: a9 0e     -         lda #color
1df5: 8d 86 02  -         sta foreground_color
1df8: a2 00     -         ldx #$00
1dfa: bd 0d 1e  -         lda msg,x
1dfd: f0 07     -         beq !done+
1dff: 20 d2 ff  -         jsr kernal_chrout
1e02: e8        -         inx
1e03: 4c fa 1d  -         jmp !loop-
1e06: 68        -         pla
1e07: 8d 86 02  -         sta foreground_color
1e0a: 4c 12 1e  -         jmp !done+
1e0d: 20        - memory: .byte spacebar
1e0e: 58 32     -         .text description
1e10: 3a        -         .text ":"
1e11: 00        -         .byte NULL
1e12: a6 17     -         ldx rl(register.getValue())
1e14: a4 18     -         ldy rh(register.getValue())
1e16: e0 b6     -         cpx #<value
1e18: d0 25     -         bne !failed+
1e1a: c0 70     -         cpy #>value
1e1c: d0 21     -         bne !failed+
1e1e: ee 22 40  -         inc TEST_PASS_COUNT
1e21: ad 86 02  -         lda foreground_color
1e24: 48        -         pha
1e25: a9 05     -         lda #color
1e27: 8d 86 02  -         sta foreground_color
1e2a: a2 00     -         ldx #$00
1e2c: bd 1d 40  -         lda msg,x
1e2f: f0 07     -         beq !done+
1e31: 20 d2 ff  -         jsr kernal_chrout
1e34: e8        -         inx
1e35: 4c 2c 1e  -         jmp !loop-
1e38: 68        -         pla
1e39: 8d 86 02  -         sta foreground_color
1e3c: 4c 5a 1e  -         jmp !done+
1e3f: ad 86 02  -         lda foreground_color
1e42: 48        -         pha
1e43: a9 02     -         lda #color
1e45: 8d 86 02  -         sta foreground_color
1e48: a2 00     -         ldx #$00
1e4a: bd 1f 40  -         lda msg,x
1e4d: f0 07     -         beq !done+
1e4f: 20 d2 ff  -         jsr kernal_chrout
1e52: e8        -         inx
1e53: 4c 4a 1e  -         jmp !loop-
1e56: 68        -         pla
1e57: 8d 86 02  -         sta foreground_color
1e5a: a2 00     -         ldx #$00
1e5c: bd 6b 1e  -         lda msg,x
1e5f: f0 07     -         beq !done+
1e61: 20 d2 ff  -         jsr kernal_chrout
1e64: e8        -         inx
1e65: 4c 5c 1e  -         jmp !loop-
1e68: 4c 6d 1e  -         jmp !done+
1e6b: 0d 00     - memory: .byte RETURN, NULL
1e6d: ae 23 40  -         ldx TEST_NAME_COUNT
1e70: e0 15     -         cpx #TESTS_PER_PAGE
1e72: d0 5d     -         bne !exit+
1e74: ad 86 02  -         lda foreground_color
1e77: 48        -         pha
1e78: a9 01     -         lda #color
1e7a: 8d 86 02  -         sta foreground_color
1e7d: a2 00     -         ldx #$00
1e7f: bd 92 1e  -         lda msg,x
1e82: f0 07     -         beq !done+
1e84: 20 d2 ff  -         jsr kernal_chrout
1e87: e8        -         inx
1e88: 4c 7f 1e  -         jmp !loop-
1e8b: 68        -         pla
1e8c: 8d 86 02  -         sta foreground_color
1e8f: 4c b1 1e  -         jmp !no_key+
1e92: 0d        - memory: .byte RETURN
1e93: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1ea3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1eaf: 0d 00     -         .byte RETURN, NULL
1eb1: 20 9f ff  -         jsr scnkey  // scan keyboard
1eb4: 20 e4 ff  -         jsr getin	// put result into A
1eb7: f0 f8     -         beq !no_key-
1eb9: a2 00     -         ldx #$00
1ebb: bd ca 1e  -         lda msg,x
1ebe: f0 07     -         beq !done+
1ec0: 20 d2 ff  -         jsr kernal_chrout
1ec3: e8        -         inx
1ec4: 4c bb 1e  -         jmp !loop-
1ec7: 4c cc 1e  -         jmp !done+
1eca: 0d 00     - newline:.byte RETURN, NULL
1ecc: a2 00     -         ldx #$00
1ece: 8e 23 40  -         stx TEST_NAME_COUNT
1ed1: 60        -         rts
1ed2: ee 21 40  -         inc TEST_COUNT
1ed5: ad 86 02  -         lda foreground_color
1ed8: 48        -         pha
1ed9: a9 0e     -         lda #color
1edb: 8d 86 02  -         sta foreground_color
1ede: a2 00     -         ldx #$00
1ee0: bd f3 1e  -         lda msg,x
1ee3: f0 07     -         beq !done+
1ee5: 20 d2 ff  -         jsr kernal_chrout
1ee8: e8        -         inx
1ee9: 4c e0 1e  -         jmp !loop-
1eec: 68        -         pla
1eed: 8d 86 02  -         sta foreground_color
1ef0: 4c f9 1e  -         jmp !done+
1ef3: 20        - memory: .byte spacebar
1ef4: 41 44 44  -         .text description
1ef7: 3a        -         .text ":"
1ef8: 00        -         .byte NULL
1ef9: a6 17     -         ldx rl(register.getValue())
1efb: a4 18     -         ldy rh(register.getValue())
1efd: e0 5b     -         cpx #<value
1eff: d0 25     -         bne !failed+
1f01: c0 b8     -         cpy #>value
1f03: d0 21     -         bne !failed+
1f05: ee 22 40  -         inc TEST_PASS_COUNT
1f08: ad 86 02  -         lda foreground_color
1f0b: 48        -         pha
1f0c: a9 05     -         lda #color
1f0e: 8d 86 02  -         sta foreground_color
1f11: a2 00     -         ldx #$00
1f13: bd 1d 40  -         lda msg,x
1f16: f0 07     -         beq !done+
1f18: 20 d2 ff  -         jsr kernal_chrout
1f1b: e8        -         inx
1f1c: 4c 13 1f  -         jmp !loop-
1f1f: 68        -         pla
1f20: 8d 86 02  -         sta foreground_color
1f23: 4c 41 1f  -         jmp !done+
1f26: ad 86 02  -         lda foreground_color
1f29: 48        -         pha
1f2a: a9 02     -         lda #color
1f2c: 8d 86 02  -         sta foreground_color
1f2f: a2 00     -         ldx #$00
1f31: bd 1f 40  -         lda msg,x
1f34: f0 07     -         beq !done+
1f36: 20 d2 ff  -         jsr kernal_chrout
1f39: e8        -         inx
1f3a: 4c 31 1f  -         jmp !loop-
1f3d: 68        -         pla
1f3e: 8d 86 02  -         sta foreground_color
1f41: 60        -         rts
1f42: ee 23 40  - SUBTRACT_TEST:inc TEST_NAME_COUNT
1f45: ad 86 02  -         lda foreground_color
1f48: 48        -         pha
1f49: a9 0f     -         lda #color
1f4b: 8d 86 02  -         sta foreground_color
1f4e: a2 00     -         ldx #$00
1f50: bd 63 1f  -         lda msg,x
1f53: f0 07     -         beq !done+
1f55: 20 d2 ff  -         jsr kernal_chrout
1f58: e8        -         inx
1f59: 4c 50 1f  -         jmp !loop-
1f5c: 68        -         pla
1f5d: 8d 86 02  -         sta foreground_color
1f60: 4c 74 1f  -         jmp !done+
1f63: 20 20     - memory: .fill spacing, spacebar
1f65: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
1f70: 2e 2e 2e  -         .text "..."
1f73: 00        -         .byte NULL
1f74: 20 58 09  -         jsr SW16
1f77: 10        -         .byte opcode(op, register)
1f78: 34 76     -         .word address.getValue()
1f7a: 11        -         .byte opcode(op, register)
1f7b: 27 42     -         .word address.getValue()
1f7d: b1        -         .byte opcode($b0, register) }
1f7e: 0d        -         .byte $0d
1f7f: 20        -         .byte >(address.getValue()-1)
1f80: 67        -         .byte <(address.getValue()-1)
1f81: b0        -         .byte opcode($b0, register) }
1f82: 00        -         .byte $00 }
1f83: ee 21 40  -         inc TEST_COUNT
1f86: ad 86 02  -         lda foreground_color
1f89: 48        -         pha
1f8a: a9 0e     -         lda #color
1f8c: 8d 86 02  -         sta foreground_color
1f8f: a2 00     -         ldx #$00
1f91: bd a4 1f  -         lda msg,x
1f94: f0 07     -         beq !done+
1f96: 20 d2 ff  -         jsr kernal_chrout
1f99: e8        -         inx
1f9a: 4c 91 1f  -         jmp !loop-
1f9d: 68        -         pla
1f9e: 8d 86 02  -         sta foreground_color
1fa1: 4c a8 1f  -         jmp !done+
1fa4: 20        - memory: .byte spacebar
1fa5: 30        -         .text description
1fa6: 3a        -         .text ":"
1fa7: 00        -         .byte NULL
1fa8: a6 17     -         ldx rl(register.getValue())
1faa: a4 18     -         ldy rh(register.getValue())
1fac: e0 00     -         cpx #<value
1fae: d0 25     -         bne !failed+
1fb0: c0 00     -         cpy #>value
1fb2: d0 21     -         bne !failed+
1fb4: ee 22 40  -         inc TEST_PASS_COUNT
1fb7: ad 86 02  -         lda foreground_color
1fba: 48        -         pha
1fbb: a9 05     -         lda #color
1fbd: 8d 86 02  -         sta foreground_color
1fc0: a2 00     -         ldx #$00
1fc2: bd 1d 40  -         lda msg,x
1fc5: f0 07     -         beq !done+
1fc7: 20 d2 ff  -         jsr kernal_chrout
1fca: e8        -         inx
1fcb: 4c c2 1f  -         jmp !loop-
1fce: 68        -         pla
1fcf: 8d 86 02  -         sta foreground_color
1fd2: 4c f0 1f  -         jmp !done+
1fd5: ad 86 02  -         lda foreground_color
1fd8: 48        -         pha
1fd9: a9 02     -         lda #color
1fdb: 8d 86 02  -         sta foreground_color
1fde: a2 00     -         ldx #$00
1fe0: bd 1f 40  -         lda msg,x
1fe3: f0 07     -         beq !done+
1fe5: 20 d2 ff  -         jsr kernal_chrout
1fe8: e8        -         inx
1fe9: 4c e0 1f  -         jmp !loop-
1fec: 68        -         pla
1fed: 8d 86 02  -         sta foreground_color
1ff0: a2 00     -         ldx #$00
1ff2: bd 01 20  -         lda msg,x
1ff5: f0 07     -         beq !done+
1ff7: 20 d2 ff  -         jsr kernal_chrout
1ffa: e8        -         inx
1ffb: 4c f2 1f  -         jmp !loop-
1ffe: 4c 03 20  -         jmp !done+
2001: 0d 00     - memory: .byte RETURN, NULL
2003: ae 23 40  -         ldx TEST_NAME_COUNT
2006: e0 15     -         cpx #TESTS_PER_PAGE
2008: d0 5d     -         bne !exit+
200a: ad 86 02  -         lda foreground_color
200d: 48        -         pha
200e: a9 01     -         lda #color
2010: 8d 86 02  -         sta foreground_color
2013: a2 00     -         ldx #$00
2015: bd 28 20  -         lda msg,x
2018: f0 07     -         beq !done+
201a: 20 d2 ff  -         jsr kernal_chrout
201d: e8        -         inx
201e: 4c 15 20  -         jmp !loop-
2021: 68        -         pla
2022: 8d 86 02  -         sta foreground_color
2025: 4c 47 20  -         jmp !no_key+
2028: 0d        - memory: .byte RETURN
2029: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2039: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2045: 0d 00     -         .byte RETURN, NULL
2047: 20 9f ff  -         jsr scnkey  // scan keyboard
204a: 20 e4 ff  -         jsr getin	// put result into A
204d: f0 f8     -         beq !no_key-
204f: a2 00     -         ldx #$00
2051: bd 60 20  -         lda msg,x
2054: f0 07     -         beq !done+
2056: 20 d2 ff  -         jsr kernal_chrout
2059: e8        -         inx
205a: 4c 51 20  -         jmp !loop-
205d: 4c 62 20  -         jmp !done+
2060: 0d 00     - newline:.byte RETURN, NULL
2062: a2 00     -         ldx #$00
2064: 8e 23 40  -         stx TEST_NAME_COUNT
2067: 60        -         rts
2068: ee 21 40  -         inc TEST_COUNT
206b: ad 86 02  -         lda foreground_color
206e: 48        -         pha
206f: a9 0e     -         lda #color
2071: 8d 86 02  -         sta foreground_color
2074: a2 00     -         ldx #$00
2076: bd 89 20  -         lda msg,x
2079: f0 07     -         beq !done+
207b: 20 d2 ff  -         jsr kernal_chrout
207e: e8        -         inx
207f: 4c 76 20  -         jmp !loop-
2082: 68        -         pla
2083: 8d 86 02  -         sta foreground_color
2086: 4c 8f 20  -         jmp !done+
2089: 20        - memory: .byte spacebar
208a: 53 55 42  -         .text description
208d: 3a        -         .text ":"
208e: 00        -         .byte NULL
208f: a6 17     -         ldx rl(register.getValue())
2091: a4 18     -         ldy rh(register.getValue())
2093: e0 0d     -         cpx #<value
2095: d0 25     -         bne !failed+
2097: c0 34     -         cpy #>value
2099: d0 21     -         bne !failed+
209b: ee 22 40  -         inc TEST_PASS_COUNT
209e: ad 86 02  -         lda foreground_color
20a1: 48        -         pha
20a2: a9 05     -         lda #color
20a4: 8d 86 02  -         sta foreground_color
20a7: a2 00     -         ldx #$00
20a9: bd 1d 40  -         lda msg,x
20ac: f0 07     -         beq !done+
20ae: 20 d2 ff  -         jsr kernal_chrout
20b1: e8        -         inx
20b2: 4c a9 20  -         jmp !loop-
20b5: 68        -         pla
20b6: 8d 86 02  -         sta foreground_color
20b9: 4c d7 20  -         jmp !done+
20bc: ad 86 02  -         lda foreground_color
20bf: 48        -         pha
20c0: a9 02     -         lda #color
20c2: 8d 86 02  -         sta foreground_color
20c5: a2 00     -         ldx #$00
20c7: bd 1f 40  -         lda msg,x
20ca: f0 07     -         beq !done+
20cc: 20 d2 ff  -         jsr kernal_chrout
20cf: e8        -         inx
20d0: 4c c7 20  -         jmp !loop-
20d3: 68        -         pla
20d4: 8d 86 02  -         sta foreground_color
20d7: 60        -         rts	
20d8: ee 23 40  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
20db: ad 86 02  -         lda foreground_color
20de: 48        -         pha
20df: a9 0f     -         lda #color
20e1: 8d 86 02  -         sta foreground_color
20e4: a2 00     -         ldx #$00
20e6: bd f9 20  -         lda msg,x
20e9: f0 07     -         beq !done+
20eb: 20 d2 ff  -         jsr kernal_chrout
20ee: e8        -         inx
20ef: 4c e6 20  -         jmp !loop-
20f2: 68        -         pla
20f3: 8d 86 02  -         sta foreground_color
20f6: 4c 0c 21  -         jmp !done+
20f9: 20 20     - memory: .fill spacing, spacebar
20fb: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
2108: 2e 2e 2e  -         .text "..."
210b: 00        -         .byte NULL
210c: 20 58 09  -         jsr SW16
210f: 15        -         .byte opcode(op, register)
2110: 5f 40     -         .word address.getValue()
2112: 10        -         .byte opcode(op, register)
2113: 39 40     -         .word address.getValue()
2115: 75        -         .byte opcode($70, register) }
2116: 0d        -         .byte $0d
2117: 22        -         .byte >(address.getValue()-1)
2118: 0b        -         .byte <(address.getValue()-1)
2119: 10        -         .byte opcode(op, register)
211a: 3b 40     -         .word address.getValue()
211c: 75        -         .byte opcode($70, register) }
211d: 0d        -         .byte $0d
211e: 22        -         .byte >(address.getValue()-1)
211f: 7b        -         .byte <(address.getValue()-1)
2120: c5        -         .byte opcode($c0, register) }
2121: 0d        -         .byte $0d
2122: 22        -         .byte >(address.getValue()-1)
2123: eb        -         .byte <(address.getValue()-1)
2124: c5        -         .byte opcode($c0, register) }
2125: 00        -         .byte $00 }
2126: ee 21 40  -         inc TEST_COUNT
2129: ad 86 02  -         lda foreground_color
212c: 48        -         pha
212d: a9 0e     -         lda #color
212f: 8d 86 02  -         sta foreground_color
2132: a2 00     -         ldx #$00
2134: bd 47 21  -         lda msg,x
2137: f0 07     -         beq !done+
2139: 20 d2 ff  -         jsr kernal_chrout
213c: e8        -         inx
213d: 4c 34 21  -         jmp !loop-
2140: 68        -         pla
2141: 8d 86 02  -         sta foreground_color
2144: 4c 4c 21  -         jmp !done+
2147: 20        - memory: .byte spacebar
2148: 50 31     -         .text description
214a: 3a        -         .text ":"
214b: 00        -         .byte NULL
214c: a6 17     -         ldx addr
214e: e0 39     -         cpx #<value
2150: d0 27     -         bne !failed+
2152: a6 18     -         ldx addr+1
2154: e0 40     -         cpx #>value
2156: d0 21     -         bne !failed+
2158: ee 22 40  -         inc TEST_PASS_COUNT
215b: ad 86 02  -         lda foreground_color
215e: 48        -         pha
215f: a9 05     -         lda #color
2161: 8d 86 02  -         sta foreground_color
2164: a2 00     -         ldx #$00
2166: bd 1d 40  -         lda msg,x
2169: f0 07     -         beq !done+
216b: 20 d2 ff  -         jsr kernal_chrout
216e: e8        -         inx
216f: 4c 66 21  -         jmp !loop-
2172: 68        -         pla
2173: 8d 86 02  -         sta foreground_color
2176: 4c 94 21  -         jmp !done+
2179: ad 86 02  -         lda foreground_color
217c: 48        -         pha
217d: a9 02     -         lda #color
217f: 8d 86 02  -         sta foreground_color
2182: a2 00     -         ldx #$00
2184: bd 1f 40  -         lda msg,x
2187: f0 07     -         beq !done+
2189: 20 d2 ff  -         jsr kernal_chrout
218c: e8        -         inx
218d: 4c 84 21  -         jmp !loop-
2190: 68        -         pla
2191: 8d 86 02  -         sta foreground_color
2194: a2 00     -         ldx #$00
2196: bd a5 21  -         lda msg,x
2199: f0 07     -         beq !done+
219b: 20 d2 ff  -         jsr kernal_chrout
219e: e8        -         inx
219f: 4c 96 21  -         jmp !loop-
21a2: 4c a7 21  -         jmp !done+
21a5: 0d 00     - memory: .byte RETURN, NULL
21a7: ae 23 40  -         ldx TEST_NAME_COUNT
21aa: e0 15     -         cpx #TESTS_PER_PAGE
21ac: d0 5d     -         bne !exit+
21ae: ad 86 02  -         lda foreground_color
21b1: 48        -         pha
21b2: a9 01     -         lda #color
21b4: 8d 86 02  -         sta foreground_color
21b7: a2 00     -         ldx #$00
21b9: bd cc 21  -         lda msg,x
21bc: f0 07     -         beq !done+
21be: 20 d2 ff  -         jsr kernal_chrout
21c1: e8        -         inx
21c2: 4c b9 21  -         jmp !loop-
21c5: 68        -         pla
21c6: 8d 86 02  -         sta foreground_color
21c9: 4c eb 21  -         jmp !no_key+
21cc: 0d        - memory: .byte RETURN
21cd: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
21dd: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
21e9: 0d 00     -         .byte RETURN, NULL
21eb: 20 9f ff  -         jsr scnkey  // scan keyboard
21ee: 20 e4 ff  -         jsr getin	// put result into A
21f1: f0 f8     -         beq !no_key-
21f3: a2 00     -         ldx #$00
21f5: bd 04 22  -         lda msg,x
21f8: f0 07     -         beq !done+
21fa: 20 d2 ff  -         jsr kernal_chrout
21fd: e8        -         inx
21fe: 4c f5 21  -         jmp !loop-
2201: 4c 06 22  -         jmp !done+
2204: 0d 00     - newline:.byte RETURN, NULL
2206: a2 00     -         ldx #$00
2208: 8e 23 40  -         stx TEST_NAME_COUNT
220b: 60        -         rts
220c: ee 21 40  -         inc TEST_COUNT
220f: ad 86 02  -         lda foreground_color
2212: 48        -         pha
2213: a9 0e     -         lda #color
2215: 8d 86 02  -         sta foreground_color
2218: a2 00     -         ldx #$00
221a: bd 2d 22  -         lda msg,x
221d: f0 07     -         beq !done+
221f: 20 d2 ff  -         jsr kernal_chrout
2222: e8        -         inx
2223: 4c 1a 22  -         jmp !loop-
2226: 68        -         pla
2227: 8d 86 02  -         sta foreground_color
222a: 4c 31 22  -         jmp !done+
222d: 20        - memory: .byte spacebar
222e: 31        -         .text description
222f: 3a        -         .text ":"
2230: 00        -         .byte NULL
2231: ae 5f 40  -         ldx addr
2234: e0 39     -         cpx #<value
2236: d0 28     -         bne !failed+
2238: ae 60 40  -         ldx addr+1
223b: e0 40     -         cpx #>value
223d: d0 21     -         bne !failed+
223f: ee 22 40  -         inc TEST_PASS_COUNT
2242: ad 86 02  -         lda foreground_color
2245: 48        -         pha
2246: a9 05     -         lda #color
2248: 8d 86 02  -         sta foreground_color
224b: a2 00     -         ldx #$00
224d: bd 1d 40  -         lda msg,x
2250: f0 07     -         beq !done+
2252: 20 d2 ff  -         jsr kernal_chrout
2255: e8        -         inx
2256: 4c 4d 22  -         jmp !loop-
2259: 68        -         pla
225a: 8d 86 02  -         sta foreground_color
225d: 4c 7b 22  -         jmp !done+
2260: ad 86 02  -         lda foreground_color
2263: 48        -         pha
2264: a9 02     -         lda #color
2266: 8d 86 02  -         sta foreground_color
2269: a2 00     -         ldx #$00
226b: bd 1f 40  -         lda msg,x
226e: f0 07     -         beq !done+
2270: 20 d2 ff  -         jsr kernal_chrout
2273: e8        -         inx
2274: 4c 6b 22  -         jmp !loop-
2277: 68        -         pla
2278: 8d 86 02  -         sta foreground_color
227b: 60        -         rts
227c: ee 21 40  -         inc TEST_COUNT
227f: ad 86 02  -         lda foreground_color
2282: 48        -         pha
2283: a9 0e     -         lda #color
2285: 8d 86 02  -         sta foreground_color
2288: a2 00     -         ldx #$00
228a: bd 9d 22  -         lda msg,x
228d: f0 07     -         beq !done+
228f: 20 d2 ff  -         jsr kernal_chrout
2292: e8        -         inx
2293: 4c 8a 22  -         jmp !loop-
2296: 68        -         pla
2297: 8d 86 02  -         sta foreground_color
229a: 4c a1 22  -         jmp !done+
229d: 20        - memory: .byte spacebar
229e: 32        -         .text description
229f: 3a        -         .text ":"
22a0: 00        -         .byte NULL
22a1: ae 61 40  -         ldx addr
22a4: e0 3b     -         cpx #<value
22a6: d0 28     -         bne !failed+
22a8: ae 62 40  -         ldx addr+1
22ab: e0 40     -         cpx #>value
22ad: d0 21     -         bne !failed+
22af: ee 22 40  -         inc TEST_PASS_COUNT
22b2: ad 86 02  -         lda foreground_color
22b5: 48        -         pha
22b6: a9 05     -         lda #color
22b8: 8d 86 02  -         sta foreground_color
22bb: a2 00     -         ldx #$00
22bd: bd 1d 40  -         lda msg,x
22c0: f0 07     -         beq !done+
22c2: 20 d2 ff  -         jsr kernal_chrout
22c5: e8        -         inx
22c6: 4c bd 22  -         jmp !loop-
22c9: 68        -         pla
22ca: 8d 86 02  -         sta foreground_color
22cd: 4c eb 22  -         jmp !done+
22d0: ad 86 02  -         lda foreground_color
22d3: 48        -         pha
22d4: a9 02     -         lda #color
22d6: 8d 86 02  -         sta foreground_color
22d9: a2 00     -         ldx #$00
22db: bd 1f 40  -         lda msg,x
22de: f0 07     -         beq !done+
22e0: 20 d2 ff  -         jsr kernal_chrout
22e3: e8        -         inx
22e4: 4c db 22  -         jmp !loop-
22e7: 68        -         pla
22e8: 8d 86 02  -         sta foreground_color
22eb: 60        -         rts
22ec: ee 21 40  -         inc TEST_COUNT
22ef: ad 86 02  -         lda foreground_color
22f2: 48        -         pha
22f3: a9 0e     -         lda #color
22f5: 8d 86 02  -         sta foreground_color
22f8: a2 00     -         ldx #$00
22fa: bd 0d 23  -         lda msg,x
22fd: f0 07     -         beq !done+
22ff: 20 d2 ff  -         jsr kernal_chrout
2302: e8        -         inx
2303: 4c fa 22  -         jmp !loop-
2306: 68        -         pla
2307: 8d 86 02  -         sta foreground_color
230a: 4c 12 23  -         jmp !done+
230d: 20        - memory: .byte spacebar
230e: 50 32     -         .text description
2310: 3a        -         .text ":"
2311: 00        -         .byte NULL
2312: a6 17     -         ldx addr
2314: e0 3b     -         cpx #<value
2316: d0 27     -         bne !failed+
2318: a6 18     -         ldx addr+1
231a: e0 40     -         cpx #>value
231c: d0 21     -         bne !failed+
231e: ee 22 40  -         inc TEST_PASS_COUNT
2321: ad 86 02  -         lda foreground_color
2324: 48        -         pha
2325: a9 05     -         lda #color
2327: 8d 86 02  -         sta foreground_color
232a: a2 00     -         ldx #$00
232c: bd 1d 40  -         lda msg,x
232f: f0 07     -         beq !done+
2331: 20 d2 ff  -         jsr kernal_chrout
2334: e8        -         inx
2335: 4c 2c 23  -         jmp !loop-
2338: 68        -         pla
2339: 8d 86 02  -         sta foreground_color
233c: 4c 5a 23  -         jmp !done+
233f: ad 86 02  -         lda foreground_color
2342: 48        -         pha
2343: a9 02     -         lda #color
2345: 8d 86 02  -         sta foreground_color
2348: a2 00     -         ldx #$00
234a: bd 1f 40  -         lda msg,x
234d: f0 07     -         beq !done+
234f: 20 d2 ff  -         jsr kernal_chrout
2352: e8        -         inx
2353: 4c 4a 23  -         jmp !loop-
2356: 68        -         pla
2357: 8d 86 02  -         sta foreground_color
235a: 60        -         rts
235b: ee 23 40  - COMPARE_TEST:inc TEST_NAME_COUNT
235e: ad 86 02  -         lda foreground_color
2361: 48        -         pha
2362: a9 0f     -         lda #color
2364: 8d 86 02  -         sta foreground_color
2367: a2 00     -         ldx #$00
2369: bd 7c 23  -         lda msg,x
236c: f0 07     -         beq !done+
236e: 20 d2 ff  -         jsr kernal_chrout
2371: e8        -         inx
2372: 4c 69 23  -         jmp !loop-
2375: 68        -         pla
2376: 8d 86 02  -         sta foreground_color
2379: 4c 89 23  -         jmp !done+
237c: 20 20     - memory: .fill spacing, spacebar
237e: 43 4f 4d 50 41 52 45                             -         .text name
2385: 2e 2e 2e  -         .text "..."
2388: 00        -         .byte NULL
2389: 20 58 09  -         jsr SW16
238c: 15        -         .byte opcode(op, register)
238d: 3f 40     -         .word address.getValue()
238f: 16        -         .byte opcode(op, register)
2390: 4f 40     -         .word address.getValue()
2392: 14        -         .byte opcode(op, register)
2393: 00 00     -         .word address.getValue()
2395: e4        -         .byte opcode($e0, register) }
2396: b0        -         .byte opcode($b0, register) }
2397: 75        -         .byte opcode($70, register) }
2398: 25        -         .byte opcode($20, register) }
2399: d6        -         .byte opcode($d0, register) }
239a: 02 f9     -         .byte $02, effective_address(ea,*) }
239c: 00        -         .byte $00 }
239d: ee 21 40  -         inc TEST_COUNT
23a0: ad 86 02  -         lda foreground_color
23a3: 48        -         pha
23a4: a9 0e     -         lda #color
23a6: 8d 86 02  -         sta foreground_color
23a9: a2 00     -         ldx #$00
23ab: bd be 23  -         lda msg,x
23ae: f0 07     -         beq !done+
23b0: 20 d2 ff  -         jsr kernal_chrout
23b3: e8        -         inx
23b4: 4c ab 23  -         jmp !loop-
23b7: 68        -         pla
23b8: 8d 86 02  -         sta foreground_color
23bb: 4c c6 23  -         jmp !done+
23be: 20        - memory: .byte spacebar
23bf: 43 4f 55 4e 54                                   -         .text description
23c4: 3a        -         .text ":"
23c5: 00        -         .byte NULL
23c6: a6 1f     -         ldx rl(register.getValue())
23c8: a4 20     -         ldy rh(register.getValue())
23ca: e0 08     -         cpx #<value
23cc: d0 25     -         bne !failed+
23ce: c0 00     -         cpy #>value
23d0: d0 21     -         bne !failed+
23d2: ee 22 40  -         inc TEST_PASS_COUNT
23d5: ad 86 02  -         lda foreground_color
23d8: 48        -         pha
23d9: a9 05     -         lda #color
23db: 8d 86 02  -         sta foreground_color
23de: a2 00     -         ldx #$00
23e0: bd 1d 40  -         lda msg,x
23e3: f0 07     -         beq !done+
23e5: 20 d2 ff  -         jsr kernal_chrout
23e8: e8        -         inx
23e9: 4c e0 23  -         jmp !loop-
23ec: 68        -         pla
23ed: 8d 86 02  -         sta foreground_color
23f0: 4c 0e 24  -         jmp !done+
23f3: ad 86 02  -         lda foreground_color
23f6: 48        -         pha
23f7: a9 02     -         lda #color
23f9: 8d 86 02  -         sta foreground_color
23fc: a2 00     -         ldx #$00
23fe: bd 1f 40  -         lda msg,x
2401: f0 07     -         beq !done+
2403: 20 d2 ff  -         jsr kernal_chrout
2406: e8        -         inx
2407: 4c fe 23  -         jmp !loop-
240a: 68        -         pla
240b: 8d 86 02  -         sta foreground_color
240e: a2 00     -         ldx #$00
2410: bd 1f 24  -         lda msg,x
2413: f0 07     -         beq !done+
2415: 20 d2 ff  -         jsr kernal_chrout
2418: e8        -         inx
2419: 4c 10 24  -         jmp !loop-
241c: 4c 21 24  -         jmp !done+
241f: 0d 00     - memory: .byte RETURN, NULL
2421: ae 23 40  -         ldx TEST_NAME_COUNT
2424: e0 15     -         cpx #TESTS_PER_PAGE
2426: d0 5d     -         bne !exit+
2428: ad 86 02  -         lda foreground_color
242b: 48        -         pha
242c: a9 01     -         lda #color
242e: 8d 86 02  -         sta foreground_color
2431: a2 00     -         ldx #$00
2433: bd 46 24  -         lda msg,x
2436: f0 07     -         beq !done+
2438: 20 d2 ff  -         jsr kernal_chrout
243b: e8        -         inx
243c: 4c 33 24  -         jmp !loop-
243f: 68        -         pla
2440: 8d 86 02  -         sta foreground_color
2443: 4c 65 24  -         jmp !no_key+
2446: 0d        - memory: .byte RETURN
2447: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2457: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2463: 0d 00     -         .byte RETURN, NULL
2465: 20 9f ff  -         jsr scnkey  // scan keyboard
2468: 20 e4 ff  -         jsr getin	// put result into A
246b: f0 f8     -         beq !no_key-
246d: a2 00     -         ldx #$00
246f: bd 7e 24  -         lda msg,x
2472: f0 07     -         beq !done+
2474: 20 d2 ff  -         jsr kernal_chrout
2477: e8        -         inx
2478: 4c 6f 24  -         jmp !loop-
247b: 4c 80 24  -         jmp !done+
247e: 0d 00     - newline:.byte RETURN, NULL
2480: a2 00     -         ldx #$00
2482: 8e 23 40  -         stx TEST_NAME_COUNT
2485: 60        -         rts	
2486: ee 23 40  - INCREMENT_TEST:inc TEST_NAME_COUNT
2489: ad 86 02  -         lda foreground_color
248c: 48        -         pha
248d: a9 0f     -         lda #color
248f: 8d 86 02  -         sta foreground_color
2492: a2 00     -         ldx #$00
2494: bd a7 24  -         lda msg,x
2497: f0 07     -         beq !done+
2499: 20 d2 ff  -         jsr kernal_chrout
249c: e8        -         inx
249d: 4c 94 24  -         jmp !loop-
24a0: 68        -         pla
24a1: 8d 86 02  -         sta foreground_color
24a4: 4c b6 24  -         jmp !done+
24a7: 20 20     - memory: .fill spacing, spacebar
24a9: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
24b2: 2e 2e 2e  -         .text "..."
24b5: 00        -         .byte NULL
24b6: 20 58 09  -         jsr SW16
24b9: 15        -         .byte opcode(op, register)
24ba: 39 40     -         .word address.getValue()
24bc: b0        -         .byte opcode($b0, register) }
24bd: 55        -         .byte opcode($50, register) }
24be: e5        -         .byte opcode($e0, register) }
24bf: 00        -         .byte $00 }
24c0: ee 21 40  -         inc TEST_COUNT
24c3: ad 86 02  -         lda foreground_color
24c6: 48        -         pha
24c7: a9 0e     -         lda #color
24c9: 8d 86 02  -         sta foreground_color
24cc: a2 00     -         ldx #$00
24ce: bd e1 24  -         lda msg,x
24d1: f0 07     -         beq !done+
24d3: 20 d2 ff  -         jsr kernal_chrout
24d6: e8        -         inx
24d7: 4c ce 24  -         jmp !loop-
24da: 68        -         pla
24db: 8d 86 02  -         sta foreground_color
24de: 4c e6 24  -         jmp !done+
24e1: 20        - memory: .byte spacebar
24e2: 2b 32     -         .text description
24e4: 3a        -         .text ":"
24e5: 00        -         .byte NULL
24e6: a6 21     -         ldx rl(register.getValue())
24e8: a4 22     -         ldy rh(register.getValue())
24ea: e0 3b     -         cpx #<value
24ec: d0 25     -         bne !failed+
24ee: c0 40     -         cpy #>value
24f0: d0 21     -         bne !failed+
24f2: ee 22 40  -         inc TEST_PASS_COUNT
24f5: ad 86 02  -         lda foreground_color
24f8: 48        -         pha
24f9: a9 05     -         lda #color
24fb: 8d 86 02  -         sta foreground_color
24fe: a2 00     -         ldx #$00
2500: bd 1d 40  -         lda msg,x
2503: f0 07     -         beq !done+
2505: 20 d2 ff  -         jsr kernal_chrout
2508: e8        -         inx
2509: 4c 00 25  -         jmp !loop-
250c: 68        -         pla
250d: 8d 86 02  -         sta foreground_color
2510: 4c 2e 25  -         jmp !done+
2513: ad 86 02  -         lda foreground_color
2516: 48        -         pha
2517: a9 02     -         lda #color
2519: 8d 86 02  -         sta foreground_color
251c: a2 00     -         ldx #$00
251e: bd 1f 40  -         lda msg,x
2521: f0 07     -         beq !done+
2523: 20 d2 ff  -         jsr kernal_chrout
2526: e8        -         inx
2527: 4c 1e 25  -         jmp !loop-
252a: 68        -         pla
252b: 8d 86 02  -         sta foreground_color
252e: a2 00     -         ldx #$00
2530: bd 3f 25  -         lda msg,x
2533: f0 07     -         beq !done+
2535: 20 d2 ff  -         jsr kernal_chrout
2538: e8        -         inx
2539: 4c 30 25  -         jmp !loop-
253c: 4c 41 25  -         jmp !done+
253f: 0d 00     - memory: .byte RETURN, NULL
2541: ae 23 40  -         ldx TEST_NAME_COUNT
2544: e0 15     -         cpx #TESTS_PER_PAGE
2546: d0 5d     -         bne !exit+
2548: ad 86 02  -         lda foreground_color
254b: 48        -         pha
254c: a9 01     -         lda #color
254e: 8d 86 02  -         sta foreground_color
2551: a2 00     -         ldx #$00
2553: bd 66 25  -         lda msg,x
2556: f0 07     -         beq !done+
2558: 20 d2 ff  -         jsr kernal_chrout
255b: e8        -         inx
255c: 4c 53 25  -         jmp !loop-
255f: 68        -         pla
2560: 8d 86 02  -         sta foreground_color
2563: 4c 85 25  -         jmp !no_key+
2566: 0d        - memory: .byte RETURN
2567: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2577: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2583: 0d 00     -         .byte RETURN, NULL
2585: 20 9f ff  -         jsr scnkey  // scan keyboard
2588: 20 e4 ff  -         jsr getin	// put result into A
258b: f0 f8     -         beq !no_key-
258d: a2 00     -         ldx #$00
258f: bd 9e 25  -         lda msg,x
2592: f0 07     -         beq !done+
2594: 20 d2 ff  -         jsr kernal_chrout
2597: e8        -         inx
2598: 4c 8f 25  -         jmp !loop-
259b: 4c a0 25  -         jmp !done+
259e: 0d 00     - newline:.byte RETURN, NULL
25a0: a2 00     -         ldx #$00
25a2: 8e 23 40  -         stx TEST_NAME_COUNT
25a5: 60        -         rts
25a6: ee 23 40  - DECREMENT_TEST:inc TEST_NAME_COUNT
25a9: ad 86 02  -         lda foreground_color
25ac: 48        -         pha
25ad: a9 0f     -         lda #color
25af: 8d 86 02  -         sta foreground_color
25b2: a2 00     -         ldx #$00
25b4: bd c7 25  -         lda msg,x
25b7: f0 07     -         beq !done+
25b9: 20 d2 ff  -         jsr kernal_chrout
25bc: e8        -         inx
25bd: 4c b4 25  -         jmp !loop-
25c0: 68        -         pla
25c1: 8d 86 02  -         sta foreground_color
25c4: 4c d6 25  -         jmp !done+
25c7: 20 20     - memory: .fill spacing, spacebar
25c9: 44 45 43 52 45 4d 45 4e 54                       -         .text name
25d2: 2e 2e 2e  -         .text "..."
25d5: 00        -         .byte NULL
25d6: 20 58 09  -         jsr SW16
25d9: 15        -         .byte opcode(op, register)
25da: 3f 40     -         .word address.getValue()
25dc: 14        -         .byte opcode(op, register)
25dd: 10 00     -         .word address.getValue()
25df: b0        -         .byte opcode($b0, register) }
25e0: 55        -         .byte opcode($50, register) }
25e1: f4        -         .byte opcode($f0, register) }
25e2: 07 fc     -         .byte $07, effective_address(ea,*) }
25e4: 00        -         .byte $00 }
25e5: ee 21 40  -         inc TEST_COUNT
25e8: ad 86 02  -         lda foreground_color
25eb: 48        -         pha
25ec: a9 0e     -         lda #color
25ee: 8d 86 02  -         sta foreground_color
25f1: a2 00     -         ldx #$00
25f3: bd 06 26  -         lda msg,x
25f6: f0 07     -         beq !done+
25f8: 20 d2 ff  -         jsr kernal_chrout
25fb: e8        -         inx
25fc: 4c f3 25  -         jmp !loop-
25ff: 68        -         pla
2600: 8d 86 02  -         sta foreground_color
2603: 4c 0a 26  -         jmp !done+
2606: 20        - memory: .byte spacebar
2607: 30        -         .text description
2608: 3a        -         .text ":"
2609: 00        -         .byte NULL
260a: a6 1f     -         ldx rl(register.getValue())
260c: a4 20     -         ldy rh(register.getValue())
260e: e0 00     -         cpx #<value
2610: d0 25     -         bne !failed+
2612: c0 00     -         cpy #>value
2614: d0 21     -         bne !failed+
2616: ee 22 40  -         inc TEST_PASS_COUNT
2619: ad 86 02  -         lda foreground_color
261c: 48        -         pha
261d: a9 05     -         lda #color
261f: 8d 86 02  -         sta foreground_color
2622: a2 00     -         ldx #$00
2624: bd 1d 40  -         lda msg,x
2627: f0 07     -         beq !done+
2629: 20 d2 ff  -         jsr kernal_chrout
262c: e8        -         inx
262d: 4c 24 26  -         jmp !loop-
2630: 68        -         pla
2631: 8d 86 02  -         sta foreground_color
2634: 4c 52 26  -         jmp !done+
2637: ad 86 02  -         lda foreground_color
263a: 48        -         pha
263b: a9 02     -         lda #color
263d: 8d 86 02  -         sta foreground_color
2640: a2 00     -         ldx #$00
2642: bd 1f 40  -         lda msg,x
2645: f0 07     -         beq !done+
2647: 20 d2 ff  -         jsr kernal_chrout
264a: e8        -         inx
264b: 4c 42 26  -         jmp !loop-
264e: 68        -         pla
264f: 8d 86 02  -         sta foreground_color
2652: a2 00     -         ldx #$00
2654: bd 63 26  -         lda msg,x
2657: f0 07     -         beq !done+
2659: 20 d2 ff  -         jsr kernal_chrout
265c: e8        -         inx
265d: 4c 54 26  -         jmp !loop-
2660: 4c 65 26  -         jmp !done+
2663: 0d 00     - memory: .byte RETURN, NULL
2665: ae 23 40  -         ldx TEST_NAME_COUNT
2668: e0 15     -         cpx #TESTS_PER_PAGE
266a: d0 5d     -         bne !exit+
266c: ad 86 02  -         lda foreground_color
266f: 48        -         pha
2670: a9 01     -         lda #color
2672: 8d 86 02  -         sta foreground_color
2675: a2 00     -         ldx #$00
2677: bd 8a 26  -         lda msg,x
267a: f0 07     -         beq !done+
267c: 20 d2 ff  -         jsr kernal_chrout
267f: e8        -         inx
2680: 4c 77 26  -         jmp !loop-
2683: 68        -         pla
2684: 8d 86 02  -         sta foreground_color
2687: 4c a9 26  -         jmp !no_key+
268a: 0d        - memory: .byte RETURN
268b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
269b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
26a7: 0d 00     -         .byte RETURN, NULL
26a9: 20 9f ff  -         jsr scnkey  // scan keyboard
26ac: 20 e4 ff  -         jsr getin	// put result into A
26af: f0 f8     -         beq !no_key-
26b1: a2 00     -         ldx #$00
26b3: bd c2 26  -         lda msg,x
26b6: f0 07     -         beq !done+
26b8: 20 d2 ff  -         jsr kernal_chrout
26bb: e8        -         inx
26bc: 4c b3 26  -         jmp !loop-
26bf: 4c c4 26  -         jmp !done+
26c2: 0d 00     - newline:.byte RETURN, NULL
26c4: a2 00     -         ldx #$00
26c6: 8e 23 40  -         stx TEST_NAME_COUNT
26c9: 60        -         rts
26ca: ee 23 40  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
26cd: ad 86 02  -         lda foreground_color
26d0: 48        -         pha
26d1: a9 0f     -         lda #color
26d3: 8d 86 02  -         sta foreground_color
26d6: a2 00     -         ldx #$00
26d8: bd eb 26  -         lda msg,x
26db: f0 07     -         beq !done+
26dd: 20 d2 ff  -         jsr kernal_chrout
26e0: e8        -         inx
26e1: 4c d8 26  -         jmp !loop-
26e4: 68        -         pla
26e5: 8d 86 02  -         sta foreground_color
26e8: 4c fa 26  -         jmp !done+
26eb: 20 20     - memory: .fill spacing, spacebar
26ed: 36 35 30 32 20 4d 4f 44 45                       -         .text name
26f6: 2e 2e 2e  -         .text "..."
26f9: 00        -         .byte NULL
26fa: 20 58 09  -         jsr SW16
26fd: 00        -         .byte $00 }
26fe: ee 21 40  -         inc TEST_COUNT
2701: ad 86 02  -         lda foreground_color
2704: 48        -         pha
2705: a9 0e     -         lda #color
2707: 8d 86 02  -         sta foreground_color
270a: a2 00     -         ldx #$00
270c: bd 1f 27  -         lda msg,x
270f: f0 07     -         beq !done+
2711: 20 d2 ff  -         jsr kernal_chrout
2714: e8        -         inx
2715: 4c 0c 27  -         jmp !loop-
2718: 68        -         pla
2719: 8d 86 02  -         sta foreground_color
271c: 4c 25 27  -         jmp !done+
271f: 20        - memory: .byte spacebar
2720: 52 54 4e  -         .text description
2723: 3a        -         .text ":"
2724: 00        -         .byte NULL
2725: a2 01     -         ldx #value
2727: f0 21     -         beq !failed+
2729: ee 22 40  -         inc TEST_PASS_COUNT
272c: ad 86 02  -         lda foreground_color
272f: 48        -         pha
2730: a9 05     -         lda #color
2732: 8d 86 02  -         sta foreground_color
2735: a2 00     -         ldx #$00
2737: bd 1d 40  -         lda msg,x
273a: f0 07     -         beq !done+
273c: 20 d2 ff  -         jsr kernal_chrout
273f: e8        -         inx
2740: 4c 37 27  -         jmp !loop-
2743: 68        -         pla
2744: 8d 86 02  -         sta foreground_color
2747: 4c 65 27  -         jmp !done+
274a: ad 86 02  -         lda foreground_color
274d: 48        -         pha
274e: a9 02     -         lda #color
2750: 8d 86 02  -         sta foreground_color
2753: a2 00     -         ldx #$00
2755: bd 1f 40  -         lda msg,x
2758: f0 07     -         beq !done+
275a: 20 d2 ff  -         jsr kernal_chrout
275d: e8        -         inx
275e: 4c 55 27  -         jmp !loop-
2761: 68        -         pla
2762: 8d 86 02  -         sta foreground_color
2765: a2 00     -         ldx #$00
2767: bd 76 27  -         lda msg,x
276a: f0 07     -         beq !done+
276c: 20 d2 ff  -         jsr kernal_chrout
276f: e8        -         inx
2770: 4c 67 27  -         jmp !loop-
2773: 4c 78 27  -         jmp !done+
2776: 0d 00     - memory: .byte RETURN, NULL
2778: ae 23 40  -         ldx TEST_NAME_COUNT
277b: e0 15     -         cpx #TESTS_PER_PAGE
277d: d0 5d     -         bne !exit+
277f: ad 86 02  -         lda foreground_color
2782: 48        -         pha
2783: a9 01     -         lda #color
2785: 8d 86 02  -         sta foreground_color
2788: a2 00     -         ldx #$00
278a: bd 9d 27  -         lda msg,x
278d: f0 07     -         beq !done+
278f: 20 d2 ff  -         jsr kernal_chrout
2792: e8        -         inx
2793: 4c 8a 27  -         jmp !loop-
2796: 68        -         pla
2797: 8d 86 02  -         sta foreground_color
279a: 4c bc 27  -         jmp !no_key+
279d: 0d        - memory: .byte RETURN
279e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
27ae: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
27ba: 0d 00     -         .byte RETURN, NULL
27bc: 20 9f ff  -         jsr scnkey  // scan keyboard
27bf: 20 e4 ff  -         jsr getin	// put result into A
27c2: f0 f8     -         beq !no_key-
27c4: a2 00     -         ldx #$00
27c6: bd d5 27  -         lda msg,x
27c9: f0 07     -         beq !done+
27cb: 20 d2 ff  -         jsr kernal_chrout
27ce: e8        -         inx
27cf: 4c c6 27  -         jmp !loop-
27d2: 4c d7 27  -         jmp !done+
27d5: 0d 00     - newline:.byte RETURN, NULL
27d7: a2 00     -         ldx #$00
27d9: 8e 23 40  -         stx TEST_NAME_COUNT
27dc: 60        -         rts
27dd: ee 23 40  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
27e0: ad 86 02  -         lda foreground_color
27e3: 48        -         pha
27e4: a9 0f     -         lda #color
27e6: 8d 86 02  -         sta foreground_color
27e9: a2 00     -         ldx #$00
27eb: bd fe 27  -         lda msg,x
27ee: f0 07     -         beq !done+
27f0: 20 d2 ff  -         jsr kernal_chrout
27f3: e8        -         inx
27f4: 4c eb 27  -         jmp !loop-
27f7: 68        -         pla
27f8: 8d 86 02  -         sta foreground_color
27fb: 4c 11 28  -         jmp !done+
27fe: 20 20     - memory: .fill spacing, spacebar
2800: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
280d: 2e 2e 2e  -         .text "..."
2810: 00        -         .byte NULL
2811: 20 58 09  -         jsr SW16
2814: 01 00     -         .byte $01, effective_address(ea,*) }
2816: 10        -         .byte opcode(op, register)
2817: dc fe     -         .word address.getValue()
2819: 01 05     -         .byte $01, effective_address(ea,*) }
281b: 10        -         .byte opcode(op, register)
281c: 23 01     -         .word address.getValue()
281e: 01 00     -         .byte $01, effective_address(ea,*) }
2820: 00        -         .byte $00 }
2821: ee 21 40  -         inc TEST_COUNT
2824: ad 86 02  -         lda foreground_color
2827: 48        -         pha
2828: a9 0e     -         lda #color
282a: 8d 86 02  -         sta foreground_color
282d: a2 00     -         ldx #$00
282f: bd 42 28  -         lda msg,x
2832: f0 07     -         beq !done+
2834: 20 d2 ff  -         jsr kernal_chrout
2837: e8        -         inx
2838: 4c 2f 28  -         jmp !loop-
283b: 68        -         pla
283c: 8d 86 02  -         sta foreground_color
283f: 4c 46 28  -         jmp !done+
2842: 20        - memory: .byte spacebar
2843: 31        -         .text description
2844: 3a        -         .text ":"
2845: 00        -         .byte NULL
2846: a6 17     -         ldx rl(register.getValue())
2848: a4 18     -         ldy rh(register.getValue())
284a: e0 dc     -         cpx #<value
284c: d0 25     -         bne !failed+
284e: c0 fe     -         cpy #>value
2850: d0 21     -         bne !failed+
2852: ee 22 40  -         inc TEST_PASS_COUNT
2855: ad 86 02  -         lda foreground_color
2858: 48        -         pha
2859: a9 05     -         lda #color
285b: 8d 86 02  -         sta foreground_color
285e: a2 00     -         ldx #$00
2860: bd 1d 40  -         lda msg,x
2863: f0 07     -         beq !done+
2865: 20 d2 ff  -         jsr kernal_chrout
2868: e8        -         inx
2869: 4c 60 28  -         jmp !loop-
286c: 68        -         pla
286d: 8d 86 02  -         sta foreground_color
2870: 4c 8e 28  -         jmp !done+
2873: ad 86 02  -         lda foreground_color
2876: 48        -         pha
2877: a9 02     -         lda #color
2879: 8d 86 02  -         sta foreground_color
287c: a2 00     -         ldx #$00
287e: bd 1f 40  -         lda msg,x
2881: f0 07     -         beq !done+
2883: 20 d2 ff  -         jsr kernal_chrout
2886: e8        -         inx
2887: 4c 7e 28  -         jmp !loop-
288a: 68        -         pla
288b: 8d 86 02  -         sta foreground_color
288e: a2 00     -         ldx #$00
2890: bd 9f 28  -         lda msg,x
2893: f0 07     -         beq !done+
2895: 20 d2 ff  -         jsr kernal_chrout
2898: e8        -         inx
2899: 4c 90 28  -         jmp !loop-
289c: 4c a1 28  -         jmp !done+
289f: 0d 00     - memory: .byte RETURN, NULL
28a1: ae 23 40  -         ldx TEST_NAME_COUNT
28a4: e0 15     -         cpx #TESTS_PER_PAGE
28a6: d0 5d     -         bne !exit+
28a8: ad 86 02  -         lda foreground_color
28ab: 48        -         pha
28ac: a9 01     -         lda #color
28ae: 8d 86 02  -         sta foreground_color
28b1: a2 00     -         ldx #$00
28b3: bd c6 28  -         lda msg,x
28b6: f0 07     -         beq !done+
28b8: 20 d2 ff  -         jsr kernal_chrout
28bb: e8        -         inx
28bc: 4c b3 28  -         jmp !loop-
28bf: 68        -         pla
28c0: 8d 86 02  -         sta foreground_color
28c3: 4c e5 28  -         jmp !no_key+
28c6: 0d        - memory: .byte RETURN
28c7: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
28d7: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
28e3: 0d 00     -         .byte RETURN, NULL
28e5: 20 9f ff  -         jsr scnkey  // scan keyboard
28e8: 20 e4 ff  -         jsr getin	// put result into A
28eb: f0 f8     -         beq !no_key-
28ed: a2 00     -         ldx #$00
28ef: bd fe 28  -         lda msg,x
28f2: f0 07     -         beq !done+
28f4: 20 d2 ff  -         jsr kernal_chrout
28f7: e8        -         inx
28f8: 4c ef 28  -         jmp !loop-
28fb: 4c 00 29  -         jmp !done+
28fe: 0d 00     - newline:.byte RETURN, NULL
2900: a2 00     -         ldx #$00
2902: 8e 23 40  -         stx TEST_NAME_COUNT
2905: 60        -         rts
2906: ee 23 40  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
2909: ad 86 02  -         lda foreground_color
290c: 48        -         pha
290d: a9 0f     -         lda #color
290f: 8d 86 02  -         sta foreground_color
2912: a2 00     -         ldx #$00
2914: bd 27 29  -         lda msg,x
2917: f0 07     -         beq !done+
2919: 20 d2 ff  -         jsr kernal_chrout
291c: e8        -         inx
291d: 4c 14 29  -         jmp !loop-
2920: 68        -         pla
2921: 8d 86 02  -         sta foreground_color
2924: 4c 3c 29  -         jmp !done+
2927: 20 20     - memory: .fill spacing, spacebar
2929: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
2938: 2e 2e 2e  -         .text "..."
293b: 00        -         .byte NULL
293c: 20 58 09  -         jsr SW16
293f: 15        -         .byte opcode(op, register)
2940: 00 10     -         .word address.getValue()
2942: 10        -         .byte opcode(op, register)
2943: ff ff     -         .word address.getValue()
2945: a5        -         .byte opcode($a0, register) }
2946: 02 02     -         .byte $02, effective_address(ea,*) }
2948: 01 05     -         .byte $01, effective_address(ea,*) }
294a: 10        -         .byte opcode(op, register)
294b: dc fe     -         .word address.getValue()
294d: 01 05     -         .byte $01, effective_address(ea,*) }
294f: 10        -         .byte opcode(op, register)
2950: 23 01     -         .word address.getValue()
2952: 01 00     -         .byte $01, effective_address(ea,*) }
2954: 00        -         .byte $00 }
2955: ee 21 40  -         inc TEST_COUNT
2958: ad 86 02  -         lda foreground_color
295b: 48        -         pha
295c: a9 0e     -         lda #color
295e: 8d 86 02  -         sta foreground_color
2961: a2 00     -         ldx #$00
2963: bd 76 29  -         lda msg,x
2966: f0 07     -         beq !done+
2968: 20 d2 ff  -         jsr kernal_chrout
296b: e8        -         inx
296c: 4c 63 29  -         jmp !loop-
296f: 68        -         pla
2970: 8d 86 02  -         sta foreground_color
2973: 4c 7a 29  -         jmp !done+
2976: 20        - memory: .byte spacebar
2977: 32        -         .text description
2978: 3a        -         .text ":"
2979: 00        -         .byte NULL
297a: a6 17     -         ldx rl(register.getValue())
297c: a4 18     -         ldy rh(register.getValue())
297e: e0 23     -         cpx #<value
2980: d0 25     -         bne !failed+
2982: c0 01     -         cpy #>value
2984: d0 21     -         bne !failed+
2986: ee 22 40  -         inc TEST_PASS_COUNT
2989: ad 86 02  -         lda foreground_color
298c: 48        -         pha
298d: a9 05     -         lda #color
298f: 8d 86 02  -         sta foreground_color
2992: a2 00     -         ldx #$00
2994: bd 1d 40  -         lda msg,x
2997: f0 07     -         beq !done+
2999: 20 d2 ff  -         jsr kernal_chrout
299c: e8        -         inx
299d: 4c 94 29  -         jmp !loop-
29a0: 68        -         pla
29a1: 8d 86 02  -         sta foreground_color
29a4: 4c c2 29  -         jmp !done+
29a7: ad 86 02  -         lda foreground_color
29aa: 48        -         pha
29ab: a9 02     -         lda #color
29ad: 8d 86 02  -         sta foreground_color
29b0: a2 00     -         ldx #$00
29b2: bd 1f 40  -         lda msg,x
29b5: f0 07     -         beq !done+
29b7: 20 d2 ff  -         jsr kernal_chrout
29ba: e8        -         inx
29bb: 4c b2 29  -         jmp !loop-
29be: 68        -         pla
29bf: 8d 86 02  -         sta foreground_color
29c2: a2 00     -         ldx #$00
29c4: bd d3 29  -         lda msg,x
29c7: f0 07     -         beq !done+
29c9: 20 d2 ff  -         jsr kernal_chrout
29cc: e8        -         inx
29cd: 4c c4 29  -         jmp !loop-
29d0: 4c d5 29  -         jmp !done+
29d3: 0d 00     - memory: .byte RETURN, NULL
29d5: ae 23 40  -         ldx TEST_NAME_COUNT
29d8: e0 15     -         cpx #TESTS_PER_PAGE
29da: d0 5d     -         bne !exit+
29dc: ad 86 02  -         lda foreground_color
29df: 48        -         pha
29e0: a9 01     -         lda #color
29e2: 8d 86 02  -         sta foreground_color
29e5: a2 00     -         ldx #$00
29e7: bd fa 29  -         lda msg,x
29ea: f0 07     -         beq !done+
29ec: 20 d2 ff  -         jsr kernal_chrout
29ef: e8        -         inx
29f0: 4c e7 29  -         jmp !loop-
29f3: 68        -         pla
29f4: 8d 86 02  -         sta foreground_color
29f7: 4c 19 2a  -         jmp !no_key+
29fa: 0d        - memory: .byte RETURN
29fb: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2a0b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2a17: 0d 00     -         .byte RETURN, NULL
2a19: 20 9f ff  -         jsr scnkey  // scan keyboard
2a1c: 20 e4 ff  -         jsr getin	// put result into A
2a1f: f0 f8     -         beq !no_key-
2a21: a2 00     -         ldx #$00
2a23: bd 32 2a  -         lda msg,x
2a26: f0 07     -         beq !done+
2a28: 20 d2 ff  -         jsr kernal_chrout
2a2b: e8        -         inx
2a2c: 4c 23 2a  -         jmp !loop-
2a2f: 4c 34 2a  -         jmp !done+
2a32: 0d 00     - newline:.byte RETURN, NULL
2a34: a2 00     -         ldx #$00
2a36: 8e 23 40  -         stx TEST_NAME_COUNT
2a39: 60        -         rts
2a3a: ee 23 40  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
2a3d: ad 86 02  -         lda foreground_color
2a40: 48        -         pha
2a41: a9 0f     -         lda #color
2a43: 8d 86 02  -         sta foreground_color
2a46: a2 00     -         ldx #$00
2a48: bd 5b 2a  -         lda msg,x
2a4b: f0 07     -         beq !done+
2a4d: 20 d2 ff  -         jsr kernal_chrout
2a50: e8        -         inx
2a51: 4c 48 2a  -         jmp !loop-
2a54: 68        -         pla
2a55: 8d 86 02  -         sta foreground_color
2a58: 4c 70 2a  -         jmp !done+
2a5b: 20 20     - memory: .fill spacing, spacebar
2a5d: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
2a6c: 2e 2e 2e  -         .text "..."
2a6f: 00        -         .byte NULL
2a70: 20 58 09  -         jsr SW16
2a73: 15        -         .byte opcode(op, register)
2a74: 00 10     -         .word address.getValue()
2a76: 10        -         .byte opcode(op, register)
2a77: ff ff     -         .word address.getValue()
2a79: a5        -         .byte opcode($a0, register) }
2a7a: 03 02     -         .byte $03, effective_address(ea,*) }
2a7c: 01 05     -         .byte $01, effective_address(ea,*) }
2a7e: 10        -         .byte opcode(op, register)
2a7f: dc fe     -         .word address.getValue()
2a81: 01 05     -         .byte $01, effective_address(ea,*) }
2a83: 10        -         .byte opcode(op, register)
2a84: 23 01     -         .word address.getValue()
2a86: 01 00     -         .byte $01, effective_address(ea,*) }
2a88: 00        -         .byte $00 }
2a89: ee 21 40  -         inc TEST_COUNT
2a8c: ad 86 02  -         lda foreground_color
2a8f: 48        -         pha
2a90: a9 0e     -         lda #color
2a92: 8d 86 02  -         sta foreground_color
2a95: a2 00     -         ldx #$00
2a97: bd aa 2a  -         lda msg,x
2a9a: f0 07     -         beq !done+
2a9c: 20 d2 ff  -         jsr kernal_chrout
2a9f: e8        -         inx
2aa0: 4c 97 2a  -         jmp !loop-
2aa3: 68        -         pla
2aa4: 8d 86 02  -         sta foreground_color
2aa7: 4c ae 2a  -         jmp !done+
2aaa: 20        - memory: .byte spacebar
2aab: 31        -         .text description
2aac: 3a        -         .text ":"
2aad: 00        -         .byte NULL
2aae: a6 17     -         ldx rl(register.getValue())
2ab0: a4 18     -         ldy rh(register.getValue())
2ab2: e0 dc     -         cpx #<value
2ab4: d0 25     -         bne !failed+
2ab6: c0 fe     -         cpy #>value
2ab8: d0 21     -         bne !failed+
2aba: ee 22 40  -         inc TEST_PASS_COUNT
2abd: ad 86 02  -         lda foreground_color
2ac0: 48        -         pha
2ac1: a9 05     -         lda #color
2ac3: 8d 86 02  -         sta foreground_color
2ac6: a2 00     -         ldx #$00
2ac8: bd 1d 40  -         lda msg,x
2acb: f0 07     -         beq !done+
2acd: 20 d2 ff  -         jsr kernal_chrout
2ad0: e8        -         inx
2ad1: 4c c8 2a  -         jmp !loop-
2ad4: 68        -         pla
2ad5: 8d 86 02  -         sta foreground_color
2ad8: 4c f6 2a  -         jmp !done+
2adb: ad 86 02  -         lda foreground_color
2ade: 48        -         pha
2adf: a9 02     -         lda #color
2ae1: 8d 86 02  -         sta foreground_color
2ae4: a2 00     -         ldx #$00
2ae6: bd 1f 40  -         lda msg,x
2ae9: f0 07     -         beq !done+
2aeb: 20 d2 ff  -         jsr kernal_chrout
2aee: e8        -         inx
2aef: 4c e6 2a  -         jmp !loop-
2af2: 68        -         pla
2af3: 8d 86 02  -         sta foreground_color
2af6: a2 00     -         ldx #$00
2af8: bd 07 2b  -         lda msg,x
2afb: f0 07     -         beq !done+
2afd: 20 d2 ff  -         jsr kernal_chrout
2b00: e8        -         inx
2b01: 4c f8 2a  -         jmp !loop-
2b04: 4c 09 2b  -         jmp !done+
2b07: 0d 00     - memory: .byte RETURN, NULL
2b09: ae 23 40  -         ldx TEST_NAME_COUNT
2b0c: e0 15     -         cpx #TESTS_PER_PAGE
2b0e: d0 5d     -         bne !exit+
2b10: ad 86 02  -         lda foreground_color
2b13: 48        -         pha
2b14: a9 01     -         lda #color
2b16: 8d 86 02  -         sta foreground_color
2b19: a2 00     -         ldx #$00
2b1b: bd 2e 2b  -         lda msg,x
2b1e: f0 07     -         beq !done+
2b20: 20 d2 ff  -         jsr kernal_chrout
2b23: e8        -         inx
2b24: 4c 1b 2b  -         jmp !loop-
2b27: 68        -         pla
2b28: 8d 86 02  -         sta foreground_color
2b2b: 4c 4d 2b  -         jmp !no_key+
2b2e: 0d        - memory: .byte RETURN
2b2f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2b3f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2b4b: 0d 00     -         .byte RETURN, NULL
2b4d: 20 9f ff  -         jsr scnkey  // scan keyboard
2b50: 20 e4 ff  -         jsr getin	// put result into A
2b53: f0 f8     -         beq !no_key-
2b55: a2 00     -         ldx #$00
2b57: bd 66 2b  -         lda msg,x
2b5a: f0 07     -         beq !done+
2b5c: 20 d2 ff  -         jsr kernal_chrout
2b5f: e8        -         inx
2b60: 4c 57 2b  -         jmp !loop-
2b63: 4c 68 2b  -         jmp !done+
2b66: 0d 00     - newline:.byte RETURN, NULL
2b68: a2 00     -         ldx #$00
2b6a: 8e 23 40  -         stx TEST_NAME_COUNT
2b6d: 60        -         rts
2b6e: ee 23 40  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
2b71: ad 86 02  -         lda foreground_color
2b74: 48        -         pha
2b75: a9 0f     -         lda #color
2b77: 8d 86 02  -         sta foreground_color
2b7a: a2 00     -         ldx #$00
2b7c: bd 8f 2b  -         lda msg,x
2b7f: f0 07     -         beq !done+
2b81: 20 d2 ff  -         jsr kernal_chrout
2b84: e8        -         inx
2b85: 4c 7c 2b  -         jmp !loop-
2b88: 68        -         pla
2b89: 8d 86 02  -         sta foreground_color
2b8c: 4c a2 2b  -         jmp !done+
2b8f: 20 20     - memory: .fill spacing, spacebar
2b91: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
2b9e: 2e 2e 2e  -         .text "..."
2ba1: 00        -         .byte NULL
2ba2: 20 58 09  -         jsr SW16
2ba5: 15        -         .byte opcode(op, register)
2ba6: 3f 40     -         .word address.getValue()
2ba8: 14        -         .byte opcode(op, register)
2ba9: 4f 40     -         .word address.getValue()
2bab: b0        -         .byte opcode($b0, register) }
2bac: 55        -         .byte opcode($50, register) }
2bad: 24        -         .byte opcode($20, register) }
2bae: d5        -         .byte opcode($d0, register) }
2baf: 04 fa     -         .byte $04, effective_address(ea,*) }
2bb1: 00        -         .byte $00 }
2bb2: ee 21 40  -         inc TEST_COUNT
2bb5: ad 86 02  -         lda foreground_color
2bb8: 48        -         pha
2bb9: a9 0e     -         lda #color
2bbb: 8d 86 02  -         sta foreground_color
2bbe: a2 00     -         ldx #$00
2bc0: bd d3 2b  -         lda msg,x
2bc3: f0 07     -         beq !done+
2bc5: 20 d2 ff  -         jsr kernal_chrout
2bc8: e8        -         inx
2bc9: 4c c0 2b  -         jmp !loop-
2bcc: 68        -         pla
2bcd: 8d 86 02  -         sta foreground_color
2bd0: 4c d9 2b  -         jmp !done+
2bd3: 20        - memory: .byte spacebar
2bd4: 43 4c 52  -         .text description
2bd7: 3a        -         .text ":"
2bd8: 00        -         .byte NULL
2bd9: a2 ff     -         ldx #$ff
2bdb: e8        -         inx
2bdc: e0 10     -         cpx #size
2bde: f0 0a     -         beq !success+
2be0: a9 00     -         lda #constant
2be2: dd 3f 40  -         cmp source,x
2be5: f0 f4     -         beq !loop-
2be7: 4c 0b 2c  -         jmp !failed+
2bea: ee 22 40  -         inc TEST_PASS_COUNT
2bed: ad 86 02  -         lda foreground_color
2bf0: 48        -         pha
2bf1: a9 05     -         lda #color
2bf3: 8d 86 02  -         sta foreground_color
2bf6: a2 00     -         ldx #$00
2bf8: bd 1d 40  -         lda msg,x
2bfb: f0 07     -         beq !done+
2bfd: 20 d2 ff  -         jsr kernal_chrout
2c00: e8        -         inx
2c01: 4c f8 2b  -         jmp !loop-
2c04: 68        -         pla
2c05: 8d 86 02  -         sta foreground_color
2c08: 4c 26 2c  -         jmp !done+
2c0b: ad 86 02  -         lda foreground_color
2c0e: 48        -         pha
2c0f: a9 02     -         lda #color
2c11: 8d 86 02  -         sta foreground_color
2c14: a2 00     -         ldx #$00
2c16: bd 1f 40  -         lda msg,x
2c19: f0 07     -         beq !done+
2c1b: 20 d2 ff  -         jsr kernal_chrout
2c1e: e8        -         inx
2c1f: 4c 16 2c  -         jmp !loop-
2c22: 68        -         pla
2c23: 8d 86 02  -         sta foreground_color
2c26: a2 00     -         ldx #$00
2c28: bd 37 2c  -         lda msg,x
2c2b: f0 07     -         beq !done+
2c2d: 20 d2 ff  -         jsr kernal_chrout
2c30: e8        -         inx
2c31: 4c 28 2c  -         jmp !loop-
2c34: 4c 39 2c  -         jmp !done+
2c37: 0d 00     - memory: .byte RETURN, NULL
2c39: ae 23 40  -         ldx TEST_NAME_COUNT
2c3c: e0 15     -         cpx #TESTS_PER_PAGE
2c3e: d0 5d     -         bne !exit+
2c40: ad 86 02  -         lda foreground_color
2c43: 48        -         pha
2c44: a9 01     -         lda #color
2c46: 8d 86 02  -         sta foreground_color
2c49: a2 00     -         ldx #$00
2c4b: bd 5e 2c  -         lda msg,x
2c4e: f0 07     -         beq !done+
2c50: 20 d2 ff  -         jsr kernal_chrout
2c53: e8        -         inx
2c54: 4c 4b 2c  -         jmp !loop-
2c57: 68        -         pla
2c58: 8d 86 02  -         sta foreground_color
2c5b: 4c 7d 2c  -         jmp !no_key+
2c5e: 0d        - memory: .byte RETURN
2c5f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2c6f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2c7b: 0d 00     -         .byte RETURN, NULL
2c7d: 20 9f ff  -         jsr scnkey  // scan keyboard
2c80: 20 e4 ff  -         jsr getin	// put result into A
2c83: f0 f8     -         beq !no_key-
2c85: a2 00     -         ldx #$00
2c87: bd 96 2c  -         lda msg,x
2c8a: f0 07     -         beq !done+
2c8c: 20 d2 ff  -         jsr kernal_chrout
2c8f: e8        -         inx
2c90: 4c 87 2c  -         jmp !loop-
2c93: 4c 98 2c  -         jmp !done+
2c96: 0d 00     - newline:.byte RETURN, NULL
2c98: a2 00     -         ldx #$00
2c9a: 8e 23 40  -         stx TEST_NAME_COUNT
2c9d: 60        -         rts
2c9e: ee 23 40  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
2ca1: ad 86 02  -         lda foreground_color
2ca4: 48        -         pha
2ca5: a9 0f     -         lda #color
2ca7: 8d 86 02  -         sta foreground_color
2caa: a2 00     -         ldx #$00
2cac: bd bf 2c  -         lda msg,x
2caf: f0 07     -         beq !done+
2cb1: 20 d2 ff  -         jsr kernal_chrout
2cb4: e8        -         inx
2cb5: 4c ac 2c  -         jmp !loop-
2cb8: 68        -         pla
2cb9: 8d 86 02  -         sta foreground_color
2cbc: 4c d2 2c  -         jmp !done+
2cbf: 20 20     - memory: .fill spacing, spacebar
2cc1: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
2cce: 2e 2e 2e  -         .text "..."
2cd1: 00        -         .byte NULL
2cd2: 20 58 09  -         jsr SW16
2cd5: 15        -         .byte opcode(op, register)
2cd6: 0a 00     -         .word address.getValue()
2cd8: b0        -         .byte opcode($b0, register) }
2cd9: b5        -         .byte opcode($b0, register) }
2cda: 05 07     -         .byte $05, effective_address(ea,*) }
2cdc: 01 00     -         .byte $01, effective_address(ea,*) }
2cde: 10        -         .byte opcode(op, register)
2cdf: dc fe     -         .word address.getValue()
2ce1: 01 05     -         .byte $01, effective_address(ea,*) }
2ce3: 10        -         .byte opcode(op, register)
2ce4: 23 01     -         .word address.getValue()
2ce6: 01 00     -         .byte $01, effective_address(ea,*) }
2ce8: 00        -         .byte $00 }
2ce9: ee 21 40  -         inc TEST_COUNT
2cec: ad 86 02  -         lda foreground_color
2cef: 48        -         pha
2cf0: a9 0e     -         lda #color
2cf2: 8d 86 02  -         sta foreground_color
2cf5: a2 00     -         ldx #$00
2cf7: bd 0a 2d  -         lda msg,x
2cfa: f0 07     -         beq !done+
2cfc: 20 d2 ff  -         jsr kernal_chrout
2cff: e8        -         inx
2d00: 4c f7 2c  -         jmp !loop-
2d03: 68        -         pla
2d04: 8d 86 02  -         sta foreground_color
2d07: 4c 0e 2d  -         jmp !done+
2d0a: 20        - memory: .byte spacebar
2d0b: 32        -         .text description
2d0c: 3a        -         .text ":"
2d0d: 00        -         .byte NULL
2d0e: a6 17     -         ldx rl(register.getValue())
2d10: a4 18     -         ldy rh(register.getValue())
2d12: e0 23     -         cpx #<value
2d14: d0 25     -         bne !failed+
2d16: c0 01     -         cpy #>value
2d18: d0 21     -         bne !failed+
2d1a: ee 22 40  -         inc TEST_PASS_COUNT
2d1d: ad 86 02  -         lda foreground_color
2d20: 48        -         pha
2d21: a9 05     -         lda #color
2d23: 8d 86 02  -         sta foreground_color
2d26: a2 00     -         ldx #$00
2d28: bd 1d 40  -         lda msg,x
2d2b: f0 07     -         beq !done+
2d2d: 20 d2 ff  -         jsr kernal_chrout
2d30: e8        -         inx
2d31: 4c 28 2d  -         jmp !loop-
2d34: 68        -         pla
2d35: 8d 86 02  -         sta foreground_color
2d38: 4c 56 2d  -         jmp !done+
2d3b: ad 86 02  -         lda foreground_color
2d3e: 48        -         pha
2d3f: a9 02     -         lda #color
2d41: 8d 86 02  -         sta foreground_color
2d44: a2 00     -         ldx #$00
2d46: bd 1f 40  -         lda msg,x
2d49: f0 07     -         beq !done+
2d4b: 20 d2 ff  -         jsr kernal_chrout
2d4e: e8        -         inx
2d4f: 4c 46 2d  -         jmp !loop-
2d52: 68        -         pla
2d53: 8d 86 02  -         sta foreground_color
2d56: a2 00     -         ldx #$00
2d58: bd 67 2d  -         lda msg,x
2d5b: f0 07     -         beq !done+
2d5d: 20 d2 ff  -         jsr kernal_chrout
2d60: e8        -         inx
2d61: 4c 58 2d  -         jmp !loop-
2d64: 4c 69 2d  -         jmp !done+
2d67: 0d 00     - memory: .byte RETURN, NULL
2d69: ae 23 40  -         ldx TEST_NAME_COUNT
2d6c: e0 15     -         cpx #TESTS_PER_PAGE
2d6e: d0 5d     -         bne !exit+
2d70: ad 86 02  -         lda foreground_color
2d73: 48        -         pha
2d74: a9 01     -         lda #color
2d76: 8d 86 02  -         sta foreground_color
2d79: a2 00     -         ldx #$00
2d7b: bd 8e 2d  -         lda msg,x
2d7e: f0 07     -         beq !done+
2d80: 20 d2 ff  -         jsr kernal_chrout
2d83: e8        -         inx
2d84: 4c 7b 2d  -         jmp !loop-
2d87: 68        -         pla
2d88: 8d 86 02  -         sta foreground_color
2d8b: 4c ad 2d  -         jmp !no_key+
2d8e: 0d        - memory: .byte RETURN
2d8f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2d9f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2dab: 0d 00     -         .byte RETURN, NULL
2dad: 20 9f ff  -         jsr scnkey  // scan keyboard
2db0: 20 e4 ff  -         jsr getin	// put result into A
2db3: f0 f8     -         beq !no_key-
2db5: a2 00     -         ldx #$00
2db7: bd c6 2d  -         lda msg,x
2dba: f0 07     -         beq !done+
2dbc: 20 d2 ff  -         jsr kernal_chrout
2dbf: e8        -         inx
2dc0: 4c b7 2d  -         jmp !loop-
2dc3: 4c c8 2d  -         jmp !done+
2dc6: 0d 00     - newline:.byte RETURN, NULL
2dc8: a2 00     -         ldx #$00
2dca: 8e 23 40  -         stx TEST_NAME_COUNT
2dcd: 60        -         rts
2dce: ee 23 40  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
2dd1: ad 86 02  -         lda foreground_color
2dd4: 48        -         pha
2dd5: a9 0f     -         lda #color
2dd7: 8d 86 02  -         sta foreground_color
2dda: a2 00     -         ldx #$00
2ddc: bd ef 2d  -         lda msg,x
2ddf: f0 07     -         beq !done+
2de1: 20 d2 ff  -         jsr kernal_chrout
2de4: e8        -         inx
2de5: 4c dc 2d  -         jmp !loop-
2de8: 68        -         pla
2de9: 8d 86 02  -         sta foreground_color
2dec: 4c 00 2e  -         jmp !done+
2def: 20 20     - memory: .fill spacing, spacebar
2df1: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
2dfc: 2e 2e 2e  -         .text "..."
2dff: 00        -         .byte NULL
2e00: 20 58 09  -         jsr SW16
2e03: b0        -         .byte opcode($b0, register) }
2e04: 06 07     -         .byte $06, effective_address(ea,*) }
2e06: 01 00     -         .byte $01, effective_address(ea,*) }
2e08: 10        -         .byte opcode(op, register)
2e09: dc fe     -         .word address.getValue()
2e0b: 01 05     -         .byte $01, effective_address(ea,*) }
2e0d: 10        -         .byte opcode(op, register)
2e0e: 23 01     -         .word address.getValue()
2e10: 01 00     -         .byte $01, effective_address(ea,*) }
2e12: 00        -         .byte $00 }
2e13: ee 21 40  -         inc TEST_COUNT
2e16: ad 86 02  -         lda foreground_color
2e19: 48        -         pha
2e1a: a9 0e     -         lda #color
2e1c: 8d 86 02  -         sta foreground_color
2e1f: a2 00     -         ldx #$00
2e21: bd 34 2e  -         lda msg,x
2e24: f0 07     -         beq !done+
2e26: 20 d2 ff  -         jsr kernal_chrout
2e29: e8        -         inx
2e2a: 4c 21 2e  -         jmp !loop-
2e2d: 68        -         pla
2e2e: 8d 86 02  -         sta foreground_color
2e31: 4c 38 2e  -         jmp !done+
2e34: 20        - memory: .byte spacebar
2e35: 32        -         .text description
2e36: 3a        -         .text ":"
2e37: 00        -         .byte NULL
2e38: a6 17     -         ldx rl(register.getValue())
2e3a: a4 18     -         ldy rh(register.getValue())
2e3c: e0 23     -         cpx #<value
2e3e: d0 25     -         bne !failed+
2e40: c0 01     -         cpy #>value
2e42: d0 21     -         bne !failed+
2e44: ee 22 40  -         inc TEST_PASS_COUNT
2e47: ad 86 02  -         lda foreground_color
2e4a: 48        -         pha
2e4b: a9 05     -         lda #color
2e4d: 8d 86 02  -         sta foreground_color
2e50: a2 00     -         ldx #$00
2e52: bd 1d 40  -         lda msg,x
2e55: f0 07     -         beq !done+
2e57: 20 d2 ff  -         jsr kernal_chrout
2e5a: e8        -         inx
2e5b: 4c 52 2e  -         jmp !loop-
2e5e: 68        -         pla
2e5f: 8d 86 02  -         sta foreground_color
2e62: 4c 80 2e  -         jmp !done+
2e65: ad 86 02  -         lda foreground_color
2e68: 48        -         pha
2e69: a9 02     -         lda #color
2e6b: 8d 86 02  -         sta foreground_color
2e6e: a2 00     -         ldx #$00
2e70: bd 1f 40  -         lda msg,x
2e73: f0 07     -         beq !done+
2e75: 20 d2 ff  -         jsr kernal_chrout
2e78: e8        -         inx
2e79: 4c 70 2e  -         jmp !loop-
2e7c: 68        -         pla
2e7d: 8d 86 02  -         sta foreground_color
2e80: a2 00     -         ldx #$00
2e82: bd 91 2e  -         lda msg,x
2e85: f0 07     -         beq !done+
2e87: 20 d2 ff  -         jsr kernal_chrout
2e8a: e8        -         inx
2e8b: 4c 82 2e  -         jmp !loop-
2e8e: 4c 93 2e  -         jmp !done+
2e91: 0d 00     - memory: .byte RETURN, NULL
2e93: ae 23 40  -         ldx TEST_NAME_COUNT
2e96: e0 15     -         cpx #TESTS_PER_PAGE
2e98: d0 5d     -         bne !exit+
2e9a: ad 86 02  -         lda foreground_color
2e9d: 48        -         pha
2e9e: a9 01     -         lda #color
2ea0: 8d 86 02  -         sta foreground_color
2ea3: a2 00     -         ldx #$00
2ea5: bd b8 2e  -         lda msg,x
2ea8: f0 07     -         beq !done+
2eaa: 20 d2 ff  -         jsr kernal_chrout
2ead: e8        -         inx
2eae: 4c a5 2e  -         jmp !loop-
2eb1: 68        -         pla
2eb2: 8d 86 02  -         sta foreground_color
2eb5: 4c d7 2e  -         jmp !no_key+
2eb8: 0d        - memory: .byte RETURN
2eb9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2ec9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2ed5: 0d 00     -         .byte RETURN, NULL
2ed7: 20 9f ff  -         jsr scnkey  // scan keyboard
2eda: 20 e4 ff  -         jsr getin	// put result into A
2edd: f0 f8     -         beq !no_key-
2edf: a2 00     -         ldx #$00
2ee1: bd f0 2e  -         lda msg,x
2ee4: f0 07     -         beq !done+
2ee6: 20 d2 ff  -         jsr kernal_chrout
2ee9: e8        -         inx
2eea: 4c e1 2e  -         jmp !loop-
2eed: 4c f2 2e  -         jmp !done+
2ef0: 0d 00     - newline:.byte RETURN, NULL
2ef2: a2 00     -         ldx #$00
2ef4: 8e 23 40  -         stx TEST_NAME_COUNT
2ef7: 60        -         rts
2ef8: ee 23 40  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
2efb: ad 86 02  -         lda foreground_color
2efe: 48        -         pha
2eff: a9 0f     -         lda #color
2f01: 8d 86 02  -         sta foreground_color
2f04: a2 00     -         ldx #$00
2f06: bd 19 2f  -         lda msg,x
2f09: f0 07     -         beq !done+
2f0b: 20 d2 ff  -         jsr kernal_chrout
2f0e: e8        -         inx
2f0f: 4c 06 2f  -         jmp !loop-
2f12: 68        -         pla
2f13: 8d 86 02  -         sta foreground_color
2f16: 4c 2b 2f  -         jmp !done+
2f19: 20 20     - memory: .fill spacing, spacebar
2f1b: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
2f27: 2e 2e 2e  -         .text "..."
2f2a: 00        -         .byte NULL
2f2b: 20 58 09  -         jsr SW16
2f2e: 15        -         .byte opcode(op, register)
2f2f: 0a 00     -         .word address.getValue()
2f31: b0        -         .byte opcode($b0, register) }
2f32: a5        -         .byte opcode($a0, register) }
2f33: 07 07     -         .byte $07, effective_address(ea,*) }
2f35: 01 00     -         .byte $01, effective_address(ea,*) }
2f37: 10        -         .byte opcode(op, register)
2f38: dc fe     -         .word address.getValue()
2f3a: 01 05     -         .byte $01, effective_address(ea,*) }
2f3c: 10        -         .byte opcode(op, register)
2f3d: 23 01     -         .word address.getValue()
2f3f: 01 00     -         .byte $01, effective_address(ea,*) }
2f41: 00        -         .byte $00 }
2f42: ee 21 40  -         inc TEST_COUNT
2f45: ad 86 02  -         lda foreground_color
2f48: 48        -         pha
2f49: a9 0e     -         lda #color
2f4b: 8d 86 02  -         sta foreground_color
2f4e: a2 00     -         ldx #$00
2f50: bd 63 2f  -         lda msg,x
2f53: f0 07     -         beq !done+
2f55: 20 d2 ff  -         jsr kernal_chrout
2f58: e8        -         inx
2f59: 4c 50 2f  -         jmp !loop-
2f5c: 68        -         pla
2f5d: 8d 86 02  -         sta foreground_color
2f60: 4c 67 2f  -         jmp !done+
2f63: 20        - memory: .byte spacebar
2f64: 32        -         .text description
2f65: 3a        -         .text ":"
2f66: 00        -         .byte NULL
2f67: a6 17     -         ldx rl(register.getValue())
2f69: a4 18     -         ldy rh(register.getValue())
2f6b: e0 23     -         cpx #<value
2f6d: d0 25     -         bne !failed+
2f6f: c0 01     -         cpy #>value
2f71: d0 21     -         bne !failed+
2f73: ee 22 40  -         inc TEST_PASS_COUNT
2f76: ad 86 02  -         lda foreground_color
2f79: 48        -         pha
2f7a: a9 05     -         lda #color
2f7c: 8d 86 02  -         sta foreground_color
2f7f: a2 00     -         ldx #$00
2f81: bd 1d 40  -         lda msg,x
2f84: f0 07     -         beq !done+
2f86: 20 d2 ff  -         jsr kernal_chrout
2f89: e8        -         inx
2f8a: 4c 81 2f  -         jmp !loop-
2f8d: 68        -         pla
2f8e: 8d 86 02  -         sta foreground_color
2f91: 4c af 2f  -         jmp !done+
2f94: ad 86 02  -         lda foreground_color
2f97: 48        -         pha
2f98: a9 02     -         lda #color
2f9a: 8d 86 02  -         sta foreground_color
2f9d: a2 00     -         ldx #$00
2f9f: bd 1f 40  -         lda msg,x
2fa2: f0 07     -         beq !done+
2fa4: 20 d2 ff  -         jsr kernal_chrout
2fa7: e8        -         inx
2fa8: 4c 9f 2f  -         jmp !loop-
2fab: 68        -         pla
2fac: 8d 86 02  -         sta foreground_color
2faf: a2 00     -         ldx #$00
2fb1: bd c0 2f  -         lda msg,x
2fb4: f0 07     -         beq !done+
2fb6: 20 d2 ff  -         jsr kernal_chrout
2fb9: e8        -         inx
2fba: 4c b1 2f  -         jmp !loop-
2fbd: 4c c2 2f  -         jmp !done+
2fc0: 0d 00     - memory: .byte RETURN, NULL
2fc2: ae 23 40  -         ldx TEST_NAME_COUNT
2fc5: e0 15     -         cpx #TESTS_PER_PAGE
2fc7: d0 5d     -         bne !exit+
2fc9: ad 86 02  -         lda foreground_color
2fcc: 48        -         pha
2fcd: a9 01     -         lda #color
2fcf: 8d 86 02  -         sta foreground_color
2fd2: a2 00     -         ldx #$00
2fd4: bd e7 2f  -         lda msg,x
2fd7: f0 07     -         beq !done+
2fd9: 20 d2 ff  -         jsr kernal_chrout
2fdc: e8        -         inx
2fdd: 4c d4 2f  -         jmp !loop-
2fe0: 68        -         pla
2fe1: 8d 86 02  -         sta foreground_color
2fe4: 4c 06 30  -         jmp !no_key+
2fe7: 0d        - memory: .byte RETURN
2fe8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2ff8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3004: 0d 00     -         .byte RETURN, NULL
3006: 20 9f ff  -         jsr scnkey  // scan keyboard
3009: 20 e4 ff  -         jsr getin	// put result into A
300c: f0 f8     -         beq !no_key-
300e: a2 00     -         ldx #$00
3010: bd 1f 30  -         lda msg,x
3013: f0 07     -         beq !done+
3015: 20 d2 ff  -         jsr kernal_chrout
3018: e8        -         inx
3019: 4c 10 30  -         jmp !loop-
301c: 4c 21 30  -         jmp !done+
301f: 0d 00     - newline:.byte RETURN, NULL
3021: a2 00     -         ldx #$00
3023: 8e 23 40  -         stx TEST_NAME_COUNT
3026: 60        -         rts
3027: ee 23 40  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
302a: ad 86 02  -         lda foreground_color
302d: 48        -         pha
302e: a9 0f     -         lda #color
3030: 8d 86 02  -         sta foreground_color
3033: a2 00     -         ldx #$00
3035: bd 48 30  -         lda msg,x
3038: f0 07     -         beq !done+
303a: 20 d2 ff  -         jsr kernal_chrout
303d: e8        -         inx
303e: 4c 35 30  -         jmp !loop-
3041: 68        -         pla
3042: 8d 86 02  -         sta foreground_color
3045: 4c 5a 30  -         jmp !done+
3048: 20 20     - memory: .fill spacing, spacebar
304a: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
3056: 2e 2e 2e  -         .text "..."
3059: 00        -         .byte NULL
305a: 20 58 09  -         jsr SW16
305d: 15        -         .byte opcode(op, register)
305e: 01 00     -         .word address.getValue()
3060: b0        -         .byte opcode($b0, register) }
3061: b5        -         .byte opcode($b0, register) }
3062: 08 07     -         .byte $08, effective_address(ea,*) }
3064: 01 00     -         .byte $01, effective_address(ea,*) }
3066: 10        -         .byte opcode(op, register)
3067: dc fe     -         .word address.getValue()
3069: 01 05     -         .byte $01, effective_address(ea,*) }
306b: 10        -         .byte opcode(op, register)
306c: 23 01     -         .word address.getValue()
306e: 01 00     -         .byte $01, effective_address(ea,*) }
3070: 00        -         .byte $00 }
3071: ee 21 40  -         inc TEST_COUNT
3074: ad 86 02  -         lda foreground_color
3077: 48        -         pha
3078: a9 0e     -         lda #color
307a: 8d 86 02  -         sta foreground_color
307d: a2 00     -         ldx #$00
307f: bd 92 30  -         lda msg,x
3082: f0 07     -         beq !done+
3084: 20 d2 ff  -         jsr kernal_chrout
3087: e8        -         inx
3088: 4c 7f 30  -         jmp !loop-
308b: 68        -         pla
308c: 8d 86 02  -         sta foreground_color
308f: 4c 96 30  -         jmp !done+
3092: 20        - memory: .byte spacebar
3093: 32        -         .text description
3094: 3a        -         .text ":"
3095: 00        -         .byte NULL
3096: a6 17     -         ldx rl(register.getValue())
3098: a4 18     -         ldy rh(register.getValue())
309a: e0 23     -         cpx #<value
309c: d0 25     -         bne !failed+
309e: c0 01     -         cpy #>value
30a0: d0 21     -         bne !failed+
30a2: ee 22 40  -         inc TEST_PASS_COUNT
30a5: ad 86 02  -         lda foreground_color
30a8: 48        -         pha
30a9: a9 05     -         lda #color
30ab: 8d 86 02  -         sta foreground_color
30ae: a2 00     -         ldx #$00
30b0: bd 1d 40  -         lda msg,x
30b3: f0 07     -         beq !done+
30b5: 20 d2 ff  -         jsr kernal_chrout
30b8: e8        -         inx
30b9: 4c b0 30  -         jmp !loop-
30bc: 68        -         pla
30bd: 8d 86 02  -         sta foreground_color
30c0: 4c de 30  -         jmp !done+
30c3: ad 86 02  -         lda foreground_color
30c6: 48        -         pha
30c7: a9 02     -         lda #color
30c9: 8d 86 02  -         sta foreground_color
30cc: a2 00     -         ldx #$00
30ce: bd 1f 40  -         lda msg,x
30d1: f0 07     -         beq !done+
30d3: 20 d2 ff  -         jsr kernal_chrout
30d6: e8        -         inx
30d7: 4c ce 30  -         jmp !loop-
30da: 68        -         pla
30db: 8d 86 02  -         sta foreground_color
30de: a2 00     -         ldx #$00
30e0: bd ef 30  -         lda msg,x
30e3: f0 07     -         beq !done+
30e5: 20 d2 ff  -         jsr kernal_chrout
30e8: e8        -         inx
30e9: 4c e0 30  -         jmp !loop-
30ec: 4c f1 30  -         jmp !done+
30ef: 0d 00     - memory: .byte RETURN, NULL
30f1: ae 23 40  -         ldx TEST_NAME_COUNT
30f4: e0 15     -         cpx #TESTS_PER_PAGE
30f6: d0 5d     -         bne !exit+
30f8: ad 86 02  -         lda foreground_color
30fb: 48        -         pha
30fc: a9 01     -         lda #color
30fe: 8d 86 02  -         sta foreground_color
3101: a2 00     -         ldx #$00
3103: bd 16 31  -         lda msg,x
3106: f0 07     -         beq !done+
3108: 20 d2 ff  -         jsr kernal_chrout
310b: e8        -         inx
310c: 4c 03 31  -         jmp !loop-
310f: 68        -         pla
3110: 8d 86 02  -         sta foreground_color
3113: 4c 35 31  -         jmp !no_key+
3116: 0d        - memory: .byte RETURN
3117: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3127: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3133: 0d 00     -         .byte RETURN, NULL
3135: 20 9f ff  -         jsr scnkey  // scan keyboard
3138: 20 e4 ff  -         jsr getin	// put result into A
313b: f0 f8     -         beq !no_key-
313d: a2 00     -         ldx #$00
313f: bd 4e 31  -         lda msg,x
3142: f0 07     -         beq !done+
3144: 20 d2 ff  -         jsr kernal_chrout
3147: e8        -         inx
3148: 4c 3f 31  -         jmp !loop-
314b: 4c 50 31  -         jmp !done+
314e: 0d 00     - newline:.byte RETURN, NULL
3150: a2 00     -         ldx #$00
3152: 8e 23 40  -         stx TEST_NAME_COUNT
3155: 60        -         rts
3156: ee 23 40  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
3159: ad 86 02  -         lda foreground_color
315c: 48        -         pha
315d: a9 0f     -         lda #color
315f: 8d 86 02  -         sta foreground_color
3162: a2 00     -         ldx #$00
3164: bd 77 31  -         lda msg,x
3167: f0 07     -         beq !done+
3169: 20 d2 ff  -         jsr kernal_chrout
316c: e8        -         inx
316d: 4c 64 31  -         jmp !loop-
3170: 68        -         pla
3171: 8d 86 02  -         sta foreground_color
3174: 4c 8a 31  -         jmp !done+
3177: 20 20     - memory: .fill spacing, spacebar
3179: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
3186: 2e 2e 2e  -         .text "..."
3189: 00        -         .byte NULL
318a: 20 58 09  -         jsr SW16
318d: 15        -         .byte opcode(op, register)
318e: 02 00     -         .word address.getValue()
3190: b0        -         .byte opcode($b0, register) }
3191: b5        -         .byte opcode($b0, register) }
3192: 09 07     -         .byte $09, effective_address(ea,*) }
3194: 01 00     -         .byte $01, effective_address(ea,*) }
3196: 10        -         .byte opcode(op, register)
3197: dc fe     -         .word address.getValue()
3199: 01 05     -         .byte $01, effective_address(ea,*) }
319b: 10        -         .byte opcode(op, register)
319c: 23 01     -         .word address.getValue()
319e: 01 00     -         .byte $01, effective_address(ea,*) }
31a0: 00        -         .byte $00 }
31a1: ee 21 40  -         inc TEST_COUNT
31a4: ad 86 02  -         lda foreground_color
31a7: 48        -         pha
31a8: a9 0e     -         lda #color
31aa: 8d 86 02  -         sta foreground_color
31ad: a2 00     -         ldx #$00
31af: bd c2 31  -         lda msg,x
31b2: f0 07     -         beq !done+
31b4: 20 d2 ff  -         jsr kernal_chrout
31b7: e8        -         inx
31b8: 4c af 31  -         jmp !loop-
31bb: 68        -         pla
31bc: 8d 86 02  -         sta foreground_color
31bf: 4c c6 31  -         jmp !done+
31c2: 20        - memory: .byte spacebar
31c3: 32        -         .text description
31c4: 3a        -         .text ":"
31c5: 00        -         .byte NULL
31c6: a6 17     -         ldx rl(register.getValue())
31c8: a4 18     -         ldy rh(register.getValue())
31ca: e0 23     -         cpx #<value
31cc: d0 25     -         bne !failed+
31ce: c0 01     -         cpy #>value
31d0: d0 21     -         bne !failed+
31d2: ee 22 40  -         inc TEST_PASS_COUNT
31d5: ad 86 02  -         lda foreground_color
31d8: 48        -         pha
31d9: a9 05     -         lda #color
31db: 8d 86 02  -         sta foreground_color
31de: a2 00     -         ldx #$00
31e0: bd 1d 40  -         lda msg,x
31e3: f0 07     -         beq !done+
31e5: 20 d2 ff  -         jsr kernal_chrout
31e8: e8        -         inx
31e9: 4c e0 31  -         jmp !loop-
31ec: 68        -         pla
31ed: 8d 86 02  -         sta foreground_color
31f0: 4c 0e 32  -         jmp !done+
31f3: ad 86 02  -         lda foreground_color
31f6: 48        -         pha
31f7: a9 02     -         lda #color
31f9: 8d 86 02  -         sta foreground_color
31fc: a2 00     -         ldx #$00
31fe: bd 1f 40  -         lda msg,x
3201: f0 07     -         beq !done+
3203: 20 d2 ff  -         jsr kernal_chrout
3206: e8        -         inx
3207: 4c fe 31  -         jmp !loop-
320a: 68        -         pla
320b: 8d 86 02  -         sta foreground_color
320e: a2 00     -         ldx #$00
3210: bd 1f 32  -         lda msg,x
3213: f0 07     -         beq !done+
3215: 20 d2 ff  -         jsr kernal_chrout
3218: e8        -         inx
3219: 4c 10 32  -         jmp !loop-
321c: 4c 21 32  -         jmp !done+
321f: 0d 00     - memory: .byte RETURN, NULL
3221: ae 23 40  -         ldx TEST_NAME_COUNT
3224: e0 15     -         cpx #TESTS_PER_PAGE
3226: d0 5d     -         bne !exit+
3228: ad 86 02  -         lda foreground_color
322b: 48        -         pha
322c: a9 01     -         lda #color
322e: 8d 86 02  -         sta foreground_color
3231: a2 00     -         ldx #$00
3233: bd 46 32  -         lda msg,x
3236: f0 07     -         beq !done+
3238: 20 d2 ff  -         jsr kernal_chrout
323b: e8        -         inx
323c: 4c 33 32  -         jmp !loop-
323f: 68        -         pla
3240: 8d 86 02  -         sta foreground_color
3243: 4c 65 32  -         jmp !no_key+
3246: 0d        - memory: .byte RETURN
3247: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3257: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3263: 0d 00     -         .byte RETURN, NULL
3265: 20 9f ff  -         jsr scnkey  // scan keyboard
3268: 20 e4 ff  -         jsr getin	// put result into A
326b: f0 f8     -         beq !no_key-
326d: a2 00     -         ldx #$00
326f: bd 7e 32  -         lda msg,x
3272: f0 07     -         beq !done+
3274: 20 d2 ff  -         jsr kernal_chrout
3277: e8        -         inx
3278: 4c 6f 32  -         jmp !loop-
327b: 4c 80 32  -         jmp !done+
327e: 0d 00     - newline:.byte RETURN, NULL
3280: a2 00     -         ldx #$00
3282: 8e 23 40  -         stx TEST_NAME_COUNT
3285: 60        -         rts
3286: ee 23 40  - BREAK_TEST:inc TEST_NAME_COUNT
3289: ad 86 02  -         lda foreground_color
328c: 48        -         pha
328d: a9 0f     -         lda #color
328f: 8d 86 02  -         sta foreground_color
3292: a2 00     -         ldx #$00
3294: bd a7 32  -         lda msg,x
3297: f0 07     -         beq !done+
3299: 20 d2 ff  -         jsr kernal_chrout
329c: e8        -         inx
329d: 4c 94 32  -         jmp !loop-
32a0: 68        -         pla
32a1: 8d 86 02  -         sta foreground_color
32a4: 4c b2 32  -         jmp !done+
32a7: 20 20     - memory: .fill spacing, spacebar
32a9: 42 52 45 41 4b                                   -         .text name
32ae: 2e 2e 2e  -         .text "..."
32b1: 00        -         .byte NULL
32b2: a9 35     -         lda #<handler
32b4: 8d 16 03  -         sta address
32b7: a9 0b     -         lda #>handler
32b9: 8d 17 03  -         sta address+1
32bc: 20 58 09  -         jsr SW16
32bf: 10        -         .byte opcode(op, register)
32c0: ed fe     -         .word address.getValue()
32c2: 0a        -         .byte $0a }
32c3: 0d        -         .byte $0d
32c4: 33        -         .byte >(address.getValue()-1)
32c5: af        -         .byte <(address.getValue()-1)
32c6: 10        -         .byte opcode(op, register)
32c7: 23 01     -         .word address.getValue()
32c9: 0a        -         .byte $0a }
32ca: 00        -         .byte $00 }
32cb: ee 21 40  -         inc TEST_COUNT
32ce: ad 86 02  -         lda foreground_color
32d1: 48        -         pha
32d2: a9 0e     -         lda #color
32d4: 8d 86 02  -         sta foreground_color
32d7: a2 00     -         ldx #$00
32d9: bd ec 32  -         lda msg,x
32dc: f0 07     -         beq !done+
32de: 20 d2 ff  -         jsr kernal_chrout
32e1: e8        -         inx
32e2: 4c d9 32  -         jmp !loop-
32e5: 68        -         pla
32e6: 8d 86 02  -         sta foreground_color
32e9: 4c f0 32  -         jmp !done+
32ec: 20        - memory: .byte spacebar
32ed: 32        -         .text description
32ee: 3a        -         .text ":"
32ef: 00        -         .byte NULL
32f0: a6 17     -         ldx rl(register.getValue())
32f2: a4 18     -         ldy rh(register.getValue())
32f4: e0 23     -         cpx #<value
32f6: d0 25     -         bne !failed+
32f8: c0 01     -         cpy #>value
32fa: d0 21     -         bne !failed+
32fc: ee 22 40  -         inc TEST_PASS_COUNT
32ff: ad 86 02  -         lda foreground_color
3302: 48        -         pha
3303: a9 05     -         lda #color
3305: 8d 86 02  -         sta foreground_color
3308: a2 00     -         ldx #$00
330a: bd 1d 40  -         lda msg,x
330d: f0 07     -         beq !done+
330f: 20 d2 ff  -         jsr kernal_chrout
3312: e8        -         inx
3313: 4c 0a 33  -         jmp !loop-
3316: 68        -         pla
3317: 8d 86 02  -         sta foreground_color
331a: 4c 38 33  -         jmp !done+
331d: ad 86 02  -         lda foreground_color
3320: 48        -         pha
3321: a9 02     -         lda #color
3323: 8d 86 02  -         sta foreground_color
3326: a2 00     -         ldx #$00
3328: bd 1f 40  -         lda msg,x
332b: f0 07     -         beq !done+
332d: 20 d2 ff  -         jsr kernal_chrout
3330: e8        -         inx
3331: 4c 28 33  -         jmp !loop-
3334: 68        -         pla
3335: 8d 86 02  -         sta foreground_color
3338: a2 00     -         ldx #$00
333a: bd 49 33  -         lda msg,x
333d: f0 07     -         beq !done+
333f: 20 d2 ff  -         jsr kernal_chrout
3342: e8        -         inx
3343: 4c 3a 33  -         jmp !loop-
3346: 4c 4b 33  -         jmp !done+
3349: 0d 00     - memory: .byte RETURN, NULL
334b: ae 23 40  -         ldx TEST_NAME_COUNT
334e: e0 15     -         cpx #TESTS_PER_PAGE
3350: d0 5d     -         bne !exit+
3352: ad 86 02  -         lda foreground_color
3355: 48        -         pha
3356: a9 01     -         lda #color
3358: 8d 86 02  -         sta foreground_color
335b: a2 00     -         ldx #$00
335d: bd 70 33  -         lda msg,x
3360: f0 07     -         beq !done+
3362: 20 d2 ff  -         jsr kernal_chrout
3365: e8        -         inx
3366: 4c 5d 33  -         jmp !loop-
3369: 68        -         pla
336a: 8d 86 02  -         sta foreground_color
336d: 4c 8f 33  -         jmp !no_key+
3370: 0d        - memory: .byte RETURN
3371: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3381: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
338d: 0d 00     -         .byte RETURN, NULL
338f: 20 9f ff  -         jsr scnkey  // scan keyboard
3392: 20 e4 ff  -         jsr getin	// put result into A
3395: f0 f8     -         beq !no_key-
3397: a2 00     -         ldx #$00
3399: bd a8 33  -         lda msg,x
339c: f0 07     -         beq !done+
339e: 20 d2 ff  -         jsr kernal_chrout
33a1: e8        -         inx
33a2: 4c 99 33  -         jmp !loop-
33a5: 4c aa 33  -         jmp !done+
33a8: 0d 00     - newline:.byte RETURN, NULL
33aa: a2 00     -         ldx #$00
33ac: 8e 23 40  -         stx TEST_NAME_COUNT
33af: 60        -         rts
33b0: ee 21 40  -         inc TEST_COUNT
33b3: ad 86 02  -         lda foreground_color
33b6: 48        -         pha
33b7: a9 0e     -         lda #color
33b9: 8d 86 02  -         sta foreground_color
33bc: a2 00     -         ldx #$00
33be: bd d1 33  -         lda msg,x
33c1: f0 07     -         beq !done+
33c3: 20 d2 ff  -         jsr kernal_chrout
33c6: e8        -         inx
33c7: 4c be 33  -         jmp !loop-
33ca: 68        -         pla
33cb: 8d 86 02  -         sta foreground_color
33ce: 4c d5 33  -         jmp !done+
33d1: 20        - memory: .byte spacebar
33d2: 31        -         .text description
33d3: 3a        -         .text ":"
33d4: 00        -         .byte NULL
33d5: a6 17     -         ldx rl(register.getValue())
33d7: a4 18     -         ldy rh(register.getValue())
33d9: e0 ed     -         cpx #<value
33db: d0 25     -         bne !failed+
33dd: c0 fe     -         cpy #>value
33df: d0 21     -         bne !failed+
33e1: ee 22 40  -         inc TEST_PASS_COUNT
33e4: ad 86 02  -         lda foreground_color
33e7: 48        -         pha
33e8: a9 05     -         lda #color
33ea: 8d 86 02  -         sta foreground_color
33ed: a2 00     -         ldx #$00
33ef: bd 1d 40  -         lda msg,x
33f2: f0 07     -         beq !done+
33f4: 20 d2 ff  -         jsr kernal_chrout
33f7: e8        -         inx
33f8: 4c ef 33  -         jmp !loop-
33fb: 68        -         pla
33fc: 8d 86 02  -         sta foreground_color
33ff: 4c 1d 34  -         jmp !done+
3402: ad 86 02  -         lda foreground_color
3405: 48        -         pha
3406: a9 02     -         lda #color
3408: 8d 86 02  -         sta foreground_color
340b: a2 00     -         ldx #$00
340d: bd 1f 40  -         lda msg,x
3410: f0 07     -         beq !done+
3412: 20 d2 ff  -         jsr kernal_chrout
3415: e8        -         inx
3416: 4c 0d 34  -         jmp !loop-
3419: 68        -         pla
341a: 8d 86 02  -         sta foreground_color
341d: 60        -         rts
341e: ee 23 40  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
3421: ad 86 02  -         lda foreground_color
3424: 48        -         pha
3425: a9 0f     -         lda #color
3427: 8d 86 02  -         sta foreground_color
342a: a2 00     -         ldx #$00
342c: bd 3f 34  -         lda msg,x
342f: f0 07     -         beq !done+
3431: 20 d2 ff  -         jsr kernal_chrout
3434: e8        -         inx
3435: 4c 2c 34  -         jmp !loop-
3438: 68        -         pla
3439: 8d 86 02  -         sta foreground_color
343c: 4c 4e 34  -         jmp !done+
343f: 20 20     - memory: .fill spacing, spacebar
3441: 49 4e 54 20 42 52 45 41 4b                       -         .text name
344a: 2e 2e 2e  -         .text "..."
344d: 00        -         .byte NULL
344e: a9 35     -         lda #<handler
3450: 8d 16 03  -         sta address
3453: a9 0b     -         lda #>handler
3455: 8d 17 03  -         sta address+1
3458: 20 58 09  -         jsr SW16
345b: 10        -         .byte opcode(op, register)
345c: ed fe     -         .word address.getValue()
345e: 0a        -         .byte $0a }
345f: 0d        -         .byte $0d
3460: 34        -         .byte >(address.getValue()-1)
3461: e1        -         .byte <(address.getValue()-1)
3462: 10        -         .byte opcode(op, register)
3463: 23 01     -         .word address.getValue()
3465: 0a        -         .byte $0a }
3466: 0d        -         .byte $0d
3467: 35        -         .byte >(address.getValue()-1)
3468: 4f        -         .byte <(address.getValue()-1)
3469: 00        -         .byte $00 }
346a: a2 00     -         ldx #$00
346c: bd 7b 34  -         lda msg,x
346f: f0 07     -         beq !done+
3471: 20 d2 ff  -         jsr kernal_chrout
3474: e8        -         inx
3475: 4c 6c 34  -         jmp !loop-
3478: 4c 7d 34  -         jmp !done+
347b: 0d 00     - memory: .byte RETURN, NULL
347d: ae 23 40  -         ldx TEST_NAME_COUNT
3480: e0 15     -         cpx #TESTS_PER_PAGE
3482: d0 5d     -         bne !exit+
3484: ad 86 02  -         lda foreground_color
3487: 48        -         pha
3488: a9 01     -         lda #color
348a: 8d 86 02  -         sta foreground_color
348d: a2 00     -         ldx #$00
348f: bd a2 34  -         lda msg,x
3492: f0 07     -         beq !done+
3494: 20 d2 ff  -         jsr kernal_chrout
3497: e8        -         inx
3498: 4c 8f 34  -         jmp !loop-
349b: 68        -         pla
349c: 8d 86 02  -         sta foreground_color
349f: 4c c1 34  -         jmp !no_key+
34a2: 0d        - memory: .byte RETURN
34a3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
34b3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
34bf: 0d 00     -         .byte RETURN, NULL
34c1: 20 9f ff  -         jsr scnkey  // scan keyboard
34c4: 20 e4 ff  -         jsr getin	// put result into A
34c7: f0 f8     -         beq !no_key-
34c9: a2 00     -         ldx #$00
34cb: bd da 34  -         lda msg,x
34ce: f0 07     -         beq !done+
34d0: 20 d2 ff  -         jsr kernal_chrout
34d3: e8        -         inx
34d4: 4c cb 34  -         jmp !loop-
34d7: 4c dc 34  -         jmp !done+
34da: 0d 00     - newline:.byte RETURN, NULL
34dc: a2 00     -         ldx #$00
34de: 8e 23 40  -         stx TEST_NAME_COUNT
34e1: 60        -         rts
34e2: ee 21 40  -         inc TEST_COUNT
34e5: ad 86 02  -         lda foreground_color
34e8: 48        -         pha
34e9: a9 0e     -         lda #color
34eb: 8d 86 02  -         sta foreground_color
34ee: a2 00     -         ldx #$00
34f0: bd 03 35  -         lda msg,x
34f3: f0 07     -         beq !done+
34f5: 20 d2 ff  -         jsr kernal_chrout
34f8: e8        -         inx
34f9: 4c f0 34  -         jmp !loop-
34fc: 68        -         pla
34fd: 8d 86 02  -         sta foreground_color
3500: 4c 07 35  -         jmp !done+
3503: 20        - memory: .byte spacebar
3504: 31        -         .text description
3505: 3a        -         .text ":"
3506: 00        -         .byte NULL
3507: a6 17     -         ldx rl(register.getValue())
3509: a4 18     -         ldy rh(register.getValue())
350b: e0 ed     -         cpx #<value
350d: d0 25     -         bne !failed+
350f: c0 fe     -         cpy #>value
3511: d0 21     -         bne !failed+
3513: ee 22 40  -         inc TEST_PASS_COUNT
3516: ad 86 02  -         lda foreground_color
3519: 48        -         pha
351a: a9 05     -         lda #color
351c: 8d 86 02  -         sta foreground_color
351f: a2 00     -         ldx #$00
3521: bd 1d 40  -         lda msg,x
3524: f0 07     -         beq !done+
3526: 20 d2 ff  -         jsr kernal_chrout
3529: e8        -         inx
352a: 4c 21 35  -         jmp !loop-
352d: 68        -         pla
352e: 8d 86 02  -         sta foreground_color
3531: 4c 4f 35  -         jmp !done+
3534: ad 86 02  -         lda foreground_color
3537: 48        -         pha
3538: a9 02     -         lda #color
353a: 8d 86 02  -         sta foreground_color
353d: a2 00     -         ldx #$00
353f: bd 1f 40  -         lda msg,x
3542: f0 07     -         beq !done+
3544: 20 d2 ff  -         jsr kernal_chrout
3547: e8        -         inx
3548: 4c 3f 35  -         jmp !loop-
354b: 68        -         pla
354c: 8d 86 02  -         sta foreground_color
354f: 60        -         rts
3550: ee 21 40  -         inc TEST_COUNT
3553: ad 86 02  -         lda foreground_color
3556: 48        -         pha
3557: a9 0e     -         lda #color
3559: 8d 86 02  -         sta foreground_color
355c: a2 00     -         ldx #$00
355e: bd 71 35  -         lda msg,x
3561: f0 07     -         beq !done+
3563: 20 d2 ff  -         jsr kernal_chrout
3566: e8        -         inx
3567: 4c 5e 35  -         jmp !loop-
356a: 68        -         pla
356b: 8d 86 02  -         sta foreground_color
356e: 4c 75 35  -         jmp !done+
3571: 20        - memory: .byte spacebar
3572: 32        -         .text description
3573: 3a        -         .text ":"
3574: 00        -         .byte NULL
3575: a6 17     -         ldx rl(register.getValue())
3577: a4 18     -         ldy rh(register.getValue())
3579: e0 23     -         cpx #<value
357b: d0 25     -         bne !failed+
357d: c0 01     -         cpy #>value
357f: d0 21     -         bne !failed+
3581: ee 22 40  -         inc TEST_PASS_COUNT
3584: ad 86 02  -         lda foreground_color
3587: 48        -         pha
3588: a9 05     -         lda #color
358a: 8d 86 02  -         sta foreground_color
358d: a2 00     -         ldx #$00
358f: bd 1d 40  -         lda msg,x
3592: f0 07     -         beq !done+
3594: 20 d2 ff  -         jsr kernal_chrout
3597: e8        -         inx
3598: 4c 8f 35  -         jmp !loop-
359b: 68        -         pla
359c: 8d 86 02  -         sta foreground_color
359f: 4c bd 35  -         jmp !done+
35a2: ad 86 02  -         lda foreground_color
35a5: 48        -         pha
35a6: a9 02     -         lda #color
35a8: 8d 86 02  -         sta foreground_color
35ab: a2 00     -         ldx #$00
35ad: bd 1f 40  -         lda msg,x
35b0: f0 07     -         beq !done+
35b2: 20 d2 ff  -         jsr kernal_chrout
35b5: e8        -         inx
35b6: 4c ad 35  -         jmp !loop-
35b9: 68        -         pla
35ba: 8d 86 02  -         sta foreground_color
35bd: 60        -         rts
35be: ee 23 40  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
35c1: ad 86 02  -         lda foreground_color
35c4: 48        -         pha
35c5: a9 0f     -         lda #color
35c7: 8d 86 02  -         sta foreground_color
35ca: a2 00     -         ldx #$00
35cc: bd df 35  -         lda msg,x
35cf: f0 07     -         beq !done+
35d1: 20 d2 ff  -         jsr kernal_chrout
35d4: e8        -         inx
35d5: 4c cc 35  -         jmp !loop-
35d8: 68        -         pla
35d9: 8d 86 02  -         sta foreground_color
35dc: 4c f2 35  -         jmp !done+
35df: 20 20     - memory: .fill spacing, spacebar
35e1: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
35ee: 2e 2e 2e  -         .text "..."
35f1: 00        -         .byte NULL
35f2: 20 58 09  -         jsr SW16
35f5: 15        -         .byte opcode(op, register)
35f6: 3f 40     -         .word address.getValue()
35f8: 14        -         .byte opcode(op, register)
35f9: 4f 40     -         .word address.getValue()
35fb: 16        -         .byte opcode(op, register)
35fc: 4f 40     -         .word address.getValue()
35fe: 0c 04     -         .byte $0c, effective_address(ea,*) }
3600: 00        -         .byte $00 }
3601: 4c 0b 36  -         jmp !done+
3604: 45        -         .byte opcode($40, register) }
3605: 56        -         .byte opcode($50, register) }
3606: 24        -         .byte opcode($20, register) }
3607: d5        -         .byte opcode($d0, register) }
3608: 04 fa     -         .byte $04, effective_address(ea,*) }
360a: 0b        -         .byte $0b }
360b: ee 21 40  -         inc TEST_COUNT
360e: ad 86 02  -         lda foreground_color
3611: 48        -         pha
3612: a9 0e     -         lda #color
3614: 8d 86 02  -         sta foreground_color
3617: a2 00     -         ldx #$00
3619: bd 2c 36  -         lda msg,x
361c: f0 07     -         beq !done+
361e: 20 d2 ff  -         jsr kernal_chrout
3621: e8        -         inx
3622: 4c 19 36  -         jmp !loop-
3625: 68        -         pla
3626: 8d 86 02  -         sta foreground_color
3629: 4c 32 36  -         jmp !done+
362c: 20        - memory: .byte spacebar
362d: 4d 45 4d  -         .text description
3630: 3a        -         .text ":"
3631: 00        -         .byte NULL
3632: a2 ff     -         ldx #$ff
3634: e8        -         inx
3635: e0 10     -         cpx #size
3637: f0 0b     -         beq !success+
3639: bd 3f 40  -         lda source,x
363c: dd 4f 40  -         cmp dest,x
363f: f0 f3     -         beq !loop-
3641: 4c 65 36  -         jmp !failed+
3644: ee 22 40  -         inc TEST_PASS_COUNT
3647: ad 86 02  -         lda foreground_color
364a: 48        -         pha
364b: a9 05     -         lda #color
364d: 8d 86 02  -         sta foreground_color
3650: a2 00     -         ldx #$00
3652: bd 1d 40  -         lda msg,x
3655: f0 07     -         beq !done+
3657: 20 d2 ff  -         jsr kernal_chrout
365a: e8        -         inx
365b: 4c 52 36  -         jmp !loop-
365e: 68        -         pla
365f: 8d 86 02  -         sta foreground_color
3662: 4c 80 36  -         jmp !done+
3665: ad 86 02  -         lda foreground_color
3668: 48        -         pha
3669: a9 02     -         lda #color
366b: 8d 86 02  -         sta foreground_color
366e: a2 00     -         ldx #$00
3670: bd 1f 40  -         lda msg,x
3673: f0 07     -         beq !done+
3675: 20 d2 ff  -         jsr kernal_chrout
3678: e8        -         inx
3679: 4c 70 36  -         jmp !loop-
367c: 68        -         pla
367d: 8d 86 02  -         sta foreground_color
3680: a2 00     -         ldx #$00
3682: bd 91 36  -         lda msg,x
3685: f0 07     -         beq !done+
3687: 20 d2 ff  -         jsr kernal_chrout
368a: e8        -         inx
368b: 4c 82 36  -         jmp !loop-
368e: 4c 93 36  -         jmp !done+
3691: 0d 00     - memory: .byte RETURN, NULL
3693: ae 23 40  -         ldx TEST_NAME_COUNT
3696: e0 15     -         cpx #TESTS_PER_PAGE
3698: d0 5d     -         bne !exit+
369a: ad 86 02  -         lda foreground_color
369d: 48        -         pha
369e: a9 01     -         lda #color
36a0: 8d 86 02  -         sta foreground_color
36a3: a2 00     -         ldx #$00
36a5: bd b8 36  -         lda msg,x
36a8: f0 07     -         beq !done+
36aa: 20 d2 ff  -         jsr kernal_chrout
36ad: e8        -         inx
36ae: 4c a5 36  -         jmp !loop-
36b1: 68        -         pla
36b2: 8d 86 02  -         sta foreground_color
36b5: 4c d7 36  -         jmp !no_key+
36b8: 0d        - memory: .byte RETURN
36b9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
36c9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
36d5: 0d 00     -         .byte RETURN, NULL
36d7: 20 9f ff  -         jsr scnkey  // scan keyboard
36da: 20 e4 ff  -         jsr getin	// put result into A
36dd: f0 f8     -         beq !no_key-
36df: a2 00     -         ldx #$00
36e1: bd f0 36  -         lda msg,x
36e4: f0 07     -         beq !done+
36e6: 20 d2 ff  -         jsr kernal_chrout
36e9: e8        -         inx
36ea: 4c e1 36  -         jmp !loop-
36ed: 4c f2 36  -         jmp !done+
36f0: 0d 00     - newline:.byte RETURN, NULL
36f2: a2 00     -         ldx #$00
36f4: 8e 23 40  -         stx TEST_NAME_COUNT
36f7: 60        -         rts
36f8: ee 23 40  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
36fb: ad 86 02  -         lda foreground_color
36fe: 48        -         pha
36ff: a9 0f     -         lda #color
3701: 8d 86 02  -         sta foreground_color
3704: a2 00     -         ldx #$00
3706: bd 19 37  -         lda msg,x
3709: f0 07     -         beq !done+
370b: 20 d2 ff  -         jsr kernal_chrout
370e: e8        -         inx
370f: 4c 06 37  -         jmp !loop-
3712: 68        -         pla
3713: 8d 86 02  -         sta foreground_color
3716: 4c 2e 37  -         jmp !done+
3719: 20 20     - memory: .fill spacing, spacebar
371b: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
372a: 2e 2e 2e  -         .text "..."
372d: 00        -         .byte NULL
372e: 20 58 09  -         jsr SW16
3731: 10        -         .byte opcode(op, register)
3732: 34 12     -         .word address.getValue()
3734: 0c 04     -         .byte $0c, effective_address(ea,*) }
3736: 00        -         .byte $00 }
3737: 4c 3e 37  -         jmp !done+
373a: 10        -         .byte opcode(op, register)
373b: 78 56     -         .word address.getValue()
373d: 0b        -         .byte $0b }
373e: ee 21 40  -         inc TEST_COUNT
3741: ad 86 02  -         lda foreground_color
3744: 48        -         pha
3745: a9 0e     -         lda #color
3747: 8d 86 02  -         sta foreground_color
374a: a2 00     -         ldx #$00
374c: bd 5f 37  -         lda msg,x
374f: f0 07     -         beq !done+
3751: 20 d2 ff  -         jsr kernal_chrout
3754: e8        -         inx
3755: 4c 4c 37  -         jmp !loop-
3758: 68        -         pla
3759: 8d 86 02  -         sta foreground_color
375c: 4c 65 37  -         jmp !done+
375f: 20        - memory: .byte spacebar
3760: 53 55 42  -         .text description
3763: 3a        -         .text ":"
3764: 00        -         .byte NULL
3765: a6 17     -         ldx rl(register.getValue())
3767: a4 18     -         ldy rh(register.getValue())
3769: e0 78     -         cpx #<value
376b: d0 25     -         bne !failed+
376d: c0 56     -         cpy #>value
376f: d0 21     -         bne !failed+
3771: ee 22 40  -         inc TEST_PASS_COUNT
3774: ad 86 02  -         lda foreground_color
3777: 48        -         pha
3778: a9 05     -         lda #color
377a: 8d 86 02  -         sta foreground_color
377d: a2 00     -         ldx #$00
377f: bd 1d 40  -         lda msg,x
3782: f0 07     -         beq !done+
3784: 20 d2 ff  -         jsr kernal_chrout
3787: e8        -         inx
3788: 4c 7f 37  -         jmp !loop-
378b: 68        -         pla
378c: 8d 86 02  -         sta foreground_color
378f: 4c ad 37  -         jmp !done+
3792: ad 86 02  -         lda foreground_color
3795: 48        -         pha
3796: a9 02     -         lda #color
3798: 8d 86 02  -         sta foreground_color
379b: a2 00     -         ldx #$00
379d: bd 1f 40  -         lda msg,x
37a0: f0 07     -         beq !done+
37a2: 20 d2 ff  -         jsr kernal_chrout
37a5: e8        -         inx
37a6: 4c 9d 37  -         jmp !loop-
37a9: 68        -         pla
37aa: 8d 86 02  -         sta foreground_color
37ad: a2 00     -         ldx #$00
37af: bd be 37  -         lda msg,x
37b2: f0 07     -         beq !done+
37b4: 20 d2 ff  -         jsr kernal_chrout
37b7: e8        -         inx
37b8: 4c af 37  -         jmp !loop-
37bb: 4c c0 37  -         jmp !done+
37be: 0d 00     - memory: .byte RETURN, NULL
37c0: ae 23 40  -         ldx TEST_NAME_COUNT
37c3: e0 15     -         cpx #TESTS_PER_PAGE
37c5: d0 5d     -         bne !exit+
37c7: ad 86 02  -         lda foreground_color
37ca: 48        -         pha
37cb: a9 01     -         lda #color
37cd: 8d 86 02  -         sta foreground_color
37d0: a2 00     -         ldx #$00
37d2: bd e5 37  -         lda msg,x
37d5: f0 07     -         beq !done+
37d7: 20 d2 ff  -         jsr kernal_chrout
37da: e8        -         inx
37db: 4c d2 37  -         jmp !loop-
37de: 68        -         pla
37df: 8d 86 02  -         sta foreground_color
37e2: 4c 04 38  -         jmp !no_key+
37e5: 0d        - memory: .byte RETURN
37e6: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
37f6: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3802: 0d 00     -         .byte RETURN, NULL
3804: 20 9f ff  -         jsr scnkey  // scan keyboard
3807: 20 e4 ff  -         jsr getin	// put result into A
380a: f0 f8     -         beq !no_key-
380c: a2 00     -         ldx #$00
380e: bd 1d 38  -         lda msg,x
3811: f0 07     -         beq !done+
3813: 20 d2 ff  -         jsr kernal_chrout
3816: e8        -         inx
3817: 4c 0e 38  -         jmp !loop-
381a: 4c 1f 38  -         jmp !done+
381d: 0d 00     - newline:.byte RETURN, NULL
381f: a2 00     -         ldx #$00
3821: 8e 23 40  -         stx TEST_NAME_COUNT
3824: 60        -         rts
3825: ee 23 40  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
3828: ad 86 02  -         lda foreground_color
382b: 48        -         pha
382c: a9 0f     -         lda #color
382e: 8d 86 02  -         sta foreground_color
3831: a2 00     -         ldx #$00
3833: bd 46 38  -         lda msg,x
3836: f0 07     -         beq !done+
3838: 20 d2 ff  -         jsr kernal_chrout
383b: e8        -         inx
383c: 4c 33 38  -         jmp !loop-
383f: 68        -         pla
3840: 8d 86 02  -         sta foreground_color
3843: 4c 59 38  -         jmp !done+
3846: 20 20     - memory: .fill spacing, spacebar
3848: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
3855: 2e 2e 2e  -         .text "..."
3858: 00        -         .byte NULL
3859: 20 58 09  -         jsr SW16
385c: 15        -         .byte opcode(op, register)
385d: 00 00     -         .word address.getValue()
385f: 10        -         .byte opcode(op, register)
3860: 4a 39     -         .word address.getValue()
3862: 3f        -         .byte opcode($30, register) }
3863: 00        -         .byte $00 }
3864: ee 21 40  -         inc TEST_COUNT
3867: ad 86 02  -         lda foreground_color
386a: 48        -         pha
386b: a9 0e     -         lda #color
386d: 8d 86 02  -         sta foreground_color
3870: a2 00     -         ldx #$00
3872: bd 85 38  -         lda msg,x
3875: f0 07     -         beq !done+
3877: 20 d2 ff  -         jsr kernal_chrout
387a: e8        -         inx
387b: 4c 72 38  -         jmp !loop-
387e: 68        -         pla
387f: 8d 86 02  -         sta foreground_color
3882: 4c 8b 38  -         jmp !done+
3885: 20        - memory: .byte spacebar
3886: 53 45 54  -         .text description
3889: 3a        -         .text ":"
388a: 00        -         .byte NULL
388b: a6 21     -         ldx rl(register.getValue())
388d: a4 22     -         ldy rh(register.getValue())
388f: e0 34     -         cpx #<value
3891: d0 25     -         bne !failed+
3893: c0 12     -         cpy #>value
3895: d0 21     -         bne !failed+
3897: ee 22 40  -         inc TEST_PASS_COUNT
389a: ad 86 02  -         lda foreground_color
389d: 48        -         pha
389e: a9 05     -         lda #color
38a0: 8d 86 02  -         sta foreground_color
38a3: a2 00     -         ldx #$00
38a5: bd 1d 40  -         lda msg,x
38a8: f0 07     -         beq !done+
38aa: 20 d2 ff  -         jsr kernal_chrout
38ad: e8        -         inx
38ae: 4c a5 38  -         jmp !loop-
38b1: 68        -         pla
38b2: 8d 86 02  -         sta foreground_color
38b5: 4c d3 38  -         jmp !done+
38b8: ad 86 02  -         lda foreground_color
38bb: 48        -         pha
38bc: a9 02     -         lda #color
38be: 8d 86 02  -         sta foreground_color
38c1: a2 00     -         ldx #$00
38c3: bd 1f 40  -         lda msg,x
38c6: f0 07     -         beq !done+
38c8: 20 d2 ff  -         jsr kernal_chrout
38cb: e8        -         inx
38cc: 4c c3 38  -         jmp !loop-
38cf: 68        -         pla
38d0: 8d 86 02  -         sta foreground_color
38d3: a2 00     -         ldx #$00
38d5: bd e4 38  -         lda msg,x
38d8: f0 07     -         beq !done+
38da: 20 d2 ff  -         jsr kernal_chrout
38dd: e8        -         inx
38de: 4c d5 38  -         jmp !loop-
38e1: 4c e6 38  -         jmp !done+
38e4: 0d 00     - memory: .byte RETURN, NULL
38e6: ae 23 40  -         ldx TEST_NAME_COUNT
38e9: e0 15     -         cpx #TESTS_PER_PAGE
38eb: d0 5d     -         bne !exit+
38ed: ad 86 02  -         lda foreground_color
38f0: 48        -         pha
38f1: a9 01     -         lda #color
38f3: 8d 86 02  -         sta foreground_color
38f6: a2 00     -         ldx #$00
38f8: bd 0b 39  -         lda msg,x
38fb: f0 07     -         beq !done+
38fd: 20 d2 ff  -         jsr kernal_chrout
3900: e8        -         inx
3901: 4c f8 38  -         jmp !loop-
3904: 68        -         pla
3905: 8d 86 02  -         sta foreground_color
3908: 4c 2a 39  -         jmp !no_key+
390b: 0d        - memory: .byte RETURN
390c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
391c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3928: 0d 00     -         .byte RETURN, NULL
392a: 20 9f ff  -         jsr scnkey  // scan keyboard
392d: 20 e4 ff  -         jsr getin	// put result into A
3930: f0 f8     -         beq !no_key-
3932: a2 00     -         ldx #$00
3934: bd 43 39  -         lda msg,x
3937: f0 07     -         beq !done+
3939: 20 d2 ff  -         jsr kernal_chrout
393c: e8        -         inx
393d: 4c 34 39  -         jmp !loop-
3940: 4c 45 39  -         jmp !done+
3943: 0d 00     - newline:.byte RETURN, NULL
3945: a2 00     -         ldx #$00
3947: 8e 23 40  -         stx TEST_NAME_COUNT
394a: 60        -         rts
394b: 15        -         .byte opcode(op, register)
394c: 34 12     -         .word address.getValue()
394e: 10        -         .byte opcode(op, register)
394f: 62 38     -         .word address.getValue()
3951: 3f        -         .byte opcode($30, register) }
3952: ee 23 40  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
3955: ad 86 02  -         lda foreground_color
3958: 48        -         pha
3959: a9 0f     -         lda #color
395b: 8d 86 02  -         sta foreground_color
395e: a2 00     -         ldx #$00
3960: bd 73 39  -         lda msg,x
3963: f0 07     -         beq !done+
3965: 20 d2 ff  -         jsr kernal_chrout
3968: e8        -         inx
3969: 4c 60 39  -         jmp !loop-
396c: 68        -         pla
396d: 8d 86 02  -         sta foreground_color
3970: 4c 85 39  -         jmp !done+
3973: 20 20     - memory: .fill spacing, spacebar
3975: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
3981: 2e 2e 2e  -         .text "..."
3984: 00        -         .byte NULL
3985: 20 58 09  -         jsr SW16
3988: 15        -         .byte opcode(op, register)
3989: 21 43     -         .word address.getValue()
398b: 0d        -         .byte $0d
398c: 3a        -         .byte >(address.getValue()-1)
398d: 7f        -         .byte <(address.getValue()-1)
398e: 15        -         .byte opcode(op, register)
398f: 34 12     -         .word address.getValue()
3991: 0d        -         .byte $0d
3992: 3a        -         .byte >(address.getValue()-1)
3993: f1        -         .byte <(address.getValue()-1)
3994: 15        -         .byte opcode(op, register)
3995: 21 43     -         .word address.getValue()
3997: 00        -         .byte $00 }
3998: ee 21 40  -         inc TEST_COUNT
399b: ad 86 02  -         lda foreground_color
399e: 48        -         pha
399f: a9 0e     -         lda #color
39a1: 8d 86 02  -         sta foreground_color
39a4: a2 00     -         ldx #$00
39a6: bd b9 39  -         lda msg,x
39a9: f0 07     -         beq !done+
39ab: 20 d2 ff  -         jsr kernal_chrout
39ae: e8        -         inx
39af: 4c a6 39  -         jmp !loop-
39b2: 68        -         pla
39b3: 8d 86 02  -         sta foreground_color
39b6: 4c c0 39  -         jmp !done+
39b9: 20        - memory: .byte spacebar
39ba: 53 41 4d 45                                      -         .text description
39be: 3a        -         .text ":"
39bf: 00        -         .byte NULL
39c0: a6 21     -         ldx rl(register.getValue())
39c2: a4 22     -         ldy rh(register.getValue())
39c4: e0 21     -         cpx #<value
39c6: d0 25     -         bne !failed+
39c8: c0 43     -         cpy #>value
39ca: d0 21     -         bne !failed+
39cc: ee 22 40  -         inc TEST_PASS_COUNT
39cf: ad 86 02  -         lda foreground_color
39d2: 48        -         pha
39d3: a9 05     -         lda #color
39d5: 8d 86 02  -         sta foreground_color
39d8: a2 00     -         ldx #$00
39da: bd 1d 40  -         lda msg,x
39dd: f0 07     -         beq !done+
39df: 20 d2 ff  -         jsr kernal_chrout
39e2: e8        -         inx
39e3: 4c da 39  -         jmp !loop-
39e6: 68        -         pla
39e7: 8d 86 02  -         sta foreground_color
39ea: 4c 08 3a  -         jmp !done+
39ed: ad 86 02  -         lda foreground_color
39f0: 48        -         pha
39f1: a9 02     -         lda #color
39f3: 8d 86 02  -         sta foreground_color
39f6: a2 00     -         ldx #$00
39f8: bd 1f 40  -         lda msg,x
39fb: f0 07     -         beq !done+
39fd: 20 d2 ff  -         jsr kernal_chrout
3a00: e8        -         inx
3a01: 4c f8 39  -         jmp !loop-
3a04: 68        -         pla
3a05: 8d 86 02  -         sta foreground_color
3a08: a2 00     -         ldx #$00
3a0a: bd 19 3a  -         lda msg,x
3a0d: f0 07     -         beq !done+
3a0f: 20 d2 ff  -         jsr kernal_chrout
3a12: e8        -         inx
3a13: 4c 0a 3a  -         jmp !loop-
3a16: 4c 1b 3a  -         jmp !done+
3a19: 0d 00     - memory: .byte RETURN, NULL
3a1b: ae 23 40  -         ldx TEST_NAME_COUNT
3a1e: e0 15     -         cpx #TESTS_PER_PAGE
3a20: d0 5d     -         bne !exit+
3a22: ad 86 02  -         lda foreground_color
3a25: 48        -         pha
3a26: a9 01     -         lda #color
3a28: 8d 86 02  -         sta foreground_color
3a2b: a2 00     -         ldx #$00
3a2d: bd 40 3a  -         lda msg,x
3a30: f0 07     -         beq !done+
3a32: 20 d2 ff  -         jsr kernal_chrout
3a35: e8        -         inx
3a36: 4c 2d 3a  -         jmp !loop-
3a39: 68        -         pla
3a3a: 8d 86 02  -         sta foreground_color
3a3d: 4c 5f 3a  -         jmp !no_key+
3a40: 0d        - memory: .byte RETURN
3a41: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3a51: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3a5d: 0d 00     -         .byte RETURN, NULL
3a5f: 20 9f ff  -         jsr scnkey  // scan keyboard
3a62: 20 e4 ff  -         jsr getin	// put result into A
3a65: f0 f8     -         beq !no_key-
3a67: a2 00     -         ldx #$00
3a69: bd 78 3a  -         lda msg,x
3a6c: f0 07     -         beq !done+
3a6e: 20 d2 ff  -         jsr kernal_chrout
3a71: e8        -         inx
3a72: 4c 69 3a  -         jmp !loop-
3a75: 4c 7a 3a  -         jmp !done+
3a78: 0d 00     - newline:.byte RETURN, NULL
3a7a: a2 00     -         ldx #$00
3a7c: 8e 23 40  -         stx TEST_NAME_COUNT
3a7f: 60        -         rts
3a80: ee 21 40  -         inc TEST_COUNT
3a83: ad 86 02  -         lda foreground_color
3a86: 48        -         pha
3a87: a9 0e     -         lda #color
3a89: 8d 86 02  -         sta foreground_color
3a8c: a2 00     -         ldx #$00
3a8e: bd a1 3a  -         lda msg,x
3a91: f0 07     -         beq !done+
3a93: 20 d2 ff  -         jsr kernal_chrout
3a96: e8        -         inx
3a97: 4c 8e 3a  -         jmp !loop-
3a9a: 68        -         pla
3a9b: 8d 86 02  -         sta foreground_color
3a9e: 4c a9 3a  -         jmp !done+
3aa1: 20        - memory: .byte spacebar
3aa2: 56 41 4c 55 45                                   -         .text description
3aa7: 3a        -         .text ":"
3aa8: 00        -         .byte NULL
3aa9: a6 21     -         ldx rl(register.getValue())
3aab: a4 22     -         ldy rh(register.getValue())
3aad: e0 21     -         cpx #<value
3aaf: d0 25     -         bne !failed+
3ab1: c0 43     -         cpy #>value
3ab3: d0 21     -         bne !failed+
3ab5: ee 22 40  -         inc TEST_PASS_COUNT
3ab8: ad 86 02  -         lda foreground_color
3abb: 48        -         pha
3abc: a9 05     -         lda #color
3abe: 8d 86 02  -         sta foreground_color
3ac1: a2 00     -         ldx #$00
3ac3: bd 1d 40  -         lda msg,x
3ac6: f0 07     -         beq !done+
3ac8: 20 d2 ff  -         jsr kernal_chrout
3acb: e8        -         inx
3acc: 4c c3 3a  -         jmp !loop-
3acf: 68        -         pla
3ad0: 8d 86 02  -         sta foreground_color
3ad3: 4c f1 3a  -         jmp !done+
3ad6: ad 86 02  -         lda foreground_color
3ad9: 48        -         pha
3ada: a9 02     -         lda #color
3adc: 8d 86 02  -         sta foreground_color
3adf: a2 00     -         ldx #$00
3ae1: bd 1f 40  -         lda msg,x
3ae4: f0 07     -         beq !done+
3ae6: 20 d2 ff  -         jsr kernal_chrout
3ae9: e8        -         inx
3aea: 4c e1 3a  -         jmp !loop-
3aed: 68        -         pla
3aee: 8d 86 02  -         sta foreground_color
3af1: 60        -         rts
3af2: a9 fe     -         lda #>VALUE_3
3af4: 85 22     -         sta rh(REGISTER)
3af6: a9 ed     -         lda #<VALUE_3
3af8: 85 21     -         sta rl(REGISTER)
3afa: a6 21     -         ldx rl(register.getValue())
3afc: a4 22     -         ldy rh(register.getValue())
3afe: ee 21 40  -         inc TEST_COUNT
3b01: ad 86 02  -         lda foreground_color
3b04: 48        -         pha
3b05: a9 0e     -         lda #color
3b07: 8d 86 02  -         sta foreground_color
3b0a: a2 00     -         ldx #$00
3b0c: bd 1f 3b  -         lda msg,x
3b0f: f0 07     -         beq !done+
3b11: 20 d2 ff  -         jsr kernal_chrout
3b14: e8        -         inx
3b15: 4c 0c 3b  -         jmp !loop-
3b18: 68        -         pla
3b19: 8d 86 02  -         sta foreground_color
3b1c: 4c 26 3b  -         jmp !done+
3b1f: 20        - memory: .byte spacebar
3b20: 36 35 30 32                                      -         .text description
3b24: 3a        -         .text ":"
3b25: 00        -         .byte NULL
3b26: a6 21     -         ldx rl(register.getValue())
3b28: a4 22     -         ldy rh(register.getValue())
3b2a: e0 ed     -         cpx #<value
3b2c: d0 25     -         bne !failed+
3b2e: c0 fe     -         cpy #>value
3b30: d0 21     -         bne !failed+
3b32: ee 22 40  -         inc TEST_PASS_COUNT
3b35: ad 86 02  -         lda foreground_color
3b38: 48        -         pha
3b39: a9 05     -         lda #color
3b3b: 8d 86 02  -         sta foreground_color
3b3e: a2 00     -         ldx #$00
3b40: bd 1d 40  -         lda msg,x
3b43: f0 07     -         beq !done+
3b45: 20 d2 ff  -         jsr kernal_chrout
3b48: e8        -         inx
3b49: 4c 40 3b  -         jmp !loop-
3b4c: 68        -         pla
3b4d: 8d 86 02  -         sta foreground_color
3b50: 4c 6e 3b  -         jmp !done+
3b53: ad 86 02  -         lda foreground_color
3b56: 48        -         pha
3b57: a9 02     -         lda #color
3b59: 8d 86 02  -         sta foreground_color
3b5c: a2 00     -         ldx #$00
3b5e: bd 1f 40  -         lda msg,x
3b61: f0 07     -         beq !done+
3b63: 20 d2 ff  -         jsr kernal_chrout
3b66: e8        -         inx
3b67: 4c 5e 3b  -         jmp !loop-
3b6a: 68        -         pla
3b6b: 8d 86 02  -         sta foreground_color
3b6e: 60        -         rts
3b6f: ee 23 40  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
3b72: ad 86 02  -         lda foreground_color
3b75: 48        -         pha
3b76: a9 0f     -         lda #color
3b78: 8d 86 02  -         sta foreground_color
3b7b: a2 00     -         ldx #$00
3b7d: bd 90 3b  -         lda msg,x
3b80: f0 07     -         beq !done+
3b82: 20 d2 ff  -         jsr kernal_chrout
3b85: e8        -         inx
3b86: 4c 7d 3b  -         jmp !loop-
3b89: 68        -         pla
3b8a: 8d 86 02  -         sta foreground_color
3b8d: 4c a2 3b  -         jmp !done+
3b90: 20 20     - memory: .fill spacing, spacebar
3b92: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
3b9e: 2e 2e 2e  -         .text "..."
3ba1: 00        -         .byte NULL
3ba2: 20 58 09  -         jsr SW16
3ba5: 0f        -         .byte $0f
3ba6: 39 40     -         .word address.getValue()
3ba8: 21        -         .byte rl(register.getValue())
3ba9: 00        -         .byte $00 }
3baa: ee 21 40  -         inc TEST_COUNT
3bad: ad 86 02  -         lda foreground_color
3bb0: 48        -         pha
3bb1: a9 0e     -         lda #color
3bb3: 8d 86 02  -         sta foreground_color
3bb6: a2 00     -         ldx #$00
3bb8: bd cb 3b  -         lda msg,x
3bbb: f0 07     -         beq !done+
3bbd: 20 d2 ff  -         jsr kernal_chrout
3bc0: e8        -         inx
3bc1: 4c b8 3b  -         jmp !loop-
3bc4: 68        -         pla
3bc5: 8d 86 02  -         sta foreground_color
3bc8: 4c d6 3b  -         jmp !done+
3bcb: 20        - memory: .byte spacebar
3bcc: 54 45 53 54 20 4d 45 4d                          -         .text description
3bd4: 3a        -         .text ":"
3bd5: 00        -         .byte NULL
3bd6: a6 21     -         ldx rl(register.getValue())
3bd8: a4 22     -         ldy rh(register.getValue())
3bda: cc 39 40  -         cpy address
3bdd: d0 26     -         bne !failed+
3bdf: ec 3a 40  -         cpx address+1
3be2: d0 21     -         bne !failed+
3be4: ee 22 40  -         inc TEST_PASS_COUNT
3be7: ad 86 02  -         lda foreground_color
3bea: 48        -         pha
3beb: a9 05     -         lda #color
3bed: 8d 86 02  -         sta foreground_color
3bf0: a2 00     -         ldx #$00
3bf2: bd 1d 40  -         lda msg,x
3bf5: f0 07     -         beq !done+
3bf7: 20 d2 ff  -         jsr kernal_chrout
3bfa: e8        -         inx
3bfb: 4c f2 3b  -         jmp !loop-
3bfe: 68        -         pla
3bff: 8d 86 02  -         sta foreground_color
3c02: 4c 20 3c  -         jmp !done+
3c05: ad 86 02  -         lda foreground_color
3c08: 48        -         pha
3c09: a9 02     -         lda #color
3c0b: 8d 86 02  -         sta foreground_color
3c0e: a2 00     -         ldx #$00
3c10: bd 1f 40  -         lda msg,x
3c13: f0 07     -         beq !done+
3c15: 20 d2 ff  -         jsr kernal_chrout
3c18: e8        -         inx
3c19: 4c 10 3c  -         jmp !loop-
3c1c: 68        -         pla
3c1d: 8d 86 02  -         sta foreground_color
3c20: a2 00     -         ldx #$00
3c22: bd 31 3c  -         lda msg,x
3c25: f0 07     -         beq !done+
3c27: 20 d2 ff  -         jsr kernal_chrout
3c2a: e8        -         inx
3c2b: 4c 22 3c  -         jmp !loop-
3c2e: 4c 33 3c  -         jmp !done+
3c31: 0d 00     - memory: .byte RETURN, NULL
3c33: ae 23 40  -         ldx TEST_NAME_COUNT
3c36: e0 15     -         cpx #TESTS_PER_PAGE
3c38: d0 5d     -         bne !exit+
3c3a: ad 86 02  -         lda foreground_color
3c3d: 48        -         pha
3c3e: a9 01     -         lda #color
3c40: 8d 86 02  -         sta foreground_color
3c43: a2 00     -         ldx #$00
3c45: bd 58 3c  -         lda msg,x
3c48: f0 07     -         beq !done+
3c4a: 20 d2 ff  -         jsr kernal_chrout
3c4d: e8        -         inx
3c4e: 4c 45 3c  -         jmp !loop-
3c51: 68        -         pla
3c52: 8d 86 02  -         sta foreground_color
3c55: 4c 77 3c  -         jmp !no_key+
3c58: 0d        - memory: .byte RETURN
3c59: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3c69: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3c75: 0d 00     -         .byte RETURN, NULL
3c77: 20 9f ff  -         jsr scnkey  // scan keyboard
3c7a: 20 e4 ff  -         jsr getin	// put result into A
3c7d: f0 f8     -         beq !no_key-
3c7f: a2 00     -         ldx #$00
3c81: bd 90 3c  -         lda msg,x
3c84: f0 07     -         beq !done+
3c86: 20 d2 ff  -         jsr kernal_chrout
3c89: e8        -         inx
3c8a: 4c 81 3c  -         jmp !loop-
3c8d: 4c 92 3c  -         jmp !done+
3c90: 0d 00     - newline:.byte RETURN, NULL
3c92: a2 00     -         ldx #$00
3c94: 8e 23 40  -         stx TEST_NAME_COUNT
3c97: 60        -         rts
3c98: ee 23 40  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
3c9b: ad 86 02  -         lda foreground_color
3c9e: 48        -         pha
3c9f: a9 0f     -         lda #color
3ca1: 8d 86 02  -         sta foreground_color
3ca4: a2 00     -         ldx #$00
3ca6: bd b9 3c  -         lda msg,x
3ca9: f0 07     -         beq !done+
3cab: 20 d2 ff  -         jsr kernal_chrout
3cae: e8        -         inx
3caf: 4c a6 3c  -         jmp !loop-
3cb2: 68        -         pla
3cb3: 8d 86 02  -         sta foreground_color
3cb6: 4c c9 3c  -         jmp !done+
3cb9: 20 20     - memory: .fill spacing, spacebar
3cbb: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
3cc5: 2e 2e 2e  -         .text "..."
3cc8: 00        -         .byte NULL
3cc9: 20 58 09  -         jsr SW16
3ccc: 0e        -         .byte $0e
3ccd: 39 40     -         .word address.getValue()
3ccf: 21        -         .byte rl(register.getValue())
3cd0: 00        -         .byte $00 }
3cd1: ee 21 40  -         inc TEST_COUNT
3cd4: ad 86 02  -         lda foreground_color
3cd7: 48        -         pha
3cd8: a9 0e     -         lda #color
3cda: 8d 86 02  -         sta foreground_color
3cdd: a2 00     -         ldx #$00
3cdf: bd f2 3c  -         lda msg,x
3ce2: f0 07     -         beq !done+
3ce4: 20 d2 ff  -         jsr kernal_chrout
3ce7: e8        -         inx
3ce8: 4c df 3c  -         jmp !loop-
3ceb: 68        -         pla
3cec: 8d 86 02  -         sta foreground_color
3cef: 4c fd 3c  -         jmp !done+
3cf2: 20        - memory: .byte spacebar
3cf3: 54 45 53 54 20 4d 45 4d                          -         .text description
3cfb: 3a        -         .text ":"
3cfc: 00        -         .byte NULL
3cfd: a6 21     -         ldx rl(register.getValue())
3cff: a4 22     -         ldy rh(register.getValue())
3d01: ec 39 40  -         cpx address
3d04: d0 26     -         bne !failed+
3d06: cc 3a 40  -         cpy address+1
3d09: d0 21     -         bne !failed+
3d0b: ee 22 40  -         inc TEST_PASS_COUNT
3d0e: ad 86 02  -         lda foreground_color
3d11: 48        -         pha
3d12: a9 05     -         lda #color
3d14: 8d 86 02  -         sta foreground_color
3d17: a2 00     -         ldx #$00
3d19: bd 1d 40  -         lda msg,x
3d1c: f0 07     -         beq !done+
3d1e: 20 d2 ff  -         jsr kernal_chrout
3d21: e8        -         inx
3d22: 4c 19 3d  -         jmp !loop-
3d25: 68        -         pla
3d26: 8d 86 02  -         sta foreground_color
3d29: 4c 47 3d  -         jmp !done+
3d2c: ad 86 02  -         lda foreground_color
3d2f: 48        -         pha
3d30: a9 02     -         lda #color
3d32: 8d 86 02  -         sta foreground_color
3d35: a2 00     -         ldx #$00
3d37: bd 1f 40  -         lda msg,x
3d3a: f0 07     -         beq !done+
3d3c: 20 d2 ff  -         jsr kernal_chrout
3d3f: e8        -         inx
3d40: 4c 37 3d  -         jmp !loop-
3d43: 68        -         pla
3d44: 8d 86 02  -         sta foreground_color
3d47: a2 00     -         ldx #$00
3d49: bd 58 3d  -         lda msg,x
3d4c: f0 07     -         beq !done+
3d4e: 20 d2 ff  -         jsr kernal_chrout
3d51: e8        -         inx
3d52: 4c 49 3d  -         jmp !loop-
3d55: 4c 5a 3d  -         jmp !done+
3d58: 0d 00     - memory: .byte RETURN, NULL
3d5a: ae 23 40  -         ldx TEST_NAME_COUNT
3d5d: e0 15     -         cpx #TESTS_PER_PAGE
3d5f: d0 5d     -         bne !exit+
3d61: ad 86 02  -         lda foreground_color
3d64: 48        -         pha
3d65: a9 01     -         lda #color
3d67: 8d 86 02  -         sta foreground_color
3d6a: a2 00     -         ldx #$00
3d6c: bd 7f 3d  -         lda msg,x
3d6f: f0 07     -         beq !done+
3d71: 20 d2 ff  -         jsr kernal_chrout
3d74: e8        -         inx
3d75: 4c 6c 3d  -         jmp !loop-
3d78: 68        -         pla
3d79: 8d 86 02  -         sta foreground_color
3d7c: 4c 9e 3d  -         jmp !no_key+
3d7f: 0d        - memory: .byte RETURN
3d80: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3d90: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3d9c: 0d 00     -         .byte RETURN, NULL
3d9e: 20 9f ff  -         jsr scnkey  // scan keyboard
3da1: 20 e4 ff  -         jsr getin	// put result into A
3da4: f0 f8     -         beq !no_key-
3da6: a2 00     -         ldx #$00
3da8: bd b7 3d  -         lda msg,x
3dab: f0 07     -         beq !done+
3dad: 20 d2 ff  -         jsr kernal_chrout
3db0: e8        -         inx
3db1: 4c a8 3d  -         jmp !loop-
3db4: 4c b9 3d  -         jmp !done+
3db7: 0d 00     - newline:.byte RETURN, NULL
3db9: a2 00     -         ldx #$00
3dbb: 8e 23 40  -         stx TEST_NAME_COUNT
3dbe: 60        -         rts
3dbf: a9 00     - TestRun:lda #color
3dc1: 8d 20 d0  -         sta border_color
3dc4: a9 00     -         lda #color
3dc6: 8d 21 d0  -         sta background_color
3dc9: a9 01     -         lda #color
3dcb: 8d 86 02  -         sta foreground_color
3dce: a2 00     -         ldx #color
3dd0: 8e 21 d0  -         stx background_color
3dd3: a9 20     -         lda #spacebar
3dd5: a2 00     -         ldx #$00
3dd7: 9d 00 04  -         sta screen,x
3dda: 9d 00 05  -         sta screen+$100,x
3ddd: 9d 00 06  -         sta screen+$200,x
3de0: 9d 00 07  -         sta screen+$300,x
3de3: e8        -         inx
3de4: d0 f1     -         bne !loop-
3de6: a9 00     -         lda #row
3de8: 85 d6     -         sta cursor_row
3dea: a9 00     -         lda #column
3dec: 85 d3     -         sta cursor_col
3dee: a2 00     -         ldx #$00
3df0: bd ff 3d  -         lda msg,x
3df3: f0 07     -         beq !done+
3df5: 20 d2 ff  -         jsr kernal_chrout
3df8: e8        -         inx
3df9: 4c f0 3d  -         jmp !loop-
3dfc: 4c 01 3e  -         jmp !done+
3dff: 0d 00     - newline:.byte RETURN, NULL
3e01: a2 00     -         ldx #$00
3e03: bd 24 40  -         lda msg,x
3e06: f0 07     -         beq !done+
3e08: 20 d2 ff  -         jsr kernal_chrout
3e0b: e8        -         inx
3e0c: 4c 03 3e  -         jmp !loop-
3e0f: a9 0c     -         lda #color
3e11: 8d 86 02  -         sta foreground_color
3e14: a9 00     -         lda #$00
3e16: 8d 21 40  -         sta TEST_COUNT
3e19: 8d 22 40  -         sta TEST_PASS_COUNT
3e1c: 8d 23 40  -         sta TEST_NAME_COUNT
3e1f: 20 de 0d  -         jsr SET_TEST
3e22: 20 f8 0e  -         jsr LOAD_TEST
3e25: 20 12 10  -         jsr STORE_TEST
3e28: 20 30 11  -         jsr LOAD_INDIRECT_TEST
3e2b: 20 bf 12  -         jsr STORE_INDIRECT_TEST
3e2e: 20 cb 14  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
3e31: 20 65 16  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
3e34: 20 70 18  -         jsr POP_INDIRECT_TEST
3e37: 20 7f 1c  -         jsr STORE_POP_INDIRECT_TEST
3e3a: 20 ae 1d  -         jsr ADD_TEST
3e3d: 20 42 1f  -         jsr SUBTRACT_TEST
3e40: 20 d8 20  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
3e43: 20 5b 23  -         jsr COMPARE_TEST
3e46: 20 86 24  -         jsr INCREMENT_TEST
3e49: 20 a6 25  -         jsr DECREMENT_TEST
3e4c: 20 ca 26  -         jsr RETURN_TO_6502_MODE_TEST
3e4f: 20 dd 27  -         jsr BRANCH_ALWAYS_TEST
3e52: 20 06 29  -         jsr BRANCH_IF_NO_CARRY_TEST	
3e55: 20 3a 2a  -         jsr BRANCH_IF_CARRY_SET_TEST
3e58: 20 6e 2b  -         jsr BRANCH_IF_PLUS_TEST
3e5b: 20 9e 2c  -         jsr BRANCH_IF_MINUS_TEST
3e5e: 20 ce 2d  -         jsr BRANCH_IF_ZERO_TEST	
3e61: 20 f8 2e  -         jsr BRANCH_IF_NONZERO_TEST
3e64: 20 27 30  -         jsr BRANCH_IF_MINUS_ONE_TEST
3e67: 20 56 31  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
3e6a: 20 86 32  -         jsr BREAK_TEST
3e6d: 20 be 35  -         jsr BRANCH_TO_SUBROUTINE_TEST
3e70: 20 f8 36  -         jsr RETURN_FROM_SUBROUTINE_TEST
3e73: 20 25 38  -         jsr ABSOLUTE_JUMP_TEST
3e76: 20 52 39  -         jsr EXTERNAL_JSR_TEST
3e79: 20 6f 3b  -         jsr SET_INDIRECT_TEST
3e7c: 20 98 3c  -         jsr SET_MEMORY_TEST
3e7f: 20 1e 34  -         jsr INTERRUPT_BREAK_TEST
3e82: ad 86 02  -         lda foreground_color
3e85: 48        -         pha
3e86: a9 01     -         lda #color
3e88: 8d 86 02  -         sta foreground_color
3e8b: a2 00     -         ldx #$00
3e8d: bd 04 40  -         lda msg,x
3e90: f0 07     -         beq !done+
3e92: 20 d2 ff  -         jsr kernal_chrout
3e95: e8        -         inx
3e96: 4c 8d 3e  -         jmp !loop-
3e99: 68        -         pla
3e9a: 8d 86 02  -         sta foreground_color
3e9d: ad 22 40  -         lda value
3ea0: c9 64     -         cmp #three_digit
3ea2: 90 5a     -         bcc !twoDigit+
3ea4: ad 22 40  -         lda value
3ea7: c9 64     -         cmp #reference
3ea9: 90 09     -         bcc !done+
3eab: a0 00     -         ldy #$00		// counter
3ead: c8        -         iny				// count references's
3eae: e9 64     -         sbc #reference
3eb0: c9 64     -         cmp #reference
3eb2: b0 f9     -         bcs !loop-		// still larger than reference
3eb4: 98        -         tya
3eb5: 48        -         pha
3eb6: 09 30     -         ora #$30
3eb8: 20 d2 ff  -         jsr kernal_chrout
3ebb: 68        -         pla
3ebc: a8        -         tay
3ebd: ad 22 40  -         lda value
3ec0: 38        -         sec
3ec1: e9 64     -         sbc #three_digit
3ec3: 88        -         dey
3ec4: d0 fa     -         bne !subby-
3ec6: 85 fe     -         sta zp
3ec8: a5 fe     -         lda value
3eca: c9 0a     -         cmp #two_digit
3ecc: 90 28     -         bcc !oneDigit+
3ece: a5 fe     -         lda value
3ed0: c9 0a     -         cmp #reference
3ed2: 90 09     -         bcc !done+
3ed4: a0 00     -         ldy #$00		// counter
3ed6: c8        -         iny				// count references's
3ed7: e9 0a     -         sbc #reference
3ed9: c9 0a     -         cmp #reference
3edb: b0 f9     -         bcs !loop-		// still larger than reference
3edd: 98        -         tya
3ede: 48        -         pha
3edf: 09 30     -         ora #$30
3ee1: 20 d2 ff  -         jsr kernal_chrout
3ee4: 68        -         pla
3ee5: a8        -         tay
3ee6: a5 fe     -         lda value
3ee8: 38        -         sec
3ee9: e9 0a     -         sbc #two_digit
3eeb: 88        -         dey
3eec: d0 fa     -         bne !subby-
3eee: 09 30     -         ora #$30
3ef0: 20 d2 ff  -         jsr kernal_chrout
3ef3: 4c fb 3e  -         jmp !done+
3ef6: 09 30     -         ora #$30
3ef8: 20 d2 ff  -         jsr kernal_chrout
3efb: 4c 34 3f  -         jmp !done+
3efe: ad 22 40  -         lda value
3f01: c9 0a     -         cmp #two_digit
3f03: 90 2a     -         bcc !oneDigit+
3f05: ad 22 40  -         lda value
3f08: c9 0a     -         cmp #reference
3f0a: 90 09     -         bcc !done+
3f0c: a0 00     -         ldy #$00		// counter
3f0e: c8        -         iny				// count references's
3f0f: e9 0a     -         sbc #reference
3f11: c9 0a     -         cmp #reference
3f13: b0 f9     -         bcs !loop-		// still larger than reference
3f15: 98        -         tya
3f16: 48        -         pha
3f17: 09 30     -         ora #$30
3f19: 20 d2 ff  -         jsr kernal_chrout
3f1c: 68        -         pla
3f1d: a8        -         tay
3f1e: ad 22 40  -         lda value
3f21: 38        -         sec
3f22: e9 0a     -         sbc #two_digit
3f24: 88        -         dey
3f25: d0 fa     -         bne !subby-
3f27: 09 30     -         ora #$30
3f29: 20 d2 ff  -         jsr kernal_chrout
3f2c: 4c 34 3f  -         jmp !done+
3f2f: 09 30     -         ora #$30
3f31: 20 d2 ff  -         jsr kernal_chrout
3f34: ad 86 02  -         lda foreground_color
3f37: 48        -         pha
3f38: a9 01     -         lda #color
3f3a: 8d 86 02  -         sta foreground_color
3f3d: a2 00     -         ldx #$00
3f3f: bd 16 40  -         lda msg,x
3f42: f0 07     -         beq !done+
3f44: 20 d2 ff  -         jsr kernal_chrout
3f47: e8        -         inx
3f48: 4c 3f 3f  -         jmp !loop-
3f4b: 68        -         pla
3f4c: 8d 86 02  -         sta foreground_color
3f4f: ad 21 40  -         lda value
3f52: c9 64     -         cmp #three_digit
3f54: 90 5a     -         bcc !twoDigit+
3f56: ad 21 40  -         lda value
3f59: c9 64     -         cmp #reference
3f5b: 90 09     -         bcc !done+
3f5d: a0 00     -         ldy #$00		// counter
3f5f: c8        -         iny				// count references's
3f60: e9 64     -         sbc #reference
3f62: c9 64     -         cmp #reference
3f64: b0 f9     -         bcs !loop-		// still larger than reference
3f66: 98        -         tya
3f67: 48        -         pha
3f68: 09 30     -         ora #$30
3f6a: 20 d2 ff  -         jsr kernal_chrout
3f6d: 68        -         pla
3f6e: a8        -         tay
3f6f: ad 21 40  -         lda value
3f72: 38        -         sec
3f73: e9 64     -         sbc #three_digit
3f75: 88        -         dey
3f76: d0 fa     -         bne !subby-
3f78: 85 fe     -         sta zp
3f7a: a5 fe     -         lda value
3f7c: c9 0a     -         cmp #two_digit
3f7e: 90 28     -         bcc !oneDigit+
3f80: a5 fe     -         lda value
3f82: c9 0a     -         cmp #reference
3f84: 90 09     -         bcc !done+
3f86: a0 00     -         ldy #$00		// counter
3f88: c8        -         iny				// count references's
3f89: e9 0a     -         sbc #reference
3f8b: c9 0a     -         cmp #reference
3f8d: b0 f9     -         bcs !loop-		// still larger than reference
3f8f: 98        -         tya
3f90: 48        -         pha
3f91: 09 30     -         ora #$30
3f93: 20 d2 ff  -         jsr kernal_chrout
3f96: 68        -         pla
3f97: a8        -         tay
3f98: a5 fe     -         lda value
3f9a: 38        -         sec
3f9b: e9 0a     -         sbc #two_digit
3f9d: 88        -         dey
3f9e: d0 fa     -         bne !subby-
3fa0: 09 30     -         ora #$30
3fa2: 20 d2 ff  -         jsr kernal_chrout
3fa5: 4c ad 3f  -         jmp !done+
3fa8: 09 30     -         ora #$30
3faa: 20 d2 ff  -         jsr kernal_chrout
3fad: 4c e6 3f  -         jmp !done+
3fb0: ad 21 40  -         lda value
3fb3: c9 0a     -         cmp #two_digit
3fb5: 90 2a     -         bcc !oneDigit+
3fb7: ad 21 40  -         lda value
3fba: c9 0a     -         cmp #reference
3fbc: 90 09     -         bcc !done+
3fbe: a0 00     -         ldy #$00		// counter
3fc0: c8        -         iny				// count references's
3fc1: e9 0a     -         sbc #reference
3fc3: c9 0a     -         cmp #reference
3fc5: b0 f9     -         bcs !loop-		// still larger than reference
3fc7: 98        -         tya
3fc8: 48        -         pha
3fc9: 09 30     -         ora #$30
3fcb: 20 d2 ff  -         jsr kernal_chrout
3fce: 68        -         pla
3fcf: a8        -         tay
3fd0: ad 21 40  -         lda value
3fd3: 38        -         sec
3fd4: e9 0a     -         sbc #two_digit
3fd6: 88        -         dey
3fd7: d0 fa     -         bne !subby-
3fd9: 09 30     -         ora #$30
3fdb: 20 d2 ff  -         jsr kernal_chrout
3fde: 4c e6 3f  -         jmp !done+
3fe1: 09 30     -         ora #$30
3fe3: 20 d2 ff  -         jsr kernal_chrout
3fe6: ad 86 02  -         lda foreground_color
3fe9: 48        -         pha
3fea: a9 01     -         lda #color
3fec: 8d 86 02  -         sta foreground_color
3fef: a2 00     -         ldx #$00
3ff1: bd 1a 40  -         lda msg,x
3ff4: f0 07     -         beq !done+
3ff6: 20 d2 ff  -         jsr kernal_chrout
3ff9: e8        -         inx
3ffa: 4c f1 3f  -         jmp !loop-
3ffd: 68        -         pla
3ffe: 8d 86 02  -         sta foreground_color
4001: 4c 1c 40  -         jmp !done+
4004: 0d        - memory: .byte RETURN
4005: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
4015: 00        -         .byte NULL
4016: 20 2f 20  - memory_2:.text " / "
4019: 00        -         .byte NULL
401a: 0d 00     - memory_3:.byte RETURN, NULL
401c: 60        -         rts

[TestData]
401d: 73 00     -         .byte $73, $00
401f: 76 00     -         .byte $76, $00
4021: 00        -         .byte $00
4022: 00        -         .byte $00
4023: 00        -         .byte $00
4024: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  -         .text "SWEET16 TEST RUNNER"
4034: 4e 45 52                                        
4037: 0d 00     -         .byte RETURN, NULL
4039: 12 34     -         .byte $12,$34
403b: 56 78     -         .byte $56,$78
403d: 9a bc     -         .byte $9a,$bc
403f: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  -         .fill TMS_SIZE, i
404f: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  -         .fill TMS_SIZE, $ff
405f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill STACK_SIZE, 0
****************************** Segment: UtilData *******************************
[UtilData]
0bab: 0d 00     - Newline:.byte RETURN, NULL

[ManagedBuffer256]
0bad: ff 00     - ManagedBuffer256,totalSize,lo,hi-1:.byte <value, >value
0baf: 00 00     - allocSize,lo,hi-1:.byte <value, >value
0bb1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - buffer: .fill $ff, $00
0bd1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0bf1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0c91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
0cb0: a0 00     - CopyMemoryZeroPageSize:ldy #$00
0cb2: 84 50     -         sty ZpVar.Four.lo     // LSB size
0cb4: 84 51     -         sty ZpVar.Four.hi     // MSH size
0cb6: a5 4f     -         lda ZpVar.Three.hi
0cb8: c5 51     -         cmp ZpVar.Four.hi
0cba: f0 17     -         beq !msb_match+
0cbc: b1 fb     -         lda (ZpVar.One.lo),y 
0cbe: 91 fd     -         sta (ZpVar.Two.lo),y
0cc0: e6 50     -         inc ZpVar.Four.lo
0cc2: f0 0a     -         beq inc_msb
0cc4: c8        -         iny
0cc5: d0 ef     -         bne !loop-
0cc7: e6 fc     -         inc ZpVar.One.hi 	// inc MSB source 
0cc9: e6 fe     -         inc ZpVar.Two.hi 	// inc MSB dest 
0ccb: 4c b6 0c  -         jmp !loop-
0cce: e6 51     - inc_msb:inc ZpVar.Four.hi
0cd0: 4c c4 0c  -         jmp !cont-
0cd3: a5 4e     -         lda ZpVar.Three.lo
0cd5: c5 50     -         cmp ZpVar.Four.lo
0cd7: f0 03     -         beq !done+
0cd9: 4c bc 0c  -         jmp !copy-
0cdc: 60        -         rts

[HERE]
0cdd: a0 02     - LoadPrgFileFromManagedBuffer:ldy #2
0cdf: b1 fb     -         lda (ZpVar.One),Y
0ce1: 48        -         pha           // store length on stack
0ce2: 18        -         clc
0ce3: a9 04     -         lda #$4
0ce5: 65 fb     -         adc ZpVar.One
0ce7: aa        -         tax
0ce8: a4 fc     -         ldy ZpVar.One.hi
0cea: 68        -         pla
0ceb: 20 bd ff  -         jsr $ffbd     // call setnam
0cee: a9 01     -         lda #$01
0cf0: a6 ba     -         ldx $ba       // last used device number
0cf2: d0 02     -         bne !skip+
0cf4: a2 08     -         ldx #$08      // default to device 8
0cf6: a0 01     -         ldy #$01      // not $01 means: load to address stored in file
0cf8: 20 ba ff  -         jsr $ffba     // call setlfs
0cfb: a9 00     -         lda #$00      // $00 means: load to memory (not verify)
0cfd: 20 d5 ff  -         jsr $ffd5     // call load
0d00: b0 03     -         bcs !error+    // if carry set, a load error has happened
0d02: 4c dd 0d  -         jmp !done+
0d05: 85 50     - LoadPrgFileFromManagedBufferError:sta ZpVar.Four
0d07: a2 00     -         ldx #$00
0d09: bd d5 0d  -         lda msg,x
0d0c: f0 07     -         beq !done+
0d0e: 20 d2 ff  -         jsr kernal_chrout
0d11: e8        -         inx
0d12: 4c 09 0d  -         jmp !loop-
0d15: a5 50     -         lda value
0d17: c9 64     -         cmp #three_digit
0d19: 90 58     -         bcc !twoDigit+
0d1b: a5 50     -         lda value
0d1d: c9 64     -         cmp #reference
0d1f: 90 09     -         bcc !done+
0d21: a0 00     -         ldy #$00		// counter
0d23: c8        -         iny				// count references's
0d24: e9 64     -         sbc #reference
0d26: c9 64     -         cmp #reference
0d28: b0 f9     -         bcs !loop-		// still larger than reference
0d2a: 98        -         tya
0d2b: 48        -         pha
0d2c: 09 30     -         ora #$30
0d2e: 20 d2 ff  -         jsr kernal_chrout
0d31: 68        -         pla
0d32: a8        -         tay
0d33: a5 50     -         lda value
0d35: 38        -         sec
0d36: e9 64     -         sbc #three_digit
0d38: 88        -         dey
0d39: d0 fa     -         bne !subby-
0d3b: 85 fe     -         sta zp
0d3d: a5 fe     -         lda value
0d3f: c9 0a     -         cmp #two_digit
0d41: 90 28     -         bcc !oneDigit+
0d43: a5 fe     -         lda value
0d45: c9 0a     -         cmp #reference
0d47: 90 09     -         bcc !done+
0d49: a0 00     -         ldy #$00		// counter
0d4b: c8        -         iny				// count references's
0d4c: e9 0a     -         sbc #reference
0d4e: c9 0a     -         cmp #reference
0d50: b0 f9     -         bcs !loop-		// still larger than reference
0d52: 98        -         tya
0d53: 48        -         pha
0d54: 09 30     -         ora #$30
0d56: 20 d2 ff  -         jsr kernal_chrout
0d59: 68        -         pla
0d5a: a8        -         tay
0d5b: a5 fe     -         lda value
0d5d: 38        -         sec
0d5e: e9 0a     -         sbc #two_digit
0d60: 88        -         dey
0d61: d0 fa     -         bne !subby-
0d63: 09 30     -         ora #$30
0d65: 20 d2 ff  -         jsr kernal_chrout
0d68: 4c 70 0d  -         jmp !done+
0d6b: 09 30     -         ora #$30
0d6d: 20 d2 ff  -         jsr kernal_chrout
0d70: 4c a6 0d  -         jmp !done+
0d73: a5 50     -         lda value
0d75: c9 0a     -         cmp #two_digit
0d77: 90 28     -         bcc !oneDigit+
0d79: a5 50     -         lda value
0d7b: c9 0a     -         cmp #reference
0d7d: 90 09     -         bcc !done+
0d7f: a0 00     -         ldy #$00		// counter
0d81: c8        -         iny				// count references's
0d82: e9 0a     -         sbc #reference
0d84: c9 0a     -         cmp #reference
0d86: b0 f9     -         bcs !loop-		// still larger than reference
0d88: 98        -         tya
0d89: 48        -         pha
0d8a: 09 30     -         ora #$30
0d8c: 20 d2 ff  -         jsr kernal_chrout
0d8f: 68        -         pla
0d90: a8        -         tay
0d91: a5 50     -         lda value
0d93: 38        -         sec
0d94: e9 0a     -         sbc #two_digit
0d96: 88        -         dey
0d97: d0 fa     -         bne !subby-
0d99: 09 30     -         ora #$30
0d9b: 20 d2 ff  -         jsr kernal_chrout
0d9e: 4c a6 0d  -         jmp !done+
0da1: 09 30     -         ora #$30
0da3: 20 d2 ff  -         jsr kernal_chrout
0da6: a5 50     -         lda ZpVar.Four
0da8: c9 04     -         cmp #$04
0daa: f0 17     -         beq !fileNotFound+
0dac: 4c ac 0d  -         jmp *
0daf: 20 3e 20 46 49 4c 45 20 4e 4f 54 20 46 4f 55 4e  - fileNotFoundMessage:.text " > FILE NOT FOUND: "
0dbf: 44 3a 20                                        
0dc2: 00        -         .byte NULL
0dc3: a2 00     -         ldx #$00
0dc5: bd af 0d  -         lda msg,x
0dc8: f0 07     -         beq !done+
0dca: 20 d2 ff  -         jsr kernal_chrout
0dcd: e8        -         inx
0dce: 4c c5 0d  -         jmp !loop-
0dd1: 4c d1 0d  -         jmp *
0dd4: 60        -         rts
0dd5: 45 52 52 4f 52 3a 20                             - errormessage:.text "ERROR: "
0ddc: 00        -         .byte NULL
0ddd: 60        -         rts
************************** Segment: Sweet16JumpTable ***************************
[Sweet16JumpTable]
09b1: 00        - OPTBL:  .byte <SET-1          // 1X
09b2: f7        - BRTBL:  .byte  <RTN-1          // 0
09b3: 03        -         .byte  <LD-1           // 2X
09b4: 8b        -         .byte  <BR-1           // 1
09b5: 13        -         .byte  <ST-1           // 3X
09b6: 8c        -         .byte  <BNC-1          // 2
09b7: 2b        -         .byte  <LDAT-1         // 4X
09b8: 9d        -         .byte  <BC-1           // 3
09b9: 1c        -         .byte  <STAT-1         // 5X
09ba: a0        -         .byte  <BP-1           // 4
09bb: 35        -         .byte  <LDDAT-1        // 6X
09bc: a7        -         .byte  <BM-1           // 5
09bd: 3f        -         .byte  <STDAT-1        // 7X
09be: ae        -         .byte  <BZ-1           // 6
09bf: e7        -         .byte  <POP-1          // 8X
09c0: b7        -         .byte  <BNZ-1          // 7
09c1: 49        -         .byte  <STPAT-1        // 9X
09c2: c0        -         .byte  <BM1-1          // 8
09c3: 73        -         .byte  <ADD-1          // AX
09c4: cb        -         .byte  <BNM1-1         // 9
09c5: 5c        -         .byte  <SUB-1          // BX
09c6: 0c        -         .byte  <BK-1           // A
09c7: eb        -         .byte  <POPD-1         // CX
09c8: d6        -         .byte  <RS-1           // B
09c9: 5e        -         .byte  <CPR-1          // DX
09ca: 81        -         .byte  <BS-1           // C
09cb: 24        -         .byte  <INR-1          // EX
09cc: 10        -         .byte  <XJSR-1         // D
09cd: 53        -         .byte  <DCR-1          // FX
09ce: 0d        -         .byte  <SETM-1         // E
09cf: d5        -         .byte  <NUL-1          // UNUSED
09d0: f4        -         .byte  <SETI-1         // F
***************************** Segment: Sweet16Page *****************************
[Sweet16Page]
0a00: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
0a01: 4c 9d 09  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
0a04: b5 17     - LD:     lda  R0L,X
0a06: 85 17     -         sta  R0L
0a08: b5 18     -         lda  R0H,X          // MOVE RX TO R0
0a0a: 85 18     -         sta  R0H
0a0c: 60        -         rts
0a0d: 00        - BK:     brk
0a0e: 4c 78 0b  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0a11: 4c 8a 0b  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0a14: a5 17     - ST:     lda  R0L
0a16: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0a18: a5 18     -         lda  R0H
0a1a: 95 18     -         sta  R0H,X
0a1c: 60        -         rts
0a1d: a5 17     - STAT:   lda  R0L	
0a1f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
0a21: a0 00     -         ldy  #$00
0a23: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
0a25: f6 17     - INR:    inc  R0L,X
0a27: d0 02     -         bne  INR2           // INCR RX
0a29: f6 18     -         inc  R0H,X	
0a2b: 60        - INR2:   rts
0a2c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
0a2e: 85 17     -         sta  R0L            // TO R0
0a30: a0 00     -         ldy  #$00
0a32: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0a34: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0a36: 20 2c 0a  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0a39: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
0a3b: 85 18     -         sta  R0H
0a3d: 4c 25 0a  -         jmp  INR            // INCR RX
0a40: 20 1d 0a  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
0a43: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0a45: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0a47: 4c 25 0a  -         jmp  INR            // INCR RX AND RETURN
0a4a: 20 54 0a  - STPAT:  jsr  DCR            // DECR RX
0a4d: a5 17     -         lda  R0L
0a4f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0a51: 4c 04 0b  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0a54: b5 17     - DCR:    lda  R0L,X
0a56: d0 02     -         bne  DCR2           // DECR RX
0a58: d6 18     -         dec  R0H,X
0a5a: d6 17     - DCR2:   dec  R0L,X
0a5c: 60        -         rts
0a5d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
0a5f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
0a60: a5 17     -         lda  R0L
0a62: f5 17     -         sbc  R0L,X
0a64: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0a67: a5 18     -         lda  R0H
0a69: f5 18     -         sbc  R0H,X
0a6b: 99 18 00  - SUB2:   sta  R0H,Y
0a6e: 98        -         tya                 // LAST RESULT REG*2
0a6f: 69 00     -         adc  #$00           // CARRY TO LSB
0a71: 85 34     -         sta  R14H
0a73: 60        -         rts
0a74: a5 17     - ADD:    lda  R0L
0a76: 75 17     -         adc  R0L,X
0a78: 85 17     -         sta  R0L            // R0+RX TO R0
0a7a: a5 18     -         lda  R0H
0a7c: 75 18     -         adc  R0H,X
0a7e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0a80: f0 e9     -         beq  SUB2           // FINISH ADD
0a82: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
0a84: 20 1f 0a  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0a87: a5 36     -         lda  R15H
0a89: 20 1f 0a  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
0a8c: 18        - BR:     clc
0a8d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
0a8f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
0a91: 10 01     -         bpl  BR2
0a93: 88        -         dey
0a94: 65 35     - BR2:    adc  R15L           // ADD TO PC
0a96: 85 35     -         sta  R15L
0a98: 98        -         tya
0a99: 65 36     -         adc  R15H
0a9b: 85 36     -         sta  R15H
0a9d: 60        - BNC2:   rts
0a9e: b0 ec     - BC:     bcs  BR
0aa0: 60        -         rts
0aa1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
0aa2: aa        -         tax                 // TO X REG FOR INDEXING
0aa3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
0aa5: 10 e8     -         bpl  BR1            // BRANCH IF SO
0aa7: 60        -         rts
0aa8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
0aa9: aa        -         tax
0aaa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
0aac: 30 e1     -         bmi  BR1
0aae: 60        -         rts
0aaf: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
0ab0: aa        -         tax
0ab1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
0ab3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
0ab5: f0 d8     -         beq  BR1            // BRANCH IF SO
0ab7: 60        -         rts
0ab8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
0ab9: aa        -         tax
0aba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
0abc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
0abe: d0 cf     -         bne  BR1            // BRANCH IF SO
0ac0: 60        -         rts	
0ac1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
0ac2: aa        -         tax
0ac3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
0ac5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
0ac7: 49 ff     -         eor  #$FF
0ac9: f0 c4     -         beq  BR1            // BRANCH IF SO
0acb: 60        -         rts
0acc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
0acd: aa        -         tax
0ace: b5 17     -         lda  R0L,X
0ad0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
0ad2: 49 ff     -         eor  #$FF
0ad4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
0ad6: 60        - NUL:    rts
0ad7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
0ad9: 20 54 0a  -         jsr  DCR            // DECR STACK POINTER
0adc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
0ade: 85 36     -         sta  R15H
0ae0: 20 54 0a  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
0ae3: a1 17     -         lda  (R0L,X)
0ae5: 85 35     -         sta  R15L
0ae7: 60        -         rts
0ae8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
0aea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
0aec: 20 54 0a  - POPD:   jsr  DCR            // DECR RX
0aef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
0af1: a8        -         tay                 // SAVE IN Y REG	
0af2: 4c fb 0a  -         jmp POP2
0af5: 4c 66 0b  - SETI:   jmp SETI_OUTOFPAGE
0af8: 4c 09 0b  - RTN:    jmp  RTNZ
0afb: 20 54 0a  - POP2:   jsr  DCR            // DECR RX
0afe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0b00: 85 17     -         sta  R0L            // TO R0
0b02: 84 18     -         sty  R0H
0b04: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0b06: 84 34     -         sty  R14H
0b08: 60        -         rts
0b09: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
0b0a: 68        -         pla
0b0b: ad aa 0b  -         lda SW16_SAVE_RESTORE
0b0e: f0 03     -         beq RESTORED
0b10: 20 26 0b  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0b13: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0b16: 8d a6 0b  - SAVE:   sta ACCUMULATOR
0b19: 8e a7 0b  -         stx XREG
0b1c: 8c a8 0b  -         sty YREG
0b1f: 08        -         php
0b20: 68        -         pla
0b21: 8d a9 0b  -         sta STATUS
0b24: d8        -         cld
0b25: 60        -         rts
0b26: ad a9 0b  - RESTORE:lda STATUS
0b29: 48        -         pha
0b2a: ad a6 0b  -         lda ACCUMULATOR
0b2d: ae a7 0b  -         ldx XREG
0b30: ac a8 0b  -         ldy YREG
0b33: 28        -         plp
0b34: 60        -         rts
0b35: 68        - BREAK_HANDLER:pla		// Y
0b36: a8        -         tay		// restore Y
0b37: 68        -         pla		// X
0b38: aa        -         tax		// restore X
0b39: 68        -         pla		// restore A
0b3a: 85 37     -         sta RL(ZP)
0b3c: 28        -         plp		// restore Status Flags
0b3d: 68        -         pla		// PCL discard - not useful
0b3e: 68        -         pla		// PCH discard - not useful
0b3f: a5 37     -         lda RL(ZP)
0b41: 4c 74 09  -         jmp SW16D
0b44: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
0b46: 85 37     -         sta RL(ZP)
0b48: e6 35     -         inc R15L
0b4a: d0 02     -         bne !incremented+ 		// inc PC
0b4c: e6 36     -         inc R15H
0b4e: b1 35     -         lda (R15L),Y       		// dest addr low
0b50: 85 38     -         sta RH(ZP)
0b52: e6 35     -         inc R15L
0b54: d0 02     -         bne !incremented+ 		// inc PC
0b56: e6 36     -         inc R15H
0b58: b1 35     -         lda (R15L),Y       		// dest register
0b5a: e6 35     -         inc R15L
0b5c: d0 02     -         bne !incremented+ 		// inc PC
0b5e: e6 36     -         inc R15H
0b60: a8        -         tay
0b61: e6 37     -         inc RL(ZP)
0b63: a2 37     -         ldx #RL(ZP)
0b65: 60        -         rts
************************** Segment: Sweet16OutOfPage ***************************
[Sweet16OutOfPage]
0b66: 20 44 0b  - SETI_OUTOFPAGE:jsr SETIM_COMMON
0b69: a1 00     -         lda ($00,X)
0b6b: 99 00 00  -         sta $00,Y				// low order
0b6e: c6 37     -         dec RL(ZP)
0b70: a1 00     -         lda ($00,X)
0b72: 99 01 00  -         sta $01,Y				// high order
0b75: 4c 74 09  -         jmp SW16D				// back to SWEET16
0b78: 20 44 0b  - SETM_OUTOFPAGE:jsr SETIM_COMMON
0b7b: a1 00     -         lda ($00,X)
0b7d: 99 01 00  -         sta $01,Y				// high order
0b80: c6 37     -         dec RL(ZP)
0b82: a1 00     -         lda ($00,X)
0b84: 99 00 00  -         sta $00,Y				// low order
0b87: 4c 74 09  -         jmp SW16D				// back to SWEET16
0b8a: a9 0b     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
0b8c: 48        -         pha						// using rts as jmps here
0b8d: a9 a2     -         lda #<((!returned+)-1)
0b8f: 48        -         pha
0b90: b1 35     -         lda (R15L),Y       		// high order byte
0b92: 48        -         pha
0b93: e6 35     -         inc R15L
0b95: d0 02     -         bne !incremented+ 		// inc PC
0b97: e6 36     -         inc R15H
0b99: b1 35     -         lda (R15L),Y       		// low order byte
0b9b: 48        -         pha
0b9c: e6 35     -         inc R15L
0b9e: d0 02     -         bne !incremented+ 		// inc PC
0ba0: e6 36     -         inc R15H
0ba2: 60        -         rts				   		// this performs jump from stack
0ba3: 4c 74 09  -         jmp SW16D				// back to SWEET16
***************************** Segment: Sweet16Data *****************************
[Sweet16Data]
0ba6: 00        - ACCUMULATOR:.byte 0
0ba7: 00        - XREG:   .byte 0
0ba8: 00        - YREG:   .byte 0
0ba9: 00        - STATUS: .byte 0
0baa: 00        - SW16_SAVE_RESTORE:.byte 0
****************************** Segment: TestData *******************************
[TestData]
401d: 73 00     - TEST_SUCCESS:.byte $73, $00
401f: 76 00     - TEST_FAILURE:.byte $76, $00
4021: 00        - TEST_COUNT:.byte $00
4022: 00        - TEST_PASS_COUNT:.byte $00
4023: 00        - TEST_NAME_COUNT:.byte $00
4024: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  - TEST_TITLE:.text "SWEET16 TEST RUNNER"
4034: 4e 45 52                                        
4037: 0d 00     -         .byte RETURN, NULL
4039: 12 34     - TEST_MEMORY:.byte $12,$34
403b: 56 78     - TEST_MEMORY_2:.byte $56,$78
403d: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
403f: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
404f: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
405f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
