******************************* Segment: Default *******************************
******************************** Segment: Main *********************************
[Main]
0810: a9 4b     - Main:   lda #<address
0812: 85 fb     -         sta lowByte
0814: a9 08     -         lda #>address 
0816: 85 fc     -         sta highByte
0818: a9 b1     -         lda #<address
081a: 85 fd     -         sta lowByte
081c: a9 0a     -         lda #>address 
081e: 85 fe     -         sta highByte
0820: a9 0a     -         lda #<address
0822: 85 4e     -         sta lowByte
0824: a9 00     -         lda #>address 
0826: 85 4f     -         sta highByte
0828: 20 b0 0b  -         jsr CopyMemoryZeroPageSize
082b: a9 0a     -         lda #<size
082d: 8d af 0a  -         sta managedBuffer.allocSize.lo
0830: a9 00     -         lda #>size
0832: 8d b0 0a  -         sta managedBuffer.allocSize.hi
0835: 20 df 3b  -         jsr TestRun
0838: 20 3f 08  -         jsr Anykey
083b: 4c 48 08  -         jmp Reset
083e: 60        -         rts
083f: 20 9f ff  - Anykey: jsr scnkey  // scan keyboard
0842: 20 e4 ff  -         jsr getin	// put result into A
0845: f0 f8     -         beq !-	
0847: 60        -         rts
0848: 6c fc ff  - Reset:  jmp ($FFFC)

[Debug]
084b: 31 32 33 34 35 36 37 38 39 30                    - Debug:  .text testString
******************************* Segment: Sweet16 *******************************
[Sweet16]
0855: a9 00     - SW16_NONE:lda #$00
0857: 8d aa 0a  -         sta SW16_SAVE_RESTORE
085a: 4c 62 08  -         jmp SW160
085d: a9 01     - SW16:   lda #$01
085f: 8d aa 0a  -         sta SW16_SAVE_RESTORE
0862: f0 03     - SW160:  beq SW16A
0864: 20 16 0a  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
0867: 68        - SW16A:  pla
0868: 85 35     -         sta R15L            // INIT SWEET16 PC
086a: 68        -         pla                 // FROM RETURN
086b: 85 36     -         sta R15H	        // ADDRESS
086d: 20 73 08  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
0870: 4c 6d 08  -         jmp  SW16B          // ONE SWEET16 INSTR.
0873: e6 35     - SW16C:  inc  R15L
0875: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
0877: e6 36     -         inc  R15H
0879: a9 09     - SW16D:  lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
087b: 48        -         pha                 // PUSH ON STACK FOR RTS
087c: a0 00     -         ldy  #$00
087e: b1 35     -         lda  (R15L),Y       // FETCH INSTR
0880: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
0882: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
0883: aa        -         tax                 // TO X REG FOR INDEXING
0884: 4a        -         lsr
0885: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
0887: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
0889: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
088b: 4a        -         lsr
088c: 4a        -         lsr                 // OPCODE*2 TO LSB'S
088d: 4a        -         lsr
088e: a8        -         tay                 // TO Y REG FOR INDEXING
088f: b9 b4 08  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
0892: 48        -         pha                 // ONTO STACK
0893: 60        -         rts                 // GOTO REG-OP ROUTINE
0894: e6 35     - TOBR:   inc  R15L
0896: d0 02     -         bne  TOBR2          // INCR PC
0898: e6 36     -         inc  R15H
089a: bd b7 08  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
089d: 48        -         pha                 // ONTO STACK FOR NON-REG OP
089e: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
08a0: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
08a1: 60        -         rts                 // GOTO NON-REG OP ROUTINE
08a2: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
08a4: 95 18     -         sta  R0H,X
08a6: 88        -         dey
08a7: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
08a9: 95 17     -         sta  R0L,X
08ab: 98        -         tya                 // Y REG CONTAINS 1
08ac: 38        -         sec
08ad: 65 35     -         adc  R15L           // ADD 2 TO PC
08af: 85 35     -         sta  R15L
08b1: 90 02     -         bcc  SET2
08b3: e6 36     -         inc  R15H
08b5: 60        - SET2:   rts

[Sweet16JumpTable]
08b6: 00        -         .byte <SET-1          // 1X
08b7: f7        -         .byte  <RTN-1          // 0
08b8: 03        -         .byte  <LD-1           // 2X
08b9: 8b        -         .byte  <BR-1           // 1
08ba: 13        -         .byte  <ST-1           // 3X
08bb: 8c        -         .byte  <BNC-1          // 2
08bc: 2b        -         .byte  <LDAT-1         // 4X
08bd: 9d        -         .byte  <BC-1           // 3
08be: 1c        -         .byte  <STAT-1         // 5X
08bf: a0        -         .byte  <BP-1           // 4
08c0: 35        -         .byte  <LDDAT-1        // 6X
08c1: a7        -         .byte  <BM-1           // 5
08c2: 3f        -         .byte  <STDAT-1        // 7X
08c3: ae        -         .byte  <BZ-1           // 6
08c4: e7        -         .byte  <POP-1          // 8X
08c5: b7        -         .byte  <BNZ-1          // 7
08c6: 49        -         .byte  <STPAT-1        // 9X
08c7: c0        -         .byte  <BM1-1          // 8
08c8: 73        -         .byte  <ADD-1          // AX
08c9: cb        -         .byte  <BNM1-1         // 9
08ca: 5c        -         .byte  <SUB-1          // BX
08cb: 0c        -         .byte  <BK-1           // A
08cc: eb        -         .byte  <POPD-1         // CX
08cd: d6        -         .byte  <RS-1           // B
08ce: 5e        -         .byte  <CPR-1          // DX
08cf: 81        -         .byte  <BS-1           // C
08d0: 24        -         .byte  <INR-1          // EX
08d1: 10        -         .byte  <XJSR-1         // D
08d2: 53        -         .byte  <DCR-1          // FX
08d3: 0d        -         .byte  <SETM-1         // E
08d4: d5        -         .byte  <NUL-1          // UNUSED
08d5: f4        -         .byte  <SETI-1         // F

[Sweet16Page]
0900: ea        -         nop                // otherwise RTS "cleverness" not so clever
0901: 4c a2 08  -         jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     -         lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        -         brk
090e: 4c 78 0a  -         jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  -         jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     -         lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     -         lda  R0L	
091f: 81 17     -         sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     -         sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     -         inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        -         rts
092c: a1 17     -         lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  -         jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  -         jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  -         jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     -         lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     -         dec  R0L,X
095c: 60        -         rts
095d: a0 00     -         ldy  #$00           // RESULT TO R0
095f: 38        -         sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  -         sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     -         lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     -         lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        -         clc
098d: b0 0e     -         bcs  BNC2           // NO CARRY TEST	
098f: b1 35     -         lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     -         adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        -         rts
099e: b0 ec     -         bcs  BR
09a0: 60        -         rts
09a1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        -         rts
09d7: a2 18     -         ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     -         ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  -         jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  -         jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  -         jmp  RTNZ
09fb: 20 54 09  -         jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     -         ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        -         pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  -         jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  -         sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  -         lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        -         pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c 79 08  -         jmp SW16D
0a44: b1 35     -         lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts

[Sweet16OutOfPage]
0a66: 20 44 0a  -         jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c 79 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  -         jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c 79 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     -         lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c 79 08  -         jmp SW16D				// back to SWEET16

[Sweet16Data]
0aa6: 00        -         .byte 0
0aa7: 00        -         .byte 0
0aa8: 00        -         .byte 0
0aa9: 00        -         .byte 0
0aaa: 00        -         .byte 0
******************************** Segment: Util *********************************
[UtilData]
0aab: 0d 00     -         .byte RETURN, NULL
0aad: ff 00     -         .byte <value, >value
0aaf: 00 00     -         .byte <value, >value
0ab1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill $ff, $00
0ad1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0af1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
0bb0: a0 00     -         ldy #$00
0bb2: 84 50     -         sty ZpVar.Four.lo     // LSB size
0bb4: 84 51     -         sty ZpVar.Four.hi     // MSH size
0bb6: a5 4f     -         lda ZpVar.Three.hi
0bb8: c5 51     -         cmp ZpVar.Four.hi
0bba: f0 17     -         beq !msb_match+
0bbc: b1 fb     -         lda (ZpVar.One.lo),y 
0bbe: 91 fd     -         sta (ZpVar.Two.lo),y
0bc0: e6 50     -         inc ZpVar.Four.lo
0bc2: f0 0a     -         beq inc_msb
0bc4: c8        -         iny
0bc5: d0 ef     -         bne !loop-
0bc7: e6 fc     -         inc ZpVar.One.hi 	// inc MSB source 
0bc9: e6 fe     -         inc ZpVar.Two.hi 	// inc MSB dest 
0bcb: 4c b6 0b  -         jmp !loop-
0bce: e6 51     -         inc ZpVar.Four.hi
0bd0: 4c c4 0b  -         jmp !cont-
0bd3: a5 4e     -         lda ZpVar.Three.lo
0bd5: c5 50     -         cmp ZpVar.Four.lo
0bd7: f0 03     -         beq !done+
0bd9: 4c bc 0b  -         jmp !copy-
0bdc: 60        -         rts
0bdd: a9 fd     -         lda #ZpVar.One+2
0bdf: a2 ff     -         ldx #<ZpVar.One+4
0be1: a0 00     -         ldy #>ZpVar.One+4
0be3: 20 bd ff  -         jsr $ffbd     // call setnam
0be6: a9 01     -         lda #$01
0be8: a6 ba     -         ldx $ba       // last used device number
0bea: d0 02     -         bne !skip+
0bec: a2 08     -         ldx #$08      // default to device 8
0bee: a0 01     -         ldy #$01      // not $01 means: load to address stored in file
0bf0: 20 ba ff  -         jsr $ffba     // call setlfs
0bf3: a9 00     -         lda #$00      // $00 means: load to memory (not verify)
0bf5: 20 d5 ff  -         jsr $ffd5     // call load
0bf8: b0 03     -         bcs !error+    // if carry set, a load error has happened
0bfa: 4c fe 0b  -         jmp !done+
0bfd: 60        -         rts
******************************** Segment: Tests ********************************
[Set]
0bfe: ee 43 3e  - SET_TEST:inc TEST_NAME_COUNT
0c01: ad 86 02  -         lda foreground_color
0c04: 48        -         pha
0c05: a9 0f     -         lda #color
0c07: 8d 86 02  -         sta foreground_color
0c0a: a2 00     -         ldx #$00
0c0c: bd 1f 0c  -         lda msg,x
0c0f: f0 07     -         beq !done+
0c11: 20 d2 ff  -         jsr kernal_chrout
0c14: e8        -         inx
0c15: 4c 0c 0c  -         jmp !loop-
0c18: 68        -         pla
0c19: 8d 86 02  -         sta foreground_color
0c1c: 4c 28 0c  -         jmp !done+
0c1f: 20 20     - memory: .fill spacing, spacebar
0c21: 53 45 54  -         .text name
0c24: 2e 2e 2e  -         .text "..."
0c27: 00        -         .byte NULL
0c28: 20 5d 08  -         jsr SW16
0c2b: 15        -         .byte opcode(op, register)
0c2c: 34 12     -         .word address.getValue()
0c2e: 00        -         .byte $00 }
0c2f: ee 41 3e  -         inc TEST_COUNT
0c32: ad 86 02  -         lda foreground_color
0c35: 48        -         pha
0c36: a9 0e     -         lda #color
0c38: 8d 86 02  -         sta foreground_color
0c3b: a2 00     -         ldx #$00
0c3d: bd 50 0c  -         lda msg,x
0c40: f0 07     -         beq !done+
0c42: 20 d2 ff  -         jsr kernal_chrout
0c45: e8        -         inx
0c46: 4c 3d 0c  -         jmp !loop-
0c49: 68        -         pla
0c4a: 8d 86 02  -         sta foreground_color
0c4d: 4c 58 0c  -         jmp !done+
0c50: 20        - memory: .byte spacebar
0c51: 56 41 4c 55 45                                   -         .text description
0c56: 3a        -         .text ":"
0c57: 00        -         .byte NULL
0c58: a6 21     -         ldx rl(register.getValue())
0c5a: a4 22     -         ldy rh(register.getValue())
0c5c: e0 34     -         cpx #<value
0c5e: d0 25     -         bne !failed+
0c60: c0 12     -         cpy #>value
0c62: d0 21     -         bne !failed+
0c64: ee 42 3e  -         inc TEST_PASS_COUNT
0c67: ad 86 02  -         lda foreground_color
0c6a: 48        -         pha
0c6b: a9 05     -         lda #color
0c6d: 8d 86 02  -         sta foreground_color
0c70: a2 00     -         ldx #$00
0c72: bd 3d 3e  -         lda msg,x
0c75: f0 07     -         beq !done+
0c77: 20 d2 ff  -         jsr kernal_chrout
0c7a: e8        -         inx
0c7b: 4c 72 0c  -         jmp !loop-
0c7e: 68        -         pla
0c7f: 8d 86 02  -         sta foreground_color
0c82: 4c a0 0c  -         jmp !done+
0c85: ad 86 02  -         lda foreground_color
0c88: 48        -         pha
0c89: a9 02     -         lda #color
0c8b: 8d 86 02  -         sta foreground_color
0c8e: a2 00     -         ldx #$00
0c90: bd 3f 3e  -         lda msg,x
0c93: f0 07     -         beq !done+
0c95: 20 d2 ff  -         jsr kernal_chrout
0c98: e8        -         inx
0c99: 4c 90 0c  -         jmp !loop-
0c9c: 68        -         pla
0c9d: 8d 86 02  -         sta foreground_color
0ca0: a2 00     -         ldx #$00
0ca2: bd b1 0c  -         lda msg,x
0ca5: f0 07     -         beq !done+
0ca7: 20 d2 ff  -         jsr kernal_chrout
0caa: e8        -         inx
0cab: 4c a2 0c  -         jmp !loop-
0cae: 4c b3 0c  -         jmp !done+
0cb1: 0d 00     - memory: .byte RETURN, NULL
0cb3: ae 43 3e  -         ldx TEST_NAME_COUNT
0cb6: e0 15     -         cpx #TESTS_PER_PAGE
0cb8: d0 5d     -         bne !exit+
0cba: ad 86 02  -         lda foreground_color
0cbd: 48        -         pha
0cbe: a9 01     -         lda #color
0cc0: 8d 86 02  -         sta foreground_color
0cc3: a2 00     -         ldx #$00
0cc5: bd d8 0c  -         lda msg,x
0cc8: f0 07     -         beq !done+
0cca: 20 d2 ff  -         jsr kernal_chrout
0ccd: e8        -         inx
0cce: 4c c5 0c  -         jmp !loop-
0cd1: 68        -         pla
0cd2: 8d 86 02  -         sta foreground_color
0cd5: 4c f7 0c  -         jmp !no_key+
0cd8: 0d        - memory: .byte RETURN
0cd9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0ce9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0cf5: 0d 00     -         .byte RETURN, NULL
0cf7: 20 9f ff  -         jsr scnkey  // scan keyboard
0cfa: 20 e4 ff  -         jsr getin	// put result into A
0cfd: f0 f8     -         beq !no_key-
0cff: a2 00     -         ldx #$00
0d01: bd 10 0d  -         lda msg,x
0d04: f0 07     -         beq !done+
0d06: 20 d2 ff  -         jsr kernal_chrout
0d09: e8        -         inx
0d0a: 4c 01 0d  -         jmp !loop-
0d0d: 4c 12 0d  -         jmp !done+
0d10: 0d 00     - newline:.byte RETURN, NULL
0d12: a2 00     -         ldx #$00
0d14: 8e 43 3e  -         stx TEST_NAME_COUNT
0d17: 60        -         rts

[Load]
0d18: ee 43 3e  - LOAD_TEST:inc TEST_NAME_COUNT
0d1b: ad 86 02  -         lda foreground_color
0d1e: 48        -         pha
0d1f: a9 0f     -         lda #color
0d21: 8d 86 02  -         sta foreground_color
0d24: a2 00     -         ldx #$00
0d26: bd 39 0d  -         lda msg,x
0d29: f0 07     -         beq !done+
0d2b: 20 d2 ff  -         jsr kernal_chrout
0d2e: e8        -         inx
0d2f: 4c 26 0d  -         jmp !loop-
0d32: 68        -         pla
0d33: 8d 86 02  -         sta foreground_color
0d36: 4c 43 0d  -         jmp !done+
0d39: 20 20     - memory: .fill spacing, spacebar
0d3b: 4c 4f 41 44                                      -         .text name
0d3f: 2e 2e 2e  -         .text "..."
0d42: 00        -         .byte NULL
0d43: 20 5d 08  -         jsr SW16
0d46: 15        -         .byte opcode(op, register)
0d47: 21 43     -         .word address.getValue()
0d49: 25        -         .byte opcode($20, register) }
0d4a: 00        -         .byte $00 }
0d4b: ee 41 3e  -         inc TEST_COUNT
0d4e: ad 86 02  -         lda foreground_color
0d51: 48        -         pha
0d52: a9 0e     -         lda #color
0d54: 8d 86 02  -         sta foreground_color
0d57: a2 00     -         ldx #$00
0d59: bd 6c 0d  -         lda msg,x
0d5c: f0 07     -         beq !done+
0d5e: 20 d2 ff  -         jsr kernal_chrout
0d61: e8        -         inx
0d62: 4c 59 0d  -         jmp !loop-
0d65: 68        -         pla
0d66: 8d 86 02  -         sta foreground_color
0d69: 4c 72 0d  -         jmp !done+
0d6c: 20        - memory: .byte spacebar
0d6d: 41 43 43  -         .text description
0d70: 3a        -         .text ":"
0d71: 00        -         .byte NULL
0d72: a6 17     -         ldx rl(register.getValue())
0d74: a4 18     -         ldy rh(register.getValue())
0d76: e0 21     -         cpx #<value
0d78: d0 25     -         bne !failed+
0d7a: c0 43     -         cpy #>value
0d7c: d0 21     -         bne !failed+
0d7e: ee 42 3e  -         inc TEST_PASS_COUNT
0d81: ad 86 02  -         lda foreground_color
0d84: 48        -         pha
0d85: a9 05     -         lda #color
0d87: 8d 86 02  -         sta foreground_color
0d8a: a2 00     -         ldx #$00
0d8c: bd 3d 3e  -         lda msg,x
0d8f: f0 07     -         beq !done+
0d91: 20 d2 ff  -         jsr kernal_chrout
0d94: e8        -         inx
0d95: 4c 8c 0d  -         jmp !loop-
0d98: 68        -         pla
0d99: 8d 86 02  -         sta foreground_color
0d9c: 4c ba 0d  -         jmp !done+
0d9f: ad 86 02  -         lda foreground_color
0da2: 48        -         pha
0da3: a9 02     -         lda #color
0da5: 8d 86 02  -         sta foreground_color
0da8: a2 00     -         ldx #$00
0daa: bd 3f 3e  -         lda msg,x
0dad: f0 07     -         beq !done+
0daf: 20 d2 ff  -         jsr kernal_chrout
0db2: e8        -         inx
0db3: 4c aa 0d  -         jmp !loop-
0db6: 68        -         pla
0db7: 8d 86 02  -         sta foreground_color
0dba: a2 00     -         ldx #$00
0dbc: bd cb 0d  -         lda msg,x
0dbf: f0 07     -         beq !done+
0dc1: 20 d2 ff  -         jsr kernal_chrout
0dc4: e8        -         inx
0dc5: 4c bc 0d  -         jmp !loop-
0dc8: 4c cd 0d  -         jmp !done+
0dcb: 0d 00     - memory: .byte RETURN, NULL
0dcd: ae 43 3e  -         ldx TEST_NAME_COUNT
0dd0: e0 15     -         cpx #TESTS_PER_PAGE
0dd2: d0 5d     -         bne !exit+
0dd4: ad 86 02  -         lda foreground_color
0dd7: 48        -         pha
0dd8: a9 01     -         lda #color
0dda: 8d 86 02  -         sta foreground_color
0ddd: a2 00     -         ldx #$00
0ddf: bd f2 0d  -         lda msg,x
0de2: f0 07     -         beq !done+
0de4: 20 d2 ff  -         jsr kernal_chrout
0de7: e8        -         inx
0de8: 4c df 0d  -         jmp !loop-
0deb: 68        -         pla
0dec: 8d 86 02  -         sta foreground_color
0def: 4c 11 0e  -         jmp !no_key+
0df2: 0d        - memory: .byte RETURN
0df3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0e03: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0e0f: 0d 00     -         .byte RETURN, NULL
0e11: 20 9f ff  -         jsr scnkey  // scan keyboard
0e14: 20 e4 ff  -         jsr getin	// put result into A
0e17: f0 f8     -         beq !no_key-
0e19: a2 00     -         ldx #$00
0e1b: bd 2a 0e  -         lda msg,x
0e1e: f0 07     -         beq !done+
0e20: 20 d2 ff  -         jsr kernal_chrout
0e23: e8        -         inx
0e24: 4c 1b 0e  -         jmp !loop-
0e27: 4c 2c 0e  -         jmp !done+
0e2a: 0d 00     - newline:.byte RETURN, NULL
0e2c: a2 00     -         ldx #$00
0e2e: 8e 43 3e  -         stx TEST_NAME_COUNT
0e31: 60        -         rts
0e32: ee 43 3e  - STORE_TEST:inc TEST_NAME_COUNT
0e35: ad 86 02  -         lda foreground_color
0e38: 48        -         pha
0e39: a9 0f     -         lda #color
0e3b: 8d 86 02  -         sta foreground_color
0e3e: a2 00     -         ldx #$00
0e40: bd 53 0e  -         lda msg,x
0e43: f0 07     -         beq !done+
0e45: 20 d2 ff  -         jsr kernal_chrout
0e48: e8        -         inx
0e49: 4c 40 0e  -         jmp !loop-
0e4c: 68        -         pla
0e4d: 8d 86 02  -         sta foreground_color
0e50: 4c 5e 0e  -         jmp !done+
0e53: 20 20     - memory: .fill spacing, spacebar
0e55: 53 54 4f 52 45                                   -         .text name
0e5a: 2e 2e 2e  -         .text "..."
0e5d: 00        -         .byte NULL
0e5e: 20 5d 08  -         jsr SW16
0e61: 15        -         .byte opcode(op, register)
0e62: 34 12     -         .word address.getValue()
0e64: 25        -         .byte opcode($20, register) }
0e65: 36        -         .byte opcode($30, register) }
0e66: 00        -         .byte $00 }
0e67: ee 41 3e  -         inc TEST_COUNT
0e6a: ad 86 02  -         lda foreground_color
0e6d: 48        -         pha
0e6e: a9 0e     -         lda #color
0e70: 8d 86 02  -         sta foreground_color
0e73: a2 00     -         ldx #$00
0e75: bd 88 0e  -         lda msg,x
0e78: f0 07     -         beq !done+
0e7a: 20 d2 ff  -         jsr kernal_chrout
0e7d: e8        -         inx
0e7e: 4c 75 0e  -         jmp !loop-
0e81: 68        -         pla
0e82: 8d 86 02  -         sta foreground_color
0e85: 4c 90 0e  -         jmp !done+
0e88: 20        - memory: .byte spacebar
0e89: 56 41 4c 55 45                                   -         .text description
0e8e: 3a        -         .text ":"
0e8f: 00        -         .byte NULL
0e90: a6 23     -         ldx rl(register.getValue())
0e92: a4 24     -         ldy rh(register.getValue())
0e94: e0 34     -         cpx #<value
0e96: d0 25     -         bne !failed+
0e98: c0 12     -         cpy #>value
0e9a: d0 21     -         bne !failed+
0e9c: ee 42 3e  -         inc TEST_PASS_COUNT
0e9f: ad 86 02  -         lda foreground_color
0ea2: 48        -         pha
0ea3: a9 05     -         lda #color
0ea5: 8d 86 02  -         sta foreground_color
0ea8: a2 00     -         ldx #$00
0eaa: bd 3d 3e  -         lda msg,x
0ead: f0 07     -         beq !done+
0eaf: 20 d2 ff  -         jsr kernal_chrout
0eb2: e8        -         inx
0eb3: 4c aa 0e  -         jmp !loop-
0eb6: 68        -         pla
0eb7: 8d 86 02  -         sta foreground_color
0eba: 4c d8 0e  -         jmp !done+
0ebd: ad 86 02  -         lda foreground_color
0ec0: 48        -         pha
0ec1: a9 02     -         lda #color
0ec3: 8d 86 02  -         sta foreground_color
0ec6: a2 00     -         ldx #$00
0ec8: bd 3f 3e  -         lda msg,x
0ecb: f0 07     -         beq !done+
0ecd: 20 d2 ff  -         jsr kernal_chrout
0ed0: e8        -         inx
0ed1: 4c c8 0e  -         jmp !loop-
0ed4: 68        -         pla
0ed5: 8d 86 02  -         sta foreground_color
0ed8: a2 00     -         ldx #$00
0eda: bd e9 0e  -         lda msg,x
0edd: f0 07     -         beq !done+
0edf: 20 d2 ff  -         jsr kernal_chrout
0ee2: e8        -         inx
0ee3: 4c da 0e  -         jmp !loop-
0ee6: 4c eb 0e  -         jmp !done+
0ee9: 0d 00     - memory: .byte RETURN, NULL
0eeb: ae 43 3e  -         ldx TEST_NAME_COUNT
0eee: e0 15     -         cpx #TESTS_PER_PAGE
0ef0: d0 5d     -         bne !exit+
0ef2: ad 86 02  -         lda foreground_color
0ef5: 48        -         pha
0ef6: a9 01     -         lda #color
0ef8: 8d 86 02  -         sta foreground_color
0efb: a2 00     -         ldx #$00
0efd: bd 10 0f  -         lda msg,x
0f00: f0 07     -         beq !done+
0f02: 20 d2 ff  -         jsr kernal_chrout
0f05: e8        -         inx
0f06: 4c fd 0e  -         jmp !loop-
0f09: 68        -         pla
0f0a: 8d 86 02  -         sta foreground_color
0f0d: 4c 2f 0f  -         jmp !no_key+
0f10: 0d        - memory: .byte RETURN
0f11: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0f21: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0f2d: 0d 00     -         .byte RETURN, NULL
0f2f: 20 9f ff  -         jsr scnkey  // scan keyboard
0f32: 20 e4 ff  -         jsr getin	// put result into A
0f35: f0 f8     -         beq !no_key-
0f37: a2 00     -         ldx #$00
0f39: bd 48 0f  -         lda msg,x
0f3c: f0 07     -         beq !done+
0f3e: 20 d2 ff  -         jsr kernal_chrout
0f41: e8        -         inx
0f42: 4c 39 0f  -         jmp !loop-
0f45: 4c 4a 0f  -         jmp !done+
0f48: 0d 00     - newline:.byte RETURN, NULL
0f4a: a2 00     -         ldx #$00
0f4c: 8e 43 3e  -         stx TEST_NAME_COUNT
0f4f: 60        -         rts
0f50: ee 43 3e  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
0f53: ad 86 02  -         lda foreground_color
0f56: 48        -         pha
0f57: a9 0f     -         lda #color
0f59: 8d 86 02  -         sta foreground_color
0f5c: a2 00     -         ldx #$00
0f5e: bd 71 0f  -         lda msg,x
0f61: f0 07     -         beq !done+
0f63: 20 d2 ff  -         jsr kernal_chrout
0f66: e8        -         inx
0f67: 4c 5e 0f  -         jmp !loop-
0f6a: 68        -         pla
0f6b: 8d 86 02  -         sta foreground_color
0f6e: 4c 84 0f  -         jmp !done+
0f71: 20 20     - memory: .fill spacing, spacebar
0f73: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
0f80: 2e 2e 2e  -         .text "..."
0f83: 00        -         .byte NULL
0f84: 20 5d 08  -         jsr SW16
0f87: 15        -         .byte opcode(op, register)
0f88: 59 3e     -         .word address.getValue()
0f8a: 45        -         .byte opcode($40, register) }
0f8b: 00        -         .byte $00 }
0f8c: ee 41 3e  -         inc TEST_COUNT
0f8f: ad 86 02  -         lda foreground_color
0f92: 48        -         pha
0f93: a9 0e     -         lda #color
0f95: 8d 86 02  -         sta foreground_color
0f98: a2 00     -         ldx #$00
0f9a: bd ad 0f  -         lda msg,x
0f9d: f0 07     -         beq !done+
0f9f: 20 d2 ff  -         jsr kernal_chrout
0fa2: e8        -         inx
0fa3: 4c 9a 0f  -         jmp !loop-
0fa6: 68        -         pla
0fa7: 8d 86 02  -         sta foreground_color
0faa: 4c b3 0f  -         jmp !done+
0fad: 20        - memory: .byte spacebar
0fae: 41 43 43  -         .text description
0fb1: 3a        -         .text ":"
0fb2: 00        -         .byte NULL
0fb3: a6 17     -         ldx rl(register.getValue())
0fb5: a4 18     -         ldy rh(register.getValue())
0fb7: ec 59 3e  -         cpx address
0fba: d0 21     -         bne !failed+
0fbc: ee 42 3e  -         inc TEST_PASS_COUNT
0fbf: ad 86 02  -         lda foreground_color
0fc2: 48        -         pha
0fc3: a9 05     -         lda #color
0fc5: 8d 86 02  -         sta foreground_color
0fc8: a2 00     -         ldx #$00
0fca: bd 3d 3e  -         lda msg,x
0fcd: f0 07     -         beq !done+
0fcf: 20 d2 ff  -         jsr kernal_chrout
0fd2: e8        -         inx
0fd3: 4c ca 0f  -         jmp !loop-
0fd6: 68        -         pla
0fd7: 8d 86 02  -         sta foreground_color
0fda: 4c f8 0f  -         jmp !done+
0fdd: ad 86 02  -         lda foreground_color
0fe0: 48        -         pha
0fe1: a9 02     -         lda #color
0fe3: 8d 86 02  -         sta foreground_color
0fe6: a2 00     -         ldx #$00
0fe8: bd 3f 3e  -         lda msg,x
0feb: f0 07     -         beq !done+
0fed: 20 d2 ff  -         jsr kernal_chrout
0ff0: e8        -         inx
0ff1: 4c e8 0f  -         jmp !loop-
0ff4: 68        -         pla
0ff5: 8d 86 02  -         sta foreground_color
0ff8: ee 41 3e  -         inc TEST_COUNT
0ffb: ad 86 02  -         lda foreground_color
0ffe: 48        -         pha
0fff: a9 0e     -         lda #color
1001: 8d 86 02  -         sta foreground_color
1004: a2 00     -         ldx #$00
1006: bd 19 10  -         lda msg,x
1009: f0 07     -         beq !done+
100b: 20 d2 ff  -         jsr kernal_chrout
100e: e8        -         inx
100f: 4c 06 10  -         jmp !loop-
1012: 68        -         pla
1013: 8d 86 02  -         sta foreground_color
1016: 4c 1f 10  -         jmp !done+
1019: 20        - memory: .byte spacebar
101a: 52 45 47  -         .text description
101d: 3a        -         .text ":"
101e: 00        -         .byte NULL
101f: a6 21     -         ldx rl(register.getValue())
1021: a4 22     -         ldy rh(register.getValue())
1023: e0 5a     -         cpx #<value
1025: d0 25     -         bne !failed+
1027: c0 3e     -         cpy #>value
1029: d0 21     -         bne !failed+
102b: ee 42 3e  -         inc TEST_PASS_COUNT
102e: ad 86 02  -         lda foreground_color
1031: 48        -         pha
1032: a9 05     -         lda #color
1034: 8d 86 02  -         sta foreground_color
1037: a2 00     -         ldx #$00
1039: bd 3d 3e  -         lda msg,x
103c: f0 07     -         beq !done+
103e: 20 d2 ff  -         jsr kernal_chrout
1041: e8        -         inx
1042: 4c 39 10  -         jmp !loop-
1045: 68        -         pla
1046: 8d 86 02  -         sta foreground_color
1049: 4c 67 10  -         jmp !done+
104c: ad 86 02  -         lda foreground_color
104f: 48        -         pha
1050: a9 02     -         lda #color
1052: 8d 86 02  -         sta foreground_color
1055: a2 00     -         ldx #$00
1057: bd 3f 3e  -         lda msg,x
105a: f0 07     -         beq !done+
105c: 20 d2 ff  -         jsr kernal_chrout
105f: e8        -         inx
1060: 4c 57 10  -         jmp !loop-
1063: 68        -         pla
1064: 8d 86 02  -         sta foreground_color
1067: a2 00     -         ldx #$00
1069: bd 78 10  -         lda msg,x
106c: f0 07     -         beq !done+
106e: 20 d2 ff  -         jsr kernal_chrout
1071: e8        -         inx
1072: 4c 69 10  -         jmp !loop-
1075: 4c 7a 10  -         jmp !done+
1078: 0d 00     - memory: .byte RETURN, NULL
107a: ae 43 3e  -         ldx TEST_NAME_COUNT
107d: e0 15     -         cpx #TESTS_PER_PAGE
107f: d0 5d     -         bne !exit+
1081: ad 86 02  -         lda foreground_color
1084: 48        -         pha
1085: a9 01     -         lda #color
1087: 8d 86 02  -         sta foreground_color
108a: a2 00     -         ldx #$00
108c: bd 9f 10  -         lda msg,x
108f: f0 07     -         beq !done+
1091: 20 d2 ff  -         jsr kernal_chrout
1094: e8        -         inx
1095: 4c 8c 10  -         jmp !loop-
1098: 68        -         pla
1099: 8d 86 02  -         sta foreground_color
109c: 4c be 10  -         jmp !no_key+
109f: 0d        - memory: .byte RETURN
10a0: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
10b0: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
10bc: 0d 00     -         .byte RETURN, NULL
10be: 20 9f ff  -         jsr scnkey  // scan keyboard
10c1: 20 e4 ff  -         jsr getin	// put result into A
10c4: f0 f8     -         beq !no_key-
10c6: a2 00     -         ldx #$00
10c8: bd d7 10  -         lda msg,x
10cb: f0 07     -         beq !done+
10cd: 20 d2 ff  -         jsr kernal_chrout
10d0: e8        -         inx
10d1: 4c c8 10  -         jmp !loop-
10d4: 4c d9 10  -         jmp !done+
10d7: 0d 00     - newline:.byte RETURN, NULL
10d9: a2 00     -         ldx #$00
10db: 8e 43 3e  -         stx TEST_NAME_COUNT
10de: 60        -         rts
10df: ee 43 3e  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
10e2: ad 86 02  -         lda foreground_color
10e5: 48        -         pha
10e6: a9 0f     -         lda #color
10e8: 8d 86 02  -         sta foreground_color
10eb: a2 00     -         ldx #$00
10ed: bd 00 11  -         lda msg,x
10f0: f0 07     -         beq !done+
10f2: 20 d2 ff  -         jsr kernal_chrout
10f5: e8        -         inx
10f6: 4c ed 10  -         jmp !loop-
10f9: 68        -         pla
10fa: 8d 86 02  -         sta foreground_color
10fd: 4c 14 11  -         jmp !done+
1100: 20 20     - memory: .fill spacing, spacebar
1102: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
1110: 2e 2e 2e  -         .text "..."
1113: 00        -         .byte NULL
1114: 20 5d 08  -         jsr SW16
1117: 15        -         .byte opcode(op, register)
1118: 59 3e     -         .word address.getValue()
111a: 16        -         .byte opcode(op, register)
111b: 5b 3e     -         .word address.getValue()
111d: 45        -         .byte opcode($40, register) }
111e: 56        -         .byte opcode($50, register) }
111f: 00        -         .byte $00 }
1120: ee 41 3e  -         inc TEST_COUNT
1123: ad 86 02  -         lda foreground_color
1126: 48        -         pha
1127: a9 0e     -         lda #color
1129: 8d 86 02  -         sta foreground_color
112c: a2 00     -         ldx #$00
112e: bd 41 11  -         lda msg,x
1131: f0 07     -         beq !done+
1133: 20 d2 ff  -         jsr kernal_chrout
1136: e8        -         inx
1137: 4c 2e 11  -         jmp !loop-
113a: 68        -         pla
113b: 8d 86 02  -         sta foreground_color
113e: 4c 47 11  -         jmp !done+
1141: 20        - memory: .byte spacebar
1142: 4d 45 4d  -         .text description
1145: 3a        -         .text ":"
1146: 00        -         .byte NULL
1147: a2 ff     -         ldx #$ff
1149: e8        -         inx
114a: e0 01     -         cpx #size
114c: f0 0b     -         beq !success+
114e: bd 59 3e  -         lda source,x
1151: dd 5b 3e  -         cmp dest,x
1154: f0 f3     -         beq !loop-
1156: 4c 7a 11  -         jmp !failed+
1159: ee 42 3e  -         inc TEST_PASS_COUNT
115c: ad 86 02  -         lda foreground_color
115f: 48        -         pha
1160: a9 05     -         lda #color
1162: 8d 86 02  -         sta foreground_color
1165: a2 00     -         ldx #$00
1167: bd 3d 3e  -         lda msg,x
116a: f0 07     -         beq !done+
116c: 20 d2 ff  -         jsr kernal_chrout
116f: e8        -         inx
1170: 4c 67 11  -         jmp !loop-
1173: 68        -         pla
1174: 8d 86 02  -         sta foreground_color
1177: 4c 95 11  -         jmp !done+
117a: ad 86 02  -         lda foreground_color
117d: 48        -         pha
117e: a9 02     -         lda #color
1180: 8d 86 02  -         sta foreground_color
1183: a2 00     -         ldx #$00
1185: bd 3f 3e  -         lda msg,x
1188: f0 07     -         beq !done+
118a: 20 d2 ff  -         jsr kernal_chrout
118d: e8        -         inx
118e: 4c 85 11  -         jmp !loop-
1191: 68        -         pla
1192: 8d 86 02  -         sta foreground_color
1195: ee 41 3e  -         inc TEST_COUNT
1198: ad 86 02  -         lda foreground_color
119b: 48        -         pha
119c: a9 0e     -         lda #color
119e: 8d 86 02  -         sta foreground_color
11a1: a2 00     -         ldx #$00
11a3: bd b6 11  -         lda msg,x
11a6: f0 07     -         beq !done+
11a8: 20 d2 ff  -         jsr kernal_chrout
11ab: e8        -         inx
11ac: 4c a3 11  -         jmp !loop-
11af: 68        -         pla
11b0: 8d 86 02  -         sta foreground_color
11b3: 4c bc 11  -         jmp !done+
11b6: 20        - memory: .byte spacebar
11b7: 53 52 43  -         .text description
11ba: 3a        -         .text ":"
11bb: 00        -         .byte NULL
11bc: a6 21     -         ldx rl(register.getValue())
11be: a4 22     -         ldy rh(register.getValue())
11c0: e0 5a     -         cpx #<value
11c2: d0 25     -         bne !failed+
11c4: c0 3e     -         cpy #>value
11c6: d0 21     -         bne !failed+
11c8: ee 42 3e  -         inc TEST_PASS_COUNT
11cb: ad 86 02  -         lda foreground_color
11ce: 48        -         pha
11cf: a9 05     -         lda #color
11d1: 8d 86 02  -         sta foreground_color
11d4: a2 00     -         ldx #$00
11d6: bd 3d 3e  -         lda msg,x
11d9: f0 07     -         beq !done+
11db: 20 d2 ff  -         jsr kernal_chrout
11de: e8        -         inx
11df: 4c d6 11  -         jmp !loop-
11e2: 68        -         pla
11e3: 8d 86 02  -         sta foreground_color
11e6: 4c 04 12  -         jmp !done+
11e9: ad 86 02  -         lda foreground_color
11ec: 48        -         pha
11ed: a9 02     -         lda #color
11ef: 8d 86 02  -         sta foreground_color
11f2: a2 00     -         ldx #$00
11f4: bd 3f 3e  -         lda msg,x
11f7: f0 07     -         beq !done+
11f9: 20 d2 ff  -         jsr kernal_chrout
11fc: e8        -         inx
11fd: 4c f4 11  -         jmp !loop-
1200: 68        -         pla
1201: 8d 86 02  -         sta foreground_color
1204: ee 41 3e  -         inc TEST_COUNT
1207: ad 86 02  -         lda foreground_color
120a: 48        -         pha
120b: a9 0e     -         lda #color
120d: 8d 86 02  -         sta foreground_color
1210: a2 00     -         ldx #$00
1212: bd 25 12  -         lda msg,x
1215: f0 07     -         beq !done+
1217: 20 d2 ff  -         jsr kernal_chrout
121a: e8        -         inx
121b: 4c 12 12  -         jmp !loop-
121e: 68        -         pla
121f: 8d 86 02  -         sta foreground_color
1222: 4c 2b 12  -         jmp !done+
1225: 20        - memory: .byte spacebar
1226: 44 53 54  -         .text description
1229: 3a        -         .text ":"
122a: 00        -         .byte NULL
122b: a6 23     -         ldx rl(register.getValue())
122d: a4 24     -         ldy rh(register.getValue())
122f: e0 5c     -         cpx #<value
1231: d0 25     -         bne !failed+
1233: c0 3e     -         cpy #>value
1235: d0 21     -         bne !failed+
1237: ee 42 3e  -         inc TEST_PASS_COUNT
123a: ad 86 02  -         lda foreground_color
123d: 48        -         pha
123e: a9 05     -         lda #color
1240: 8d 86 02  -         sta foreground_color
1243: a2 00     -         ldx #$00
1245: bd 3d 3e  -         lda msg,x
1248: f0 07     -         beq !done+
124a: 20 d2 ff  -         jsr kernal_chrout
124d: e8        -         inx
124e: 4c 45 12  -         jmp !loop-
1251: 68        -         pla
1252: 8d 86 02  -         sta foreground_color
1255: 4c 73 12  -         jmp !done+
1258: ad 86 02  -         lda foreground_color
125b: 48        -         pha
125c: a9 02     -         lda #color
125e: 8d 86 02  -         sta foreground_color
1261: a2 00     -         ldx #$00
1263: bd 3f 3e  -         lda msg,x
1266: f0 07     -         beq !done+
1268: 20 d2 ff  -         jsr kernal_chrout
126b: e8        -         inx
126c: 4c 63 12  -         jmp !loop-
126f: 68        -         pla
1270: 8d 86 02  -         sta foreground_color
1273: a2 00     -         ldx #$00
1275: bd 84 12  -         lda msg,x
1278: f0 07     -         beq !done+
127a: 20 d2 ff  -         jsr kernal_chrout
127d: e8        -         inx
127e: 4c 75 12  -         jmp !loop-
1281: 4c 86 12  -         jmp !done+
1284: 0d 00     - memory: .byte RETURN, NULL
1286: ae 43 3e  -         ldx TEST_NAME_COUNT
1289: e0 15     -         cpx #TESTS_PER_PAGE
128b: d0 5d     -         bne !exit+
128d: ad 86 02  -         lda foreground_color
1290: 48        -         pha
1291: a9 01     -         lda #color
1293: 8d 86 02  -         sta foreground_color
1296: a2 00     -         ldx #$00
1298: bd ab 12  -         lda msg,x
129b: f0 07     -         beq !done+
129d: 20 d2 ff  -         jsr kernal_chrout
12a0: e8        -         inx
12a1: 4c 98 12  -         jmp !loop-
12a4: 68        -         pla
12a5: 8d 86 02  -         sta foreground_color
12a8: 4c ca 12  -         jmp !no_key+
12ab: 0d        - memory: .byte RETURN
12ac: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
12bc: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
12c8: 0d 00     -         .byte RETURN, NULL
12ca: 20 9f ff  -         jsr scnkey  // scan keyboard
12cd: 20 e4 ff  -         jsr getin	// put result into A
12d0: f0 f8     -         beq !no_key-
12d2: a2 00     -         ldx #$00
12d4: bd e3 12  -         lda msg,x
12d7: f0 07     -         beq !done+
12d9: 20 d2 ff  -         jsr kernal_chrout
12dc: e8        -         inx
12dd: 4c d4 12  -         jmp !loop-
12e0: 4c e5 12  -         jmp !done+
12e3: 0d 00     - newline:.byte RETURN, NULL
12e5: a2 00     -         ldx #$00
12e7: 8e 43 3e  -         stx TEST_NAME_COUNT
12ea: 60        -         rts
12eb: ee 43 3e  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
12ee: ad 86 02  -         lda foreground_color
12f1: 48        -         pha
12f2: a9 0f     -         lda #color
12f4: 8d 86 02  -         sta foreground_color
12f7: a2 00     -         ldx #$00
12f9: bd 0c 13  -         lda msg,x
12fc: f0 07     -         beq !done+
12fe: 20 d2 ff  -         jsr kernal_chrout
1301: e8        -         inx
1302: 4c f9 12  -         jmp !loop-
1305: 68        -         pla
1306: 8d 86 02  -         sta foreground_color
1309: 4c 26 13  -         jmp !done+
130c: 20 20     - memory: .fill spacing, spacebar
130e: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
131e: 52 45 43 54                                     
1322: 2e 2e 2e  -         .text "..."
1325: 00        -         .byte NULL
1326: 20 5d 08  -         jsr SW16
1329: 15        -         .byte opcode(op, register)
132a: 59 3e     -         .word address.getValue()
132c: 65        -         .byte opcode($60, register) }
132d: 00        -         .byte $00 }
132e: ee 41 3e  -         inc TEST_COUNT
1331: ad 86 02  -         lda foreground_color
1334: 48        -         pha
1335: a9 0e     -         lda #color
1337: 8d 86 02  -         sta foreground_color
133a: a2 00     -         ldx #$00
133c: bd 4f 13  -         lda msg,x
133f: f0 07     -         beq !done+
1341: 20 d2 ff  -         jsr kernal_chrout
1344: e8        -         inx
1345: 4c 3c 13  -         jmp !loop-
1348: 68        -         pla
1349: 8d 86 02  -         sta foreground_color
134c: 4c 55 13  -         jmp !done+
134f: 20        - memory: .byte spacebar
1350: 41 43 43  -         .text description
1353: 3a        -         .text ":"
1354: 00        -         .byte NULL
1355: a6 17     -         ldx rl(register.getValue())
1357: a4 18     -         ldy rh(register.getValue())
1359: ec 59 3e  -         cpx address
135c: d0 26     -         bne !failed+
135e: cc 5a 3e  -         cpy address+1
1361: d0 21     -         bne !failed+
1363: ee 42 3e  -         inc TEST_PASS_COUNT
1366: ad 86 02  -         lda foreground_color
1369: 48        -         pha
136a: a9 05     -         lda #color
136c: 8d 86 02  -         sta foreground_color
136f: a2 00     -         ldx #$00
1371: bd 3d 3e  -         lda msg,x
1374: f0 07     -         beq !done+
1376: 20 d2 ff  -         jsr kernal_chrout
1379: e8        -         inx
137a: 4c 71 13  -         jmp !loop-
137d: 68        -         pla
137e: 8d 86 02  -         sta foreground_color
1381: 4c 9f 13  -         jmp !done+
1384: ad 86 02  -         lda foreground_color
1387: 48        -         pha
1388: a9 02     -         lda #color
138a: 8d 86 02  -         sta foreground_color
138d: a2 00     -         ldx #$00
138f: bd 3f 3e  -         lda msg,x
1392: f0 07     -         beq !done+
1394: 20 d2 ff  -         jsr kernal_chrout
1397: e8        -         inx
1398: 4c 8f 13  -         jmp !loop-
139b: 68        -         pla
139c: 8d 86 02  -         sta foreground_color
139f: ee 41 3e  -         inc TEST_COUNT
13a2: ad 86 02  -         lda foreground_color
13a5: 48        -         pha
13a6: a9 0e     -         lda #color
13a8: 8d 86 02  -         sta foreground_color
13ab: a2 00     -         ldx #$00
13ad: bd c0 13  -         lda msg,x
13b0: f0 07     -         beq !done+
13b2: 20 d2 ff  -         jsr kernal_chrout
13b5: e8        -         inx
13b6: 4c ad 13  -         jmp !loop-
13b9: 68        -         pla
13ba: 8d 86 02  -         sta foreground_color
13bd: 4c c5 13  -         jmp !done+
13c0: 20        - memory: .byte spacebar
13c1: 2b 32     -         .text description
13c3: 3a        -         .text ":"
13c4: 00        -         .byte NULL
13c5: a6 21     -         ldx rl(register.getValue())
13c7: a4 22     -         ldy rh(register.getValue())
13c9: e0 5b     -         cpx #<value
13cb: d0 25     -         bne !failed+
13cd: c0 3e     -         cpy #>value
13cf: d0 21     -         bne !failed+
13d1: ee 42 3e  -         inc TEST_PASS_COUNT
13d4: ad 86 02  -         lda foreground_color
13d7: 48        -         pha
13d8: a9 05     -         lda #color
13da: 8d 86 02  -         sta foreground_color
13dd: a2 00     -         ldx #$00
13df: bd 3d 3e  -         lda msg,x
13e2: f0 07     -         beq !done+
13e4: 20 d2 ff  -         jsr kernal_chrout
13e7: e8        -         inx
13e8: 4c df 13  -         jmp !loop-
13eb: 68        -         pla
13ec: 8d 86 02  -         sta foreground_color
13ef: 4c 0d 14  -         jmp !done+
13f2: ad 86 02  -         lda foreground_color
13f5: 48        -         pha
13f6: a9 02     -         lda #color
13f8: 8d 86 02  -         sta foreground_color
13fb: a2 00     -         ldx #$00
13fd: bd 3f 3e  -         lda msg,x
1400: f0 07     -         beq !done+
1402: 20 d2 ff  -         jsr kernal_chrout
1405: e8        -         inx
1406: 4c fd 13  -         jmp !loop-
1409: 68        -         pla
140a: 8d 86 02  -         sta foreground_color
140d: a2 00     -         ldx #$00
140f: bd 1e 14  -         lda msg,x
1412: f0 07     -         beq !done+
1414: 20 d2 ff  -         jsr kernal_chrout
1417: e8        -         inx
1418: 4c 0f 14  -         jmp !loop-
141b: 4c 20 14  -         jmp !done+
141e: 0d 00     - memory: .byte RETURN, NULL
1420: ae 43 3e  -         ldx TEST_NAME_COUNT
1423: e0 15     -         cpx #TESTS_PER_PAGE
1425: d0 5d     -         bne !exit+
1427: ad 86 02  -         lda foreground_color
142a: 48        -         pha
142b: a9 01     -         lda #color
142d: 8d 86 02  -         sta foreground_color
1430: a2 00     -         ldx #$00
1432: bd 45 14  -         lda msg,x
1435: f0 07     -         beq !done+
1437: 20 d2 ff  -         jsr kernal_chrout
143a: e8        -         inx
143b: 4c 32 14  -         jmp !loop-
143e: 68        -         pla
143f: 8d 86 02  -         sta foreground_color
1442: 4c 64 14  -         jmp !no_key+
1445: 0d        - memory: .byte RETURN
1446: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1456: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1462: 0d 00     -         .byte RETURN, NULL
1464: 20 9f ff  -         jsr scnkey  // scan keyboard
1467: 20 e4 ff  -         jsr getin	// put result into A
146a: f0 f8     -         beq !no_key-
146c: a2 00     -         ldx #$00
146e: bd 7d 14  -         lda msg,x
1471: f0 07     -         beq !done+
1473: 20 d2 ff  -         jsr kernal_chrout
1476: e8        -         inx
1477: 4c 6e 14  -         jmp !loop-
147a: 4c 7f 14  -         jmp !done+
147d: 0d 00     - newline:.byte RETURN, NULL
147f: a2 00     -         ldx #$00
1481: 8e 43 3e  -         stx TEST_NAME_COUNT
1484: 60        -         rts
1485: ee 43 3e  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
1488: ad 86 02  -         lda foreground_color
148b: 48        -         pha
148c: a9 0f     -         lda #color
148e: 8d 86 02  -         sta foreground_color
1491: a2 00     -         ldx #$00
1493: bd a6 14  -         lda msg,x
1496: f0 07     -         beq !done+
1498: 20 d2 ff  -         jsr kernal_chrout
149b: e8        -         inx
149c: 4c 93 14  -         jmp !loop-
149f: 68        -         pla
14a0: 8d 86 02  -         sta foreground_color
14a3: 4c b9 14  -         jmp !done+
14a6: 20 20     - memory: .fill spacing, spacebar
14a8: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
14b5: 2e 2e 2e  -         .text "..."
14b8: 00        -         .byte NULL
14b9: 20 5d 08  -         jsr SW16
14bc: 15        -         .byte opcode(op, register)
14bd: 59 3e     -         .word address.getValue()
14bf: 16        -         .byte opcode(op, register)
14c0: 5b 3e     -         .word address.getValue()
14c2: 65        -         .byte opcode($60, register) }
14c3: 76        -         .byte opcode($70, register) }
14c4: 00        -         .byte $00 }
14c5: ee 41 3e  -         inc TEST_COUNT
14c8: ad 86 02  -         lda foreground_color
14cb: 48        -         pha
14cc: a9 0e     -         lda #color
14ce: 8d 86 02  -         sta foreground_color
14d1: a2 00     -         ldx #$00
14d3: bd e6 14  -         lda msg,x
14d6: f0 07     -         beq !done+
14d8: 20 d2 ff  -         jsr kernal_chrout
14db: e8        -         inx
14dc: 4c d3 14  -         jmp !loop-
14df: 68        -         pla
14e0: 8d 86 02  -         sta foreground_color
14e3: 4c ec 14  -         jmp !done+
14e6: 20        - memory: .byte spacebar
14e7: 4d 45 4d  -         .text description
14ea: 3a        -         .text ":"
14eb: 00        -         .byte NULL
14ec: a2 ff     -         ldx #$ff
14ee: e8        -         inx
14ef: e0 02     -         cpx #size
14f1: f0 0b     -         beq !success+
14f3: bd 59 3e  -         lda source,x
14f6: dd 5b 3e  -         cmp dest,x
14f9: f0 f3     -         beq !loop-
14fb: 4c 1f 15  -         jmp !failed+
14fe: ee 42 3e  -         inc TEST_PASS_COUNT
1501: ad 86 02  -         lda foreground_color
1504: 48        -         pha
1505: a9 05     -         lda #color
1507: 8d 86 02  -         sta foreground_color
150a: a2 00     -         ldx #$00
150c: bd 3d 3e  -         lda msg,x
150f: f0 07     -         beq !done+
1511: 20 d2 ff  -         jsr kernal_chrout
1514: e8        -         inx
1515: 4c 0c 15  -         jmp !loop-
1518: 68        -         pla
1519: 8d 86 02  -         sta foreground_color
151c: 4c 3a 15  -         jmp !done+
151f: ad 86 02  -         lda foreground_color
1522: 48        -         pha
1523: a9 02     -         lda #color
1525: 8d 86 02  -         sta foreground_color
1528: a2 00     -         ldx #$00
152a: bd 3f 3e  -         lda msg,x
152d: f0 07     -         beq !done+
152f: 20 d2 ff  -         jsr kernal_chrout
1532: e8        -         inx
1533: 4c 2a 15  -         jmp !loop-
1536: 68        -         pla
1537: 8d 86 02  -         sta foreground_color
153a: ee 41 3e  -         inc TEST_COUNT
153d: ad 86 02  -         lda foreground_color
1540: 48        -         pha
1541: a9 0e     -         lda #color
1543: 8d 86 02  -         sta foreground_color
1546: a2 00     -         ldx #$00
1548: bd 5b 15  -         lda msg,x
154b: f0 07     -         beq !done+
154d: 20 d2 ff  -         jsr kernal_chrout
1550: e8        -         inx
1551: 4c 48 15  -         jmp !loop-
1554: 68        -         pla
1555: 8d 86 02  -         sta foreground_color
1558: 4c 61 15  -         jmp !done+
155b: 20        - memory: .byte spacebar
155c: 53 2b 32  -         .text description
155f: 3a        -         .text ":"
1560: 00        -         .byte NULL
1561: a6 21     -         ldx rl(register.getValue())
1563: a4 22     -         ldy rh(register.getValue())
1565: e0 5b     -         cpx #<value
1567: d0 25     -         bne !failed+
1569: c0 3e     -         cpy #>value
156b: d0 21     -         bne !failed+
156d: ee 42 3e  -         inc TEST_PASS_COUNT
1570: ad 86 02  -         lda foreground_color
1573: 48        -         pha
1574: a9 05     -         lda #color
1576: 8d 86 02  -         sta foreground_color
1579: a2 00     -         ldx #$00
157b: bd 3d 3e  -         lda msg,x
157e: f0 07     -         beq !done+
1580: 20 d2 ff  -         jsr kernal_chrout
1583: e8        -         inx
1584: 4c 7b 15  -         jmp !loop-
1587: 68        -         pla
1588: 8d 86 02  -         sta foreground_color
158b: 4c a9 15  -         jmp !done+
158e: ad 86 02  -         lda foreground_color
1591: 48        -         pha
1592: a9 02     -         lda #color
1594: 8d 86 02  -         sta foreground_color
1597: a2 00     -         ldx #$00
1599: bd 3f 3e  -         lda msg,x
159c: f0 07     -         beq !done+
159e: 20 d2 ff  -         jsr kernal_chrout
15a1: e8        -         inx
15a2: 4c 99 15  -         jmp !loop-
15a5: 68        -         pla
15a6: 8d 86 02  -         sta foreground_color
15a9: ee 41 3e  -         inc TEST_COUNT
15ac: ad 86 02  -         lda foreground_color
15af: 48        -         pha
15b0: a9 0e     -         lda #color
15b2: 8d 86 02  -         sta foreground_color
15b5: a2 00     -         ldx #$00
15b7: bd ca 15  -         lda msg,x
15ba: f0 07     -         beq !done+
15bc: 20 d2 ff  -         jsr kernal_chrout
15bf: e8        -         inx
15c0: 4c b7 15  -         jmp !loop-
15c3: 68        -         pla
15c4: 8d 86 02  -         sta foreground_color
15c7: 4c d0 15  -         jmp !done+
15ca: 20        - memory: .byte spacebar
15cb: 44 2b 32  -         .text description
15ce: 3a        -         .text ":"
15cf: 00        -         .byte NULL
15d0: a6 23     -         ldx rl(register.getValue())
15d2: a4 24     -         ldy rh(register.getValue())
15d4: e0 5d     -         cpx #<value
15d6: d0 25     -         bne !failed+
15d8: c0 3e     -         cpy #>value
15da: d0 21     -         bne !failed+
15dc: ee 42 3e  -         inc TEST_PASS_COUNT
15df: ad 86 02  -         lda foreground_color
15e2: 48        -         pha
15e3: a9 05     -         lda #color
15e5: 8d 86 02  -         sta foreground_color
15e8: a2 00     -         ldx #$00
15ea: bd 3d 3e  -         lda msg,x
15ed: f0 07     -         beq !done+
15ef: 20 d2 ff  -         jsr kernal_chrout
15f2: e8        -         inx
15f3: 4c ea 15  -         jmp !loop-
15f6: 68        -         pla
15f7: 8d 86 02  -         sta foreground_color
15fa: 4c 18 16  -         jmp !done+
15fd: ad 86 02  -         lda foreground_color
1600: 48        -         pha
1601: a9 02     -         lda #color
1603: 8d 86 02  -         sta foreground_color
1606: a2 00     -         ldx #$00
1608: bd 3f 3e  -         lda msg,x
160b: f0 07     -         beq !done+
160d: 20 d2 ff  -         jsr kernal_chrout
1610: e8        -         inx
1611: 4c 08 16  -         jmp !loop-
1614: 68        -         pla
1615: 8d 86 02  -         sta foreground_color
1618: a2 00     -         ldx #$00
161a: bd 29 16  -         lda msg,x
161d: f0 07     -         beq !done+
161f: 20 d2 ff  -         jsr kernal_chrout
1622: e8        -         inx
1623: 4c 1a 16  -         jmp !loop-
1626: 4c 2b 16  -         jmp !done+
1629: 0d 00     - memory: .byte RETURN, NULL
162b: ae 43 3e  -         ldx TEST_NAME_COUNT
162e: e0 15     -         cpx #TESTS_PER_PAGE
1630: d0 5d     -         bne !exit+
1632: ad 86 02  -         lda foreground_color
1635: 48        -         pha
1636: a9 01     -         lda #color
1638: 8d 86 02  -         sta foreground_color
163b: a2 00     -         ldx #$00
163d: bd 50 16  -         lda msg,x
1640: f0 07     -         beq !done+
1642: 20 d2 ff  -         jsr kernal_chrout
1645: e8        -         inx
1646: 4c 3d 16  -         jmp !loop-
1649: 68        -         pla
164a: 8d 86 02  -         sta foreground_color
164d: 4c 6f 16  -         jmp !no_key+
1650: 0d        - memory: .byte RETURN
1651: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1661: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
166d: 0d 00     -         .byte RETURN, NULL
166f: 20 9f ff  -         jsr scnkey  // scan keyboard
1672: 20 e4 ff  -         jsr getin	// put result into A
1675: f0 f8     -         beq !no_key-
1677: a2 00     -         ldx #$00
1679: bd 88 16  -         lda msg,x
167c: f0 07     -         beq !done+
167e: 20 d2 ff  -         jsr kernal_chrout
1681: e8        -         inx
1682: 4c 79 16  -         jmp !loop-
1685: 4c 8a 16  -         jmp !done+
1688: 0d 00     - newline:.byte RETURN, NULL
168a: a2 00     -         ldx #$00
168c: 8e 43 3e  -         stx TEST_NAME_COUNT
168f: 60        -         rts
1690: ee 43 3e  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1693: ad 86 02  -         lda foreground_color
1696: 48        -         pha
1697: a9 0f     -         lda #color
1699: 8d 86 02  -         sta foreground_color
169c: a2 00     -         ldx #$00
169e: bd b1 16  -         lda msg,x
16a1: f0 07     -         beq !done+
16a3: 20 d2 ff  -         jsr kernal_chrout
16a6: e8        -         inx
16a7: 4c 9e 16  -         jmp !loop-
16aa: 68        -         pla
16ab: 8d 86 02  -         sta foreground_color
16ae: 4c c5 16  -         jmp !done+
16b1: 20 20     - memory: .fill spacing, spacebar
16b3: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
16c1: 2e 2e 2e  -         .text "..."
16c4: 00        -         .byte NULL
16c5: 20 5d 08  -         jsr SW16
16c8: 15        -         .byte opcode(op, register)
16c9: 7f 3e     -         .word address.getValue()
16cb: 10        -         .byte opcode(op, register)
16cc: 04 00     -         .word address.getValue()
16ce: 55        -         .byte opcode($50, register) }
16cf: 0d        -         .byte $0d
16d0: 17        -         .byte >(address.getValue()-1)
16d1: 64        -         .byte <(address.getValue()-1)
16d2: 10        -         .byte opcode(op, register)
16d3: 05 00     -         .word address.getValue()
16d5: 55        -         .byte opcode($50, register) }
16d6: 0d        -         .byte $0d
16d7: 17        -         .byte >(address.getValue()-1)
16d8: cf        -         .byte <(address.getValue()-1)
16d9: 10        -         .byte opcode(op, register)
16da: 06 00     -         .word address.getValue()
16dc: 55        -         .byte opcode($50, register) }
16dd: 0d        -         .byte $0d
16de: 18        -         .byte >(address.getValue()-1)
16df: 3a        -         .byte <(address.getValue()-1)
16e0: 85        -         .byte opcode($80, register) }
16e1: 0d        -         .byte $0d
16e2: 18        -         .byte >(address.getValue()-1)
16e3: a5        -         .byte <(address.getValue()-1)
16e4: 85        -         .byte opcode($80, register) }
16e5: 0d        -         .byte $0d
16e6: 19        -         .byte >(address.getValue()-1)
16e7: c0        -         .byte <(address.getValue()-1)
16e8: 85        -         .byte opcode($80, register) }
16e9: 0d        -         .byte $0d
16ea: 1a        -         .byte >(address.getValue()-1)
16eb: 2f        -         .byte <(address.getValue()-1)
16ec: 00        -         .byte $00 }
16ed: a2 00     -         ldx #$00
16ef: bd fe 16  -         lda msg,x
16f2: f0 07     -         beq !done+
16f4: 20 d2 ff  -         jsr kernal_chrout
16f7: e8        -         inx
16f8: 4c ef 16  -         jmp !loop-
16fb: 4c 00 17  -         jmp !done+
16fe: 0d 00     - memory: .byte RETURN, NULL
1700: ae 43 3e  -         ldx TEST_NAME_COUNT
1703: e0 15     -         cpx #TESTS_PER_PAGE
1705: d0 5d     -         bne !exit+
1707: ad 86 02  -         lda foreground_color
170a: 48        -         pha
170b: a9 01     -         lda #color
170d: 8d 86 02  -         sta foreground_color
1710: a2 00     -         ldx #$00
1712: bd 25 17  -         lda msg,x
1715: f0 07     -         beq !done+
1717: 20 d2 ff  -         jsr kernal_chrout
171a: e8        -         inx
171b: 4c 12 17  -         jmp !loop-
171e: 68        -         pla
171f: 8d 86 02  -         sta foreground_color
1722: 4c 44 17  -         jmp !no_key+
1725: 0d        - memory: .byte RETURN
1726: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1736: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1742: 0d 00     -         .byte RETURN, NULL
1744: 20 9f ff  -         jsr scnkey  // scan keyboard
1747: 20 e4 ff  -         jsr getin	// put result into A
174a: f0 f8     -         beq !no_key-
174c: a2 00     -         ldx #$00
174e: bd 5d 17  -         lda msg,x
1751: f0 07     -         beq !done+
1753: 20 d2 ff  -         jsr kernal_chrout
1756: e8        -         inx
1757: 4c 4e 17  -         jmp !loop-
175a: 4c 5f 17  -         jmp !done+
175d: 0d 00     - newline:.byte RETURN, NULL
175f: a2 00     -         ldx #$00
1761: 8e 43 3e  -         stx TEST_NAME_COUNT
1764: 60        -         rts
1765: ee 41 3e  -         inc TEST_COUNT
1768: ad 86 02  -         lda foreground_color
176b: 48        -         pha
176c: a9 0e     -         lda #color
176e: 8d 86 02  -         sta foreground_color
1771: a2 00     -         ldx #$00
1773: bd 86 17  -         lda msg,x
1776: f0 07     -         beq !done+
1778: 20 d2 ff  -         jsr kernal_chrout
177b: e8        -         inx
177c: 4c 73 17  -         jmp !loop-
177f: 68        -         pla
1780: 8d 86 02  -         sta foreground_color
1783: 4c 8a 17  -         jmp !done+
1786: 20        - memory: .byte spacebar
1787: 31        -         .text description
1788: 3a        -         .text ":"
1789: 00        -         .byte NULL
178a: a6 17     -         ldx rl(register.getValue())
178c: a4 18     -         ldy rh(register.getValue())
178e: ec 7f 3e  -         cpx address
1791: d0 21     -         bne !failed+
1793: ee 42 3e  -         inc TEST_PASS_COUNT
1796: ad 86 02  -         lda foreground_color
1799: 48        -         pha
179a: a9 05     -         lda #color
179c: 8d 86 02  -         sta foreground_color
179f: a2 00     -         ldx #$00
17a1: bd 3d 3e  -         lda msg,x
17a4: f0 07     -         beq !done+
17a6: 20 d2 ff  -         jsr kernal_chrout
17a9: e8        -         inx
17aa: 4c a1 17  -         jmp !loop-
17ad: 68        -         pla
17ae: 8d 86 02  -         sta foreground_color
17b1: 4c cf 17  -         jmp !done+
17b4: ad 86 02  -         lda foreground_color
17b7: 48        -         pha
17b8: a9 02     -         lda #color
17ba: 8d 86 02  -         sta foreground_color
17bd: a2 00     -         ldx #$00
17bf: bd 3f 3e  -         lda msg,x
17c2: f0 07     -         beq !done+
17c4: 20 d2 ff  -         jsr kernal_chrout
17c7: e8        -         inx
17c8: 4c bf 17  -         jmp !loop-
17cb: 68        -         pla
17cc: 8d 86 02  -         sta foreground_color
17cf: 60        -         rts
17d0: ee 41 3e  -         inc TEST_COUNT
17d3: ad 86 02  -         lda foreground_color
17d6: 48        -         pha
17d7: a9 0e     -         lda #color
17d9: 8d 86 02  -         sta foreground_color
17dc: a2 00     -         ldx #$00
17de: bd f1 17  -         lda msg,x
17e1: f0 07     -         beq !done+
17e3: 20 d2 ff  -         jsr kernal_chrout
17e6: e8        -         inx
17e7: 4c de 17  -         jmp !loop-
17ea: 68        -         pla
17eb: 8d 86 02  -         sta foreground_color
17ee: 4c f5 17  -         jmp !done+
17f1: 20        - memory: .byte spacebar
17f2: 32        -         .text description
17f3: 3a        -         .text ":"
17f4: 00        -         .byte NULL
17f5: a6 17     -         ldx rl(register.getValue())
17f7: a4 18     -         ldy rh(register.getValue())
17f9: ec 80 3e  -         cpx address
17fc: d0 21     -         bne !failed+
17fe: ee 42 3e  -         inc TEST_PASS_COUNT
1801: ad 86 02  -         lda foreground_color
1804: 48        -         pha
1805: a9 05     -         lda #color
1807: 8d 86 02  -         sta foreground_color
180a: a2 00     -         ldx #$00
180c: bd 3d 3e  -         lda msg,x
180f: f0 07     -         beq !done+
1811: 20 d2 ff  -         jsr kernal_chrout
1814: e8        -         inx
1815: 4c 0c 18  -         jmp !loop-
1818: 68        -         pla
1819: 8d 86 02  -         sta foreground_color
181c: 4c 3a 18  -         jmp !done+
181f: ad 86 02  -         lda foreground_color
1822: 48        -         pha
1823: a9 02     -         lda #color
1825: 8d 86 02  -         sta foreground_color
1828: a2 00     -         ldx #$00
182a: bd 3f 3e  -         lda msg,x
182d: f0 07     -         beq !done+
182f: 20 d2 ff  -         jsr kernal_chrout
1832: e8        -         inx
1833: 4c 2a 18  -         jmp !loop-
1836: 68        -         pla
1837: 8d 86 02  -         sta foreground_color
183a: 60        -         rts
183b: ee 41 3e  -         inc TEST_COUNT
183e: ad 86 02  -         lda foreground_color
1841: 48        -         pha
1842: a9 0e     -         lda #color
1844: 8d 86 02  -         sta foreground_color
1847: a2 00     -         ldx #$00
1849: bd 5c 18  -         lda msg,x
184c: f0 07     -         beq !done+
184e: 20 d2 ff  -         jsr kernal_chrout
1851: e8        -         inx
1852: 4c 49 18  -         jmp !loop-
1855: 68        -         pla
1856: 8d 86 02  -         sta foreground_color
1859: 4c 60 18  -         jmp !done+
185c: 20        - memory: .byte spacebar
185d: 33        -         .text description
185e: 3a        -         .text ":"
185f: 00        -         .byte NULL
1860: a6 17     -         ldx rl(register.getValue())
1862: a4 18     -         ldy rh(register.getValue())
1864: ec 81 3e  -         cpx address
1867: d0 21     -         bne !failed+
1869: ee 42 3e  -         inc TEST_PASS_COUNT
186c: ad 86 02  -         lda foreground_color
186f: 48        -         pha
1870: a9 05     -         lda #color
1872: 8d 86 02  -         sta foreground_color
1875: a2 00     -         ldx #$00
1877: bd 3d 3e  -         lda msg,x
187a: f0 07     -         beq !done+
187c: 20 d2 ff  -         jsr kernal_chrout
187f: e8        -         inx
1880: 4c 77 18  -         jmp !loop-
1883: 68        -         pla
1884: 8d 86 02  -         sta foreground_color
1887: 4c a5 18  -         jmp !done+
188a: ad 86 02  -         lda foreground_color
188d: 48        -         pha
188e: a9 02     -         lda #color
1890: 8d 86 02  -         sta foreground_color
1893: a2 00     -         ldx #$00
1895: bd 3f 3e  -         lda msg,x
1898: f0 07     -         beq !done+
189a: 20 d2 ff  -         jsr kernal_chrout
189d: e8        -         inx
189e: 4c 95 18  -         jmp !loop-
18a1: 68        -         pla
18a2: 8d 86 02  -         sta foreground_color
18a5: 60        -         rts
18a6: a2 00     -         ldx #$00
18a8: bd b7 18  -         lda msg,x
18ab: f0 07     -         beq !done+
18ad: 20 d2 ff  -         jsr kernal_chrout
18b0: e8        -         inx
18b1: 4c a8 18  -         jmp !loop-
18b4: 4c b9 18  -         jmp !done+
18b7: 0d 00     - memory: .byte RETURN, NULL
18b9: ae 43 3e  -         ldx TEST_NAME_COUNT
18bc: e0 15     -         cpx #TESTS_PER_PAGE
18be: d0 5d     -         bne !exit+
18c0: ad 86 02  -         lda foreground_color
18c3: 48        -         pha
18c4: a9 01     -         lda #color
18c6: 8d 86 02  -         sta foreground_color
18c9: a2 00     -         ldx #$00
18cb: bd de 18  -         lda msg,x
18ce: f0 07     -         beq !done+
18d0: 20 d2 ff  -         jsr kernal_chrout
18d3: e8        -         inx
18d4: 4c cb 18  -         jmp !loop-
18d7: 68        -         pla
18d8: 8d 86 02  -         sta foreground_color
18db: 4c fd 18  -         jmp !no_key+
18de: 0d        - memory: .byte RETURN
18df: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
18ef: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
18fb: 0d 00     -         .byte RETURN, NULL
18fd: 20 9f ff  -         jsr scnkey  // scan keyboard
1900: 20 e4 ff  -         jsr getin	// put result into A
1903: f0 f8     -         beq !no_key-
1905: a2 00     -         ldx #$00
1907: bd 16 19  -         lda msg,x
190a: f0 07     -         beq !done+
190c: 20 d2 ff  -         jsr kernal_chrout
190f: e8        -         inx
1910: 4c 07 19  -         jmp !loop-
1913: 4c 18 19  -         jmp !done+
1916: 0d 00     - newline:.byte RETURN, NULL
1918: a2 00     -         ldx #$00
191a: 8e 43 3e  -         stx TEST_NAME_COUNT
191d: ee 43 3e  -         inc TEST_NAME_COUNT
1920: ad 86 02  -         lda foreground_color
1923: 48        -         pha
1924: a9 0f     -         lda #color
1926: 8d 86 02  -         sta foreground_color
1929: a2 00     -         ldx #$00
192b: bd 3e 19  -         lda msg,x
192e: f0 07     -         beq !done+
1930: 20 d2 ff  -         jsr kernal_chrout
1933: e8        -         inx
1934: 4c 2b 19  -         jmp !loop-
1937: 68        -         pla
1938: 8d 86 02  -         sta foreground_color
193b: 4c 52 19  -         jmp !done+
193e: 20 20     - memory: .fill spacing, spacebar
1940: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
194e: 2e 2e 2e  -         .text "..."
1951: 00        -         .byte NULL
1952: ee 41 3e  -         inc TEST_COUNT
1955: ad 86 02  -         lda foreground_color
1958: 48        -         pha
1959: a9 0e     -         lda #color
195b: 8d 86 02  -         sta foreground_color
195e: a2 00     -         ldx #$00
1960: bd 73 19  -         lda msg,x
1963: f0 07     -         beq !done+
1965: 20 d2 ff  -         jsr kernal_chrout
1968: e8        -         inx
1969: 4c 60 19  -         jmp !loop-
196c: 68        -         pla
196d: 8d 86 02  -         sta foreground_color
1970: 4c 78 19  -         jmp !done+
1973: 20        - memory: .byte spacebar
1974: 50 33     -         .text description
1976: 3a        -         .text ":"
1977: 00        -         .byte NULL
1978: a6 17     -         ldx rl(register.getValue())
197a: a4 18     -         ldy rh(register.getValue())
197c: e0 06     -         cpx #<value
197e: d0 25     -         bne !failed+
1980: c0 00     -         cpy #>value
1982: d0 21     -         bne !failed+
1984: ee 42 3e  -         inc TEST_PASS_COUNT
1987: ad 86 02  -         lda foreground_color
198a: 48        -         pha
198b: a9 05     -         lda #color
198d: 8d 86 02  -         sta foreground_color
1990: a2 00     -         ldx #$00
1992: bd 3d 3e  -         lda msg,x
1995: f0 07     -         beq !done+
1997: 20 d2 ff  -         jsr kernal_chrout
199a: e8        -         inx
199b: 4c 92 19  -         jmp !loop-
199e: 68        -         pla
199f: 8d 86 02  -         sta foreground_color
19a2: 4c c0 19  -         jmp !done+
19a5: ad 86 02  -         lda foreground_color
19a8: 48        -         pha
19a9: a9 02     -         lda #color
19ab: 8d 86 02  -         sta foreground_color
19ae: a2 00     -         ldx #$00
19b0: bd 3f 3e  -         lda msg,x
19b3: f0 07     -         beq !done+
19b5: 20 d2 ff  -         jsr kernal_chrout
19b8: e8        -         inx
19b9: 4c b0 19  -         jmp !loop-
19bc: 68        -         pla
19bd: 8d 86 02  -         sta foreground_color
19c0: 60        -         rts
19c1: ee 41 3e  -         inc TEST_COUNT
19c4: ad 86 02  -         lda foreground_color
19c7: 48        -         pha
19c8: a9 0e     -         lda #color
19ca: 8d 86 02  -         sta foreground_color
19cd: a2 00     -         ldx #$00
19cf: bd e2 19  -         lda msg,x
19d2: f0 07     -         beq !done+
19d4: 20 d2 ff  -         jsr kernal_chrout
19d7: e8        -         inx
19d8: 4c cf 19  -         jmp !loop-
19db: 68        -         pla
19dc: 8d 86 02  -         sta foreground_color
19df: 4c e7 19  -         jmp !done+
19e2: 20        - memory: .byte spacebar
19e3: 50 32     -         .text description
19e5: 3a        -         .text ":"
19e6: 00        -         .byte NULL
19e7: a6 17     -         ldx rl(register.getValue())
19e9: a4 18     -         ldy rh(register.getValue())
19eb: e0 05     -         cpx #<value
19ed: d0 25     -         bne !failed+
19ef: c0 00     -         cpy #>value
19f1: d0 21     -         bne !failed+
19f3: ee 42 3e  -         inc TEST_PASS_COUNT
19f6: ad 86 02  -         lda foreground_color
19f9: 48        -         pha
19fa: a9 05     -         lda #color
19fc: 8d 86 02  -         sta foreground_color
19ff: a2 00     -         ldx #$00
1a01: bd 3d 3e  -         lda msg,x
1a04: f0 07     -         beq !done+
1a06: 20 d2 ff  -         jsr kernal_chrout
1a09: e8        -         inx
1a0a: 4c 01 1a  -         jmp !loop-
1a0d: 68        -         pla
1a0e: 8d 86 02  -         sta foreground_color
1a11: 4c 2f 1a  -         jmp !done+
1a14: ad 86 02  -         lda foreground_color
1a17: 48        -         pha
1a18: a9 02     -         lda #color
1a1a: 8d 86 02  -         sta foreground_color
1a1d: a2 00     -         ldx #$00
1a1f: bd 3f 3e  -         lda msg,x
1a22: f0 07     -         beq !done+
1a24: 20 d2 ff  -         jsr kernal_chrout
1a27: e8        -         inx
1a28: 4c 1f 1a  -         jmp !loop-
1a2b: 68        -         pla
1a2c: 8d 86 02  -         sta foreground_color
1a2f: 60        -         rts
1a30: ee 41 3e  -         inc TEST_COUNT
1a33: ad 86 02  -         lda foreground_color
1a36: 48        -         pha
1a37: a9 0e     -         lda #color
1a39: 8d 86 02  -         sta foreground_color
1a3c: a2 00     -         ldx #$00
1a3e: bd 51 1a  -         lda msg,x
1a41: f0 07     -         beq !done+
1a43: 20 d2 ff  -         jsr kernal_chrout
1a46: e8        -         inx
1a47: 4c 3e 1a  -         jmp !loop-
1a4a: 68        -         pla
1a4b: 8d 86 02  -         sta foreground_color
1a4e: 4c 56 1a  -         jmp !done+
1a51: 20        - memory: .byte spacebar
1a52: 50 31     -         .text description
1a54: 3a        -         .text ":"
1a55: 00        -         .byte NULL
1a56: a6 17     -         ldx rl(register.getValue())
1a58: a4 18     -         ldy rh(register.getValue())
1a5a: e0 04     -         cpx #<value
1a5c: d0 25     -         bne !failed+
1a5e: c0 00     -         cpy #>value
1a60: d0 21     -         bne !failed+
1a62: ee 42 3e  -         inc TEST_PASS_COUNT
1a65: ad 86 02  -         lda foreground_color
1a68: 48        -         pha
1a69: a9 05     -         lda #color
1a6b: 8d 86 02  -         sta foreground_color
1a6e: a2 00     -         ldx #$00
1a70: bd 3d 3e  -         lda msg,x
1a73: f0 07     -         beq !done+
1a75: 20 d2 ff  -         jsr kernal_chrout
1a78: e8        -         inx
1a79: 4c 70 1a  -         jmp !loop-
1a7c: 68        -         pla
1a7d: 8d 86 02  -         sta foreground_color
1a80: 4c 9e 1a  -         jmp !done+
1a83: ad 86 02  -         lda foreground_color
1a86: 48        -         pha
1a87: a9 02     -         lda #color
1a89: 8d 86 02  -         sta foreground_color
1a8c: a2 00     -         ldx #$00
1a8e: bd 3f 3e  -         lda msg,x
1a91: f0 07     -         beq !done+
1a93: 20 d2 ff  -         jsr kernal_chrout
1a96: e8        -         inx
1a97: 4c 8e 1a  -         jmp !loop-
1a9a: 68        -         pla
1a9b: 8d 86 02  -         sta foreground_color
1a9e: 60        -         rts
1a9f: ee 43 3e  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1aa2: ad 86 02  -         lda foreground_color
1aa5: 48        -         pha
1aa6: a9 0f     -         lda #color
1aa8: 8d 86 02  -         sta foreground_color
1aab: a2 00     -         ldx #$00
1aad: bd c0 1a  -         lda msg,x
1ab0: f0 07     -         beq !done+
1ab2: 20 d2 ff  -         jsr kernal_chrout
1ab5: e8        -         inx
1ab6: 4c ad 1a  -         jmp !loop-
1ab9: 68        -         pla
1aba: 8d 86 02  -         sta foreground_color
1abd: 4c d3 1a  -         jmp !done+
1ac0: 20 20     - memory: .fill spacing, spacebar
1ac2: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
1acf: 2e 2e 2e  -         .text "..."
1ad2: 00        -         .byte NULL
1ad3: 20 5d 08  -         jsr SW16
1ad6: 14        -         .byte opcode(op, register)
1ad7: 5b 3e     -         .word address.getValue()
1ad9: 15        -         .byte opcode(op, register)
1ada: 5d 3e     -         .word address.getValue()
1adc: 84        -         .byte opcode($80, register) }
1add: 95        -         .byte opcode($90, register) }
1ade: 84        -         .byte opcode($80, register) }
1adf: 95        -         .byte opcode($90, register) }
1ae0: 00        -         .byte $00 }
1ae1: ee 41 3e  -         inc TEST_COUNT
1ae4: ad 86 02  -         lda foreground_color
1ae7: 48        -         pha
1ae8: a9 0e     -         lda #color
1aea: 8d 86 02  -         sta foreground_color
1aed: a2 00     -         ldx #$00
1aef: bd 02 1b  -         lda msg,x
1af2: f0 07     -         beq !done+
1af4: 20 d2 ff  -         jsr kernal_chrout
1af7: e8        -         inx
1af8: 4c ef 1a  -         jmp !loop-
1afb: 68        -         pla
1afc: 8d 86 02  -         sta foreground_color
1aff: 4c 08 1b  -         jmp !done+
1b02: 20        - memory: .byte spacebar
1b03: 4d 45 4d  -         .text description
1b06: 3a        -         .text ":"
1b07: 00        -         .byte NULL
1b08: a2 ff     -         ldx #$ff
1b0a: e8        -         inx
1b0b: e0 02     -         cpx #size
1b0d: f0 0b     -         beq !success+
1b0f: bd 59 3e  -         lda source,x
1b12: dd 59 3e  -         cmp dest,x
1b15: f0 f3     -         beq !loop-
1b17: 4c 3b 1b  -         jmp !failed+
1b1a: ee 42 3e  -         inc TEST_PASS_COUNT
1b1d: ad 86 02  -         lda foreground_color
1b20: 48        -         pha
1b21: a9 05     -         lda #color
1b23: 8d 86 02  -         sta foreground_color
1b26: a2 00     -         ldx #$00
1b28: bd 3d 3e  -         lda msg,x
1b2b: f0 07     -         beq !done+
1b2d: 20 d2 ff  -         jsr kernal_chrout
1b30: e8        -         inx
1b31: 4c 28 1b  -         jmp !loop-
1b34: 68        -         pla
1b35: 8d 86 02  -         sta foreground_color
1b38: 4c 56 1b  -         jmp !done+
1b3b: ad 86 02  -         lda foreground_color
1b3e: 48        -         pha
1b3f: a9 02     -         lda #color
1b41: 8d 86 02  -         sta foreground_color
1b44: a2 00     -         ldx #$00
1b46: bd 3f 3e  -         lda msg,x
1b49: f0 07     -         beq !done+
1b4b: 20 d2 ff  -         jsr kernal_chrout
1b4e: e8        -         inx
1b4f: 4c 46 1b  -         jmp !loop-
1b52: 68        -         pla
1b53: 8d 86 02  -         sta foreground_color
1b56: a2 00     -         ldx #$00
1b58: bd 67 1b  -         lda msg,x
1b5b: f0 07     -         beq !done+
1b5d: 20 d2 ff  -         jsr kernal_chrout
1b60: e8        -         inx
1b61: 4c 58 1b  -         jmp !loop-
1b64: 4c 69 1b  -         jmp !done+
1b67: 0d 00     - memory: .byte RETURN, NULL
1b69: ae 43 3e  -         ldx TEST_NAME_COUNT
1b6c: e0 15     -         cpx #TESTS_PER_PAGE
1b6e: d0 5d     -         bne !exit+
1b70: ad 86 02  -         lda foreground_color
1b73: 48        -         pha
1b74: a9 01     -         lda #color
1b76: 8d 86 02  -         sta foreground_color
1b79: a2 00     -         ldx #$00
1b7b: bd 8e 1b  -         lda msg,x
1b7e: f0 07     -         beq !done+
1b80: 20 d2 ff  -         jsr kernal_chrout
1b83: e8        -         inx
1b84: 4c 7b 1b  -         jmp !loop-
1b87: 68        -         pla
1b88: 8d 86 02  -         sta foreground_color
1b8b: 4c ad 1b  -         jmp !no_key+
1b8e: 0d        - memory: .byte RETURN
1b8f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1b9f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1bab: 0d 00     -         .byte RETURN, NULL
1bad: 20 9f ff  -         jsr scnkey  // scan keyboard
1bb0: 20 e4 ff  -         jsr getin	// put result into A
1bb3: f0 f8     -         beq !no_key-
1bb5: a2 00     -         ldx #$00
1bb7: bd c6 1b  -         lda msg,x
1bba: f0 07     -         beq !done+
1bbc: 20 d2 ff  -         jsr kernal_chrout
1bbf: e8        -         inx
1bc0: 4c b7 1b  -         jmp !loop-
1bc3: 4c c8 1b  -         jmp !done+
1bc6: 0d 00     - newline:.byte RETURN, NULL
1bc8: a2 00     -         ldx #$00
1bca: 8e 43 3e  -         stx TEST_NAME_COUNT
1bcd: 60        -         rts
1bce: ee 43 3e  - ADD_TEST:inc TEST_NAME_COUNT
1bd1: ad 86 02  -         lda foreground_color
1bd4: 48        -         pha
1bd5: a9 0f     -         lda #color
1bd7: 8d 86 02  -         sta foreground_color
1bda: a2 00     -         ldx #$00
1bdc: bd ef 1b  -         lda msg,x
1bdf: f0 07     -         beq !done+
1be1: 20 d2 ff  -         jsr kernal_chrout
1be4: e8        -         inx
1be5: 4c dc 1b  -         jmp !loop-
1be8: 68        -         pla
1be9: 8d 86 02  -         sta foreground_color
1bec: 4c fd 1b  -         jmp !done+
1bef: 20 20     - memory: .fill spacing, spacebar
1bf1: 41 44 44 49 54 49 4f 4e                          -         .text name
1bf9: 2e 2e 2e  -         .text "..."
1bfc: 00        -         .byte NULL
1bfd: 20 5d 08  -         jsr SW16
1c00: 10        -         .byte opcode(op, register)
1c01: 34 76     -         .word address.getValue()
1c03: 11        -         .byte opcode(op, register)
1c04: 27 42     -         .word address.getValue()
1c06: a1        -         .byte opcode($a0, register) }
1c07: 0d        -         .byte $0d
1c08: 1c        -         .byte >(address.getValue()-1)
1c09: f1        -         .byte <(address.getValue()-1)
1c0a: a0        -         .byte opcode($a0, register) }
1c0b: 00        -         .byte $00 }
1c0c: ee 41 3e  -         inc TEST_COUNT
1c0f: ad 86 02  -         lda foreground_color
1c12: 48        -         pha
1c13: a9 0e     -         lda #color
1c15: 8d 86 02  -         sta foreground_color
1c18: a2 00     -         ldx #$00
1c1a: bd 2d 1c  -         lda msg,x
1c1d: f0 07     -         beq !done+
1c1f: 20 d2 ff  -         jsr kernal_chrout
1c22: e8        -         inx
1c23: 4c 1a 1c  -         jmp !loop-
1c26: 68        -         pla
1c27: 8d 86 02  -         sta foreground_color
1c2a: 4c 32 1c  -         jmp !done+
1c2d: 20        - memory: .byte spacebar
1c2e: 58 32     -         .text description
1c30: 3a        -         .text ":"
1c31: 00        -         .byte NULL
1c32: a6 17     -         ldx rl(register.getValue())
1c34: a4 18     -         ldy rh(register.getValue())
1c36: e0 b6     -         cpx #<value
1c38: d0 25     -         bne !failed+
1c3a: c0 70     -         cpy #>value
1c3c: d0 21     -         bne !failed+
1c3e: ee 42 3e  -         inc TEST_PASS_COUNT
1c41: ad 86 02  -         lda foreground_color
1c44: 48        -         pha
1c45: a9 05     -         lda #color
1c47: 8d 86 02  -         sta foreground_color
1c4a: a2 00     -         ldx #$00
1c4c: bd 3d 3e  -         lda msg,x
1c4f: f0 07     -         beq !done+
1c51: 20 d2 ff  -         jsr kernal_chrout
1c54: e8        -         inx
1c55: 4c 4c 1c  -         jmp !loop-
1c58: 68        -         pla
1c59: 8d 86 02  -         sta foreground_color
1c5c: 4c 7a 1c  -         jmp !done+
1c5f: ad 86 02  -         lda foreground_color
1c62: 48        -         pha
1c63: a9 02     -         lda #color
1c65: 8d 86 02  -         sta foreground_color
1c68: a2 00     -         ldx #$00
1c6a: bd 3f 3e  -         lda msg,x
1c6d: f0 07     -         beq !done+
1c6f: 20 d2 ff  -         jsr kernal_chrout
1c72: e8        -         inx
1c73: 4c 6a 1c  -         jmp !loop-
1c76: 68        -         pla
1c77: 8d 86 02  -         sta foreground_color
1c7a: a2 00     -         ldx #$00
1c7c: bd 8b 1c  -         lda msg,x
1c7f: f0 07     -         beq !done+
1c81: 20 d2 ff  -         jsr kernal_chrout
1c84: e8        -         inx
1c85: 4c 7c 1c  -         jmp !loop-
1c88: 4c 8d 1c  -         jmp !done+
1c8b: 0d 00     - memory: .byte RETURN, NULL
1c8d: ae 43 3e  -         ldx TEST_NAME_COUNT
1c90: e0 15     -         cpx #TESTS_PER_PAGE
1c92: d0 5d     -         bne !exit+
1c94: ad 86 02  -         lda foreground_color
1c97: 48        -         pha
1c98: a9 01     -         lda #color
1c9a: 8d 86 02  -         sta foreground_color
1c9d: a2 00     -         ldx #$00
1c9f: bd b2 1c  -         lda msg,x
1ca2: f0 07     -         beq !done+
1ca4: 20 d2 ff  -         jsr kernal_chrout
1ca7: e8        -         inx
1ca8: 4c 9f 1c  -         jmp !loop-
1cab: 68        -         pla
1cac: 8d 86 02  -         sta foreground_color
1caf: 4c d1 1c  -         jmp !no_key+
1cb2: 0d        - memory: .byte RETURN
1cb3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1cc3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1ccf: 0d 00     -         .byte RETURN, NULL
1cd1: 20 9f ff  -         jsr scnkey  // scan keyboard
1cd4: 20 e4 ff  -         jsr getin	// put result into A
1cd7: f0 f8     -         beq !no_key-
1cd9: a2 00     -         ldx #$00
1cdb: bd ea 1c  -         lda msg,x
1cde: f0 07     -         beq !done+
1ce0: 20 d2 ff  -         jsr kernal_chrout
1ce3: e8        -         inx
1ce4: 4c db 1c  -         jmp !loop-
1ce7: 4c ec 1c  -         jmp !done+
1cea: 0d 00     - newline:.byte RETURN, NULL
1cec: a2 00     -         ldx #$00
1cee: 8e 43 3e  -         stx TEST_NAME_COUNT
1cf1: 60        -         rts
1cf2: ee 41 3e  -         inc TEST_COUNT
1cf5: ad 86 02  -         lda foreground_color
1cf8: 48        -         pha
1cf9: a9 0e     -         lda #color
1cfb: 8d 86 02  -         sta foreground_color
1cfe: a2 00     -         ldx #$00
1d00: bd 13 1d  -         lda msg,x
1d03: f0 07     -         beq !done+
1d05: 20 d2 ff  -         jsr kernal_chrout
1d08: e8        -         inx
1d09: 4c 00 1d  -         jmp !loop-
1d0c: 68        -         pla
1d0d: 8d 86 02  -         sta foreground_color
1d10: 4c 19 1d  -         jmp !done+
1d13: 20        - memory: .byte spacebar
1d14: 41 44 44  -         .text description
1d17: 3a        -         .text ":"
1d18: 00        -         .byte NULL
1d19: a6 17     -         ldx rl(register.getValue())
1d1b: a4 18     -         ldy rh(register.getValue())
1d1d: e0 5b     -         cpx #<value
1d1f: d0 25     -         bne !failed+
1d21: c0 b8     -         cpy #>value
1d23: d0 21     -         bne !failed+
1d25: ee 42 3e  -         inc TEST_PASS_COUNT
1d28: ad 86 02  -         lda foreground_color
1d2b: 48        -         pha
1d2c: a9 05     -         lda #color
1d2e: 8d 86 02  -         sta foreground_color
1d31: a2 00     -         ldx #$00
1d33: bd 3d 3e  -         lda msg,x
1d36: f0 07     -         beq !done+
1d38: 20 d2 ff  -         jsr kernal_chrout
1d3b: e8        -         inx
1d3c: 4c 33 1d  -         jmp !loop-
1d3f: 68        -         pla
1d40: 8d 86 02  -         sta foreground_color
1d43: 4c 61 1d  -         jmp !done+
1d46: ad 86 02  -         lda foreground_color
1d49: 48        -         pha
1d4a: a9 02     -         lda #color
1d4c: 8d 86 02  -         sta foreground_color
1d4f: a2 00     -         ldx #$00
1d51: bd 3f 3e  -         lda msg,x
1d54: f0 07     -         beq !done+
1d56: 20 d2 ff  -         jsr kernal_chrout
1d59: e8        -         inx
1d5a: 4c 51 1d  -         jmp !loop-
1d5d: 68        -         pla
1d5e: 8d 86 02  -         sta foreground_color
1d61: 60        -         rts
1d62: ee 43 3e  - SUBTRACT_TEST:inc TEST_NAME_COUNT
1d65: ad 86 02  -         lda foreground_color
1d68: 48        -         pha
1d69: a9 0f     -         lda #color
1d6b: 8d 86 02  -         sta foreground_color
1d6e: a2 00     -         ldx #$00
1d70: bd 83 1d  -         lda msg,x
1d73: f0 07     -         beq !done+
1d75: 20 d2 ff  -         jsr kernal_chrout
1d78: e8        -         inx
1d79: 4c 70 1d  -         jmp !loop-
1d7c: 68        -         pla
1d7d: 8d 86 02  -         sta foreground_color
1d80: 4c 94 1d  -         jmp !done+
1d83: 20 20     - memory: .fill spacing, spacebar
1d85: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
1d90: 2e 2e 2e  -         .text "..."
1d93: 00        -         .byte NULL
1d94: 20 5d 08  -         jsr SW16
1d97: 10        -         .byte opcode(op, register)
1d98: 34 76     -         .word address.getValue()
1d9a: 11        -         .byte opcode(op, register)
1d9b: 27 42     -         .word address.getValue()
1d9d: b1        -         .byte opcode($b0, register) }
1d9e: 0d        -         .byte $0d
1d9f: 1e        -         .byte >(address.getValue()-1)
1da0: 87        -         .byte <(address.getValue()-1)
1da1: b0        -         .byte opcode($b0, register) }
1da2: 00        -         .byte $00 }
1da3: ee 41 3e  -         inc TEST_COUNT
1da6: ad 86 02  -         lda foreground_color
1da9: 48        -         pha
1daa: a9 0e     -         lda #color
1dac: 8d 86 02  -         sta foreground_color
1daf: a2 00     -         ldx #$00
1db1: bd c4 1d  -         lda msg,x
1db4: f0 07     -         beq !done+
1db6: 20 d2 ff  -         jsr kernal_chrout
1db9: e8        -         inx
1dba: 4c b1 1d  -         jmp !loop-
1dbd: 68        -         pla
1dbe: 8d 86 02  -         sta foreground_color
1dc1: 4c c8 1d  -         jmp !done+
1dc4: 20        - memory: .byte spacebar
1dc5: 30        -         .text description
1dc6: 3a        -         .text ":"
1dc7: 00        -         .byte NULL
1dc8: a6 17     -         ldx rl(register.getValue())
1dca: a4 18     -         ldy rh(register.getValue())
1dcc: e0 00     -         cpx #<value
1dce: d0 25     -         bne !failed+
1dd0: c0 00     -         cpy #>value
1dd2: d0 21     -         bne !failed+
1dd4: ee 42 3e  -         inc TEST_PASS_COUNT
1dd7: ad 86 02  -         lda foreground_color
1dda: 48        -         pha
1ddb: a9 05     -         lda #color
1ddd: 8d 86 02  -         sta foreground_color
1de0: a2 00     -         ldx #$00
1de2: bd 3d 3e  -         lda msg,x
1de5: f0 07     -         beq !done+
1de7: 20 d2 ff  -         jsr kernal_chrout
1dea: e8        -         inx
1deb: 4c e2 1d  -         jmp !loop-
1dee: 68        -         pla
1def: 8d 86 02  -         sta foreground_color
1df2: 4c 10 1e  -         jmp !done+
1df5: ad 86 02  -         lda foreground_color
1df8: 48        -         pha
1df9: a9 02     -         lda #color
1dfb: 8d 86 02  -         sta foreground_color
1dfe: a2 00     -         ldx #$00
1e00: bd 3f 3e  -         lda msg,x
1e03: f0 07     -         beq !done+
1e05: 20 d2 ff  -         jsr kernal_chrout
1e08: e8        -         inx
1e09: 4c 00 1e  -         jmp !loop-
1e0c: 68        -         pla
1e0d: 8d 86 02  -         sta foreground_color
1e10: a2 00     -         ldx #$00
1e12: bd 21 1e  -         lda msg,x
1e15: f0 07     -         beq !done+
1e17: 20 d2 ff  -         jsr kernal_chrout
1e1a: e8        -         inx
1e1b: 4c 12 1e  -         jmp !loop-
1e1e: 4c 23 1e  -         jmp !done+
1e21: 0d 00     - memory: .byte RETURN, NULL
1e23: ae 43 3e  -         ldx TEST_NAME_COUNT
1e26: e0 15     -         cpx #TESTS_PER_PAGE
1e28: d0 5d     -         bne !exit+
1e2a: ad 86 02  -         lda foreground_color
1e2d: 48        -         pha
1e2e: a9 01     -         lda #color
1e30: 8d 86 02  -         sta foreground_color
1e33: a2 00     -         ldx #$00
1e35: bd 48 1e  -         lda msg,x
1e38: f0 07     -         beq !done+
1e3a: 20 d2 ff  -         jsr kernal_chrout
1e3d: e8        -         inx
1e3e: 4c 35 1e  -         jmp !loop-
1e41: 68        -         pla
1e42: 8d 86 02  -         sta foreground_color
1e45: 4c 67 1e  -         jmp !no_key+
1e48: 0d        - memory: .byte RETURN
1e49: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1e59: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1e65: 0d 00     -         .byte RETURN, NULL
1e67: 20 9f ff  -         jsr scnkey  // scan keyboard
1e6a: 20 e4 ff  -         jsr getin	// put result into A
1e6d: f0 f8     -         beq !no_key-
1e6f: a2 00     -         ldx #$00
1e71: bd 80 1e  -         lda msg,x
1e74: f0 07     -         beq !done+
1e76: 20 d2 ff  -         jsr kernal_chrout
1e79: e8        -         inx
1e7a: 4c 71 1e  -         jmp !loop-
1e7d: 4c 82 1e  -         jmp !done+
1e80: 0d 00     - newline:.byte RETURN, NULL
1e82: a2 00     -         ldx #$00
1e84: 8e 43 3e  -         stx TEST_NAME_COUNT
1e87: 60        -         rts
1e88: ee 41 3e  -         inc TEST_COUNT
1e8b: ad 86 02  -         lda foreground_color
1e8e: 48        -         pha
1e8f: a9 0e     -         lda #color
1e91: 8d 86 02  -         sta foreground_color
1e94: a2 00     -         ldx #$00
1e96: bd a9 1e  -         lda msg,x
1e99: f0 07     -         beq !done+
1e9b: 20 d2 ff  -         jsr kernal_chrout
1e9e: e8        -         inx
1e9f: 4c 96 1e  -         jmp !loop-
1ea2: 68        -         pla
1ea3: 8d 86 02  -         sta foreground_color
1ea6: 4c af 1e  -         jmp !done+
1ea9: 20        - memory: .byte spacebar
1eaa: 53 55 42  -         .text description
1ead: 3a        -         .text ":"
1eae: 00        -         .byte NULL
1eaf: a6 17     -         ldx rl(register.getValue())
1eb1: a4 18     -         ldy rh(register.getValue())
1eb3: e0 0d     -         cpx #<value
1eb5: d0 25     -         bne !failed+
1eb7: c0 34     -         cpy #>value
1eb9: d0 21     -         bne !failed+
1ebb: ee 42 3e  -         inc TEST_PASS_COUNT
1ebe: ad 86 02  -         lda foreground_color
1ec1: 48        -         pha
1ec2: a9 05     -         lda #color
1ec4: 8d 86 02  -         sta foreground_color
1ec7: a2 00     -         ldx #$00
1ec9: bd 3d 3e  -         lda msg,x
1ecc: f0 07     -         beq !done+
1ece: 20 d2 ff  -         jsr kernal_chrout
1ed1: e8        -         inx
1ed2: 4c c9 1e  -         jmp !loop-
1ed5: 68        -         pla
1ed6: 8d 86 02  -         sta foreground_color
1ed9: 4c f7 1e  -         jmp !done+
1edc: ad 86 02  -         lda foreground_color
1edf: 48        -         pha
1ee0: a9 02     -         lda #color
1ee2: 8d 86 02  -         sta foreground_color
1ee5: a2 00     -         ldx #$00
1ee7: bd 3f 3e  -         lda msg,x
1eea: f0 07     -         beq !done+
1eec: 20 d2 ff  -         jsr kernal_chrout
1eef: e8        -         inx
1ef0: 4c e7 1e  -         jmp !loop-
1ef3: 68        -         pla
1ef4: 8d 86 02  -         sta foreground_color
1ef7: 60        -         rts	
1ef8: ee 43 3e  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
1efb: ad 86 02  -         lda foreground_color
1efe: 48        -         pha
1eff: a9 0f     -         lda #color
1f01: 8d 86 02  -         sta foreground_color
1f04: a2 00     -         ldx #$00
1f06: bd 19 1f  -         lda msg,x
1f09: f0 07     -         beq !done+
1f0b: 20 d2 ff  -         jsr kernal_chrout
1f0e: e8        -         inx
1f0f: 4c 06 1f  -         jmp !loop-
1f12: 68        -         pla
1f13: 8d 86 02  -         sta foreground_color
1f16: 4c 2c 1f  -         jmp !done+
1f19: 20 20     - memory: .fill spacing, spacebar
1f1b: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
1f28: 2e 2e 2e  -         .text "..."
1f2b: 00        -         .byte NULL
1f2c: 20 5d 08  -         jsr SW16
1f2f: 15        -         .byte opcode(op, register)
1f30: 7f 3e     -         .word address.getValue()
1f32: 10        -         .byte opcode(op, register)
1f33: 59 3e     -         .word address.getValue()
1f35: 75        -         .byte opcode($70, register) }
1f36: 0d        -         .byte $0d
1f37: 20        -         .byte >(address.getValue()-1)
1f38: 2b        -         .byte <(address.getValue()-1)
1f39: 10        -         .byte opcode(op, register)
1f3a: 5b 3e     -         .word address.getValue()
1f3c: 75        -         .byte opcode($70, register) }
1f3d: 0d        -         .byte $0d
1f3e: 20        -         .byte >(address.getValue()-1)
1f3f: 9b        -         .byte <(address.getValue()-1)
1f40: c5        -         .byte opcode($c0, register) }
1f41: 0d        -         .byte $0d
1f42: 21        -         .byte >(address.getValue()-1)
1f43: 0b        -         .byte <(address.getValue()-1)
1f44: c5        -         .byte opcode($c0, register) }
1f45: 00        -         .byte $00 }
1f46: ee 41 3e  -         inc TEST_COUNT
1f49: ad 86 02  -         lda foreground_color
1f4c: 48        -         pha
1f4d: a9 0e     -         lda #color
1f4f: 8d 86 02  -         sta foreground_color
1f52: a2 00     -         ldx #$00
1f54: bd 67 1f  -         lda msg,x
1f57: f0 07     -         beq !done+
1f59: 20 d2 ff  -         jsr kernal_chrout
1f5c: e8        -         inx
1f5d: 4c 54 1f  -         jmp !loop-
1f60: 68        -         pla
1f61: 8d 86 02  -         sta foreground_color
1f64: 4c 6c 1f  -         jmp !done+
1f67: 20        - memory: .byte spacebar
1f68: 50 31     -         .text description
1f6a: 3a        -         .text ":"
1f6b: 00        -         .byte NULL
1f6c: a6 17     -         ldx addr
1f6e: e0 59     -         cpx #<value
1f70: d0 27     -         bne !failed+
1f72: a6 18     -         ldx addr+1
1f74: e0 3e     -         cpx #>value
1f76: d0 21     -         bne !failed+
1f78: ee 42 3e  -         inc TEST_PASS_COUNT
1f7b: ad 86 02  -         lda foreground_color
1f7e: 48        -         pha
1f7f: a9 05     -         lda #color
1f81: 8d 86 02  -         sta foreground_color
1f84: a2 00     -         ldx #$00
1f86: bd 3d 3e  -         lda msg,x
1f89: f0 07     -         beq !done+
1f8b: 20 d2 ff  -         jsr kernal_chrout
1f8e: e8        -         inx
1f8f: 4c 86 1f  -         jmp !loop-
1f92: 68        -         pla
1f93: 8d 86 02  -         sta foreground_color
1f96: 4c b4 1f  -         jmp !done+
1f99: ad 86 02  -         lda foreground_color
1f9c: 48        -         pha
1f9d: a9 02     -         lda #color
1f9f: 8d 86 02  -         sta foreground_color
1fa2: a2 00     -         ldx #$00
1fa4: bd 3f 3e  -         lda msg,x
1fa7: f0 07     -         beq !done+
1fa9: 20 d2 ff  -         jsr kernal_chrout
1fac: e8        -         inx
1fad: 4c a4 1f  -         jmp !loop-
1fb0: 68        -         pla
1fb1: 8d 86 02  -         sta foreground_color
1fb4: a2 00     -         ldx #$00
1fb6: bd c5 1f  -         lda msg,x
1fb9: f0 07     -         beq !done+
1fbb: 20 d2 ff  -         jsr kernal_chrout
1fbe: e8        -         inx
1fbf: 4c b6 1f  -         jmp !loop-
1fc2: 4c c7 1f  -         jmp !done+
1fc5: 0d 00     - memory: .byte RETURN, NULL
1fc7: ae 43 3e  -         ldx TEST_NAME_COUNT
1fca: e0 15     -         cpx #TESTS_PER_PAGE
1fcc: d0 5d     -         bne !exit+
1fce: ad 86 02  -         lda foreground_color
1fd1: 48        -         pha
1fd2: a9 01     -         lda #color
1fd4: 8d 86 02  -         sta foreground_color
1fd7: a2 00     -         ldx #$00
1fd9: bd ec 1f  -         lda msg,x
1fdc: f0 07     -         beq !done+
1fde: 20 d2 ff  -         jsr kernal_chrout
1fe1: e8        -         inx
1fe2: 4c d9 1f  -         jmp !loop-
1fe5: 68        -         pla
1fe6: 8d 86 02  -         sta foreground_color
1fe9: 4c 0b 20  -         jmp !no_key+
1fec: 0d        - memory: .byte RETURN
1fed: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1ffd: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2009: 0d 00     -         .byte RETURN, NULL
200b: 20 9f ff  -         jsr scnkey  // scan keyboard
200e: 20 e4 ff  -         jsr getin	// put result into A
2011: f0 f8     -         beq !no_key-
2013: a2 00     -         ldx #$00
2015: bd 24 20  -         lda msg,x
2018: f0 07     -         beq !done+
201a: 20 d2 ff  -         jsr kernal_chrout
201d: e8        -         inx
201e: 4c 15 20  -         jmp !loop-
2021: 4c 26 20  -         jmp !done+
2024: 0d 00     - newline:.byte RETURN, NULL
2026: a2 00     -         ldx #$00
2028: 8e 43 3e  -         stx TEST_NAME_COUNT
202b: 60        -         rts
202c: ee 41 3e  -         inc TEST_COUNT
202f: ad 86 02  -         lda foreground_color
2032: 48        -         pha
2033: a9 0e     -         lda #color
2035: 8d 86 02  -         sta foreground_color
2038: a2 00     -         ldx #$00
203a: bd 4d 20  -         lda msg,x
203d: f0 07     -         beq !done+
203f: 20 d2 ff  -         jsr kernal_chrout
2042: e8        -         inx
2043: 4c 3a 20  -         jmp !loop-
2046: 68        -         pla
2047: 8d 86 02  -         sta foreground_color
204a: 4c 51 20  -         jmp !done+
204d: 20        - memory: .byte spacebar
204e: 31        -         .text description
204f: 3a        -         .text ":"
2050: 00        -         .byte NULL
2051: ae 7f 3e  -         ldx addr
2054: e0 59     -         cpx #<value
2056: d0 28     -         bne !failed+
2058: ae 80 3e  -         ldx addr+1
205b: e0 3e     -         cpx #>value
205d: d0 21     -         bne !failed+
205f: ee 42 3e  -         inc TEST_PASS_COUNT
2062: ad 86 02  -         lda foreground_color
2065: 48        -         pha
2066: a9 05     -         lda #color
2068: 8d 86 02  -         sta foreground_color
206b: a2 00     -         ldx #$00
206d: bd 3d 3e  -         lda msg,x
2070: f0 07     -         beq !done+
2072: 20 d2 ff  -         jsr kernal_chrout
2075: e8        -         inx
2076: 4c 6d 20  -         jmp !loop-
2079: 68        -         pla
207a: 8d 86 02  -         sta foreground_color
207d: 4c 9b 20  -         jmp !done+
2080: ad 86 02  -         lda foreground_color
2083: 48        -         pha
2084: a9 02     -         lda #color
2086: 8d 86 02  -         sta foreground_color
2089: a2 00     -         ldx #$00
208b: bd 3f 3e  -         lda msg,x
208e: f0 07     -         beq !done+
2090: 20 d2 ff  -         jsr kernal_chrout
2093: e8        -         inx
2094: 4c 8b 20  -         jmp !loop-
2097: 68        -         pla
2098: 8d 86 02  -         sta foreground_color
209b: 60        -         rts
209c: ee 41 3e  -         inc TEST_COUNT
209f: ad 86 02  -         lda foreground_color
20a2: 48        -         pha
20a3: a9 0e     -         lda #color
20a5: 8d 86 02  -         sta foreground_color
20a8: a2 00     -         ldx #$00
20aa: bd bd 20  -         lda msg,x
20ad: f0 07     -         beq !done+
20af: 20 d2 ff  -         jsr kernal_chrout
20b2: e8        -         inx
20b3: 4c aa 20  -         jmp !loop-
20b6: 68        -         pla
20b7: 8d 86 02  -         sta foreground_color
20ba: 4c c1 20  -         jmp !done+
20bd: 20        - memory: .byte spacebar
20be: 32        -         .text description
20bf: 3a        -         .text ":"
20c0: 00        -         .byte NULL
20c1: ae 81 3e  -         ldx addr
20c4: e0 5b     -         cpx #<value
20c6: d0 28     -         bne !failed+
20c8: ae 82 3e  -         ldx addr+1
20cb: e0 3e     -         cpx #>value
20cd: d0 21     -         bne !failed+
20cf: ee 42 3e  -         inc TEST_PASS_COUNT
20d2: ad 86 02  -         lda foreground_color
20d5: 48        -         pha
20d6: a9 05     -         lda #color
20d8: 8d 86 02  -         sta foreground_color
20db: a2 00     -         ldx #$00
20dd: bd 3d 3e  -         lda msg,x
20e0: f0 07     -         beq !done+
20e2: 20 d2 ff  -         jsr kernal_chrout
20e5: e8        -         inx
20e6: 4c dd 20  -         jmp !loop-
20e9: 68        -         pla
20ea: 8d 86 02  -         sta foreground_color
20ed: 4c 0b 21  -         jmp !done+
20f0: ad 86 02  -         lda foreground_color
20f3: 48        -         pha
20f4: a9 02     -         lda #color
20f6: 8d 86 02  -         sta foreground_color
20f9: a2 00     -         ldx #$00
20fb: bd 3f 3e  -         lda msg,x
20fe: f0 07     -         beq !done+
2100: 20 d2 ff  -         jsr kernal_chrout
2103: e8        -         inx
2104: 4c fb 20  -         jmp !loop-
2107: 68        -         pla
2108: 8d 86 02  -         sta foreground_color
210b: 60        -         rts
210c: ee 41 3e  -         inc TEST_COUNT
210f: ad 86 02  -         lda foreground_color
2112: 48        -         pha
2113: a9 0e     -         lda #color
2115: 8d 86 02  -         sta foreground_color
2118: a2 00     -         ldx #$00
211a: bd 2d 21  -         lda msg,x
211d: f0 07     -         beq !done+
211f: 20 d2 ff  -         jsr kernal_chrout
2122: e8        -         inx
2123: 4c 1a 21  -         jmp !loop-
2126: 68        -         pla
2127: 8d 86 02  -         sta foreground_color
212a: 4c 32 21  -         jmp !done+
212d: 20        - memory: .byte spacebar
212e: 50 32     -         .text description
2130: 3a        -         .text ":"
2131: 00        -         .byte NULL
2132: a6 17     -         ldx addr
2134: e0 5b     -         cpx #<value
2136: d0 27     -         bne !failed+
2138: a6 18     -         ldx addr+1
213a: e0 3e     -         cpx #>value
213c: d0 21     -         bne !failed+
213e: ee 42 3e  -         inc TEST_PASS_COUNT
2141: ad 86 02  -         lda foreground_color
2144: 48        -         pha
2145: a9 05     -         lda #color
2147: 8d 86 02  -         sta foreground_color
214a: a2 00     -         ldx #$00
214c: bd 3d 3e  -         lda msg,x
214f: f0 07     -         beq !done+
2151: 20 d2 ff  -         jsr kernal_chrout
2154: e8        -         inx
2155: 4c 4c 21  -         jmp !loop-
2158: 68        -         pla
2159: 8d 86 02  -         sta foreground_color
215c: 4c 7a 21  -         jmp !done+
215f: ad 86 02  -         lda foreground_color
2162: 48        -         pha
2163: a9 02     -         lda #color
2165: 8d 86 02  -         sta foreground_color
2168: a2 00     -         ldx #$00
216a: bd 3f 3e  -         lda msg,x
216d: f0 07     -         beq !done+
216f: 20 d2 ff  -         jsr kernal_chrout
2172: e8        -         inx
2173: 4c 6a 21  -         jmp !loop-
2176: 68        -         pla
2177: 8d 86 02  -         sta foreground_color
217a: 60        -         rts
217b: ee 43 3e  - COMPARE_TEST:inc TEST_NAME_COUNT
217e: ad 86 02  -         lda foreground_color
2181: 48        -         pha
2182: a9 0f     -         lda #color
2184: 8d 86 02  -         sta foreground_color
2187: a2 00     -         ldx #$00
2189: bd 9c 21  -         lda msg,x
218c: f0 07     -         beq !done+
218e: 20 d2 ff  -         jsr kernal_chrout
2191: e8        -         inx
2192: 4c 89 21  -         jmp !loop-
2195: 68        -         pla
2196: 8d 86 02  -         sta foreground_color
2199: 4c a9 21  -         jmp !done+
219c: 20 20     - memory: .fill spacing, spacebar
219e: 43 4f 4d 50 41 52 45                             -         .text name
21a5: 2e 2e 2e  -         .text "..."
21a8: 00        -         .byte NULL
21a9: 20 5d 08  -         jsr SW16
21ac: 15        -         .byte opcode(op, register)
21ad: 5f 3e     -         .word address.getValue()
21af: 16        -         .byte opcode(op, register)
21b0: 6f 3e     -         .word address.getValue()
21b2: 14        -         .byte opcode(op, register)
21b3: 00 00     -         .word address.getValue()
21b5: e4        -         .byte opcode($e0, register) }
21b6: b0        -         .byte opcode($b0, register) }
21b7: 75        -         .byte opcode($70, register) }
21b8: 25        -         .byte opcode($20, register) }
21b9: d6        -         .byte opcode($d0, register) }
21ba: 02 f9     -         .byte $02, effective_address(ea,*) }
21bc: 00        -         .byte $00 }
21bd: ee 41 3e  -         inc TEST_COUNT
21c0: ad 86 02  -         lda foreground_color
21c3: 48        -         pha
21c4: a9 0e     -         lda #color
21c6: 8d 86 02  -         sta foreground_color
21c9: a2 00     -         ldx #$00
21cb: bd de 21  -         lda msg,x
21ce: f0 07     -         beq !done+
21d0: 20 d2 ff  -         jsr kernal_chrout
21d3: e8        -         inx
21d4: 4c cb 21  -         jmp !loop-
21d7: 68        -         pla
21d8: 8d 86 02  -         sta foreground_color
21db: 4c e6 21  -         jmp !done+
21de: 20        - memory: .byte spacebar
21df: 43 4f 55 4e 54                                   -         .text description
21e4: 3a        -         .text ":"
21e5: 00        -         .byte NULL
21e6: a6 1f     -         ldx rl(register.getValue())
21e8: a4 20     -         ldy rh(register.getValue())
21ea: e0 08     -         cpx #<value
21ec: d0 25     -         bne !failed+
21ee: c0 00     -         cpy #>value
21f0: d0 21     -         bne !failed+
21f2: ee 42 3e  -         inc TEST_PASS_COUNT
21f5: ad 86 02  -         lda foreground_color
21f8: 48        -         pha
21f9: a9 05     -         lda #color
21fb: 8d 86 02  -         sta foreground_color
21fe: a2 00     -         ldx #$00
2200: bd 3d 3e  -         lda msg,x
2203: f0 07     -         beq !done+
2205: 20 d2 ff  -         jsr kernal_chrout
2208: e8        -         inx
2209: 4c 00 22  -         jmp !loop-
220c: 68        -         pla
220d: 8d 86 02  -         sta foreground_color
2210: 4c 2e 22  -         jmp !done+
2213: ad 86 02  -         lda foreground_color
2216: 48        -         pha
2217: a9 02     -         lda #color
2219: 8d 86 02  -         sta foreground_color
221c: a2 00     -         ldx #$00
221e: bd 3f 3e  -         lda msg,x
2221: f0 07     -         beq !done+
2223: 20 d2 ff  -         jsr kernal_chrout
2226: e8        -         inx
2227: 4c 1e 22  -         jmp !loop-
222a: 68        -         pla
222b: 8d 86 02  -         sta foreground_color
222e: a2 00     -         ldx #$00
2230: bd 3f 22  -         lda msg,x
2233: f0 07     -         beq !done+
2235: 20 d2 ff  -         jsr kernal_chrout
2238: e8        -         inx
2239: 4c 30 22  -         jmp !loop-
223c: 4c 41 22  -         jmp !done+
223f: 0d 00     - memory: .byte RETURN, NULL
2241: ae 43 3e  -         ldx TEST_NAME_COUNT
2244: e0 15     -         cpx #TESTS_PER_PAGE
2246: d0 5d     -         bne !exit+
2248: ad 86 02  -         lda foreground_color
224b: 48        -         pha
224c: a9 01     -         lda #color
224e: 8d 86 02  -         sta foreground_color
2251: a2 00     -         ldx #$00
2253: bd 66 22  -         lda msg,x
2256: f0 07     -         beq !done+
2258: 20 d2 ff  -         jsr kernal_chrout
225b: e8        -         inx
225c: 4c 53 22  -         jmp !loop-
225f: 68        -         pla
2260: 8d 86 02  -         sta foreground_color
2263: 4c 85 22  -         jmp !no_key+
2266: 0d        - memory: .byte RETURN
2267: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2277: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2283: 0d 00     -         .byte RETURN, NULL
2285: 20 9f ff  -         jsr scnkey  // scan keyboard
2288: 20 e4 ff  -         jsr getin	// put result into A
228b: f0 f8     -         beq !no_key-
228d: a2 00     -         ldx #$00
228f: bd 9e 22  -         lda msg,x
2292: f0 07     -         beq !done+
2294: 20 d2 ff  -         jsr kernal_chrout
2297: e8        -         inx
2298: 4c 8f 22  -         jmp !loop-
229b: 4c a0 22  -         jmp !done+
229e: 0d 00     - newline:.byte RETURN, NULL
22a0: a2 00     -         ldx #$00
22a2: 8e 43 3e  -         stx TEST_NAME_COUNT
22a5: 60        -         rts	
22a6: ee 43 3e  - INCREMENT_TEST:inc TEST_NAME_COUNT
22a9: ad 86 02  -         lda foreground_color
22ac: 48        -         pha
22ad: a9 0f     -         lda #color
22af: 8d 86 02  -         sta foreground_color
22b2: a2 00     -         ldx #$00
22b4: bd c7 22  -         lda msg,x
22b7: f0 07     -         beq !done+
22b9: 20 d2 ff  -         jsr kernal_chrout
22bc: e8        -         inx
22bd: 4c b4 22  -         jmp !loop-
22c0: 68        -         pla
22c1: 8d 86 02  -         sta foreground_color
22c4: 4c d6 22  -         jmp !done+
22c7: 20 20     - memory: .fill spacing, spacebar
22c9: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
22d2: 2e 2e 2e  -         .text "..."
22d5: 00        -         .byte NULL
22d6: 20 5d 08  -         jsr SW16
22d9: 15        -         .byte opcode(op, register)
22da: 59 3e     -         .word address.getValue()
22dc: b0        -         .byte opcode($b0, register) }
22dd: 55        -         .byte opcode($50, register) }
22de: e5        -         .byte opcode($e0, register) }
22df: 00        -         .byte $00 }
22e0: ee 41 3e  -         inc TEST_COUNT
22e3: ad 86 02  -         lda foreground_color
22e6: 48        -         pha
22e7: a9 0e     -         lda #color
22e9: 8d 86 02  -         sta foreground_color
22ec: a2 00     -         ldx #$00
22ee: bd 01 23  -         lda msg,x
22f1: f0 07     -         beq !done+
22f3: 20 d2 ff  -         jsr kernal_chrout
22f6: e8        -         inx
22f7: 4c ee 22  -         jmp !loop-
22fa: 68        -         pla
22fb: 8d 86 02  -         sta foreground_color
22fe: 4c 06 23  -         jmp !done+
2301: 20        - memory: .byte spacebar
2302: 2b 32     -         .text description
2304: 3a        -         .text ":"
2305: 00        -         .byte NULL
2306: a6 21     -         ldx rl(register.getValue())
2308: a4 22     -         ldy rh(register.getValue())
230a: e0 5b     -         cpx #<value
230c: d0 25     -         bne !failed+
230e: c0 3e     -         cpy #>value
2310: d0 21     -         bne !failed+
2312: ee 42 3e  -         inc TEST_PASS_COUNT
2315: ad 86 02  -         lda foreground_color
2318: 48        -         pha
2319: a9 05     -         lda #color
231b: 8d 86 02  -         sta foreground_color
231e: a2 00     -         ldx #$00
2320: bd 3d 3e  -         lda msg,x
2323: f0 07     -         beq !done+
2325: 20 d2 ff  -         jsr kernal_chrout
2328: e8        -         inx
2329: 4c 20 23  -         jmp !loop-
232c: 68        -         pla
232d: 8d 86 02  -         sta foreground_color
2330: 4c 4e 23  -         jmp !done+
2333: ad 86 02  -         lda foreground_color
2336: 48        -         pha
2337: a9 02     -         lda #color
2339: 8d 86 02  -         sta foreground_color
233c: a2 00     -         ldx #$00
233e: bd 3f 3e  -         lda msg,x
2341: f0 07     -         beq !done+
2343: 20 d2 ff  -         jsr kernal_chrout
2346: e8        -         inx
2347: 4c 3e 23  -         jmp !loop-
234a: 68        -         pla
234b: 8d 86 02  -         sta foreground_color
234e: a2 00     -         ldx #$00
2350: bd 5f 23  -         lda msg,x
2353: f0 07     -         beq !done+
2355: 20 d2 ff  -         jsr kernal_chrout
2358: e8        -         inx
2359: 4c 50 23  -         jmp !loop-
235c: 4c 61 23  -         jmp !done+
235f: 0d 00     - memory: .byte RETURN, NULL
2361: ae 43 3e  -         ldx TEST_NAME_COUNT
2364: e0 15     -         cpx #TESTS_PER_PAGE
2366: d0 5d     -         bne !exit+
2368: ad 86 02  -         lda foreground_color
236b: 48        -         pha
236c: a9 01     -         lda #color
236e: 8d 86 02  -         sta foreground_color
2371: a2 00     -         ldx #$00
2373: bd 86 23  -         lda msg,x
2376: f0 07     -         beq !done+
2378: 20 d2 ff  -         jsr kernal_chrout
237b: e8        -         inx
237c: 4c 73 23  -         jmp !loop-
237f: 68        -         pla
2380: 8d 86 02  -         sta foreground_color
2383: 4c a5 23  -         jmp !no_key+
2386: 0d        - memory: .byte RETURN
2387: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2397: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
23a3: 0d 00     -         .byte RETURN, NULL
23a5: 20 9f ff  -         jsr scnkey  // scan keyboard
23a8: 20 e4 ff  -         jsr getin	// put result into A
23ab: f0 f8     -         beq !no_key-
23ad: a2 00     -         ldx #$00
23af: bd be 23  -         lda msg,x
23b2: f0 07     -         beq !done+
23b4: 20 d2 ff  -         jsr kernal_chrout
23b7: e8        -         inx
23b8: 4c af 23  -         jmp !loop-
23bb: 4c c0 23  -         jmp !done+
23be: 0d 00     - newline:.byte RETURN, NULL
23c0: a2 00     -         ldx #$00
23c2: 8e 43 3e  -         stx TEST_NAME_COUNT
23c5: 60        -         rts
23c6: ee 43 3e  - DECREMENT_TEST:inc TEST_NAME_COUNT
23c9: ad 86 02  -         lda foreground_color
23cc: 48        -         pha
23cd: a9 0f     -         lda #color
23cf: 8d 86 02  -         sta foreground_color
23d2: a2 00     -         ldx #$00
23d4: bd e7 23  -         lda msg,x
23d7: f0 07     -         beq !done+
23d9: 20 d2 ff  -         jsr kernal_chrout
23dc: e8        -         inx
23dd: 4c d4 23  -         jmp !loop-
23e0: 68        -         pla
23e1: 8d 86 02  -         sta foreground_color
23e4: 4c f6 23  -         jmp !done+
23e7: 20 20     - memory: .fill spacing, spacebar
23e9: 44 45 43 52 45 4d 45 4e 54                       -         .text name
23f2: 2e 2e 2e  -         .text "..."
23f5: 00        -         .byte NULL
23f6: 20 5d 08  -         jsr SW16
23f9: 15        -         .byte opcode(op, register)
23fa: 5f 3e     -         .word address.getValue()
23fc: 14        -         .byte opcode(op, register)
23fd: 10 00     -         .word address.getValue()
23ff: b0        -         .byte opcode($b0, register) }
2400: 55        -         .byte opcode($50, register) }
2401: f4        -         .byte opcode($f0, register) }
2402: 07 fc     -         .byte $07, effective_address(ea,*) }
2404: 00        -         .byte $00 }
2405: ee 41 3e  -         inc TEST_COUNT
2408: ad 86 02  -         lda foreground_color
240b: 48        -         pha
240c: a9 0e     -         lda #color
240e: 8d 86 02  -         sta foreground_color
2411: a2 00     -         ldx #$00
2413: bd 26 24  -         lda msg,x
2416: f0 07     -         beq !done+
2418: 20 d2 ff  -         jsr kernal_chrout
241b: e8        -         inx
241c: 4c 13 24  -         jmp !loop-
241f: 68        -         pla
2420: 8d 86 02  -         sta foreground_color
2423: 4c 2a 24  -         jmp !done+
2426: 20        - memory: .byte spacebar
2427: 30        -         .text description
2428: 3a        -         .text ":"
2429: 00        -         .byte NULL
242a: a6 1f     -         ldx rl(register.getValue())
242c: a4 20     -         ldy rh(register.getValue())
242e: e0 00     -         cpx #<value
2430: d0 25     -         bne !failed+
2432: c0 00     -         cpy #>value
2434: d0 21     -         bne !failed+
2436: ee 42 3e  -         inc TEST_PASS_COUNT
2439: ad 86 02  -         lda foreground_color
243c: 48        -         pha
243d: a9 05     -         lda #color
243f: 8d 86 02  -         sta foreground_color
2442: a2 00     -         ldx #$00
2444: bd 3d 3e  -         lda msg,x
2447: f0 07     -         beq !done+
2449: 20 d2 ff  -         jsr kernal_chrout
244c: e8        -         inx
244d: 4c 44 24  -         jmp !loop-
2450: 68        -         pla
2451: 8d 86 02  -         sta foreground_color
2454: 4c 72 24  -         jmp !done+
2457: ad 86 02  -         lda foreground_color
245a: 48        -         pha
245b: a9 02     -         lda #color
245d: 8d 86 02  -         sta foreground_color
2460: a2 00     -         ldx #$00
2462: bd 3f 3e  -         lda msg,x
2465: f0 07     -         beq !done+
2467: 20 d2 ff  -         jsr kernal_chrout
246a: e8        -         inx
246b: 4c 62 24  -         jmp !loop-
246e: 68        -         pla
246f: 8d 86 02  -         sta foreground_color
2472: a2 00     -         ldx #$00
2474: bd 83 24  -         lda msg,x
2477: f0 07     -         beq !done+
2479: 20 d2 ff  -         jsr kernal_chrout
247c: e8        -         inx
247d: 4c 74 24  -         jmp !loop-
2480: 4c 85 24  -         jmp !done+
2483: 0d 00     - memory: .byte RETURN, NULL
2485: ae 43 3e  -         ldx TEST_NAME_COUNT
2488: e0 15     -         cpx #TESTS_PER_PAGE
248a: d0 5d     -         bne !exit+
248c: ad 86 02  -         lda foreground_color
248f: 48        -         pha
2490: a9 01     -         lda #color
2492: 8d 86 02  -         sta foreground_color
2495: a2 00     -         ldx #$00
2497: bd aa 24  -         lda msg,x
249a: f0 07     -         beq !done+
249c: 20 d2 ff  -         jsr kernal_chrout
249f: e8        -         inx
24a0: 4c 97 24  -         jmp !loop-
24a3: 68        -         pla
24a4: 8d 86 02  -         sta foreground_color
24a7: 4c c9 24  -         jmp !no_key+
24aa: 0d        - memory: .byte RETURN
24ab: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
24bb: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
24c7: 0d 00     -         .byte RETURN, NULL
24c9: 20 9f ff  -         jsr scnkey  // scan keyboard
24cc: 20 e4 ff  -         jsr getin	// put result into A
24cf: f0 f8     -         beq !no_key-
24d1: a2 00     -         ldx #$00
24d3: bd e2 24  -         lda msg,x
24d6: f0 07     -         beq !done+
24d8: 20 d2 ff  -         jsr kernal_chrout
24db: e8        -         inx
24dc: 4c d3 24  -         jmp !loop-
24df: 4c e4 24  -         jmp !done+
24e2: 0d 00     - newline:.byte RETURN, NULL
24e4: a2 00     -         ldx #$00
24e6: 8e 43 3e  -         stx TEST_NAME_COUNT
24e9: 60        -         rts
24ea: ee 43 3e  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
24ed: ad 86 02  -         lda foreground_color
24f0: 48        -         pha
24f1: a9 0f     -         lda #color
24f3: 8d 86 02  -         sta foreground_color
24f6: a2 00     -         ldx #$00
24f8: bd 0b 25  -         lda msg,x
24fb: f0 07     -         beq !done+
24fd: 20 d2 ff  -         jsr kernal_chrout
2500: e8        -         inx
2501: 4c f8 24  -         jmp !loop-
2504: 68        -         pla
2505: 8d 86 02  -         sta foreground_color
2508: 4c 1a 25  -         jmp !done+
250b: 20 20     - memory: .fill spacing, spacebar
250d: 36 35 30 32 20 4d 4f 44 45                       -         .text name
2516: 2e 2e 2e  -         .text "..."
2519: 00        -         .byte NULL
251a: 20 5d 08  -         jsr SW16
251d: 00        -         .byte $00 }
251e: ee 41 3e  -         inc TEST_COUNT
2521: ad 86 02  -         lda foreground_color
2524: 48        -         pha
2525: a9 0e     -         lda #color
2527: 8d 86 02  -         sta foreground_color
252a: a2 00     -         ldx #$00
252c: bd 3f 25  -         lda msg,x
252f: f0 07     -         beq !done+
2531: 20 d2 ff  -         jsr kernal_chrout
2534: e8        -         inx
2535: 4c 2c 25  -         jmp !loop-
2538: 68        -         pla
2539: 8d 86 02  -         sta foreground_color
253c: 4c 45 25  -         jmp !done+
253f: 20        - memory: .byte spacebar
2540: 52 54 4e  -         .text description
2543: 3a        -         .text ":"
2544: 00        -         .byte NULL
2545: a2 01     -         ldx #value
2547: f0 21     -         beq !failed+
2549: ee 42 3e  -         inc TEST_PASS_COUNT
254c: ad 86 02  -         lda foreground_color
254f: 48        -         pha
2550: a9 05     -         lda #color
2552: 8d 86 02  -         sta foreground_color
2555: a2 00     -         ldx #$00
2557: bd 3d 3e  -         lda msg,x
255a: f0 07     -         beq !done+
255c: 20 d2 ff  -         jsr kernal_chrout
255f: e8        -         inx
2560: 4c 57 25  -         jmp !loop-
2563: 68        -         pla
2564: 8d 86 02  -         sta foreground_color
2567: 4c 85 25  -         jmp !done+
256a: ad 86 02  -         lda foreground_color
256d: 48        -         pha
256e: a9 02     -         lda #color
2570: 8d 86 02  -         sta foreground_color
2573: a2 00     -         ldx #$00
2575: bd 3f 3e  -         lda msg,x
2578: f0 07     -         beq !done+
257a: 20 d2 ff  -         jsr kernal_chrout
257d: e8        -         inx
257e: 4c 75 25  -         jmp !loop-
2581: 68        -         pla
2582: 8d 86 02  -         sta foreground_color
2585: a2 00     -         ldx #$00
2587: bd 96 25  -         lda msg,x
258a: f0 07     -         beq !done+
258c: 20 d2 ff  -         jsr kernal_chrout
258f: e8        -         inx
2590: 4c 87 25  -         jmp !loop-
2593: 4c 98 25  -         jmp !done+
2596: 0d 00     - memory: .byte RETURN, NULL
2598: ae 43 3e  -         ldx TEST_NAME_COUNT
259b: e0 15     -         cpx #TESTS_PER_PAGE
259d: d0 5d     -         bne !exit+
259f: ad 86 02  -         lda foreground_color
25a2: 48        -         pha
25a3: a9 01     -         lda #color
25a5: 8d 86 02  -         sta foreground_color
25a8: a2 00     -         ldx #$00
25aa: bd bd 25  -         lda msg,x
25ad: f0 07     -         beq !done+
25af: 20 d2 ff  -         jsr kernal_chrout
25b2: e8        -         inx
25b3: 4c aa 25  -         jmp !loop-
25b6: 68        -         pla
25b7: 8d 86 02  -         sta foreground_color
25ba: 4c dc 25  -         jmp !no_key+
25bd: 0d        - memory: .byte RETURN
25be: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
25ce: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
25da: 0d 00     -         .byte RETURN, NULL
25dc: 20 9f ff  -         jsr scnkey  // scan keyboard
25df: 20 e4 ff  -         jsr getin	// put result into A
25e2: f0 f8     -         beq !no_key-
25e4: a2 00     -         ldx #$00
25e6: bd f5 25  -         lda msg,x
25e9: f0 07     -         beq !done+
25eb: 20 d2 ff  -         jsr kernal_chrout
25ee: e8        -         inx
25ef: 4c e6 25  -         jmp !loop-
25f2: 4c f7 25  -         jmp !done+
25f5: 0d 00     - newline:.byte RETURN, NULL
25f7: a2 00     -         ldx #$00
25f9: 8e 43 3e  -         stx TEST_NAME_COUNT
25fc: 60        -         rts
25fd: ee 43 3e  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
2600: ad 86 02  -         lda foreground_color
2603: 48        -         pha
2604: a9 0f     -         lda #color
2606: 8d 86 02  -         sta foreground_color
2609: a2 00     -         ldx #$00
260b: bd 1e 26  -         lda msg,x
260e: f0 07     -         beq !done+
2610: 20 d2 ff  -         jsr kernal_chrout
2613: e8        -         inx
2614: 4c 0b 26  -         jmp !loop-
2617: 68        -         pla
2618: 8d 86 02  -         sta foreground_color
261b: 4c 31 26  -         jmp !done+
261e: 20 20     - memory: .fill spacing, spacebar
2620: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
262d: 2e 2e 2e  -         .text "..."
2630: 00        -         .byte NULL
2631: 20 5d 08  -         jsr SW16
2634: 01 00     -         .byte $01, effective_address(ea,*) }
2636: 10        -         .byte opcode(op, register)
2637: dc fe     -         .word address.getValue()
2639: 01 05     -         .byte $01, effective_address(ea,*) }
263b: 10        -         .byte opcode(op, register)
263c: 23 01     -         .word address.getValue()
263e: 01 00     -         .byte $01, effective_address(ea,*) }
2640: 00        -         .byte $00 }
2641: ee 41 3e  -         inc TEST_COUNT
2644: ad 86 02  -         lda foreground_color
2647: 48        -         pha
2648: a9 0e     -         lda #color
264a: 8d 86 02  -         sta foreground_color
264d: a2 00     -         ldx #$00
264f: bd 62 26  -         lda msg,x
2652: f0 07     -         beq !done+
2654: 20 d2 ff  -         jsr kernal_chrout
2657: e8        -         inx
2658: 4c 4f 26  -         jmp !loop-
265b: 68        -         pla
265c: 8d 86 02  -         sta foreground_color
265f: 4c 66 26  -         jmp !done+
2662: 20        - memory: .byte spacebar
2663: 31        -         .text description
2664: 3a        -         .text ":"
2665: 00        -         .byte NULL
2666: a6 17     -         ldx rl(register.getValue())
2668: a4 18     -         ldy rh(register.getValue())
266a: e0 dc     -         cpx #<value
266c: d0 25     -         bne !failed+
266e: c0 fe     -         cpy #>value
2670: d0 21     -         bne !failed+
2672: ee 42 3e  -         inc TEST_PASS_COUNT
2675: ad 86 02  -         lda foreground_color
2678: 48        -         pha
2679: a9 05     -         lda #color
267b: 8d 86 02  -         sta foreground_color
267e: a2 00     -         ldx #$00
2680: bd 3d 3e  -         lda msg,x
2683: f0 07     -         beq !done+
2685: 20 d2 ff  -         jsr kernal_chrout
2688: e8        -         inx
2689: 4c 80 26  -         jmp !loop-
268c: 68        -         pla
268d: 8d 86 02  -         sta foreground_color
2690: 4c ae 26  -         jmp !done+
2693: ad 86 02  -         lda foreground_color
2696: 48        -         pha
2697: a9 02     -         lda #color
2699: 8d 86 02  -         sta foreground_color
269c: a2 00     -         ldx #$00
269e: bd 3f 3e  -         lda msg,x
26a1: f0 07     -         beq !done+
26a3: 20 d2 ff  -         jsr kernal_chrout
26a6: e8        -         inx
26a7: 4c 9e 26  -         jmp !loop-
26aa: 68        -         pla
26ab: 8d 86 02  -         sta foreground_color
26ae: a2 00     -         ldx #$00
26b0: bd bf 26  -         lda msg,x
26b3: f0 07     -         beq !done+
26b5: 20 d2 ff  -         jsr kernal_chrout
26b8: e8        -         inx
26b9: 4c b0 26  -         jmp !loop-
26bc: 4c c1 26  -         jmp !done+
26bf: 0d 00     - memory: .byte RETURN, NULL
26c1: ae 43 3e  -         ldx TEST_NAME_COUNT
26c4: e0 15     -         cpx #TESTS_PER_PAGE
26c6: d0 5d     -         bne !exit+
26c8: ad 86 02  -         lda foreground_color
26cb: 48        -         pha
26cc: a9 01     -         lda #color
26ce: 8d 86 02  -         sta foreground_color
26d1: a2 00     -         ldx #$00
26d3: bd e6 26  -         lda msg,x
26d6: f0 07     -         beq !done+
26d8: 20 d2 ff  -         jsr kernal_chrout
26db: e8        -         inx
26dc: 4c d3 26  -         jmp !loop-
26df: 68        -         pla
26e0: 8d 86 02  -         sta foreground_color
26e3: 4c 05 27  -         jmp !no_key+
26e6: 0d        - memory: .byte RETURN
26e7: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
26f7: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2703: 0d 00     -         .byte RETURN, NULL
2705: 20 9f ff  -         jsr scnkey  // scan keyboard
2708: 20 e4 ff  -         jsr getin	// put result into A
270b: f0 f8     -         beq !no_key-
270d: a2 00     -         ldx #$00
270f: bd 1e 27  -         lda msg,x
2712: f0 07     -         beq !done+
2714: 20 d2 ff  -         jsr kernal_chrout
2717: e8        -         inx
2718: 4c 0f 27  -         jmp !loop-
271b: 4c 20 27  -         jmp !done+
271e: 0d 00     - newline:.byte RETURN, NULL
2720: a2 00     -         ldx #$00
2722: 8e 43 3e  -         stx TEST_NAME_COUNT
2725: 60        -         rts
2726: ee 43 3e  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
2729: ad 86 02  -         lda foreground_color
272c: 48        -         pha
272d: a9 0f     -         lda #color
272f: 8d 86 02  -         sta foreground_color
2732: a2 00     -         ldx #$00
2734: bd 47 27  -         lda msg,x
2737: f0 07     -         beq !done+
2739: 20 d2 ff  -         jsr kernal_chrout
273c: e8        -         inx
273d: 4c 34 27  -         jmp !loop-
2740: 68        -         pla
2741: 8d 86 02  -         sta foreground_color
2744: 4c 5c 27  -         jmp !done+
2747: 20 20     - memory: .fill spacing, spacebar
2749: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
2758: 2e 2e 2e  -         .text "..."
275b: 00        -         .byte NULL
275c: 20 5d 08  -         jsr SW16
275f: 15        -         .byte opcode(op, register)
2760: 00 10     -         .word address.getValue()
2762: 10        -         .byte opcode(op, register)
2763: ff ff     -         .word address.getValue()
2765: a5        -         .byte opcode($a0, register) }
2766: 02 02     -         .byte $02, effective_address(ea,*) }
2768: 01 05     -         .byte $01, effective_address(ea,*) }
276a: 10        -         .byte opcode(op, register)
276b: dc fe     -         .word address.getValue()
276d: 01 05     -         .byte $01, effective_address(ea,*) }
276f: 10        -         .byte opcode(op, register)
2770: 23 01     -         .word address.getValue()
2772: 01 00     -         .byte $01, effective_address(ea,*) }
2774: 00        -         .byte $00 }
2775: ee 41 3e  -         inc TEST_COUNT
2778: ad 86 02  -         lda foreground_color
277b: 48        -         pha
277c: a9 0e     -         lda #color
277e: 8d 86 02  -         sta foreground_color
2781: a2 00     -         ldx #$00
2783: bd 96 27  -         lda msg,x
2786: f0 07     -         beq !done+
2788: 20 d2 ff  -         jsr kernal_chrout
278b: e8        -         inx
278c: 4c 83 27  -         jmp !loop-
278f: 68        -         pla
2790: 8d 86 02  -         sta foreground_color
2793: 4c 9a 27  -         jmp !done+
2796: 20        - memory: .byte spacebar
2797: 32        -         .text description
2798: 3a        -         .text ":"
2799: 00        -         .byte NULL
279a: a6 17     -         ldx rl(register.getValue())
279c: a4 18     -         ldy rh(register.getValue())
279e: e0 23     -         cpx #<value
27a0: d0 25     -         bne !failed+
27a2: c0 01     -         cpy #>value
27a4: d0 21     -         bne !failed+
27a6: ee 42 3e  -         inc TEST_PASS_COUNT
27a9: ad 86 02  -         lda foreground_color
27ac: 48        -         pha
27ad: a9 05     -         lda #color
27af: 8d 86 02  -         sta foreground_color
27b2: a2 00     -         ldx #$00
27b4: bd 3d 3e  -         lda msg,x
27b7: f0 07     -         beq !done+
27b9: 20 d2 ff  -         jsr kernal_chrout
27bc: e8        -         inx
27bd: 4c b4 27  -         jmp !loop-
27c0: 68        -         pla
27c1: 8d 86 02  -         sta foreground_color
27c4: 4c e2 27  -         jmp !done+
27c7: ad 86 02  -         lda foreground_color
27ca: 48        -         pha
27cb: a9 02     -         lda #color
27cd: 8d 86 02  -         sta foreground_color
27d0: a2 00     -         ldx #$00
27d2: bd 3f 3e  -         lda msg,x
27d5: f0 07     -         beq !done+
27d7: 20 d2 ff  -         jsr kernal_chrout
27da: e8        -         inx
27db: 4c d2 27  -         jmp !loop-
27de: 68        -         pla
27df: 8d 86 02  -         sta foreground_color
27e2: a2 00     -         ldx #$00
27e4: bd f3 27  -         lda msg,x
27e7: f0 07     -         beq !done+
27e9: 20 d2 ff  -         jsr kernal_chrout
27ec: e8        -         inx
27ed: 4c e4 27  -         jmp !loop-
27f0: 4c f5 27  -         jmp !done+
27f3: 0d 00     - memory: .byte RETURN, NULL
27f5: ae 43 3e  -         ldx TEST_NAME_COUNT
27f8: e0 15     -         cpx #TESTS_PER_PAGE
27fa: d0 5d     -         bne !exit+
27fc: ad 86 02  -         lda foreground_color
27ff: 48        -         pha
2800: a9 01     -         lda #color
2802: 8d 86 02  -         sta foreground_color
2805: a2 00     -         ldx #$00
2807: bd 1a 28  -         lda msg,x
280a: f0 07     -         beq !done+
280c: 20 d2 ff  -         jsr kernal_chrout
280f: e8        -         inx
2810: 4c 07 28  -         jmp !loop-
2813: 68        -         pla
2814: 8d 86 02  -         sta foreground_color
2817: 4c 39 28  -         jmp !no_key+
281a: 0d        - memory: .byte RETURN
281b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
282b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2837: 0d 00     -         .byte RETURN, NULL
2839: 20 9f ff  -         jsr scnkey  // scan keyboard
283c: 20 e4 ff  -         jsr getin	// put result into A
283f: f0 f8     -         beq !no_key-
2841: a2 00     -         ldx #$00
2843: bd 52 28  -         lda msg,x
2846: f0 07     -         beq !done+
2848: 20 d2 ff  -         jsr kernal_chrout
284b: e8        -         inx
284c: 4c 43 28  -         jmp !loop-
284f: 4c 54 28  -         jmp !done+
2852: 0d 00     - newline:.byte RETURN, NULL
2854: a2 00     -         ldx #$00
2856: 8e 43 3e  -         stx TEST_NAME_COUNT
2859: 60        -         rts
285a: ee 43 3e  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
285d: ad 86 02  -         lda foreground_color
2860: 48        -         pha
2861: a9 0f     -         lda #color
2863: 8d 86 02  -         sta foreground_color
2866: a2 00     -         ldx #$00
2868: bd 7b 28  -         lda msg,x
286b: f0 07     -         beq !done+
286d: 20 d2 ff  -         jsr kernal_chrout
2870: e8        -         inx
2871: 4c 68 28  -         jmp !loop-
2874: 68        -         pla
2875: 8d 86 02  -         sta foreground_color
2878: 4c 90 28  -         jmp !done+
287b: 20 20     - memory: .fill spacing, spacebar
287d: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
288c: 2e 2e 2e  -         .text "..."
288f: 00        -         .byte NULL
2890: 20 5d 08  -         jsr SW16
2893: 15        -         .byte opcode(op, register)
2894: 00 10     -         .word address.getValue()
2896: 10        -         .byte opcode(op, register)
2897: ff ff     -         .word address.getValue()
2899: a5        -         .byte opcode($a0, register) }
289a: 03 02     -         .byte $03, effective_address(ea,*) }
289c: 01 05     -         .byte $01, effective_address(ea,*) }
289e: 10        -         .byte opcode(op, register)
289f: dc fe     -         .word address.getValue()
28a1: 01 05     -         .byte $01, effective_address(ea,*) }
28a3: 10        -         .byte opcode(op, register)
28a4: 23 01     -         .word address.getValue()
28a6: 01 00     -         .byte $01, effective_address(ea,*) }
28a8: 00        -         .byte $00 }
28a9: ee 41 3e  -         inc TEST_COUNT
28ac: ad 86 02  -         lda foreground_color
28af: 48        -         pha
28b0: a9 0e     -         lda #color
28b2: 8d 86 02  -         sta foreground_color
28b5: a2 00     -         ldx #$00
28b7: bd ca 28  -         lda msg,x
28ba: f0 07     -         beq !done+
28bc: 20 d2 ff  -         jsr kernal_chrout
28bf: e8        -         inx
28c0: 4c b7 28  -         jmp !loop-
28c3: 68        -         pla
28c4: 8d 86 02  -         sta foreground_color
28c7: 4c ce 28  -         jmp !done+
28ca: 20        - memory: .byte spacebar
28cb: 31        -         .text description
28cc: 3a        -         .text ":"
28cd: 00        -         .byte NULL
28ce: a6 17     -         ldx rl(register.getValue())
28d0: a4 18     -         ldy rh(register.getValue())
28d2: e0 dc     -         cpx #<value
28d4: d0 25     -         bne !failed+
28d6: c0 fe     -         cpy #>value
28d8: d0 21     -         bne !failed+
28da: ee 42 3e  -         inc TEST_PASS_COUNT
28dd: ad 86 02  -         lda foreground_color
28e0: 48        -         pha
28e1: a9 05     -         lda #color
28e3: 8d 86 02  -         sta foreground_color
28e6: a2 00     -         ldx #$00
28e8: bd 3d 3e  -         lda msg,x
28eb: f0 07     -         beq !done+
28ed: 20 d2 ff  -         jsr kernal_chrout
28f0: e8        -         inx
28f1: 4c e8 28  -         jmp !loop-
28f4: 68        -         pla
28f5: 8d 86 02  -         sta foreground_color
28f8: 4c 16 29  -         jmp !done+
28fb: ad 86 02  -         lda foreground_color
28fe: 48        -         pha
28ff: a9 02     -         lda #color
2901: 8d 86 02  -         sta foreground_color
2904: a2 00     -         ldx #$00
2906: bd 3f 3e  -         lda msg,x
2909: f0 07     -         beq !done+
290b: 20 d2 ff  -         jsr kernal_chrout
290e: e8        -         inx
290f: 4c 06 29  -         jmp !loop-
2912: 68        -         pla
2913: 8d 86 02  -         sta foreground_color
2916: a2 00     -         ldx #$00
2918: bd 27 29  -         lda msg,x
291b: f0 07     -         beq !done+
291d: 20 d2 ff  -         jsr kernal_chrout
2920: e8        -         inx
2921: 4c 18 29  -         jmp !loop-
2924: 4c 29 29  -         jmp !done+
2927: 0d 00     - memory: .byte RETURN, NULL
2929: ae 43 3e  -         ldx TEST_NAME_COUNT
292c: e0 15     -         cpx #TESTS_PER_PAGE
292e: d0 5d     -         bne !exit+
2930: ad 86 02  -         lda foreground_color
2933: 48        -         pha
2934: a9 01     -         lda #color
2936: 8d 86 02  -         sta foreground_color
2939: a2 00     -         ldx #$00
293b: bd 4e 29  -         lda msg,x
293e: f0 07     -         beq !done+
2940: 20 d2 ff  -         jsr kernal_chrout
2943: e8        -         inx
2944: 4c 3b 29  -         jmp !loop-
2947: 68        -         pla
2948: 8d 86 02  -         sta foreground_color
294b: 4c 6d 29  -         jmp !no_key+
294e: 0d        - memory: .byte RETURN
294f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
295f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
296b: 0d 00     -         .byte RETURN, NULL
296d: 20 9f ff  -         jsr scnkey  // scan keyboard
2970: 20 e4 ff  -         jsr getin	// put result into A
2973: f0 f8     -         beq !no_key-
2975: a2 00     -         ldx #$00
2977: bd 86 29  -         lda msg,x
297a: f0 07     -         beq !done+
297c: 20 d2 ff  -         jsr kernal_chrout
297f: e8        -         inx
2980: 4c 77 29  -         jmp !loop-
2983: 4c 88 29  -         jmp !done+
2986: 0d 00     - newline:.byte RETURN, NULL
2988: a2 00     -         ldx #$00
298a: 8e 43 3e  -         stx TEST_NAME_COUNT
298d: 60        -         rts
298e: ee 43 3e  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
2991: ad 86 02  -         lda foreground_color
2994: 48        -         pha
2995: a9 0f     -         lda #color
2997: 8d 86 02  -         sta foreground_color
299a: a2 00     -         ldx #$00
299c: bd af 29  -         lda msg,x
299f: f0 07     -         beq !done+
29a1: 20 d2 ff  -         jsr kernal_chrout
29a4: e8        -         inx
29a5: 4c 9c 29  -         jmp !loop-
29a8: 68        -         pla
29a9: 8d 86 02  -         sta foreground_color
29ac: 4c c2 29  -         jmp !done+
29af: 20 20     - memory: .fill spacing, spacebar
29b1: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
29be: 2e 2e 2e  -         .text "..."
29c1: 00        -         .byte NULL
29c2: 20 5d 08  -         jsr SW16
29c5: 15        -         .byte opcode(op, register)
29c6: 5f 3e     -         .word address.getValue()
29c8: 14        -         .byte opcode(op, register)
29c9: 6f 3e     -         .word address.getValue()
29cb: b0        -         .byte opcode($b0, register) }
29cc: 55        -         .byte opcode($50, register) }
29cd: 24        -         .byte opcode($20, register) }
29ce: d5        -         .byte opcode($d0, register) }
29cf: 04 fa     -         .byte $04, effective_address(ea,*) }
29d1: 00        -         .byte $00 }
29d2: ee 41 3e  -         inc TEST_COUNT
29d5: ad 86 02  -         lda foreground_color
29d8: 48        -         pha
29d9: a9 0e     -         lda #color
29db: 8d 86 02  -         sta foreground_color
29de: a2 00     -         ldx #$00
29e0: bd f3 29  -         lda msg,x
29e3: f0 07     -         beq !done+
29e5: 20 d2 ff  -         jsr kernal_chrout
29e8: e8        -         inx
29e9: 4c e0 29  -         jmp !loop-
29ec: 68        -         pla
29ed: 8d 86 02  -         sta foreground_color
29f0: 4c f9 29  -         jmp !done+
29f3: 20        - memory: .byte spacebar
29f4: 43 4c 52  -         .text description
29f7: 3a        -         .text ":"
29f8: 00        -         .byte NULL
29f9: a2 ff     -         ldx #$ff
29fb: e8        -         inx
29fc: e0 10     -         cpx #size
29fe: f0 0a     -         beq !success+
2a00: a9 00     -         lda #constant
2a02: dd 5f 3e  -         cmp source,x
2a05: f0 f4     -         beq !loop-
2a07: 4c 2b 2a  -         jmp !failed+
2a0a: ee 42 3e  -         inc TEST_PASS_COUNT
2a0d: ad 86 02  -         lda foreground_color
2a10: 48        -         pha
2a11: a9 05     -         lda #color
2a13: 8d 86 02  -         sta foreground_color
2a16: a2 00     -         ldx #$00
2a18: bd 3d 3e  -         lda msg,x
2a1b: f0 07     -         beq !done+
2a1d: 20 d2 ff  -         jsr kernal_chrout
2a20: e8        -         inx
2a21: 4c 18 2a  -         jmp !loop-
2a24: 68        -         pla
2a25: 8d 86 02  -         sta foreground_color
2a28: 4c 46 2a  -         jmp !done+
2a2b: ad 86 02  -         lda foreground_color
2a2e: 48        -         pha
2a2f: a9 02     -         lda #color
2a31: 8d 86 02  -         sta foreground_color
2a34: a2 00     -         ldx #$00
2a36: bd 3f 3e  -         lda msg,x
2a39: f0 07     -         beq !done+
2a3b: 20 d2 ff  -         jsr kernal_chrout
2a3e: e8        -         inx
2a3f: 4c 36 2a  -         jmp !loop-
2a42: 68        -         pla
2a43: 8d 86 02  -         sta foreground_color
2a46: a2 00     -         ldx #$00
2a48: bd 57 2a  -         lda msg,x
2a4b: f0 07     -         beq !done+
2a4d: 20 d2 ff  -         jsr kernal_chrout
2a50: e8        -         inx
2a51: 4c 48 2a  -         jmp !loop-
2a54: 4c 59 2a  -         jmp !done+
2a57: 0d 00     - memory: .byte RETURN, NULL
2a59: ae 43 3e  -         ldx TEST_NAME_COUNT
2a5c: e0 15     -         cpx #TESTS_PER_PAGE
2a5e: d0 5d     -         bne !exit+
2a60: ad 86 02  -         lda foreground_color
2a63: 48        -         pha
2a64: a9 01     -         lda #color
2a66: 8d 86 02  -         sta foreground_color
2a69: a2 00     -         ldx #$00
2a6b: bd 7e 2a  -         lda msg,x
2a6e: f0 07     -         beq !done+
2a70: 20 d2 ff  -         jsr kernal_chrout
2a73: e8        -         inx
2a74: 4c 6b 2a  -         jmp !loop-
2a77: 68        -         pla
2a78: 8d 86 02  -         sta foreground_color
2a7b: 4c 9d 2a  -         jmp !no_key+
2a7e: 0d        - memory: .byte RETURN
2a7f: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2a8f: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2a9b: 0d 00     -         .byte RETURN, NULL
2a9d: 20 9f ff  -         jsr scnkey  // scan keyboard
2aa0: 20 e4 ff  -         jsr getin	// put result into A
2aa3: f0 f8     -         beq !no_key-
2aa5: a2 00     -         ldx #$00
2aa7: bd b6 2a  -         lda msg,x
2aaa: f0 07     -         beq !done+
2aac: 20 d2 ff  -         jsr kernal_chrout
2aaf: e8        -         inx
2ab0: 4c a7 2a  -         jmp !loop-
2ab3: 4c b8 2a  -         jmp !done+
2ab6: 0d 00     - newline:.byte RETURN, NULL
2ab8: a2 00     -         ldx #$00
2aba: 8e 43 3e  -         stx TEST_NAME_COUNT
2abd: 60        -         rts
2abe: ee 43 3e  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
2ac1: ad 86 02  -         lda foreground_color
2ac4: 48        -         pha
2ac5: a9 0f     -         lda #color
2ac7: 8d 86 02  -         sta foreground_color
2aca: a2 00     -         ldx #$00
2acc: bd df 2a  -         lda msg,x
2acf: f0 07     -         beq !done+
2ad1: 20 d2 ff  -         jsr kernal_chrout
2ad4: e8        -         inx
2ad5: 4c cc 2a  -         jmp !loop-
2ad8: 68        -         pla
2ad9: 8d 86 02  -         sta foreground_color
2adc: 4c f2 2a  -         jmp !done+
2adf: 20 20     - memory: .fill spacing, spacebar
2ae1: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
2aee: 2e 2e 2e  -         .text "..."
2af1: 00        -         .byte NULL
2af2: 20 5d 08  -         jsr SW16
2af5: 15        -         .byte opcode(op, register)
2af6: 0a 00     -         .word address.getValue()
2af8: b0        -         .byte opcode($b0, register) }
2af9: b5        -         .byte opcode($b0, register) }
2afa: 05 07     -         .byte $05, effective_address(ea,*) }
2afc: 01 00     -         .byte $01, effective_address(ea,*) }
2afe: 10        -         .byte opcode(op, register)
2aff: dc fe     -         .word address.getValue()
2b01: 01 05     -         .byte $01, effective_address(ea,*) }
2b03: 10        -         .byte opcode(op, register)
2b04: 23 01     -         .word address.getValue()
2b06: 01 00     -         .byte $01, effective_address(ea,*) }
2b08: 00        -         .byte $00 }
2b09: ee 41 3e  -         inc TEST_COUNT
2b0c: ad 86 02  -         lda foreground_color
2b0f: 48        -         pha
2b10: a9 0e     -         lda #color
2b12: 8d 86 02  -         sta foreground_color
2b15: a2 00     -         ldx #$00
2b17: bd 2a 2b  -         lda msg,x
2b1a: f0 07     -         beq !done+
2b1c: 20 d2 ff  -         jsr kernal_chrout
2b1f: e8        -         inx
2b20: 4c 17 2b  -         jmp !loop-
2b23: 68        -         pla
2b24: 8d 86 02  -         sta foreground_color
2b27: 4c 2e 2b  -         jmp !done+
2b2a: 20        - memory: .byte spacebar
2b2b: 32        -         .text description
2b2c: 3a        -         .text ":"
2b2d: 00        -         .byte NULL
2b2e: a6 17     -         ldx rl(register.getValue())
2b30: a4 18     -         ldy rh(register.getValue())
2b32: e0 23     -         cpx #<value
2b34: d0 25     -         bne !failed+
2b36: c0 01     -         cpy #>value
2b38: d0 21     -         bne !failed+
2b3a: ee 42 3e  -         inc TEST_PASS_COUNT
2b3d: ad 86 02  -         lda foreground_color
2b40: 48        -         pha
2b41: a9 05     -         lda #color
2b43: 8d 86 02  -         sta foreground_color
2b46: a2 00     -         ldx #$00
2b48: bd 3d 3e  -         lda msg,x
2b4b: f0 07     -         beq !done+
2b4d: 20 d2 ff  -         jsr kernal_chrout
2b50: e8        -         inx
2b51: 4c 48 2b  -         jmp !loop-
2b54: 68        -         pla
2b55: 8d 86 02  -         sta foreground_color
2b58: 4c 76 2b  -         jmp !done+
2b5b: ad 86 02  -         lda foreground_color
2b5e: 48        -         pha
2b5f: a9 02     -         lda #color
2b61: 8d 86 02  -         sta foreground_color
2b64: a2 00     -         ldx #$00
2b66: bd 3f 3e  -         lda msg,x
2b69: f0 07     -         beq !done+
2b6b: 20 d2 ff  -         jsr kernal_chrout
2b6e: e8        -         inx
2b6f: 4c 66 2b  -         jmp !loop-
2b72: 68        -         pla
2b73: 8d 86 02  -         sta foreground_color
2b76: a2 00     -         ldx #$00
2b78: bd 87 2b  -         lda msg,x
2b7b: f0 07     -         beq !done+
2b7d: 20 d2 ff  -         jsr kernal_chrout
2b80: e8        -         inx
2b81: 4c 78 2b  -         jmp !loop-
2b84: 4c 89 2b  -         jmp !done+
2b87: 0d 00     - memory: .byte RETURN, NULL
2b89: ae 43 3e  -         ldx TEST_NAME_COUNT
2b8c: e0 15     -         cpx #TESTS_PER_PAGE
2b8e: d0 5d     -         bne !exit+
2b90: ad 86 02  -         lda foreground_color
2b93: 48        -         pha
2b94: a9 01     -         lda #color
2b96: 8d 86 02  -         sta foreground_color
2b99: a2 00     -         ldx #$00
2b9b: bd ae 2b  -         lda msg,x
2b9e: f0 07     -         beq !done+
2ba0: 20 d2 ff  -         jsr kernal_chrout
2ba3: e8        -         inx
2ba4: 4c 9b 2b  -         jmp !loop-
2ba7: 68        -         pla
2ba8: 8d 86 02  -         sta foreground_color
2bab: 4c cd 2b  -         jmp !no_key+
2bae: 0d        - memory: .byte RETURN
2baf: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2bbf: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2bcb: 0d 00     -         .byte RETURN, NULL
2bcd: 20 9f ff  -         jsr scnkey  // scan keyboard
2bd0: 20 e4 ff  -         jsr getin	// put result into A
2bd3: f0 f8     -         beq !no_key-
2bd5: a2 00     -         ldx #$00
2bd7: bd e6 2b  -         lda msg,x
2bda: f0 07     -         beq !done+
2bdc: 20 d2 ff  -         jsr kernal_chrout
2bdf: e8        -         inx
2be0: 4c d7 2b  -         jmp !loop-
2be3: 4c e8 2b  -         jmp !done+
2be6: 0d 00     - newline:.byte RETURN, NULL
2be8: a2 00     -         ldx #$00
2bea: 8e 43 3e  -         stx TEST_NAME_COUNT
2bed: 60        -         rts
2bee: ee 43 3e  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
2bf1: ad 86 02  -         lda foreground_color
2bf4: 48        -         pha
2bf5: a9 0f     -         lda #color
2bf7: 8d 86 02  -         sta foreground_color
2bfa: a2 00     -         ldx #$00
2bfc: bd 0f 2c  -         lda msg,x
2bff: f0 07     -         beq !done+
2c01: 20 d2 ff  -         jsr kernal_chrout
2c04: e8        -         inx
2c05: 4c fc 2b  -         jmp !loop-
2c08: 68        -         pla
2c09: 8d 86 02  -         sta foreground_color
2c0c: 4c 20 2c  -         jmp !done+
2c0f: 20 20     - memory: .fill spacing, spacebar
2c11: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
2c1c: 2e 2e 2e  -         .text "..."
2c1f: 00        -         .byte NULL
2c20: 20 5d 08  -         jsr SW16
2c23: b0        -         .byte opcode($b0, register) }
2c24: 06 07     -         .byte $06, effective_address(ea,*) }
2c26: 01 00     -         .byte $01, effective_address(ea,*) }
2c28: 10        -         .byte opcode(op, register)
2c29: dc fe     -         .word address.getValue()
2c2b: 01 05     -         .byte $01, effective_address(ea,*) }
2c2d: 10        -         .byte opcode(op, register)
2c2e: 23 01     -         .word address.getValue()
2c30: 01 00     -         .byte $01, effective_address(ea,*) }
2c32: 00        -         .byte $00 }
2c33: ee 41 3e  -         inc TEST_COUNT
2c36: ad 86 02  -         lda foreground_color
2c39: 48        -         pha
2c3a: a9 0e     -         lda #color
2c3c: 8d 86 02  -         sta foreground_color
2c3f: a2 00     -         ldx #$00
2c41: bd 54 2c  -         lda msg,x
2c44: f0 07     -         beq !done+
2c46: 20 d2 ff  -         jsr kernal_chrout
2c49: e8        -         inx
2c4a: 4c 41 2c  -         jmp !loop-
2c4d: 68        -         pla
2c4e: 8d 86 02  -         sta foreground_color
2c51: 4c 58 2c  -         jmp !done+
2c54: 20        - memory: .byte spacebar
2c55: 32        -         .text description
2c56: 3a        -         .text ":"
2c57: 00        -         .byte NULL
2c58: a6 17     -         ldx rl(register.getValue())
2c5a: a4 18     -         ldy rh(register.getValue())
2c5c: e0 23     -         cpx #<value
2c5e: d0 25     -         bne !failed+
2c60: c0 01     -         cpy #>value
2c62: d0 21     -         bne !failed+
2c64: ee 42 3e  -         inc TEST_PASS_COUNT
2c67: ad 86 02  -         lda foreground_color
2c6a: 48        -         pha
2c6b: a9 05     -         lda #color
2c6d: 8d 86 02  -         sta foreground_color
2c70: a2 00     -         ldx #$00
2c72: bd 3d 3e  -         lda msg,x
2c75: f0 07     -         beq !done+
2c77: 20 d2 ff  -         jsr kernal_chrout
2c7a: e8        -         inx
2c7b: 4c 72 2c  -         jmp !loop-
2c7e: 68        -         pla
2c7f: 8d 86 02  -         sta foreground_color
2c82: 4c a0 2c  -         jmp !done+
2c85: ad 86 02  -         lda foreground_color
2c88: 48        -         pha
2c89: a9 02     -         lda #color
2c8b: 8d 86 02  -         sta foreground_color
2c8e: a2 00     -         ldx #$00
2c90: bd 3f 3e  -         lda msg,x
2c93: f0 07     -         beq !done+
2c95: 20 d2 ff  -         jsr kernal_chrout
2c98: e8        -         inx
2c99: 4c 90 2c  -         jmp !loop-
2c9c: 68        -         pla
2c9d: 8d 86 02  -         sta foreground_color
2ca0: a2 00     -         ldx #$00
2ca2: bd b1 2c  -         lda msg,x
2ca5: f0 07     -         beq !done+
2ca7: 20 d2 ff  -         jsr kernal_chrout
2caa: e8        -         inx
2cab: 4c a2 2c  -         jmp !loop-
2cae: 4c b3 2c  -         jmp !done+
2cb1: 0d 00     - memory: .byte RETURN, NULL
2cb3: ae 43 3e  -         ldx TEST_NAME_COUNT
2cb6: e0 15     -         cpx #TESTS_PER_PAGE
2cb8: d0 5d     -         bne !exit+
2cba: ad 86 02  -         lda foreground_color
2cbd: 48        -         pha
2cbe: a9 01     -         lda #color
2cc0: 8d 86 02  -         sta foreground_color
2cc3: a2 00     -         ldx #$00
2cc5: bd d8 2c  -         lda msg,x
2cc8: f0 07     -         beq !done+
2cca: 20 d2 ff  -         jsr kernal_chrout
2ccd: e8        -         inx
2cce: 4c c5 2c  -         jmp !loop-
2cd1: 68        -         pla
2cd2: 8d 86 02  -         sta foreground_color
2cd5: 4c f7 2c  -         jmp !no_key+
2cd8: 0d        - memory: .byte RETURN
2cd9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2ce9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2cf5: 0d 00     -         .byte RETURN, NULL
2cf7: 20 9f ff  -         jsr scnkey  // scan keyboard
2cfa: 20 e4 ff  -         jsr getin	// put result into A
2cfd: f0 f8     -         beq !no_key-
2cff: a2 00     -         ldx #$00
2d01: bd 10 2d  -         lda msg,x
2d04: f0 07     -         beq !done+
2d06: 20 d2 ff  -         jsr kernal_chrout
2d09: e8        -         inx
2d0a: 4c 01 2d  -         jmp !loop-
2d0d: 4c 12 2d  -         jmp !done+
2d10: 0d 00     - newline:.byte RETURN, NULL
2d12: a2 00     -         ldx #$00
2d14: 8e 43 3e  -         stx TEST_NAME_COUNT
2d17: 60        -         rts
2d18: ee 43 3e  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
2d1b: ad 86 02  -         lda foreground_color
2d1e: 48        -         pha
2d1f: a9 0f     -         lda #color
2d21: 8d 86 02  -         sta foreground_color
2d24: a2 00     -         ldx #$00
2d26: bd 39 2d  -         lda msg,x
2d29: f0 07     -         beq !done+
2d2b: 20 d2 ff  -         jsr kernal_chrout
2d2e: e8        -         inx
2d2f: 4c 26 2d  -         jmp !loop-
2d32: 68        -         pla
2d33: 8d 86 02  -         sta foreground_color
2d36: 4c 4b 2d  -         jmp !done+
2d39: 20 20     - memory: .fill spacing, spacebar
2d3b: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
2d47: 2e 2e 2e  -         .text "..."
2d4a: 00        -         .byte NULL
2d4b: 20 5d 08  -         jsr SW16
2d4e: 15        -         .byte opcode(op, register)
2d4f: 0a 00     -         .word address.getValue()
2d51: b0        -         .byte opcode($b0, register) }
2d52: a5        -         .byte opcode($a0, register) }
2d53: 07 07     -         .byte $07, effective_address(ea,*) }
2d55: 01 00     -         .byte $01, effective_address(ea,*) }
2d57: 10        -         .byte opcode(op, register)
2d58: dc fe     -         .word address.getValue()
2d5a: 01 05     -         .byte $01, effective_address(ea,*) }
2d5c: 10        -         .byte opcode(op, register)
2d5d: 23 01     -         .word address.getValue()
2d5f: 01 00     -         .byte $01, effective_address(ea,*) }
2d61: 00        -         .byte $00 }
2d62: ee 41 3e  -         inc TEST_COUNT
2d65: ad 86 02  -         lda foreground_color
2d68: 48        -         pha
2d69: a9 0e     -         lda #color
2d6b: 8d 86 02  -         sta foreground_color
2d6e: a2 00     -         ldx #$00
2d70: bd 83 2d  -         lda msg,x
2d73: f0 07     -         beq !done+
2d75: 20 d2 ff  -         jsr kernal_chrout
2d78: e8        -         inx
2d79: 4c 70 2d  -         jmp !loop-
2d7c: 68        -         pla
2d7d: 8d 86 02  -         sta foreground_color
2d80: 4c 87 2d  -         jmp !done+
2d83: 20        - memory: .byte spacebar
2d84: 32        -         .text description
2d85: 3a        -         .text ":"
2d86: 00        -         .byte NULL
2d87: a6 17     -         ldx rl(register.getValue())
2d89: a4 18     -         ldy rh(register.getValue())
2d8b: e0 23     -         cpx #<value
2d8d: d0 25     -         bne !failed+
2d8f: c0 01     -         cpy #>value
2d91: d0 21     -         bne !failed+
2d93: ee 42 3e  -         inc TEST_PASS_COUNT
2d96: ad 86 02  -         lda foreground_color
2d99: 48        -         pha
2d9a: a9 05     -         lda #color
2d9c: 8d 86 02  -         sta foreground_color
2d9f: a2 00     -         ldx #$00
2da1: bd 3d 3e  -         lda msg,x
2da4: f0 07     -         beq !done+
2da6: 20 d2 ff  -         jsr kernal_chrout
2da9: e8        -         inx
2daa: 4c a1 2d  -         jmp !loop-
2dad: 68        -         pla
2dae: 8d 86 02  -         sta foreground_color
2db1: 4c cf 2d  -         jmp !done+
2db4: ad 86 02  -         lda foreground_color
2db7: 48        -         pha
2db8: a9 02     -         lda #color
2dba: 8d 86 02  -         sta foreground_color
2dbd: a2 00     -         ldx #$00
2dbf: bd 3f 3e  -         lda msg,x
2dc2: f0 07     -         beq !done+
2dc4: 20 d2 ff  -         jsr kernal_chrout
2dc7: e8        -         inx
2dc8: 4c bf 2d  -         jmp !loop-
2dcb: 68        -         pla
2dcc: 8d 86 02  -         sta foreground_color
2dcf: a2 00     -         ldx #$00
2dd1: bd e0 2d  -         lda msg,x
2dd4: f0 07     -         beq !done+
2dd6: 20 d2 ff  -         jsr kernal_chrout
2dd9: e8        -         inx
2dda: 4c d1 2d  -         jmp !loop-
2ddd: 4c e2 2d  -         jmp !done+
2de0: 0d 00     - memory: .byte RETURN, NULL
2de2: ae 43 3e  -         ldx TEST_NAME_COUNT
2de5: e0 15     -         cpx #TESTS_PER_PAGE
2de7: d0 5d     -         bne !exit+
2de9: ad 86 02  -         lda foreground_color
2dec: 48        -         pha
2ded: a9 01     -         lda #color
2def: 8d 86 02  -         sta foreground_color
2df2: a2 00     -         ldx #$00
2df4: bd 07 2e  -         lda msg,x
2df7: f0 07     -         beq !done+
2df9: 20 d2 ff  -         jsr kernal_chrout
2dfc: e8        -         inx
2dfd: 4c f4 2d  -         jmp !loop-
2e00: 68        -         pla
2e01: 8d 86 02  -         sta foreground_color
2e04: 4c 26 2e  -         jmp !no_key+
2e07: 0d        - memory: .byte RETURN
2e08: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2e18: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2e24: 0d 00     -         .byte RETURN, NULL
2e26: 20 9f ff  -         jsr scnkey  // scan keyboard
2e29: 20 e4 ff  -         jsr getin	// put result into A
2e2c: f0 f8     -         beq !no_key-
2e2e: a2 00     -         ldx #$00
2e30: bd 3f 2e  -         lda msg,x
2e33: f0 07     -         beq !done+
2e35: 20 d2 ff  -         jsr kernal_chrout
2e38: e8        -         inx
2e39: 4c 30 2e  -         jmp !loop-
2e3c: 4c 41 2e  -         jmp !done+
2e3f: 0d 00     - newline:.byte RETURN, NULL
2e41: a2 00     -         ldx #$00
2e43: 8e 43 3e  -         stx TEST_NAME_COUNT
2e46: 60        -         rts
2e47: ee 43 3e  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
2e4a: ad 86 02  -         lda foreground_color
2e4d: 48        -         pha
2e4e: a9 0f     -         lda #color
2e50: 8d 86 02  -         sta foreground_color
2e53: a2 00     -         ldx #$00
2e55: bd 68 2e  -         lda msg,x
2e58: f0 07     -         beq !done+
2e5a: 20 d2 ff  -         jsr kernal_chrout
2e5d: e8        -         inx
2e5e: 4c 55 2e  -         jmp !loop-
2e61: 68        -         pla
2e62: 8d 86 02  -         sta foreground_color
2e65: 4c 7a 2e  -         jmp !done+
2e68: 20 20     - memory: .fill spacing, spacebar
2e6a: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
2e76: 2e 2e 2e  -         .text "..."
2e79: 00        -         .byte NULL
2e7a: 20 5d 08  -         jsr SW16
2e7d: 15        -         .byte opcode(op, register)
2e7e: 01 00     -         .word address.getValue()
2e80: b0        -         .byte opcode($b0, register) }
2e81: b5        -         .byte opcode($b0, register) }
2e82: 08 07     -         .byte $08, effective_address(ea,*) }
2e84: 01 00     -         .byte $01, effective_address(ea,*) }
2e86: 10        -         .byte opcode(op, register)
2e87: dc fe     -         .word address.getValue()
2e89: 01 05     -         .byte $01, effective_address(ea,*) }
2e8b: 10        -         .byte opcode(op, register)
2e8c: 23 01     -         .word address.getValue()
2e8e: 01 00     -         .byte $01, effective_address(ea,*) }
2e90: 00        -         .byte $00 }
2e91: ee 41 3e  -         inc TEST_COUNT
2e94: ad 86 02  -         lda foreground_color
2e97: 48        -         pha
2e98: a9 0e     -         lda #color
2e9a: 8d 86 02  -         sta foreground_color
2e9d: a2 00     -         ldx #$00
2e9f: bd b2 2e  -         lda msg,x
2ea2: f0 07     -         beq !done+
2ea4: 20 d2 ff  -         jsr kernal_chrout
2ea7: e8        -         inx
2ea8: 4c 9f 2e  -         jmp !loop-
2eab: 68        -         pla
2eac: 8d 86 02  -         sta foreground_color
2eaf: 4c b6 2e  -         jmp !done+
2eb2: 20        - memory: .byte spacebar
2eb3: 32        -         .text description
2eb4: 3a        -         .text ":"
2eb5: 00        -         .byte NULL
2eb6: a6 17     -         ldx rl(register.getValue())
2eb8: a4 18     -         ldy rh(register.getValue())
2eba: e0 23     -         cpx #<value
2ebc: d0 25     -         bne !failed+
2ebe: c0 01     -         cpy #>value
2ec0: d0 21     -         bne !failed+
2ec2: ee 42 3e  -         inc TEST_PASS_COUNT
2ec5: ad 86 02  -         lda foreground_color
2ec8: 48        -         pha
2ec9: a9 05     -         lda #color
2ecb: 8d 86 02  -         sta foreground_color
2ece: a2 00     -         ldx #$00
2ed0: bd 3d 3e  -         lda msg,x
2ed3: f0 07     -         beq !done+
2ed5: 20 d2 ff  -         jsr kernal_chrout
2ed8: e8        -         inx
2ed9: 4c d0 2e  -         jmp !loop-
2edc: 68        -         pla
2edd: 8d 86 02  -         sta foreground_color
2ee0: 4c fe 2e  -         jmp !done+
2ee3: ad 86 02  -         lda foreground_color
2ee6: 48        -         pha
2ee7: a9 02     -         lda #color
2ee9: 8d 86 02  -         sta foreground_color
2eec: a2 00     -         ldx #$00
2eee: bd 3f 3e  -         lda msg,x
2ef1: f0 07     -         beq !done+
2ef3: 20 d2 ff  -         jsr kernal_chrout
2ef6: e8        -         inx
2ef7: 4c ee 2e  -         jmp !loop-
2efa: 68        -         pla
2efb: 8d 86 02  -         sta foreground_color
2efe: a2 00     -         ldx #$00
2f00: bd 0f 2f  -         lda msg,x
2f03: f0 07     -         beq !done+
2f05: 20 d2 ff  -         jsr kernal_chrout
2f08: e8        -         inx
2f09: 4c 00 2f  -         jmp !loop-
2f0c: 4c 11 2f  -         jmp !done+
2f0f: 0d 00     - memory: .byte RETURN, NULL
2f11: ae 43 3e  -         ldx TEST_NAME_COUNT
2f14: e0 15     -         cpx #TESTS_PER_PAGE
2f16: d0 5d     -         bne !exit+
2f18: ad 86 02  -         lda foreground_color
2f1b: 48        -         pha
2f1c: a9 01     -         lda #color
2f1e: 8d 86 02  -         sta foreground_color
2f21: a2 00     -         ldx #$00
2f23: bd 36 2f  -         lda msg,x
2f26: f0 07     -         beq !done+
2f28: 20 d2 ff  -         jsr kernal_chrout
2f2b: e8        -         inx
2f2c: 4c 23 2f  -         jmp !loop-
2f2f: 68        -         pla
2f30: 8d 86 02  -         sta foreground_color
2f33: 4c 55 2f  -         jmp !no_key+
2f36: 0d        - memory: .byte RETURN
2f37: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2f47: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2f53: 0d 00     -         .byte RETURN, NULL
2f55: 20 9f ff  -         jsr scnkey  // scan keyboard
2f58: 20 e4 ff  -         jsr getin	// put result into A
2f5b: f0 f8     -         beq !no_key-
2f5d: a2 00     -         ldx #$00
2f5f: bd 6e 2f  -         lda msg,x
2f62: f0 07     -         beq !done+
2f64: 20 d2 ff  -         jsr kernal_chrout
2f67: e8        -         inx
2f68: 4c 5f 2f  -         jmp !loop-
2f6b: 4c 70 2f  -         jmp !done+
2f6e: 0d 00     - newline:.byte RETURN, NULL
2f70: a2 00     -         ldx #$00
2f72: 8e 43 3e  -         stx TEST_NAME_COUNT
2f75: 60        -         rts
2f76: ee 43 3e  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
2f79: ad 86 02  -         lda foreground_color
2f7c: 48        -         pha
2f7d: a9 0f     -         lda #color
2f7f: 8d 86 02  -         sta foreground_color
2f82: a2 00     -         ldx #$00
2f84: bd 97 2f  -         lda msg,x
2f87: f0 07     -         beq !done+
2f89: 20 d2 ff  -         jsr kernal_chrout
2f8c: e8        -         inx
2f8d: 4c 84 2f  -         jmp !loop-
2f90: 68        -         pla
2f91: 8d 86 02  -         sta foreground_color
2f94: 4c aa 2f  -         jmp !done+
2f97: 20 20     - memory: .fill spacing, spacebar
2f99: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
2fa6: 2e 2e 2e  -         .text "..."
2fa9: 00        -         .byte NULL
2faa: 20 5d 08  -         jsr SW16
2fad: 15        -         .byte opcode(op, register)
2fae: 02 00     -         .word address.getValue()
2fb0: b0        -         .byte opcode($b0, register) }
2fb1: b5        -         .byte opcode($b0, register) }
2fb2: 09 07     -         .byte $09, effective_address(ea,*) }
2fb4: 01 00     -         .byte $01, effective_address(ea,*) }
2fb6: 10        -         .byte opcode(op, register)
2fb7: dc fe     -         .word address.getValue()
2fb9: 01 05     -         .byte $01, effective_address(ea,*) }
2fbb: 10        -         .byte opcode(op, register)
2fbc: 23 01     -         .word address.getValue()
2fbe: 01 00     -         .byte $01, effective_address(ea,*) }
2fc0: 00        -         .byte $00 }
2fc1: ee 41 3e  -         inc TEST_COUNT
2fc4: ad 86 02  -         lda foreground_color
2fc7: 48        -         pha
2fc8: a9 0e     -         lda #color
2fca: 8d 86 02  -         sta foreground_color
2fcd: a2 00     -         ldx #$00
2fcf: bd e2 2f  -         lda msg,x
2fd2: f0 07     -         beq !done+
2fd4: 20 d2 ff  -         jsr kernal_chrout
2fd7: e8        -         inx
2fd8: 4c cf 2f  -         jmp !loop-
2fdb: 68        -         pla
2fdc: 8d 86 02  -         sta foreground_color
2fdf: 4c e6 2f  -         jmp !done+
2fe2: 20        - memory: .byte spacebar
2fe3: 32        -         .text description
2fe4: 3a        -         .text ":"
2fe5: 00        -         .byte NULL
2fe6: a6 17     -         ldx rl(register.getValue())
2fe8: a4 18     -         ldy rh(register.getValue())
2fea: e0 23     -         cpx #<value
2fec: d0 25     -         bne !failed+
2fee: c0 01     -         cpy #>value
2ff0: d0 21     -         bne !failed+
2ff2: ee 42 3e  -         inc TEST_PASS_COUNT
2ff5: ad 86 02  -         lda foreground_color
2ff8: 48        -         pha
2ff9: a9 05     -         lda #color
2ffb: 8d 86 02  -         sta foreground_color
2ffe: a2 00     -         ldx #$00
3000: bd 3d 3e  -         lda msg,x
3003: f0 07     -         beq !done+
3005: 20 d2 ff  -         jsr kernal_chrout
3008: e8        -         inx
3009: 4c 00 30  -         jmp !loop-
300c: 68        -         pla
300d: 8d 86 02  -         sta foreground_color
3010: 4c 2e 30  -         jmp !done+
3013: ad 86 02  -         lda foreground_color
3016: 48        -         pha
3017: a9 02     -         lda #color
3019: 8d 86 02  -         sta foreground_color
301c: a2 00     -         ldx #$00
301e: bd 3f 3e  -         lda msg,x
3021: f0 07     -         beq !done+
3023: 20 d2 ff  -         jsr kernal_chrout
3026: e8        -         inx
3027: 4c 1e 30  -         jmp !loop-
302a: 68        -         pla
302b: 8d 86 02  -         sta foreground_color
302e: a2 00     -         ldx #$00
3030: bd 3f 30  -         lda msg,x
3033: f0 07     -         beq !done+
3035: 20 d2 ff  -         jsr kernal_chrout
3038: e8        -         inx
3039: 4c 30 30  -         jmp !loop-
303c: 4c 41 30  -         jmp !done+
303f: 0d 00     - memory: .byte RETURN, NULL
3041: ae 43 3e  -         ldx TEST_NAME_COUNT
3044: e0 15     -         cpx #TESTS_PER_PAGE
3046: d0 5d     -         bne !exit+
3048: ad 86 02  -         lda foreground_color
304b: 48        -         pha
304c: a9 01     -         lda #color
304e: 8d 86 02  -         sta foreground_color
3051: a2 00     -         ldx #$00
3053: bd 66 30  -         lda msg,x
3056: f0 07     -         beq !done+
3058: 20 d2 ff  -         jsr kernal_chrout
305b: e8        -         inx
305c: 4c 53 30  -         jmp !loop-
305f: 68        -         pla
3060: 8d 86 02  -         sta foreground_color
3063: 4c 85 30  -         jmp !no_key+
3066: 0d        - memory: .byte RETURN
3067: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3077: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3083: 0d 00     -         .byte RETURN, NULL
3085: 20 9f ff  -         jsr scnkey  // scan keyboard
3088: 20 e4 ff  -         jsr getin	// put result into A
308b: f0 f8     -         beq !no_key-
308d: a2 00     -         ldx #$00
308f: bd 9e 30  -         lda msg,x
3092: f0 07     -         beq !done+
3094: 20 d2 ff  -         jsr kernal_chrout
3097: e8        -         inx
3098: 4c 8f 30  -         jmp !loop-
309b: 4c a0 30  -         jmp !done+
309e: 0d 00     - newline:.byte RETURN, NULL
30a0: a2 00     -         ldx #$00
30a2: 8e 43 3e  -         stx TEST_NAME_COUNT
30a5: 60        -         rts
30a6: ee 43 3e  - BREAK_TEST:inc TEST_NAME_COUNT
30a9: ad 86 02  -         lda foreground_color
30ac: 48        -         pha
30ad: a9 0f     -         lda #color
30af: 8d 86 02  -         sta foreground_color
30b2: a2 00     -         ldx #$00
30b4: bd c7 30  -         lda msg,x
30b7: f0 07     -         beq !done+
30b9: 20 d2 ff  -         jsr kernal_chrout
30bc: e8        -         inx
30bd: 4c b4 30  -         jmp !loop-
30c0: 68        -         pla
30c1: 8d 86 02  -         sta foreground_color
30c4: 4c d2 30  -         jmp !done+
30c7: 20 20     - memory: .fill spacing, spacebar
30c9: 42 52 45 41 4b                                   -         .text name
30ce: 2e 2e 2e  -         .text "..."
30d1: 00        -         .byte NULL
30d2: a9 35     -         lda #<handler
30d4: 8d 16 03  -         sta address
30d7: a9 0a     -         lda #>handler
30d9: 8d 17 03  -         sta address+1
30dc: 20 5d 08  -         jsr SW16
30df: 10        -         .byte opcode(op, register)
30e0: ed fe     -         .word address.getValue()
30e2: 0a        -         .byte $0a }
30e3: 0d        -         .byte $0d
30e4: 31        -         .byte >(address.getValue()-1)
30e5: cf        -         .byte <(address.getValue()-1)
30e6: 10        -         .byte opcode(op, register)
30e7: 23 01     -         .word address.getValue()
30e9: 0a        -         .byte $0a }
30ea: 00        -         .byte $00 }
30eb: ee 41 3e  -         inc TEST_COUNT
30ee: ad 86 02  -         lda foreground_color
30f1: 48        -         pha
30f2: a9 0e     -         lda #color
30f4: 8d 86 02  -         sta foreground_color
30f7: a2 00     -         ldx #$00
30f9: bd 0c 31  -         lda msg,x
30fc: f0 07     -         beq !done+
30fe: 20 d2 ff  -         jsr kernal_chrout
3101: e8        -         inx
3102: 4c f9 30  -         jmp !loop-
3105: 68        -         pla
3106: 8d 86 02  -         sta foreground_color
3109: 4c 10 31  -         jmp !done+
310c: 20        - memory: .byte spacebar
310d: 32        -         .text description
310e: 3a        -         .text ":"
310f: 00        -         .byte NULL
3110: a6 17     -         ldx rl(register.getValue())
3112: a4 18     -         ldy rh(register.getValue())
3114: e0 23     -         cpx #<value
3116: d0 25     -         bne !failed+
3118: c0 01     -         cpy #>value
311a: d0 21     -         bne !failed+
311c: ee 42 3e  -         inc TEST_PASS_COUNT
311f: ad 86 02  -         lda foreground_color
3122: 48        -         pha
3123: a9 05     -         lda #color
3125: 8d 86 02  -         sta foreground_color
3128: a2 00     -         ldx #$00
312a: bd 3d 3e  -         lda msg,x
312d: f0 07     -         beq !done+
312f: 20 d2 ff  -         jsr kernal_chrout
3132: e8        -         inx
3133: 4c 2a 31  -         jmp !loop-
3136: 68        -         pla
3137: 8d 86 02  -         sta foreground_color
313a: 4c 58 31  -         jmp !done+
313d: ad 86 02  -         lda foreground_color
3140: 48        -         pha
3141: a9 02     -         lda #color
3143: 8d 86 02  -         sta foreground_color
3146: a2 00     -         ldx #$00
3148: bd 3f 3e  -         lda msg,x
314b: f0 07     -         beq !done+
314d: 20 d2 ff  -         jsr kernal_chrout
3150: e8        -         inx
3151: 4c 48 31  -         jmp !loop-
3154: 68        -         pla
3155: 8d 86 02  -         sta foreground_color
3158: a2 00     -         ldx #$00
315a: bd 69 31  -         lda msg,x
315d: f0 07     -         beq !done+
315f: 20 d2 ff  -         jsr kernal_chrout
3162: e8        -         inx
3163: 4c 5a 31  -         jmp !loop-
3166: 4c 6b 31  -         jmp !done+
3169: 0d 00     - memory: .byte RETURN, NULL
316b: ae 43 3e  -         ldx TEST_NAME_COUNT
316e: e0 15     -         cpx #TESTS_PER_PAGE
3170: d0 5d     -         bne !exit+
3172: ad 86 02  -         lda foreground_color
3175: 48        -         pha
3176: a9 01     -         lda #color
3178: 8d 86 02  -         sta foreground_color
317b: a2 00     -         ldx #$00
317d: bd 90 31  -         lda msg,x
3180: f0 07     -         beq !done+
3182: 20 d2 ff  -         jsr kernal_chrout
3185: e8        -         inx
3186: 4c 7d 31  -         jmp !loop-
3189: 68        -         pla
318a: 8d 86 02  -         sta foreground_color
318d: 4c af 31  -         jmp !no_key+
3190: 0d        - memory: .byte RETURN
3191: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
31a1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
31ad: 0d 00     -         .byte RETURN, NULL
31af: 20 9f ff  -         jsr scnkey  // scan keyboard
31b2: 20 e4 ff  -         jsr getin	// put result into A
31b5: f0 f8     -         beq !no_key-
31b7: a2 00     -         ldx #$00
31b9: bd c8 31  -         lda msg,x
31bc: f0 07     -         beq !done+
31be: 20 d2 ff  -         jsr kernal_chrout
31c1: e8        -         inx
31c2: 4c b9 31  -         jmp !loop-
31c5: 4c ca 31  -         jmp !done+
31c8: 0d 00     - newline:.byte RETURN, NULL
31ca: a2 00     -         ldx #$00
31cc: 8e 43 3e  -         stx TEST_NAME_COUNT
31cf: 60        -         rts
31d0: ee 41 3e  -         inc TEST_COUNT
31d3: ad 86 02  -         lda foreground_color
31d6: 48        -         pha
31d7: a9 0e     -         lda #color
31d9: 8d 86 02  -         sta foreground_color
31dc: a2 00     -         ldx #$00
31de: bd f1 31  -         lda msg,x
31e1: f0 07     -         beq !done+
31e3: 20 d2 ff  -         jsr kernal_chrout
31e6: e8        -         inx
31e7: 4c de 31  -         jmp !loop-
31ea: 68        -         pla
31eb: 8d 86 02  -         sta foreground_color
31ee: 4c f5 31  -         jmp !done+
31f1: 20        - memory: .byte spacebar
31f2: 31        -         .text description
31f3: 3a        -         .text ":"
31f4: 00        -         .byte NULL
31f5: a6 17     -         ldx rl(register.getValue())
31f7: a4 18     -         ldy rh(register.getValue())
31f9: e0 ed     -         cpx #<value
31fb: d0 25     -         bne !failed+
31fd: c0 fe     -         cpy #>value
31ff: d0 21     -         bne !failed+
3201: ee 42 3e  -         inc TEST_PASS_COUNT
3204: ad 86 02  -         lda foreground_color
3207: 48        -         pha
3208: a9 05     -         lda #color
320a: 8d 86 02  -         sta foreground_color
320d: a2 00     -         ldx #$00
320f: bd 3d 3e  -         lda msg,x
3212: f0 07     -         beq !done+
3214: 20 d2 ff  -         jsr kernal_chrout
3217: e8        -         inx
3218: 4c 0f 32  -         jmp !loop-
321b: 68        -         pla
321c: 8d 86 02  -         sta foreground_color
321f: 4c 3d 32  -         jmp !done+
3222: ad 86 02  -         lda foreground_color
3225: 48        -         pha
3226: a9 02     -         lda #color
3228: 8d 86 02  -         sta foreground_color
322b: a2 00     -         ldx #$00
322d: bd 3f 3e  -         lda msg,x
3230: f0 07     -         beq !done+
3232: 20 d2 ff  -         jsr kernal_chrout
3235: e8        -         inx
3236: 4c 2d 32  -         jmp !loop-
3239: 68        -         pla
323a: 8d 86 02  -         sta foreground_color
323d: 60        -         rts
323e: ee 43 3e  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
3241: ad 86 02  -         lda foreground_color
3244: 48        -         pha
3245: a9 0f     -         lda #color
3247: 8d 86 02  -         sta foreground_color
324a: a2 00     -         ldx #$00
324c: bd 5f 32  -         lda msg,x
324f: f0 07     -         beq !done+
3251: 20 d2 ff  -         jsr kernal_chrout
3254: e8        -         inx
3255: 4c 4c 32  -         jmp !loop-
3258: 68        -         pla
3259: 8d 86 02  -         sta foreground_color
325c: 4c 6e 32  -         jmp !done+
325f: 20 20     - memory: .fill spacing, spacebar
3261: 49 4e 54 20 42 52 45 41 4b                       -         .text name
326a: 2e 2e 2e  -         .text "..."
326d: 00        -         .byte NULL
326e: a9 35     -         lda #<handler
3270: 8d 16 03  -         sta address
3273: a9 0a     -         lda #>handler
3275: 8d 17 03  -         sta address+1
3278: 20 5d 08  -         jsr SW16
327b: 10        -         .byte opcode(op, register)
327c: ed fe     -         .word address.getValue()
327e: 0a        -         .byte $0a }
327f: 0d        -         .byte $0d
3280: 33        -         .byte >(address.getValue()-1)
3281: 01        -         .byte <(address.getValue()-1)
3282: 10        -         .byte opcode(op, register)
3283: 23 01     -         .word address.getValue()
3285: 0a        -         .byte $0a }
3286: 0d        -         .byte $0d
3287: 33        -         .byte >(address.getValue()-1)
3288: 6f        -         .byte <(address.getValue()-1)
3289: 00        -         .byte $00 }
328a: a2 00     -         ldx #$00
328c: bd 9b 32  -         lda msg,x
328f: f0 07     -         beq !done+
3291: 20 d2 ff  -         jsr kernal_chrout
3294: e8        -         inx
3295: 4c 8c 32  -         jmp !loop-
3298: 4c 9d 32  -         jmp !done+
329b: 0d 00     - memory: .byte RETURN, NULL
329d: ae 43 3e  -         ldx TEST_NAME_COUNT
32a0: e0 15     -         cpx #TESTS_PER_PAGE
32a2: d0 5d     -         bne !exit+
32a4: ad 86 02  -         lda foreground_color
32a7: 48        -         pha
32a8: a9 01     -         lda #color
32aa: 8d 86 02  -         sta foreground_color
32ad: a2 00     -         ldx #$00
32af: bd c2 32  -         lda msg,x
32b2: f0 07     -         beq !done+
32b4: 20 d2 ff  -         jsr kernal_chrout
32b7: e8        -         inx
32b8: 4c af 32  -         jmp !loop-
32bb: 68        -         pla
32bc: 8d 86 02  -         sta foreground_color
32bf: 4c e1 32  -         jmp !no_key+
32c2: 0d        - memory: .byte RETURN
32c3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
32d3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
32df: 0d 00     -         .byte RETURN, NULL
32e1: 20 9f ff  -         jsr scnkey  // scan keyboard
32e4: 20 e4 ff  -         jsr getin	// put result into A
32e7: f0 f8     -         beq !no_key-
32e9: a2 00     -         ldx #$00
32eb: bd fa 32  -         lda msg,x
32ee: f0 07     -         beq !done+
32f0: 20 d2 ff  -         jsr kernal_chrout
32f3: e8        -         inx
32f4: 4c eb 32  -         jmp !loop-
32f7: 4c fc 32  -         jmp !done+
32fa: 0d 00     - newline:.byte RETURN, NULL
32fc: a2 00     -         ldx #$00
32fe: 8e 43 3e  -         stx TEST_NAME_COUNT
3301: 60        -         rts
3302: ee 41 3e  -         inc TEST_COUNT
3305: ad 86 02  -         lda foreground_color
3308: 48        -         pha
3309: a9 0e     -         lda #color
330b: 8d 86 02  -         sta foreground_color
330e: a2 00     -         ldx #$00
3310: bd 23 33  -         lda msg,x
3313: f0 07     -         beq !done+
3315: 20 d2 ff  -         jsr kernal_chrout
3318: e8        -         inx
3319: 4c 10 33  -         jmp !loop-
331c: 68        -         pla
331d: 8d 86 02  -         sta foreground_color
3320: 4c 27 33  -         jmp !done+
3323: 20        - memory: .byte spacebar
3324: 31        -         .text description
3325: 3a        -         .text ":"
3326: 00        -         .byte NULL
3327: a6 17     -         ldx rl(register.getValue())
3329: a4 18     -         ldy rh(register.getValue())
332b: e0 ed     -         cpx #<value
332d: d0 25     -         bne !failed+
332f: c0 fe     -         cpy #>value
3331: d0 21     -         bne !failed+
3333: ee 42 3e  -         inc TEST_PASS_COUNT
3336: ad 86 02  -         lda foreground_color
3339: 48        -         pha
333a: a9 05     -         lda #color
333c: 8d 86 02  -         sta foreground_color
333f: a2 00     -         ldx #$00
3341: bd 3d 3e  -         lda msg,x
3344: f0 07     -         beq !done+
3346: 20 d2 ff  -         jsr kernal_chrout
3349: e8        -         inx
334a: 4c 41 33  -         jmp !loop-
334d: 68        -         pla
334e: 8d 86 02  -         sta foreground_color
3351: 4c 6f 33  -         jmp !done+
3354: ad 86 02  -         lda foreground_color
3357: 48        -         pha
3358: a9 02     -         lda #color
335a: 8d 86 02  -         sta foreground_color
335d: a2 00     -         ldx #$00
335f: bd 3f 3e  -         lda msg,x
3362: f0 07     -         beq !done+
3364: 20 d2 ff  -         jsr kernal_chrout
3367: e8        -         inx
3368: 4c 5f 33  -         jmp !loop-
336b: 68        -         pla
336c: 8d 86 02  -         sta foreground_color
336f: 60        -         rts
3370: ee 41 3e  -         inc TEST_COUNT
3373: ad 86 02  -         lda foreground_color
3376: 48        -         pha
3377: a9 0e     -         lda #color
3379: 8d 86 02  -         sta foreground_color
337c: a2 00     -         ldx #$00
337e: bd 91 33  -         lda msg,x
3381: f0 07     -         beq !done+
3383: 20 d2 ff  -         jsr kernal_chrout
3386: e8        -         inx
3387: 4c 7e 33  -         jmp !loop-
338a: 68        -         pla
338b: 8d 86 02  -         sta foreground_color
338e: 4c 95 33  -         jmp !done+
3391: 20        - memory: .byte spacebar
3392: 32        -         .text description
3393: 3a        -         .text ":"
3394: 00        -         .byte NULL
3395: a6 17     -         ldx rl(register.getValue())
3397: a4 18     -         ldy rh(register.getValue())
3399: e0 23     -         cpx #<value
339b: d0 25     -         bne !failed+
339d: c0 01     -         cpy #>value
339f: d0 21     -         bne !failed+
33a1: ee 42 3e  -         inc TEST_PASS_COUNT
33a4: ad 86 02  -         lda foreground_color
33a7: 48        -         pha
33a8: a9 05     -         lda #color
33aa: 8d 86 02  -         sta foreground_color
33ad: a2 00     -         ldx #$00
33af: bd 3d 3e  -         lda msg,x
33b2: f0 07     -         beq !done+
33b4: 20 d2 ff  -         jsr kernal_chrout
33b7: e8        -         inx
33b8: 4c af 33  -         jmp !loop-
33bb: 68        -         pla
33bc: 8d 86 02  -         sta foreground_color
33bf: 4c dd 33  -         jmp !done+
33c2: ad 86 02  -         lda foreground_color
33c5: 48        -         pha
33c6: a9 02     -         lda #color
33c8: 8d 86 02  -         sta foreground_color
33cb: a2 00     -         ldx #$00
33cd: bd 3f 3e  -         lda msg,x
33d0: f0 07     -         beq !done+
33d2: 20 d2 ff  -         jsr kernal_chrout
33d5: e8        -         inx
33d6: 4c cd 33  -         jmp !loop-
33d9: 68        -         pla
33da: 8d 86 02  -         sta foreground_color
33dd: 60        -         rts
33de: ee 43 3e  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
33e1: ad 86 02  -         lda foreground_color
33e4: 48        -         pha
33e5: a9 0f     -         lda #color
33e7: 8d 86 02  -         sta foreground_color
33ea: a2 00     -         ldx #$00
33ec: bd ff 33  -         lda msg,x
33ef: f0 07     -         beq !done+
33f1: 20 d2 ff  -         jsr kernal_chrout
33f4: e8        -         inx
33f5: 4c ec 33  -         jmp !loop-
33f8: 68        -         pla
33f9: 8d 86 02  -         sta foreground_color
33fc: 4c 12 34  -         jmp !done+
33ff: 20 20     - memory: .fill spacing, spacebar
3401: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
340e: 2e 2e 2e  -         .text "..."
3411: 00        -         .byte NULL
3412: 20 5d 08  -         jsr SW16
3415: 15        -         .byte opcode(op, register)
3416: 5f 3e     -         .word address.getValue()
3418: 14        -         .byte opcode(op, register)
3419: 6f 3e     -         .word address.getValue()
341b: 16        -         .byte opcode(op, register)
341c: 6f 3e     -         .word address.getValue()
341e: 0c 04     -         .byte $0c, effective_address(ea,*) }
3420: 00        -         .byte $00 }
3421: 4c 2b 34  -         jmp !done+
3424: 45        -         .byte opcode($40, register) }
3425: 56        -         .byte opcode($50, register) }
3426: 24        -         .byte opcode($20, register) }
3427: d5        -         .byte opcode($d0, register) }
3428: 04 fa     -         .byte $04, effective_address(ea,*) }
342a: 0b        -         .byte $0b }
342b: ee 41 3e  -         inc TEST_COUNT
342e: ad 86 02  -         lda foreground_color
3431: 48        -         pha
3432: a9 0e     -         lda #color
3434: 8d 86 02  -         sta foreground_color
3437: a2 00     -         ldx #$00
3439: bd 4c 34  -         lda msg,x
343c: f0 07     -         beq !done+
343e: 20 d2 ff  -         jsr kernal_chrout
3441: e8        -         inx
3442: 4c 39 34  -         jmp !loop-
3445: 68        -         pla
3446: 8d 86 02  -         sta foreground_color
3449: 4c 52 34  -         jmp !done+
344c: 20        - memory: .byte spacebar
344d: 4d 45 4d  -         .text description
3450: 3a        -         .text ":"
3451: 00        -         .byte NULL
3452: a2 ff     -         ldx #$ff
3454: e8        -         inx
3455: e0 10     -         cpx #size
3457: f0 0b     -         beq !success+
3459: bd 5f 3e  -         lda source,x
345c: dd 6f 3e  -         cmp dest,x
345f: f0 f3     -         beq !loop-
3461: 4c 85 34  -         jmp !failed+
3464: ee 42 3e  -         inc TEST_PASS_COUNT
3467: ad 86 02  -         lda foreground_color
346a: 48        -         pha
346b: a9 05     -         lda #color
346d: 8d 86 02  -         sta foreground_color
3470: a2 00     -         ldx #$00
3472: bd 3d 3e  -         lda msg,x
3475: f0 07     -         beq !done+
3477: 20 d2 ff  -         jsr kernal_chrout
347a: e8        -         inx
347b: 4c 72 34  -         jmp !loop-
347e: 68        -         pla
347f: 8d 86 02  -         sta foreground_color
3482: 4c a0 34  -         jmp !done+
3485: ad 86 02  -         lda foreground_color
3488: 48        -         pha
3489: a9 02     -         lda #color
348b: 8d 86 02  -         sta foreground_color
348e: a2 00     -         ldx #$00
3490: bd 3f 3e  -         lda msg,x
3493: f0 07     -         beq !done+
3495: 20 d2 ff  -         jsr kernal_chrout
3498: e8        -         inx
3499: 4c 90 34  -         jmp !loop-
349c: 68        -         pla
349d: 8d 86 02  -         sta foreground_color
34a0: a2 00     -         ldx #$00
34a2: bd b1 34  -         lda msg,x
34a5: f0 07     -         beq !done+
34a7: 20 d2 ff  -         jsr kernal_chrout
34aa: e8        -         inx
34ab: 4c a2 34  -         jmp !loop-
34ae: 4c b3 34  -         jmp !done+
34b1: 0d 00     - memory: .byte RETURN, NULL
34b3: ae 43 3e  -         ldx TEST_NAME_COUNT
34b6: e0 15     -         cpx #TESTS_PER_PAGE
34b8: d0 5d     -         bne !exit+
34ba: ad 86 02  -         lda foreground_color
34bd: 48        -         pha
34be: a9 01     -         lda #color
34c0: 8d 86 02  -         sta foreground_color
34c3: a2 00     -         ldx #$00
34c5: bd d8 34  -         lda msg,x
34c8: f0 07     -         beq !done+
34ca: 20 d2 ff  -         jsr kernal_chrout
34cd: e8        -         inx
34ce: 4c c5 34  -         jmp !loop-
34d1: 68        -         pla
34d2: 8d 86 02  -         sta foreground_color
34d5: 4c f7 34  -         jmp !no_key+
34d8: 0d        - memory: .byte RETURN
34d9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
34e9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
34f5: 0d 00     -         .byte RETURN, NULL
34f7: 20 9f ff  -         jsr scnkey  // scan keyboard
34fa: 20 e4 ff  -         jsr getin	// put result into A
34fd: f0 f8     -         beq !no_key-
34ff: a2 00     -         ldx #$00
3501: bd 10 35  -         lda msg,x
3504: f0 07     -         beq !done+
3506: 20 d2 ff  -         jsr kernal_chrout
3509: e8        -         inx
350a: 4c 01 35  -         jmp !loop-
350d: 4c 12 35  -         jmp !done+
3510: 0d 00     - newline:.byte RETURN, NULL
3512: a2 00     -         ldx #$00
3514: 8e 43 3e  -         stx TEST_NAME_COUNT
3517: 60        -         rts
3518: ee 43 3e  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
351b: ad 86 02  -         lda foreground_color
351e: 48        -         pha
351f: a9 0f     -         lda #color
3521: 8d 86 02  -         sta foreground_color
3524: a2 00     -         ldx #$00
3526: bd 39 35  -         lda msg,x
3529: f0 07     -         beq !done+
352b: 20 d2 ff  -         jsr kernal_chrout
352e: e8        -         inx
352f: 4c 26 35  -         jmp !loop-
3532: 68        -         pla
3533: 8d 86 02  -         sta foreground_color
3536: 4c 4e 35  -         jmp !done+
3539: 20 20     - memory: .fill spacing, spacebar
353b: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
354a: 2e 2e 2e  -         .text "..."
354d: 00        -         .byte NULL
354e: 20 5d 08  -         jsr SW16
3551: 10        -         .byte opcode(op, register)
3552: 34 12     -         .word address.getValue()
3554: 0c 04     -         .byte $0c, effective_address(ea,*) }
3556: 00        -         .byte $00 }
3557: 4c 5e 35  -         jmp !done+
355a: 10        -         .byte opcode(op, register)
355b: 78 56     -         .word address.getValue()
355d: 0b        -         .byte $0b }
355e: ee 41 3e  -         inc TEST_COUNT
3561: ad 86 02  -         lda foreground_color
3564: 48        -         pha
3565: a9 0e     -         lda #color
3567: 8d 86 02  -         sta foreground_color
356a: a2 00     -         ldx #$00
356c: bd 7f 35  -         lda msg,x
356f: f0 07     -         beq !done+
3571: 20 d2 ff  -         jsr kernal_chrout
3574: e8        -         inx
3575: 4c 6c 35  -         jmp !loop-
3578: 68        -         pla
3579: 8d 86 02  -         sta foreground_color
357c: 4c 85 35  -         jmp !done+
357f: 20        - memory: .byte spacebar
3580: 53 55 42  -         .text description
3583: 3a        -         .text ":"
3584: 00        -         .byte NULL
3585: a6 17     -         ldx rl(register.getValue())
3587: a4 18     -         ldy rh(register.getValue())
3589: e0 78     -         cpx #<value
358b: d0 25     -         bne !failed+
358d: c0 56     -         cpy #>value
358f: d0 21     -         bne !failed+
3591: ee 42 3e  -         inc TEST_PASS_COUNT
3594: ad 86 02  -         lda foreground_color
3597: 48        -         pha
3598: a9 05     -         lda #color
359a: 8d 86 02  -         sta foreground_color
359d: a2 00     -         ldx #$00
359f: bd 3d 3e  -         lda msg,x
35a2: f0 07     -         beq !done+
35a4: 20 d2 ff  -         jsr kernal_chrout
35a7: e8        -         inx
35a8: 4c 9f 35  -         jmp !loop-
35ab: 68        -         pla
35ac: 8d 86 02  -         sta foreground_color
35af: 4c cd 35  -         jmp !done+
35b2: ad 86 02  -         lda foreground_color
35b5: 48        -         pha
35b6: a9 02     -         lda #color
35b8: 8d 86 02  -         sta foreground_color
35bb: a2 00     -         ldx #$00
35bd: bd 3f 3e  -         lda msg,x
35c0: f0 07     -         beq !done+
35c2: 20 d2 ff  -         jsr kernal_chrout
35c5: e8        -         inx
35c6: 4c bd 35  -         jmp !loop-
35c9: 68        -         pla
35ca: 8d 86 02  -         sta foreground_color
35cd: a2 00     -         ldx #$00
35cf: bd de 35  -         lda msg,x
35d2: f0 07     -         beq !done+
35d4: 20 d2 ff  -         jsr kernal_chrout
35d7: e8        -         inx
35d8: 4c cf 35  -         jmp !loop-
35db: 4c e0 35  -         jmp !done+
35de: 0d 00     - memory: .byte RETURN, NULL
35e0: ae 43 3e  -         ldx TEST_NAME_COUNT
35e3: e0 15     -         cpx #TESTS_PER_PAGE
35e5: d0 5d     -         bne !exit+
35e7: ad 86 02  -         lda foreground_color
35ea: 48        -         pha
35eb: a9 01     -         lda #color
35ed: 8d 86 02  -         sta foreground_color
35f0: a2 00     -         ldx #$00
35f2: bd 05 36  -         lda msg,x
35f5: f0 07     -         beq !done+
35f7: 20 d2 ff  -         jsr kernal_chrout
35fa: e8        -         inx
35fb: 4c f2 35  -         jmp !loop-
35fe: 68        -         pla
35ff: 8d 86 02  -         sta foreground_color
3602: 4c 24 36  -         jmp !no_key+
3605: 0d        - memory: .byte RETURN
3606: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3616: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3622: 0d 00     -         .byte RETURN, NULL
3624: 20 9f ff  -         jsr scnkey  // scan keyboard
3627: 20 e4 ff  -         jsr getin	// put result into A
362a: f0 f8     -         beq !no_key-
362c: a2 00     -         ldx #$00
362e: bd 3d 36  -         lda msg,x
3631: f0 07     -         beq !done+
3633: 20 d2 ff  -         jsr kernal_chrout
3636: e8        -         inx
3637: 4c 2e 36  -         jmp !loop-
363a: 4c 3f 36  -         jmp !done+
363d: 0d 00     - newline:.byte RETURN, NULL
363f: a2 00     -         ldx #$00
3641: 8e 43 3e  -         stx TEST_NAME_COUNT
3644: 60        -         rts
3645: ee 43 3e  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
3648: ad 86 02  -         lda foreground_color
364b: 48        -         pha
364c: a9 0f     -         lda #color
364e: 8d 86 02  -         sta foreground_color
3651: a2 00     -         ldx #$00
3653: bd 66 36  -         lda msg,x
3656: f0 07     -         beq !done+
3658: 20 d2 ff  -         jsr kernal_chrout
365b: e8        -         inx
365c: 4c 53 36  -         jmp !loop-
365f: 68        -         pla
3660: 8d 86 02  -         sta foreground_color
3663: 4c 79 36  -         jmp !done+
3666: 20 20     - memory: .fill spacing, spacebar
3668: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
3675: 2e 2e 2e  -         .text "..."
3678: 00        -         .byte NULL
3679: 20 5d 08  -         jsr SW16
367c: 15        -         .byte opcode(op, register)
367d: 00 00     -         .word address.getValue()
367f: 10        -         .byte opcode(op, register)
3680: 6a 37     -         .word address.getValue()
3682: 3f        -         .byte opcode($30, register) }
3683: 00        -         .byte $00 }
3684: ee 41 3e  -         inc TEST_COUNT
3687: ad 86 02  -         lda foreground_color
368a: 48        -         pha
368b: a9 0e     -         lda #color
368d: 8d 86 02  -         sta foreground_color
3690: a2 00     -         ldx #$00
3692: bd a5 36  -         lda msg,x
3695: f0 07     -         beq !done+
3697: 20 d2 ff  -         jsr kernal_chrout
369a: e8        -         inx
369b: 4c 92 36  -         jmp !loop-
369e: 68        -         pla
369f: 8d 86 02  -         sta foreground_color
36a2: 4c ab 36  -         jmp !done+
36a5: 20        - memory: .byte spacebar
36a6: 53 45 54  -         .text description
36a9: 3a        -         .text ":"
36aa: 00        -         .byte NULL
36ab: a6 21     -         ldx rl(register.getValue())
36ad: a4 22     -         ldy rh(register.getValue())
36af: e0 34     -         cpx #<value
36b1: d0 25     -         bne !failed+
36b3: c0 12     -         cpy #>value
36b5: d0 21     -         bne !failed+
36b7: ee 42 3e  -         inc TEST_PASS_COUNT
36ba: ad 86 02  -         lda foreground_color
36bd: 48        -         pha
36be: a9 05     -         lda #color
36c0: 8d 86 02  -         sta foreground_color
36c3: a2 00     -         ldx #$00
36c5: bd 3d 3e  -         lda msg,x
36c8: f0 07     -         beq !done+
36ca: 20 d2 ff  -         jsr kernal_chrout
36cd: e8        -         inx
36ce: 4c c5 36  -         jmp !loop-
36d1: 68        -         pla
36d2: 8d 86 02  -         sta foreground_color
36d5: 4c f3 36  -         jmp !done+
36d8: ad 86 02  -         lda foreground_color
36db: 48        -         pha
36dc: a9 02     -         lda #color
36de: 8d 86 02  -         sta foreground_color
36e1: a2 00     -         ldx #$00
36e3: bd 3f 3e  -         lda msg,x
36e6: f0 07     -         beq !done+
36e8: 20 d2 ff  -         jsr kernal_chrout
36eb: e8        -         inx
36ec: 4c e3 36  -         jmp !loop-
36ef: 68        -         pla
36f0: 8d 86 02  -         sta foreground_color
36f3: a2 00     -         ldx #$00
36f5: bd 04 37  -         lda msg,x
36f8: f0 07     -         beq !done+
36fa: 20 d2 ff  -         jsr kernal_chrout
36fd: e8        -         inx
36fe: 4c f5 36  -         jmp !loop-
3701: 4c 06 37  -         jmp !done+
3704: 0d 00     - memory: .byte RETURN, NULL
3706: ae 43 3e  -         ldx TEST_NAME_COUNT
3709: e0 15     -         cpx #TESTS_PER_PAGE
370b: d0 5d     -         bne !exit+
370d: ad 86 02  -         lda foreground_color
3710: 48        -         pha
3711: a9 01     -         lda #color
3713: 8d 86 02  -         sta foreground_color
3716: a2 00     -         ldx #$00
3718: bd 2b 37  -         lda msg,x
371b: f0 07     -         beq !done+
371d: 20 d2 ff  -         jsr kernal_chrout
3720: e8        -         inx
3721: 4c 18 37  -         jmp !loop-
3724: 68        -         pla
3725: 8d 86 02  -         sta foreground_color
3728: 4c 4a 37  -         jmp !no_key+
372b: 0d        - memory: .byte RETURN
372c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
373c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3748: 0d 00     -         .byte RETURN, NULL
374a: 20 9f ff  -         jsr scnkey  // scan keyboard
374d: 20 e4 ff  -         jsr getin	// put result into A
3750: f0 f8     -         beq !no_key-
3752: a2 00     -         ldx #$00
3754: bd 63 37  -         lda msg,x
3757: f0 07     -         beq !done+
3759: 20 d2 ff  -         jsr kernal_chrout
375c: e8        -         inx
375d: 4c 54 37  -         jmp !loop-
3760: 4c 65 37  -         jmp !done+
3763: 0d 00     - newline:.byte RETURN, NULL
3765: a2 00     -         ldx #$00
3767: 8e 43 3e  -         stx TEST_NAME_COUNT
376a: 60        -         rts
376b: 15        -         .byte opcode(op, register)
376c: 34 12     -         .word address.getValue()
376e: 10        -         .byte opcode(op, register)
376f: 82 36     -         .word address.getValue()
3771: 3f        -         .byte opcode($30, register) }
3772: ee 43 3e  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
3775: ad 86 02  -         lda foreground_color
3778: 48        -         pha
3779: a9 0f     -         lda #color
377b: 8d 86 02  -         sta foreground_color
377e: a2 00     -         ldx #$00
3780: bd 93 37  -         lda msg,x
3783: f0 07     -         beq !done+
3785: 20 d2 ff  -         jsr kernal_chrout
3788: e8        -         inx
3789: 4c 80 37  -         jmp !loop-
378c: 68        -         pla
378d: 8d 86 02  -         sta foreground_color
3790: 4c a5 37  -         jmp !done+
3793: 20 20     - memory: .fill spacing, spacebar
3795: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
37a1: 2e 2e 2e  -         .text "..."
37a4: 00        -         .byte NULL
37a5: 20 5d 08  -         jsr SW16
37a8: 15        -         .byte opcode(op, register)
37a9: 21 43     -         .word address.getValue()
37ab: 0d        -         .byte $0d
37ac: 38        -         .byte >(address.getValue()-1)
37ad: 9f        -         .byte <(address.getValue()-1)
37ae: 15        -         .byte opcode(op, register)
37af: 34 12     -         .word address.getValue()
37b1: 0d        -         .byte $0d
37b2: 39        -         .byte >(address.getValue()-1)
37b3: 11        -         .byte <(address.getValue()-1)
37b4: 15        -         .byte opcode(op, register)
37b5: 21 43     -         .word address.getValue()
37b7: 00        -         .byte $00 }
37b8: ee 41 3e  -         inc TEST_COUNT
37bb: ad 86 02  -         lda foreground_color
37be: 48        -         pha
37bf: a9 0e     -         lda #color
37c1: 8d 86 02  -         sta foreground_color
37c4: a2 00     -         ldx #$00
37c6: bd d9 37  -         lda msg,x
37c9: f0 07     -         beq !done+
37cb: 20 d2 ff  -         jsr kernal_chrout
37ce: e8        -         inx
37cf: 4c c6 37  -         jmp !loop-
37d2: 68        -         pla
37d3: 8d 86 02  -         sta foreground_color
37d6: 4c e0 37  -         jmp !done+
37d9: 20        - memory: .byte spacebar
37da: 53 41 4d 45                                      -         .text description
37de: 3a        -         .text ":"
37df: 00        -         .byte NULL
37e0: a6 21     -         ldx rl(register.getValue())
37e2: a4 22     -         ldy rh(register.getValue())
37e4: e0 21     -         cpx #<value
37e6: d0 25     -         bne !failed+
37e8: c0 43     -         cpy #>value
37ea: d0 21     -         bne !failed+
37ec: ee 42 3e  -         inc TEST_PASS_COUNT
37ef: ad 86 02  -         lda foreground_color
37f2: 48        -         pha
37f3: a9 05     -         lda #color
37f5: 8d 86 02  -         sta foreground_color
37f8: a2 00     -         ldx #$00
37fa: bd 3d 3e  -         lda msg,x
37fd: f0 07     -         beq !done+
37ff: 20 d2 ff  -         jsr kernal_chrout
3802: e8        -         inx
3803: 4c fa 37  -         jmp !loop-
3806: 68        -         pla
3807: 8d 86 02  -         sta foreground_color
380a: 4c 28 38  -         jmp !done+
380d: ad 86 02  -         lda foreground_color
3810: 48        -         pha
3811: a9 02     -         lda #color
3813: 8d 86 02  -         sta foreground_color
3816: a2 00     -         ldx #$00
3818: bd 3f 3e  -         lda msg,x
381b: f0 07     -         beq !done+
381d: 20 d2 ff  -         jsr kernal_chrout
3820: e8        -         inx
3821: 4c 18 38  -         jmp !loop-
3824: 68        -         pla
3825: 8d 86 02  -         sta foreground_color
3828: a2 00     -         ldx #$00
382a: bd 39 38  -         lda msg,x
382d: f0 07     -         beq !done+
382f: 20 d2 ff  -         jsr kernal_chrout
3832: e8        -         inx
3833: 4c 2a 38  -         jmp !loop-
3836: 4c 3b 38  -         jmp !done+
3839: 0d 00     - memory: .byte RETURN, NULL
383b: ae 43 3e  -         ldx TEST_NAME_COUNT
383e: e0 15     -         cpx #TESTS_PER_PAGE
3840: d0 5d     -         bne !exit+
3842: ad 86 02  -         lda foreground_color
3845: 48        -         pha
3846: a9 01     -         lda #color
3848: 8d 86 02  -         sta foreground_color
384b: a2 00     -         ldx #$00
384d: bd 60 38  -         lda msg,x
3850: f0 07     -         beq !done+
3852: 20 d2 ff  -         jsr kernal_chrout
3855: e8        -         inx
3856: 4c 4d 38  -         jmp !loop-
3859: 68        -         pla
385a: 8d 86 02  -         sta foreground_color
385d: 4c 7f 38  -         jmp !no_key+
3860: 0d        - memory: .byte RETURN
3861: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3871: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
387d: 0d 00     -         .byte RETURN, NULL
387f: 20 9f ff  -         jsr scnkey  // scan keyboard
3882: 20 e4 ff  -         jsr getin	// put result into A
3885: f0 f8     -         beq !no_key-
3887: a2 00     -         ldx #$00
3889: bd 98 38  -         lda msg,x
388c: f0 07     -         beq !done+
388e: 20 d2 ff  -         jsr kernal_chrout
3891: e8        -         inx
3892: 4c 89 38  -         jmp !loop-
3895: 4c 9a 38  -         jmp !done+
3898: 0d 00     - newline:.byte RETURN, NULL
389a: a2 00     -         ldx #$00
389c: 8e 43 3e  -         stx TEST_NAME_COUNT
389f: 60        -         rts
38a0: ee 41 3e  -         inc TEST_COUNT
38a3: ad 86 02  -         lda foreground_color
38a6: 48        -         pha
38a7: a9 0e     -         lda #color
38a9: 8d 86 02  -         sta foreground_color
38ac: a2 00     -         ldx #$00
38ae: bd c1 38  -         lda msg,x
38b1: f0 07     -         beq !done+
38b3: 20 d2 ff  -         jsr kernal_chrout
38b6: e8        -         inx
38b7: 4c ae 38  -         jmp !loop-
38ba: 68        -         pla
38bb: 8d 86 02  -         sta foreground_color
38be: 4c c9 38  -         jmp !done+
38c1: 20        - memory: .byte spacebar
38c2: 56 41 4c 55 45                                   -         .text description
38c7: 3a        -         .text ":"
38c8: 00        -         .byte NULL
38c9: a6 21     -         ldx rl(register.getValue())
38cb: a4 22     -         ldy rh(register.getValue())
38cd: e0 21     -         cpx #<value
38cf: d0 25     -         bne !failed+
38d1: c0 43     -         cpy #>value
38d3: d0 21     -         bne !failed+
38d5: ee 42 3e  -         inc TEST_PASS_COUNT
38d8: ad 86 02  -         lda foreground_color
38db: 48        -         pha
38dc: a9 05     -         lda #color
38de: 8d 86 02  -         sta foreground_color
38e1: a2 00     -         ldx #$00
38e3: bd 3d 3e  -         lda msg,x
38e6: f0 07     -         beq !done+
38e8: 20 d2 ff  -         jsr kernal_chrout
38eb: e8        -         inx
38ec: 4c e3 38  -         jmp !loop-
38ef: 68        -         pla
38f0: 8d 86 02  -         sta foreground_color
38f3: 4c 11 39  -         jmp !done+
38f6: ad 86 02  -         lda foreground_color
38f9: 48        -         pha
38fa: a9 02     -         lda #color
38fc: 8d 86 02  -         sta foreground_color
38ff: a2 00     -         ldx #$00
3901: bd 3f 3e  -         lda msg,x
3904: f0 07     -         beq !done+
3906: 20 d2 ff  -         jsr kernal_chrout
3909: e8        -         inx
390a: 4c 01 39  -         jmp !loop-
390d: 68        -         pla
390e: 8d 86 02  -         sta foreground_color
3911: 60        -         rts
3912: a9 fe     -         lda #>VALUE_3
3914: 85 22     -         sta rh(REGISTER)
3916: a9 ed     -         lda #<VALUE_3
3918: 85 21     -         sta rl(REGISTER)
391a: a6 21     -         ldx rl(register.getValue())
391c: a4 22     -         ldy rh(register.getValue())
391e: ee 41 3e  -         inc TEST_COUNT
3921: ad 86 02  -         lda foreground_color
3924: 48        -         pha
3925: a9 0e     -         lda #color
3927: 8d 86 02  -         sta foreground_color
392a: a2 00     -         ldx #$00
392c: bd 3f 39  -         lda msg,x
392f: f0 07     -         beq !done+
3931: 20 d2 ff  -         jsr kernal_chrout
3934: e8        -         inx
3935: 4c 2c 39  -         jmp !loop-
3938: 68        -         pla
3939: 8d 86 02  -         sta foreground_color
393c: 4c 46 39  -         jmp !done+
393f: 20        - memory: .byte spacebar
3940: 36 35 30 32                                      -         .text description
3944: 3a        -         .text ":"
3945: 00        -         .byte NULL
3946: a6 21     -         ldx rl(register.getValue())
3948: a4 22     -         ldy rh(register.getValue())
394a: e0 ed     -         cpx #<value
394c: d0 25     -         bne !failed+
394e: c0 fe     -         cpy #>value
3950: d0 21     -         bne !failed+
3952: ee 42 3e  -         inc TEST_PASS_COUNT
3955: ad 86 02  -         lda foreground_color
3958: 48        -         pha
3959: a9 05     -         lda #color
395b: 8d 86 02  -         sta foreground_color
395e: a2 00     -         ldx #$00
3960: bd 3d 3e  -         lda msg,x
3963: f0 07     -         beq !done+
3965: 20 d2 ff  -         jsr kernal_chrout
3968: e8        -         inx
3969: 4c 60 39  -         jmp !loop-
396c: 68        -         pla
396d: 8d 86 02  -         sta foreground_color
3970: 4c 8e 39  -         jmp !done+
3973: ad 86 02  -         lda foreground_color
3976: 48        -         pha
3977: a9 02     -         lda #color
3979: 8d 86 02  -         sta foreground_color
397c: a2 00     -         ldx #$00
397e: bd 3f 3e  -         lda msg,x
3981: f0 07     -         beq !done+
3983: 20 d2 ff  -         jsr kernal_chrout
3986: e8        -         inx
3987: 4c 7e 39  -         jmp !loop-
398a: 68        -         pla
398b: 8d 86 02  -         sta foreground_color
398e: 60        -         rts
398f: ee 43 3e  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
3992: ad 86 02  -         lda foreground_color
3995: 48        -         pha
3996: a9 0f     -         lda #color
3998: 8d 86 02  -         sta foreground_color
399b: a2 00     -         ldx #$00
399d: bd b0 39  -         lda msg,x
39a0: f0 07     -         beq !done+
39a2: 20 d2 ff  -         jsr kernal_chrout
39a5: e8        -         inx
39a6: 4c 9d 39  -         jmp !loop-
39a9: 68        -         pla
39aa: 8d 86 02  -         sta foreground_color
39ad: 4c c2 39  -         jmp !done+
39b0: 20 20     - memory: .fill spacing, spacebar
39b2: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
39be: 2e 2e 2e  -         .text "..."
39c1: 00        -         .byte NULL
39c2: 20 5d 08  -         jsr SW16
39c5: 0f        -         .byte $0f
39c6: 59 3e     -         .word address.getValue()
39c8: 21        -         .byte rl(register.getValue())
39c9: 00        -         .byte $00 }
39ca: ee 41 3e  -         inc TEST_COUNT
39cd: ad 86 02  -         lda foreground_color
39d0: 48        -         pha
39d1: a9 0e     -         lda #color
39d3: 8d 86 02  -         sta foreground_color
39d6: a2 00     -         ldx #$00
39d8: bd eb 39  -         lda msg,x
39db: f0 07     -         beq !done+
39dd: 20 d2 ff  -         jsr kernal_chrout
39e0: e8        -         inx
39e1: 4c d8 39  -         jmp !loop-
39e4: 68        -         pla
39e5: 8d 86 02  -         sta foreground_color
39e8: 4c f6 39  -         jmp !done+
39eb: 20        - memory: .byte spacebar
39ec: 54 45 53 54 20 4d 45 4d                          -         .text description
39f4: 3a        -         .text ":"
39f5: 00        -         .byte NULL
39f6: a6 21     -         ldx rl(register.getValue())
39f8: a4 22     -         ldy rh(register.getValue())
39fa: cc 59 3e  -         cpy address
39fd: d0 26     -         bne !failed+
39ff: ec 5a 3e  -         cpx address+1
3a02: d0 21     -         bne !failed+
3a04: ee 42 3e  -         inc TEST_PASS_COUNT
3a07: ad 86 02  -         lda foreground_color
3a0a: 48        -         pha
3a0b: a9 05     -         lda #color
3a0d: 8d 86 02  -         sta foreground_color
3a10: a2 00     -         ldx #$00
3a12: bd 3d 3e  -         lda msg,x
3a15: f0 07     -         beq !done+
3a17: 20 d2 ff  -         jsr kernal_chrout
3a1a: e8        -         inx
3a1b: 4c 12 3a  -         jmp !loop-
3a1e: 68        -         pla
3a1f: 8d 86 02  -         sta foreground_color
3a22: 4c 40 3a  -         jmp !done+
3a25: ad 86 02  -         lda foreground_color
3a28: 48        -         pha
3a29: a9 02     -         lda #color
3a2b: 8d 86 02  -         sta foreground_color
3a2e: a2 00     -         ldx #$00
3a30: bd 3f 3e  -         lda msg,x
3a33: f0 07     -         beq !done+
3a35: 20 d2 ff  -         jsr kernal_chrout
3a38: e8        -         inx
3a39: 4c 30 3a  -         jmp !loop-
3a3c: 68        -         pla
3a3d: 8d 86 02  -         sta foreground_color
3a40: a2 00     -         ldx #$00
3a42: bd 51 3a  -         lda msg,x
3a45: f0 07     -         beq !done+
3a47: 20 d2 ff  -         jsr kernal_chrout
3a4a: e8        -         inx
3a4b: 4c 42 3a  -         jmp !loop-
3a4e: 4c 53 3a  -         jmp !done+
3a51: 0d 00     - memory: .byte RETURN, NULL
3a53: ae 43 3e  -         ldx TEST_NAME_COUNT
3a56: e0 15     -         cpx #TESTS_PER_PAGE
3a58: d0 5d     -         bne !exit+
3a5a: ad 86 02  -         lda foreground_color
3a5d: 48        -         pha
3a5e: a9 01     -         lda #color
3a60: 8d 86 02  -         sta foreground_color
3a63: a2 00     -         ldx #$00
3a65: bd 78 3a  -         lda msg,x
3a68: f0 07     -         beq !done+
3a6a: 20 d2 ff  -         jsr kernal_chrout
3a6d: e8        -         inx
3a6e: 4c 65 3a  -         jmp !loop-
3a71: 68        -         pla
3a72: 8d 86 02  -         sta foreground_color
3a75: 4c 97 3a  -         jmp !no_key+
3a78: 0d        - memory: .byte RETURN
3a79: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3a89: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3a95: 0d 00     -         .byte RETURN, NULL
3a97: 20 9f ff  -         jsr scnkey  // scan keyboard
3a9a: 20 e4 ff  -         jsr getin	// put result into A
3a9d: f0 f8     -         beq !no_key-
3a9f: a2 00     -         ldx #$00
3aa1: bd b0 3a  -         lda msg,x
3aa4: f0 07     -         beq !done+
3aa6: 20 d2 ff  -         jsr kernal_chrout
3aa9: e8        -         inx
3aaa: 4c a1 3a  -         jmp !loop-
3aad: 4c b2 3a  -         jmp !done+
3ab0: 0d 00     - newline:.byte RETURN, NULL
3ab2: a2 00     -         ldx #$00
3ab4: 8e 43 3e  -         stx TEST_NAME_COUNT
3ab7: 60        -         rts
3ab8: ee 43 3e  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
3abb: ad 86 02  -         lda foreground_color
3abe: 48        -         pha
3abf: a9 0f     -         lda #color
3ac1: 8d 86 02  -         sta foreground_color
3ac4: a2 00     -         ldx #$00
3ac6: bd d9 3a  -         lda msg,x
3ac9: f0 07     -         beq !done+
3acb: 20 d2 ff  -         jsr kernal_chrout
3ace: e8        -         inx
3acf: 4c c6 3a  -         jmp !loop-
3ad2: 68        -         pla
3ad3: 8d 86 02  -         sta foreground_color
3ad6: 4c e9 3a  -         jmp !done+
3ad9: 20 20     - memory: .fill spacing, spacebar
3adb: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
3ae5: 2e 2e 2e  -         .text "..."
3ae8: 00        -         .byte NULL
3ae9: 20 5d 08  -         jsr SW16
3aec: 0e        -         .byte $0e
3aed: 59 3e     -         .word address.getValue()
3aef: 21        -         .byte rl(register.getValue())
3af0: 00        -         .byte $00 }
3af1: ee 41 3e  -         inc TEST_COUNT
3af4: ad 86 02  -         lda foreground_color
3af7: 48        -         pha
3af8: a9 0e     -         lda #color
3afa: 8d 86 02  -         sta foreground_color
3afd: a2 00     -         ldx #$00
3aff: bd 12 3b  -         lda msg,x
3b02: f0 07     -         beq !done+
3b04: 20 d2 ff  -         jsr kernal_chrout
3b07: e8        -         inx
3b08: 4c ff 3a  -         jmp !loop-
3b0b: 68        -         pla
3b0c: 8d 86 02  -         sta foreground_color
3b0f: 4c 1d 3b  -         jmp !done+
3b12: 20        - memory: .byte spacebar
3b13: 54 45 53 54 20 4d 45 4d                          -         .text description
3b1b: 3a        -         .text ":"
3b1c: 00        -         .byte NULL
3b1d: a6 21     -         ldx rl(register.getValue())
3b1f: a4 22     -         ldy rh(register.getValue())
3b21: ec 59 3e  -         cpx address
3b24: d0 26     -         bne !failed+
3b26: cc 5a 3e  -         cpy address+1
3b29: d0 21     -         bne !failed+
3b2b: ee 42 3e  -         inc TEST_PASS_COUNT
3b2e: ad 86 02  -         lda foreground_color
3b31: 48        -         pha
3b32: a9 05     -         lda #color
3b34: 8d 86 02  -         sta foreground_color
3b37: a2 00     -         ldx #$00
3b39: bd 3d 3e  -         lda msg,x
3b3c: f0 07     -         beq !done+
3b3e: 20 d2 ff  -         jsr kernal_chrout
3b41: e8        -         inx
3b42: 4c 39 3b  -         jmp !loop-
3b45: 68        -         pla
3b46: 8d 86 02  -         sta foreground_color
3b49: 4c 67 3b  -         jmp !done+
3b4c: ad 86 02  -         lda foreground_color
3b4f: 48        -         pha
3b50: a9 02     -         lda #color
3b52: 8d 86 02  -         sta foreground_color
3b55: a2 00     -         ldx #$00
3b57: bd 3f 3e  -         lda msg,x
3b5a: f0 07     -         beq !done+
3b5c: 20 d2 ff  -         jsr kernal_chrout
3b5f: e8        -         inx
3b60: 4c 57 3b  -         jmp !loop-
3b63: 68        -         pla
3b64: 8d 86 02  -         sta foreground_color
3b67: a2 00     -         ldx #$00
3b69: bd 78 3b  -         lda msg,x
3b6c: f0 07     -         beq !done+
3b6e: 20 d2 ff  -         jsr kernal_chrout
3b71: e8        -         inx
3b72: 4c 69 3b  -         jmp !loop-
3b75: 4c 7a 3b  -         jmp !done+
3b78: 0d 00     - memory: .byte RETURN, NULL
3b7a: ae 43 3e  -         ldx TEST_NAME_COUNT
3b7d: e0 15     -         cpx #TESTS_PER_PAGE
3b7f: d0 5d     -         bne !exit+
3b81: ad 86 02  -         lda foreground_color
3b84: 48        -         pha
3b85: a9 01     -         lda #color
3b87: 8d 86 02  -         sta foreground_color
3b8a: a2 00     -         ldx #$00
3b8c: bd 9f 3b  -         lda msg,x
3b8f: f0 07     -         beq !done+
3b91: 20 d2 ff  -         jsr kernal_chrout
3b94: e8        -         inx
3b95: 4c 8c 3b  -         jmp !loop-
3b98: 68        -         pla
3b99: 8d 86 02  -         sta foreground_color
3b9c: 4c be 3b  -         jmp !no_key+
3b9f: 0d        - memory: .byte RETURN
3ba0: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3bb0: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3bbc: 0d 00     -         .byte RETURN, NULL
3bbe: 20 9f ff  -         jsr scnkey  // scan keyboard
3bc1: 20 e4 ff  -         jsr getin	// put result into A
3bc4: f0 f8     -         beq !no_key-
3bc6: a2 00     -         ldx #$00
3bc8: bd d7 3b  -         lda msg,x
3bcb: f0 07     -         beq !done+
3bcd: 20 d2 ff  -         jsr kernal_chrout
3bd0: e8        -         inx
3bd1: 4c c8 3b  -         jmp !loop-
3bd4: 4c d9 3b  -         jmp !done+
3bd7: 0d 00     - newline:.byte RETURN, NULL
3bd9: a2 00     -         ldx #$00
3bdb: 8e 43 3e  -         stx TEST_NAME_COUNT
3bde: 60        -         rts
3bdf: a9 00     - TestRun:lda #color
3be1: 8d 20 d0  -         sta border_color
3be4: a9 00     -         lda #color
3be6: 8d 21 d0  -         sta background_color
3be9: a9 01     -         lda #color
3beb: 8d 86 02  -         sta foreground_color
3bee: a2 00     -         ldx #color
3bf0: 8e 21 d0  -         stx background_color
3bf3: a9 20     -         lda #spacebar
3bf5: a2 00     -         ldx #$00
3bf7: 9d 00 04  -         sta screen,x
3bfa: 9d 00 05  -         sta screen+$100,x
3bfd: 9d 00 06  -         sta screen+$200,x
3c00: 9d 00 07  -         sta screen+$300,x
3c03: e8        -         inx
3c04: d0 f1     -         bne !loop-
3c06: a9 00     -         lda #row
3c08: 85 d6     -         sta cursor_row
3c0a: a9 00     -         lda #column
3c0c: 85 d3     -         sta cursor_col
3c0e: a2 00     -         ldx #$00
3c10: bd 1f 3c  -         lda msg,x
3c13: f0 07     -         beq !done+
3c15: 20 d2 ff  -         jsr kernal_chrout
3c18: e8        -         inx
3c19: 4c 10 3c  -         jmp !loop-
3c1c: 4c 21 3c  -         jmp !done+
3c1f: 0d 00     - newline:.byte RETURN, NULL
3c21: a2 00     -         ldx #$00
3c23: bd 44 3e  -         lda msg,x
3c26: f0 07     -         beq !done+
3c28: 20 d2 ff  -         jsr kernal_chrout
3c2b: e8        -         inx
3c2c: 4c 23 3c  -         jmp !loop-
3c2f: a9 0c     -         lda #color
3c31: 8d 86 02  -         sta foreground_color
3c34: a9 00     -         lda #$00
3c36: 8d 41 3e  -         sta TEST_COUNT
3c39: 8d 42 3e  -         sta TEST_PASS_COUNT
3c3c: 8d 43 3e  -         sta TEST_NAME_COUNT
3c3f: 20 fe 0b  -         jsr SET_TEST
3c42: 20 18 0d  -         jsr LOAD_TEST
3c45: 20 32 0e  -         jsr STORE_TEST
3c48: 20 50 0f  -         jsr LOAD_INDIRECT_TEST
3c4b: 20 df 10  -         jsr STORE_INDIRECT_TEST
3c4e: 20 eb 12  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
3c51: 20 85 14  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
3c54: 20 90 16  -         jsr POP_INDIRECT_TEST
3c57: 20 9f 1a  -         jsr STORE_POP_INDIRECT_TEST
3c5a: 20 ce 1b  -         jsr ADD_TEST
3c5d: 20 62 1d  -         jsr SUBTRACT_TEST
3c60: 20 f8 1e  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
3c63: 20 7b 21  -         jsr COMPARE_TEST
3c66: 20 a6 22  -         jsr INCREMENT_TEST
3c69: 20 c6 23  -         jsr DECREMENT_TEST
3c6c: 20 ea 24  -         jsr RETURN_TO_6502_MODE_TEST
3c6f: 20 fd 25  -         jsr BRANCH_ALWAYS_TEST
3c72: 20 26 27  -         jsr BRANCH_IF_NO_CARRY_TEST	
3c75: 20 5a 28  -         jsr BRANCH_IF_CARRY_SET_TEST
3c78: 20 8e 29  -         jsr BRANCH_IF_PLUS_TEST
3c7b: 20 be 2a  -         jsr BRANCH_IF_MINUS_TEST
3c7e: 20 ee 2b  -         jsr BRANCH_IF_ZERO_TEST	
3c81: 20 18 2d  -         jsr BRANCH_IF_NONZERO_TEST
3c84: 20 47 2e  -         jsr BRANCH_IF_MINUS_ONE_TEST
3c87: 20 76 2f  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
3c8a: 20 a6 30  -         jsr BREAK_TEST
3c8d: 20 de 33  -         jsr BRANCH_TO_SUBROUTINE_TEST
3c90: 20 18 35  -         jsr RETURN_FROM_SUBROUTINE_TEST
3c93: 20 45 36  -         jsr ABSOLUTE_JUMP_TEST
3c96: 20 72 37  -         jsr EXTERNAL_JSR_TEST
3c99: 20 8f 39  -         jsr SET_INDIRECT_TEST
3c9c: 20 b8 3a  -         jsr SET_MEMORY_TEST
3c9f: 20 3e 32  -         jsr INTERRUPT_BREAK_TEST
3ca2: ad 86 02  -         lda foreground_color
3ca5: 48        -         pha
3ca6: a9 01     -         lda #color
3ca8: 8d 86 02  -         sta foreground_color
3cab: a2 00     -         ldx #$00
3cad: bd 24 3e  -         lda msg,x
3cb0: f0 07     -         beq !done+
3cb2: 20 d2 ff  -         jsr kernal_chrout
3cb5: e8        -         inx
3cb6: 4c ad 3c  -         jmp !loop-
3cb9: 68        -         pla
3cba: 8d 86 02  -         sta foreground_color
3cbd: ad 42 3e  -         lda value
3cc0: c9 64     -         cmp #three_digit
3cc2: 90 5a     -         bcc !twoDigit+
3cc4: ad 42 3e  -         lda value
3cc7: c9 64     -         cmp #reference
3cc9: 90 09     -         bcc !done+
3ccb: a0 00     -         ldy #$00		// counter
3ccd: c8        -         iny				// count references's
3cce: e9 64     -         sbc #reference
3cd0: c9 64     -         cmp #reference
3cd2: b0 f9     -         bcs !loop-		// still larger than reference
3cd4: 98        -         tya
3cd5: 48        -         pha
3cd6: 09 30     -         ora #$30
3cd8: 20 d2 ff  -         jsr kernal_chrout
3cdb: 68        -         pla
3cdc: a8        -         tay
3cdd: ad 42 3e  -         lda value
3ce0: 38        -         sec
3ce1: e9 64     -         sbc #three_digit
3ce3: 88        -         dey
3ce4: d0 fa     -         bne !subby-
3ce6: 85 fe     -         sta zp
3ce8: a5 fe     -         lda value
3cea: c9 0a     -         cmp #two_digit
3cec: 90 28     -         bcc !oneDigit+
3cee: a5 fe     -         lda value
3cf0: c9 0a     -         cmp #reference
3cf2: 90 09     -         bcc !done+
3cf4: a0 00     -         ldy #$00		// counter
3cf6: c8        -         iny				// count references's
3cf7: e9 0a     -         sbc #reference
3cf9: c9 0a     -         cmp #reference
3cfb: b0 f9     -         bcs !loop-		// still larger than reference
3cfd: 98        -         tya
3cfe: 48        -         pha
3cff: 09 30     -         ora #$30
3d01: 20 d2 ff  -         jsr kernal_chrout
3d04: 68        -         pla
3d05: a8        -         tay
3d06: a5 fe     -         lda value
3d08: 38        -         sec
3d09: e9 0a     -         sbc #two_digit
3d0b: 88        -         dey
3d0c: d0 fa     -         bne !subby-
3d0e: 09 30     -         ora #$30
3d10: 20 d2 ff  -         jsr kernal_chrout
3d13: 4c 1b 3d  -         jmp !done+
3d16: 09 30     -         ora #$30
3d18: 20 d2 ff  -         jsr kernal_chrout
3d1b: 4c 54 3d  -         jmp !done+
3d1e: ad 42 3e  -         lda value
3d21: c9 0a     -         cmp #two_digit
3d23: 90 2a     -         bcc !oneDigit+
3d25: ad 42 3e  -         lda value
3d28: c9 0a     -         cmp #reference
3d2a: 90 09     -         bcc !done+
3d2c: a0 00     -         ldy #$00		// counter
3d2e: c8        -         iny				// count references's
3d2f: e9 0a     -         sbc #reference
3d31: c9 0a     -         cmp #reference
3d33: b0 f9     -         bcs !loop-		// still larger than reference
3d35: 98        -         tya
3d36: 48        -         pha
3d37: 09 30     -         ora #$30
3d39: 20 d2 ff  -         jsr kernal_chrout
3d3c: 68        -         pla
3d3d: a8        -         tay
3d3e: ad 42 3e  -         lda value
3d41: 38        -         sec
3d42: e9 0a     -         sbc #two_digit
3d44: 88        -         dey
3d45: d0 fa     -         bne !subby-
3d47: 09 30     -         ora #$30
3d49: 20 d2 ff  -         jsr kernal_chrout
3d4c: 4c 54 3d  -         jmp !done+
3d4f: 09 30     -         ora #$30
3d51: 20 d2 ff  -         jsr kernal_chrout
3d54: ad 86 02  -         lda foreground_color
3d57: 48        -         pha
3d58: a9 01     -         lda #color
3d5a: 8d 86 02  -         sta foreground_color
3d5d: a2 00     -         ldx #$00
3d5f: bd 36 3e  -         lda msg,x
3d62: f0 07     -         beq !done+
3d64: 20 d2 ff  -         jsr kernal_chrout
3d67: e8        -         inx
3d68: 4c 5f 3d  -         jmp !loop-
3d6b: 68        -         pla
3d6c: 8d 86 02  -         sta foreground_color
3d6f: ad 41 3e  -         lda value
3d72: c9 64     -         cmp #three_digit
3d74: 90 5a     -         bcc !twoDigit+
3d76: ad 41 3e  -         lda value
3d79: c9 64     -         cmp #reference
3d7b: 90 09     -         bcc !done+
3d7d: a0 00     -         ldy #$00		// counter
3d7f: c8        -         iny				// count references's
3d80: e9 64     -         sbc #reference
3d82: c9 64     -         cmp #reference
3d84: b0 f9     -         bcs !loop-		// still larger than reference
3d86: 98        -         tya
3d87: 48        -         pha
3d88: 09 30     -         ora #$30
3d8a: 20 d2 ff  -         jsr kernal_chrout
3d8d: 68        -         pla
3d8e: a8        -         tay
3d8f: ad 41 3e  -         lda value
3d92: 38        -         sec
3d93: e9 64     -         sbc #three_digit
3d95: 88        -         dey
3d96: d0 fa     -         bne !subby-
3d98: 85 fe     -         sta zp
3d9a: a5 fe     -         lda value
3d9c: c9 0a     -         cmp #two_digit
3d9e: 90 28     -         bcc !oneDigit+
3da0: a5 fe     -         lda value
3da2: c9 0a     -         cmp #reference
3da4: 90 09     -         bcc !done+
3da6: a0 00     -         ldy #$00		// counter
3da8: c8        -         iny				// count references's
3da9: e9 0a     -         sbc #reference
3dab: c9 0a     -         cmp #reference
3dad: b0 f9     -         bcs !loop-		// still larger than reference
3daf: 98        -         tya
3db0: 48        -         pha
3db1: 09 30     -         ora #$30
3db3: 20 d2 ff  -         jsr kernal_chrout
3db6: 68        -         pla
3db7: a8        -         tay
3db8: a5 fe     -         lda value
3dba: 38        -         sec
3dbb: e9 0a     -         sbc #two_digit
3dbd: 88        -         dey
3dbe: d0 fa     -         bne !subby-
3dc0: 09 30     -         ora #$30
3dc2: 20 d2 ff  -         jsr kernal_chrout
3dc5: 4c cd 3d  -         jmp !done+
3dc8: 09 30     -         ora #$30
3dca: 20 d2 ff  -         jsr kernal_chrout
3dcd: 4c 06 3e  -         jmp !done+
3dd0: ad 41 3e  -         lda value
3dd3: c9 0a     -         cmp #two_digit
3dd5: 90 2a     -         bcc !oneDigit+
3dd7: ad 41 3e  -         lda value
3dda: c9 0a     -         cmp #reference
3ddc: 90 09     -         bcc !done+
3dde: a0 00     -         ldy #$00		// counter
3de0: c8        -         iny				// count references's
3de1: e9 0a     -         sbc #reference
3de3: c9 0a     -         cmp #reference
3de5: b0 f9     -         bcs !loop-		// still larger than reference
3de7: 98        -         tya
3de8: 48        -         pha
3de9: 09 30     -         ora #$30
3deb: 20 d2 ff  -         jsr kernal_chrout
3dee: 68        -         pla
3def: a8        -         tay
3df0: ad 41 3e  -         lda value
3df3: 38        -         sec
3df4: e9 0a     -         sbc #two_digit
3df6: 88        -         dey
3df7: d0 fa     -         bne !subby-
3df9: 09 30     -         ora #$30
3dfb: 20 d2 ff  -         jsr kernal_chrout
3dfe: 4c 06 3e  -         jmp !done+
3e01: 09 30     -         ora #$30
3e03: 20 d2 ff  -         jsr kernal_chrout
3e06: ad 86 02  -         lda foreground_color
3e09: 48        -         pha
3e0a: a9 01     -         lda #color
3e0c: 8d 86 02  -         sta foreground_color
3e0f: a2 00     -         ldx #$00
3e11: bd 3a 3e  -         lda msg,x
3e14: f0 07     -         beq !done+
3e16: 20 d2 ff  -         jsr kernal_chrout
3e19: e8        -         inx
3e1a: 4c 11 3e  -         jmp !loop-
3e1d: 68        -         pla
3e1e: 8d 86 02  -         sta foreground_color
3e21: 4c 3c 3e  -         jmp !done+
3e24: 0d        - memory: .byte RETURN
3e25: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
3e35: 00        -         .byte NULL
3e36: 20 2f 20  - memory_2:.text " / "
3e39: 00        -         .byte NULL
3e3a: 0d 00     - memory_3:.byte RETURN, NULL
3e3c: 60        -         rts

[TestData]
3e3d: 73 00     -         .byte $73, $00
3e3f: 76 00     -         .byte $76, $00
3e41: 00        -         .byte $00
3e42: 00        -         .byte $00
3e43: 00        -         .byte $00
3e44: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  -         .text "SWEET16 TEST RUNNER"
3e54: 4e 45 52                                        
3e57: 0d 00     -         .byte RETURN, NULL
3e59: 12 34     -         .byte $12,$34
3e5b: 56 78     -         .byte $56,$78
3e5d: 9a bc     -         .byte $9a,$bc
3e5f: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  -         .fill TMS_SIZE, i
3e6f: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  -         .fill TMS_SIZE, $ff
3e7f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill STACK_SIZE, 0
****************************** Segment: UtilData *******************************
[UtilData]
0aab: 0d 00     - Newline:.byte RETURN, NULL
0aad: ff 00     - ManagedBuffer256,totalSize,lo,hi-1:.byte <value, >value
0aaf: 00 00     - allocSize,lo,hi-1:.byte <value, >value
0ab1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - buffer: .fill $ff, $00
0ad1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0af1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
0bb0: a0 00     - CopyMemoryZeroPageSize:ldy #$00
0bb2: 84 50     -         sty ZpVar.Four.lo     // LSB size
0bb4: 84 51     -         sty ZpVar.Four.hi     // MSH size
0bb6: a5 4f     -         lda ZpVar.Three.hi
0bb8: c5 51     -         cmp ZpVar.Four.hi
0bba: f0 17     -         beq !msb_match+
0bbc: b1 fb     -         lda (ZpVar.One.lo),y 
0bbe: 91 fd     -         sta (ZpVar.Two.lo),y
0bc0: e6 50     -         inc ZpVar.Four.lo
0bc2: f0 0a     -         beq inc_msb
0bc4: c8        -         iny
0bc5: d0 ef     -         bne !loop-
0bc7: e6 fc     -         inc ZpVar.One.hi 	// inc MSB source 
0bc9: e6 fe     -         inc ZpVar.Two.hi 	// inc MSB dest 
0bcb: 4c b6 0b  -         jmp !loop-
0bce: e6 51     - inc_msb:inc ZpVar.Four.hi
0bd0: 4c c4 0b  -         jmp !cont-
0bd3: a5 4e     -         lda ZpVar.Three.lo
0bd5: c5 50     -         cmp ZpVar.Four.lo
0bd7: f0 03     -         beq !done+
0bd9: 4c bc 0b  -         jmp !copy-
0bdc: 60        -         rts
0bdd: a9 fd     - LoadPrgFileFromManagedBuffer:lda #ZpVar.One+2
0bdf: a2 ff     -         ldx #<ZpVar.One+4
0be1: a0 00     -         ldy #>ZpVar.One+4
0be3: 20 bd ff  -         jsr $ffbd     // call setnam
0be6: a9 01     -         lda #$01
0be8: a6 ba     -         ldx $ba       // last used device number
0bea: d0 02     -         bne !skip+
0bec: a2 08     -         ldx #$08      // default to device 8
0bee: a0 01     -         ldy #$01      // not $01 means: load to address stored in file
0bf0: 20 ba ff  -         jsr $ffba     // call setlfs
0bf3: a9 00     -         lda #$00      // $00 means: load to memory (not verify)
0bf5: 20 d5 ff  -         jsr $ffd5     // call load
0bf8: b0 03     -         bcs !error+    // if carry set, a load error has happened
0bfa: 4c fe 0b  -         jmp !done+
0bfd: 60        - Error:  rts
************************** Segment: Sweet16JumpTable ***************************
[Sweet16JumpTable]
08b6: 00        - OPTBL:  .byte <SET-1          // 1X
08b7: f7        - BRTBL:  .byte  <RTN-1          // 0
08b8: 03        -         .byte  <LD-1           // 2X
08b9: 8b        -         .byte  <BR-1           // 1
08ba: 13        -         .byte  <ST-1           // 3X
08bb: 8c        -         .byte  <BNC-1          // 2
08bc: 2b        -         .byte  <LDAT-1         // 4X
08bd: 9d        -         .byte  <BC-1           // 3
08be: 1c        -         .byte  <STAT-1         // 5X
08bf: a0        -         .byte  <BP-1           // 4
08c0: 35        -         .byte  <LDDAT-1        // 6X
08c1: a7        -         .byte  <BM-1           // 5
08c2: 3f        -         .byte  <STDAT-1        // 7X
08c3: ae        -         .byte  <BZ-1           // 6
08c4: e7        -         .byte  <POP-1          // 8X
08c5: b7        -         .byte  <BNZ-1          // 7
08c6: 49        -         .byte  <STPAT-1        // 9X
08c7: c0        -         .byte  <BM1-1          // 8
08c8: 73        -         .byte  <ADD-1          // AX
08c9: cb        -         .byte  <BNM1-1         // 9
08ca: 5c        -         .byte  <SUB-1          // BX
08cb: 0c        -         .byte  <BK-1           // A
08cc: eb        -         .byte  <POPD-1         // CX
08cd: d6        -         .byte  <RS-1           // B
08ce: 5e        -         .byte  <CPR-1          // DX
08cf: 81        -         .byte  <BS-1           // C
08d0: 24        -         .byte  <INR-1          // EX
08d1: 10        -         .byte  <XJSR-1         // D
08d2: 53        -         .byte  <DCR-1          // FX
08d3: 0d        -         .byte  <SETM-1         // E
08d4: d5        -         .byte  <NUL-1          // UNUSED
08d5: f4        -         .byte  <SETI-1         // F
***************************** Segment: Sweet16Page *****************************
[Sweet16Page]
0900: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
0901: 4c a2 08  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     - LD:     lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        - BK:     brk
090e: 4c 78 0a  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     - ST:     lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     - STAT:   lda  R0L	
091f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     - INR:    inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        - INR2:   rts
092c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  - STPAT:  jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     - DCR:    lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     - DCR2:   dec  R0L,X
095c: 60        -         rts
095d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
095f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  - SUB2:   sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     - ADD:    lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        - BR:     clc
098d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
098f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     - BR2:    adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        - BNC2:   rts
099e: b0 ec     - BC:     bcs  BR
09a0: 60        -         rts
09a1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        - NUL:    rts
09d7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  - POPD:   jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  - SETI:   jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  - RTN:    jmp  RTNZ
09fb: 20 54 09  - POP2:   jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  - SAVE:   sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  - RESTORE:lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        - BREAK_HANDLER:pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c 79 08  -         jmp SW16D
0a44: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts
************************** Segment: Sweet16OutOfPage ***************************
[Sweet16OutOfPage]
0a66: 20 44 0a  - SETI_OUTOFPAGE:jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c 79 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  - SETM_OUTOFPAGE:jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c 79 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c 79 08  -         jmp SW16D				// back to SWEET16
***************************** Segment: Sweet16Data *****************************
[Sweet16Data]
0aa6: 00        - ACCUMULATOR:.byte 0
0aa7: 00        - XREG:   .byte 0
0aa8: 00        - YREG:   .byte 0
0aa9: 00        - STATUS: .byte 0
0aaa: 00        - SW16_SAVE_RESTORE:.byte 0
****************************** Segment: TestData *******************************
[TestData]
3e3d: 73 00     - TEST_SUCCESS:.byte $73, $00
3e3f: 76 00     - TEST_FAILURE:.byte $76, $00
3e41: 00        - TEST_COUNT:.byte $00
3e42: 00        - TEST_PASS_COUNT:.byte $00
3e43: 00        - TEST_NAME_COUNT:.byte $00
3e44: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  - TEST_TITLE:.text "SWEET16 TEST RUNNER"
3e54: 4e 45 52                                        
3e57: 0d 00     -         .byte RETURN, NULL
3e59: 12 34     - TEST_MEMORY:.byte $12,$34
3e5b: 56 78     - TEST_MEMORY_2:.byte $56,$78
3e5d: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
3e5f: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
3e6f: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
3e7f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
