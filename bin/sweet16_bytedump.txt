******************************* Segment: Default *******************************
******************************** Segment: Main *********************************
[Main]
0810: 20 c4 3c  - Main:   jsr TestRun
0813: 20 1a 08  -         jsr Anykey
0816: 4c 23 08  -         jmp Reset
0819: 60        -         rts
081a: 20 9f ff  - Anykey: jsr scnkey  // scan keyboard
081d: 20 e4 ff  -         jsr getin	// put result into A
0820: f0 f8     -         beq !-	
0822: 60        -         rts
0823: 6c fc ff  - Reset:  jmp ($FFFC)
******************************* Segment: Sweet16 *******************************
[Sweet16]
0826: a9 00     - SW16_NONE:lda #$00
0828: 8d aa 0a  -         sta SW16_SAVE_RESTORE
082b: 4c 33 08  -         jmp SW160
082e: a9 01     - SW16:   lda #$01
0830: 8d aa 0a  -         sta SW16_SAVE_RESTORE
0833: f0 03     - SW160:  beq SW16A
0835: 20 16 0a  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
0838: 68        - SW16A:  pla
0839: 85 35     -         sta R15L            // INIT SWEET16 PC
083b: 68        -         pla                 // FROM RETURN
083c: 85 36     -         sta R15H	        // ADDRESS
083e: 20 44 08  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
0841: 4c 3e 08  -         jmp  SW16B          // ONE SWEET16 INSTR.
0844: e6 35     - SW16C:  inc  R15L
0846: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
0848: e6 36     -         inc  R15H
084a: a9 09     - SW16D:  lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
084c: 48        -         pha                 // PUSH ON STACK FOR RTS
084d: a0 00     -         ldy  #$00
084f: b1 35     -         lda  (R15L),Y       // FETCH INSTR
0851: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
0853: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
0854: aa        -         tax                 // TO X REG FOR INDEXING
0855: 4a        -         lsr
0856: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
0858: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
085a: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
085c: 4a        -         lsr
085d: 4a        -         lsr                 // OPCODE*2 TO LSB'S
085e: 4a        -         lsr
085f: a8        -         tay                 // TO Y REG FOR INDEXING
0860: b9 85 08  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
0863: 48        -         pha                 // ONTO STACK
0864: 60        -         rts                 // GOTO REG-OP ROUTINE
0865: e6 35     - TOBR:   inc  R15L
0867: d0 02     -         bne  TOBR2          // INCR PC
0869: e6 36     -         inc  R15H
086b: bd 88 08  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
086e: 48        -         pha                 // ONTO STACK FOR NON-REG OP
086f: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
0871: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
0872: 60        -         rts                 // GOTO NON-REG OP ROUTINE
0873: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
0875: 95 18     -         sta  R0H,X
0877: 88        -         dey
0878: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
087a: 95 17     -         sta  R0L,X
087c: 98        -         tya                 // Y REG CONTAINS 1
087d: 38        -         sec
087e: 65 35     -         adc  R15L           // ADD 2 TO PC
0880: 85 35     -         sta  R15L
0882: 90 02     -         bcc  SET2
0884: e6 36     -         inc  R15H
0886: 60        - SET2:   rts

[Sweet16JumpTable]
0887: 00        -         .byte <SET-1          // 1X
0888: f7        -         .byte  <RTN-1          // 0
0889: 03        -         .byte  <LD-1           // 2X
088a: 8b        -         .byte  <BR-1           // 1
088b: 13        -         .byte  <ST-1           // 3X
088c: 8c        -         .byte  <BNC-1          // 2
088d: 2b        -         .byte  <LDAT-1         // 4X
088e: 9d        -         .byte  <BC-1           // 3
088f: 1c        -         .byte  <STAT-1         // 5X
0890: a0        -         .byte  <BP-1           // 4
0891: 35        -         .byte  <LDDAT-1        // 6X
0892: a7        -         .byte  <BM-1           // 5
0893: 3f        -         .byte  <STDAT-1        // 7X
0894: ae        -         .byte  <BZ-1           // 6
0895: e7        -         .byte  <POP-1          // 8X
0896: b7        -         .byte  <BNZ-1          // 7
0897: 49        -         .byte  <STPAT-1        // 9X
0898: c0        -         .byte  <BM1-1          // 8
0899: 73        -         .byte  <ADD-1          // AX
089a: cb        -         .byte  <BNM1-1         // 9
089b: 5c        -         .byte  <SUB-1          // BX
089c: 0c        -         .byte  <BK-1           // A
089d: eb        -         .byte  <POPD-1         // CX
089e: d6        -         .byte  <RS-1           // B
089f: 5e        -         .byte  <CPR-1          // DX
08a0: 81        -         .byte  <BS-1           // C
08a1: 24        -         .byte  <INR-1          // EX
08a2: 10        -         .byte  <XJSR-1         // D
08a3: 53        -         .byte  <DCR-1          // FX
08a4: 0d        -         .byte  <SETM-1         // E
08a5: d5        -         .byte  <NUL-1          // UNUSED
08a6: f4        -         .byte  <SETI-1         // F

[Sweet16Page]
0900: ea        -         nop                // otherwise RTS "cleverness" not so clever
0901: 4c 73 08  -         jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     -         lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        -         brk
090e: 4c 78 0a  -         jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  -         jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     -         lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     -         lda  R0L	
091f: 81 17     -         sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     -         sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     -         inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        -         rts
092c: a1 17     -         lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  -         jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  -         jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  -         jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     -         lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     -         dec  R0L,X
095c: 60        -         rts
095d: a0 00     -         ldy  #$00           // RESULT TO R0
095f: 38        -         sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  -         sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     -         lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     -         lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        -         clc
098d: b0 0e     -         bcs  BNC2           // NO CARRY TEST	
098f: b1 35     -         lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     -         adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        -         rts
099e: b0 ec     -         bcs  BR
09a0: 60        -         rts
09a1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        -         rts
09d7: a2 18     -         ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     -         ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  -         jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  -         jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  -         jmp  RTNZ
09fb: 20 54 09  -         jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     -         ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        -         pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  -         jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  -         sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  -         lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        -         pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c 4a 08  -         jmp SW16D
0a44: b1 35     -         lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts

[Sweet16OutOfPage]
0a66: 20 44 0a  -         jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c 4a 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  -         jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c 4a 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     -         lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c 4a 08  -         jmp SW16D				// back to SWEET16

[Sweet16Data]
0aa6: 00        -         .byte 0
0aa7: 00        -         .byte 0
0aa8: 00        -         .byte 0
0aa9: 00        -         .byte 0
0aaa: 00        -         .byte 0
******************************** Segment: Util *********************************
[UtilData]
0aab: 0d 00     -         .byte RETURN, NULL

[ManagedBuffer256]
0aad: ff 00     -         .byte <value, >value
0aaf: 00 00     -         .byte <value, >value
0ab1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill $ff, $00
0ad1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0af1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
0bb0: a0 00     -         ldy #$00
0bb2: 84 50     -         sty ZpVar.Four.lo     // LSB size
0bb4: 84 51     -         sty ZpVar.Four.hi     // MSH size
0bb6: a5 4f     -         lda ZpVar.Three.hi
0bb8: c5 51     -         cmp ZpVar.Four.hi
0bba: f0 17     -         beq !msb_match+
0bbc: b1 fb     -         lda (ZpVar.One.lo),y 
0bbe: 91 fd     -         sta (ZpVar.Two.lo),y
0bc0: e6 50     -         inc ZpVar.Four.lo
0bc2: f0 0a     -         beq inc_msb
0bc4: c8        -         iny
0bc5: d0 ef     -         bne !loop-
0bc7: e6 fc     -         inc ZpVar.One.hi 	// inc MSB source 
0bc9: e6 fe     -         inc ZpVar.Two.hi 	// inc MSB dest 
0bcb: 4c b6 0b  -         jmp !loop-
0bce: e6 51     -         inc ZpVar.Four.hi
0bd0: 4c c4 0b  -         jmp !cont-
0bd3: a5 4e     -         lda ZpVar.Three.lo
0bd5: c5 50     -         cmp ZpVar.Four.lo
0bd7: f0 03     -         beq !done+
0bd9: 4c bc 0b  -         jmp !copy-
0bdc: 60        -         rts
0bdd: a9 fd     -         lda #ZpVar.One+2
0bdf: a2 ff     -         ldx #<ZpVar.One+4
0be1: a0 00     -         ldy #>ZpVar.One+4
0be3: 20 bd ff  -         jsr $ffbd     // call setnam
0be6: a9 01     -         lda #$01
0be8: a6 ba     -         ldx $ba       // last used device number
0bea: d0 02     -         bne !skip+
0bec: a2 08     -         ldx #$08      // default to device 8
0bee: a0 01     -         ldy #$01      // not $01 means: load to address stored in file
0bf0: 20 ba ff  -         jsr $ffba     // call setlfs
0bf3: a9 00     -         lda #$00      // $00 means: load to memory (not verify)
0bf5: 20 d5 ff  -         jsr $ffd5     // call load
0bf8: b0 03     -         bcs !error+    // if carry set, a load error has happened
0bfa: 4c e2 0c  -         jmp !done+
0bfd: 85 50     -         sta ZpVar.Four
0bff: a2 00     -         ldx #$00
0c01: bd da 0c  -         lda msg,x
0c04: f0 07     -         beq !done+
0c06: 20 d2 ff  -         jsr kernal_chrout
0c09: e8        -         inx
0c0a: 4c 01 0c  -         jmp !loop-
0c0d: a5 50     -         lda value
0c0f: c9 64     -         cmp #three_digit
0c11: 90 58     -         bcc !twoDigit+
0c13: a5 50     -         lda value
0c15: c9 64     -         cmp #reference
0c17: 90 09     -         bcc !done+
0c19: a0 00     -         ldy #$00		// counter
0c1b: c8        -         iny				// count references's
0c1c: e9 64     -         sbc #reference
0c1e: c9 64     -         cmp #reference
0c20: b0 f9     -         bcs !loop-		// still larger than reference
0c22: 98        -         tya
0c23: 48        -         pha
0c24: 09 30     -         ora #$30
0c26: 20 d2 ff  -         jsr kernal_chrout
0c29: 68        -         pla
0c2a: a8        -         tay
0c2b: a5 50     -         lda value
0c2d: 38        -         sec
0c2e: e9 64     -         sbc #three_digit
0c30: 88        -         dey
0c31: d0 fa     -         bne !subby-
0c33: 85 fe     -         sta zp
0c35: a5 fe     -         lda value
0c37: c9 0a     -         cmp #two_digit
0c39: 90 28     -         bcc !oneDigit+
0c3b: a5 fe     -         lda value
0c3d: c9 0a     -         cmp #reference
0c3f: 90 09     -         bcc !done+
0c41: a0 00     -         ldy #$00		// counter
0c43: c8        -         iny				// count references's
0c44: e9 0a     -         sbc #reference
0c46: c9 0a     -         cmp #reference
0c48: b0 f9     -         bcs !loop-		// still larger than reference
0c4a: 98        -         tya
0c4b: 48        -         pha
0c4c: 09 30     -         ora #$30
0c4e: 20 d2 ff  -         jsr kernal_chrout
0c51: 68        -         pla
0c52: a8        -         tay
0c53: a5 fe     -         lda value
0c55: 38        -         sec
0c56: e9 0a     -         sbc #two_digit
0c58: 88        -         dey
0c59: d0 fa     -         bne !subby-
0c5b: 09 30     -         ora #$30
0c5d: 20 d2 ff  -         jsr kernal_chrout
0c60: 4c 68 0c  -         jmp !done+
0c63: 09 30     -         ora #$30
0c65: 20 d2 ff  -         jsr kernal_chrout
0c68: 4c 9e 0c  -         jmp !done+
0c6b: a5 50     -         lda value
0c6d: c9 0a     -         cmp #two_digit
0c6f: 90 28     -         bcc !oneDigit+
0c71: a5 50     -         lda value
0c73: c9 0a     -         cmp #reference
0c75: 90 09     -         bcc !done+
0c77: a0 00     -         ldy #$00		// counter
0c79: c8        -         iny				// count references's
0c7a: e9 0a     -         sbc #reference
0c7c: c9 0a     -         cmp #reference
0c7e: b0 f9     -         bcs !loop-		// still larger than reference
0c80: 98        -         tya
0c81: 48        -         pha
0c82: 09 30     -         ora #$30
0c84: 20 d2 ff  -         jsr kernal_chrout
0c87: 68        -         pla
0c88: a8        -         tay
0c89: a5 50     -         lda value
0c8b: 38        -         sec
0c8c: e9 0a     -         sbc #two_digit
0c8e: 88        -         dey
0c8f: d0 fa     -         bne !subby-
0c91: 09 30     -         ora #$30
0c93: 20 d2 ff  -         jsr kernal_chrout
0c96: 4c 9e 0c  -         jmp !done+
0c99: 09 30     -         ora #$30
0c9b: 20 d2 ff  -         jsr kernal_chrout
0c9e: a5 50     -         lda ZpVar.Four
0ca0: c9 04     -         cmp #$04
0ca2: f0 17     -         beq !fileNotFound+
0ca4: 4c a4 0c  -         jmp *
0ca7: 20 3e 20 46 49 4c 45 20 4e 4f 54 20 46 4f 55 4e  -         .text " > FILE NOT FOUND: "
0cb7: 44 3a 20                                        
0cba: 00        -         .byte NULL
0cbb: a2 00     -         ldx #$00
0cbd: bd a7 0c  -         lda msg,x
0cc0: f0 07     -         beq !done+
0cc2: 20 d2 ff  -         jsr kernal_chrout
0cc5: e8        -         inx
0cc6: 4c bd 0c  -         jmp !loop-
0cc9: a2 00     -         ldx #$00
0ccb: b5 ff     -         lda msg,x
0ccd: f0 07     -         beq !done+
0ccf: 20 d2 ff  -         jsr kernal_chrout
0cd2: e8        -         inx
0cd3: 4c cb 0c  -         jmp !loop-
0cd6: 4c d6 0c  -         jmp *
0cd9: 60        -         rts
0cda: 45 52 52 4f 52 3a 20                             -         .text "ERROR: "
0ce1: 00        -         .byte NULL
0ce2: 60        -         rts
******************************** Segment: Tests ********************************
[Set]
0ce3: ee 28 3f  - SET_TEST:inc TEST_NAME_COUNT
0ce6: ad 86 02  -         lda foreground_color
0ce9: 48        -         pha
0cea: a9 0f     -         lda #color
0cec: 8d 86 02  -         sta foreground_color
0cef: a2 00     -         ldx #$00
0cf1: bd 04 0d  -         lda msg,x
0cf4: f0 07     -         beq !done+
0cf6: 20 d2 ff  -         jsr kernal_chrout
0cf9: e8        -         inx
0cfa: 4c f1 0c  -         jmp !loop-
0cfd: 68        -         pla
0cfe: 8d 86 02  -         sta foreground_color
0d01: 4c 0d 0d  -         jmp !done+
0d04: 20 20     - memory: .fill spacing, spacebar
0d06: 53 45 54  -         .text name
0d09: 2e 2e 2e  -         .text "..."
0d0c: 00        -         .byte NULL
0d0d: 20 2e 08  -         jsr SW16
0d10: 15        -         .byte opcode(op, register)
0d11: 34 12     -         .word address.getValue()
0d13: 00        -         .byte $00 }
0d14: ee 26 3f  -         inc TEST_COUNT
0d17: ad 86 02  -         lda foreground_color
0d1a: 48        -         pha
0d1b: a9 0e     -         lda #color
0d1d: 8d 86 02  -         sta foreground_color
0d20: a2 00     -         ldx #$00
0d22: bd 35 0d  -         lda msg,x
0d25: f0 07     -         beq !done+
0d27: 20 d2 ff  -         jsr kernal_chrout
0d2a: e8        -         inx
0d2b: 4c 22 0d  -         jmp !loop-
0d2e: 68        -         pla
0d2f: 8d 86 02  -         sta foreground_color
0d32: 4c 3d 0d  -         jmp !done+
0d35: 20        - memory: .byte spacebar
0d36: 56 41 4c 55 45                                   -         .text description
0d3b: 3a        -         .text ":"
0d3c: 00        -         .byte NULL
0d3d: a6 21     -         ldx rl(register.getValue())
0d3f: a4 22     -         ldy rh(register.getValue())
0d41: e0 34     -         cpx #<value
0d43: d0 25     -         bne !failed+
0d45: c0 12     -         cpy #>value
0d47: d0 21     -         bne !failed+
0d49: ee 27 3f  -         inc TEST_PASS_COUNT
0d4c: ad 86 02  -         lda foreground_color
0d4f: 48        -         pha
0d50: a9 05     -         lda #color
0d52: 8d 86 02  -         sta foreground_color
0d55: a2 00     -         ldx #$00
0d57: bd 22 3f  -         lda msg,x
0d5a: f0 07     -         beq !done+
0d5c: 20 d2 ff  -         jsr kernal_chrout
0d5f: e8        -         inx
0d60: 4c 57 0d  -         jmp !loop-
0d63: 68        -         pla
0d64: 8d 86 02  -         sta foreground_color
0d67: 4c 85 0d  -         jmp !done+
0d6a: ad 86 02  -         lda foreground_color
0d6d: 48        -         pha
0d6e: a9 02     -         lda #color
0d70: 8d 86 02  -         sta foreground_color
0d73: a2 00     -         ldx #$00
0d75: bd 24 3f  -         lda msg,x
0d78: f0 07     -         beq !done+
0d7a: 20 d2 ff  -         jsr kernal_chrout
0d7d: e8        -         inx
0d7e: 4c 75 0d  -         jmp !loop-
0d81: 68        -         pla
0d82: 8d 86 02  -         sta foreground_color
0d85: a2 00     -         ldx #$00
0d87: bd 96 0d  -         lda msg,x
0d8a: f0 07     -         beq !done+
0d8c: 20 d2 ff  -         jsr kernal_chrout
0d8f: e8        -         inx
0d90: 4c 87 0d  -         jmp !loop-
0d93: 4c 98 0d  -         jmp !done+
0d96: 0d 00     - memory: .byte RETURN, NULL
0d98: ae 28 3f  -         ldx TEST_NAME_COUNT
0d9b: e0 15     -         cpx #TESTS_PER_PAGE
0d9d: d0 5d     -         bne !exit+
0d9f: ad 86 02  -         lda foreground_color
0da2: 48        -         pha
0da3: a9 01     -         lda #color
0da5: 8d 86 02  -         sta foreground_color
0da8: a2 00     -         ldx #$00
0daa: bd bd 0d  -         lda msg,x
0dad: f0 07     -         beq !done+
0daf: 20 d2 ff  -         jsr kernal_chrout
0db2: e8        -         inx
0db3: 4c aa 0d  -         jmp !loop-
0db6: 68        -         pla
0db7: 8d 86 02  -         sta foreground_color
0dba: 4c dc 0d  -         jmp !no_key+
0dbd: 0d        - memory: .byte RETURN
0dbe: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0dce: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0dda: 0d 00     -         .byte RETURN, NULL
0ddc: 20 9f ff  -         jsr scnkey  // scan keyboard
0ddf: 20 e4 ff  -         jsr getin	// put result into A
0de2: f0 f8     -         beq !no_key-
0de4: a2 00     -         ldx #$00
0de6: bd f5 0d  -         lda msg,x
0de9: f0 07     -         beq !done+
0deb: 20 d2 ff  -         jsr kernal_chrout
0dee: e8        -         inx
0def: 4c e6 0d  -         jmp !loop-
0df2: 4c f7 0d  -         jmp !done+
0df5: 0d 00     - newline:.byte RETURN, NULL
0df7: a2 00     -         ldx #$00
0df9: 8e 28 3f  -         stx TEST_NAME_COUNT
0dfc: 60        -         rts

[Load]
0dfd: ee 28 3f  - LOAD_TEST:inc TEST_NAME_COUNT
0e00: ad 86 02  -         lda foreground_color
0e03: 48        -         pha
0e04: a9 0f     -         lda #color
0e06: 8d 86 02  -         sta foreground_color
0e09: a2 00     -         ldx #$00
0e0b: bd 1e 0e  -         lda msg,x
0e0e: f0 07     -         beq !done+
0e10: 20 d2 ff  -         jsr kernal_chrout
0e13: e8        -         inx
0e14: 4c 0b 0e  -         jmp !loop-
0e17: 68        -         pla
0e18: 8d 86 02  -         sta foreground_color
0e1b: 4c 28 0e  -         jmp !done+
0e1e: 20 20     - memory: .fill spacing, spacebar
0e20: 4c 4f 41 44                                      -         .text name
0e24: 2e 2e 2e  -         .text "..."
0e27: 00        -         .byte NULL
0e28: 20 2e 08  -         jsr SW16
0e2b: 15        -         .byte opcode(op, register)
0e2c: 21 43     -         .word address.getValue()
0e2e: 25        -         .byte opcode($20, register) }
0e2f: 00        -         .byte $00 }
0e30: ee 26 3f  -         inc TEST_COUNT
0e33: ad 86 02  -         lda foreground_color
0e36: 48        -         pha
0e37: a9 0e     -         lda #color
0e39: 8d 86 02  -         sta foreground_color
0e3c: a2 00     -         ldx #$00
0e3e: bd 51 0e  -         lda msg,x
0e41: f0 07     -         beq !done+
0e43: 20 d2 ff  -         jsr kernal_chrout
0e46: e8        -         inx
0e47: 4c 3e 0e  -         jmp !loop-
0e4a: 68        -         pla
0e4b: 8d 86 02  -         sta foreground_color
0e4e: 4c 57 0e  -         jmp !done+
0e51: 20        - memory: .byte spacebar
0e52: 41 43 43  -         .text description
0e55: 3a        -         .text ":"
0e56: 00        -         .byte NULL
0e57: a6 17     -         ldx rl(register.getValue())
0e59: a4 18     -         ldy rh(register.getValue())
0e5b: e0 21     -         cpx #<value
0e5d: d0 25     -         bne !failed+
0e5f: c0 43     -         cpy #>value
0e61: d0 21     -         bne !failed+
0e63: ee 27 3f  -         inc TEST_PASS_COUNT
0e66: ad 86 02  -         lda foreground_color
0e69: 48        -         pha
0e6a: a9 05     -         lda #color
0e6c: 8d 86 02  -         sta foreground_color
0e6f: a2 00     -         ldx #$00
0e71: bd 22 3f  -         lda msg,x
0e74: f0 07     -         beq !done+
0e76: 20 d2 ff  -         jsr kernal_chrout
0e79: e8        -         inx
0e7a: 4c 71 0e  -         jmp !loop-
0e7d: 68        -         pla
0e7e: 8d 86 02  -         sta foreground_color
0e81: 4c 9f 0e  -         jmp !done+
0e84: ad 86 02  -         lda foreground_color
0e87: 48        -         pha
0e88: a9 02     -         lda #color
0e8a: 8d 86 02  -         sta foreground_color
0e8d: a2 00     -         ldx #$00
0e8f: bd 24 3f  -         lda msg,x
0e92: f0 07     -         beq !done+
0e94: 20 d2 ff  -         jsr kernal_chrout
0e97: e8        -         inx
0e98: 4c 8f 0e  -         jmp !loop-
0e9b: 68        -         pla
0e9c: 8d 86 02  -         sta foreground_color
0e9f: a2 00     -         ldx #$00
0ea1: bd b0 0e  -         lda msg,x
0ea4: f0 07     -         beq !done+
0ea6: 20 d2 ff  -         jsr kernal_chrout
0ea9: e8        -         inx
0eaa: 4c a1 0e  -         jmp !loop-
0ead: 4c b2 0e  -         jmp !done+
0eb0: 0d 00     - memory: .byte RETURN, NULL
0eb2: ae 28 3f  -         ldx TEST_NAME_COUNT
0eb5: e0 15     -         cpx #TESTS_PER_PAGE
0eb7: d0 5d     -         bne !exit+
0eb9: ad 86 02  -         lda foreground_color
0ebc: 48        -         pha
0ebd: a9 01     -         lda #color
0ebf: 8d 86 02  -         sta foreground_color
0ec2: a2 00     -         ldx #$00
0ec4: bd d7 0e  -         lda msg,x
0ec7: f0 07     -         beq !done+
0ec9: 20 d2 ff  -         jsr kernal_chrout
0ecc: e8        -         inx
0ecd: 4c c4 0e  -         jmp !loop-
0ed0: 68        -         pla
0ed1: 8d 86 02  -         sta foreground_color
0ed4: 4c f6 0e  -         jmp !no_key+
0ed7: 0d        - memory: .byte RETURN
0ed8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0ee8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0ef4: 0d 00     -         .byte RETURN, NULL
0ef6: 20 9f ff  -         jsr scnkey  // scan keyboard
0ef9: 20 e4 ff  -         jsr getin	// put result into A
0efc: f0 f8     -         beq !no_key-
0efe: a2 00     -         ldx #$00
0f00: bd 0f 0f  -         lda msg,x
0f03: f0 07     -         beq !done+
0f05: 20 d2 ff  -         jsr kernal_chrout
0f08: e8        -         inx
0f09: 4c 00 0f  -         jmp !loop-
0f0c: 4c 11 0f  -         jmp !done+
0f0f: 0d 00     - newline:.byte RETURN, NULL
0f11: a2 00     -         ldx #$00
0f13: 8e 28 3f  -         stx TEST_NAME_COUNT
0f16: 60        -         rts
0f17: ee 28 3f  - STORE_TEST:inc TEST_NAME_COUNT
0f1a: ad 86 02  -         lda foreground_color
0f1d: 48        -         pha
0f1e: a9 0f     -         lda #color
0f20: 8d 86 02  -         sta foreground_color
0f23: a2 00     -         ldx #$00
0f25: bd 38 0f  -         lda msg,x
0f28: f0 07     -         beq !done+
0f2a: 20 d2 ff  -         jsr kernal_chrout
0f2d: e8        -         inx
0f2e: 4c 25 0f  -         jmp !loop-
0f31: 68        -         pla
0f32: 8d 86 02  -         sta foreground_color
0f35: 4c 43 0f  -         jmp !done+
0f38: 20 20     - memory: .fill spacing, spacebar
0f3a: 53 54 4f 52 45                                   -         .text name
0f3f: 2e 2e 2e  -         .text "..."
0f42: 00        -         .byte NULL
0f43: 20 2e 08  -         jsr SW16
0f46: 15        -         .byte opcode(op, register)
0f47: 34 12     -         .word address.getValue()
0f49: 25        -         .byte opcode($20, register) }
0f4a: 36        -         .byte opcode($30, register) }
0f4b: 00        -         .byte $00 }
0f4c: ee 26 3f  -         inc TEST_COUNT
0f4f: ad 86 02  -         lda foreground_color
0f52: 48        -         pha
0f53: a9 0e     -         lda #color
0f55: 8d 86 02  -         sta foreground_color
0f58: a2 00     -         ldx #$00
0f5a: bd 6d 0f  -         lda msg,x
0f5d: f0 07     -         beq !done+
0f5f: 20 d2 ff  -         jsr kernal_chrout
0f62: e8        -         inx
0f63: 4c 5a 0f  -         jmp !loop-
0f66: 68        -         pla
0f67: 8d 86 02  -         sta foreground_color
0f6a: 4c 75 0f  -         jmp !done+
0f6d: 20        - memory: .byte spacebar
0f6e: 56 41 4c 55 45                                   -         .text description
0f73: 3a        -         .text ":"
0f74: 00        -         .byte NULL
0f75: a6 23     -         ldx rl(register.getValue())
0f77: a4 24     -         ldy rh(register.getValue())
0f79: e0 34     -         cpx #<value
0f7b: d0 25     -         bne !failed+
0f7d: c0 12     -         cpy #>value
0f7f: d0 21     -         bne !failed+
0f81: ee 27 3f  -         inc TEST_PASS_COUNT
0f84: ad 86 02  -         lda foreground_color
0f87: 48        -         pha
0f88: a9 05     -         lda #color
0f8a: 8d 86 02  -         sta foreground_color
0f8d: a2 00     -         ldx #$00
0f8f: bd 22 3f  -         lda msg,x
0f92: f0 07     -         beq !done+
0f94: 20 d2 ff  -         jsr kernal_chrout
0f97: e8        -         inx
0f98: 4c 8f 0f  -         jmp !loop-
0f9b: 68        -         pla
0f9c: 8d 86 02  -         sta foreground_color
0f9f: 4c bd 0f  -         jmp !done+
0fa2: ad 86 02  -         lda foreground_color
0fa5: 48        -         pha
0fa6: a9 02     -         lda #color
0fa8: 8d 86 02  -         sta foreground_color
0fab: a2 00     -         ldx #$00
0fad: bd 24 3f  -         lda msg,x
0fb0: f0 07     -         beq !done+
0fb2: 20 d2 ff  -         jsr kernal_chrout
0fb5: e8        -         inx
0fb6: 4c ad 0f  -         jmp !loop-
0fb9: 68        -         pla
0fba: 8d 86 02  -         sta foreground_color
0fbd: a2 00     -         ldx #$00
0fbf: bd ce 0f  -         lda msg,x
0fc2: f0 07     -         beq !done+
0fc4: 20 d2 ff  -         jsr kernal_chrout
0fc7: e8        -         inx
0fc8: 4c bf 0f  -         jmp !loop-
0fcb: 4c d0 0f  -         jmp !done+
0fce: 0d 00     - memory: .byte RETURN, NULL
0fd0: ae 28 3f  -         ldx TEST_NAME_COUNT
0fd3: e0 15     -         cpx #TESTS_PER_PAGE
0fd5: d0 5d     -         bne !exit+
0fd7: ad 86 02  -         lda foreground_color
0fda: 48        -         pha
0fdb: a9 01     -         lda #color
0fdd: 8d 86 02  -         sta foreground_color
0fe0: a2 00     -         ldx #$00
0fe2: bd f5 0f  -         lda msg,x
0fe5: f0 07     -         beq !done+
0fe7: 20 d2 ff  -         jsr kernal_chrout
0fea: e8        -         inx
0feb: 4c e2 0f  -         jmp !loop-
0fee: 68        -         pla
0fef: 8d 86 02  -         sta foreground_color
0ff2: 4c 14 10  -         jmp !no_key+
0ff5: 0d        - memory: .byte RETURN
0ff6: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1006: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1012: 0d 00     -         .byte RETURN, NULL
1014: 20 9f ff  -         jsr scnkey  // scan keyboard
1017: 20 e4 ff  -         jsr getin	// put result into A
101a: f0 f8     -         beq !no_key-
101c: a2 00     -         ldx #$00
101e: bd 2d 10  -         lda msg,x
1021: f0 07     -         beq !done+
1023: 20 d2 ff  -         jsr kernal_chrout
1026: e8        -         inx
1027: 4c 1e 10  -         jmp !loop-
102a: 4c 2f 10  -         jmp !done+
102d: 0d 00     - newline:.byte RETURN, NULL
102f: a2 00     -         ldx #$00
1031: 8e 28 3f  -         stx TEST_NAME_COUNT
1034: 60        -         rts
1035: ee 28 3f  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
1038: ad 86 02  -         lda foreground_color
103b: 48        -         pha
103c: a9 0f     -         lda #color
103e: 8d 86 02  -         sta foreground_color
1041: a2 00     -         ldx #$00
1043: bd 56 10  -         lda msg,x
1046: f0 07     -         beq !done+
1048: 20 d2 ff  -         jsr kernal_chrout
104b: e8        -         inx
104c: 4c 43 10  -         jmp !loop-
104f: 68        -         pla
1050: 8d 86 02  -         sta foreground_color
1053: 4c 69 10  -         jmp !done+
1056: 20 20     - memory: .fill spacing, spacebar
1058: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
1065: 2e 2e 2e  -         .text "..."
1068: 00        -         .byte NULL
1069: 20 2e 08  -         jsr SW16
106c: 15        -         .byte opcode(op, register)
106d: 3e 3f     -         .word address.getValue()
106f: 45        -         .byte opcode($40, register) }
1070: 00        -         .byte $00 }
1071: ee 26 3f  -         inc TEST_COUNT
1074: ad 86 02  -         lda foreground_color
1077: 48        -         pha
1078: a9 0e     -         lda #color
107a: 8d 86 02  -         sta foreground_color
107d: a2 00     -         ldx #$00
107f: bd 92 10  -         lda msg,x
1082: f0 07     -         beq !done+
1084: 20 d2 ff  -         jsr kernal_chrout
1087: e8        -         inx
1088: 4c 7f 10  -         jmp !loop-
108b: 68        -         pla
108c: 8d 86 02  -         sta foreground_color
108f: 4c 98 10  -         jmp !done+
1092: 20        - memory: .byte spacebar
1093: 41 43 43  -         .text description
1096: 3a        -         .text ":"
1097: 00        -         .byte NULL
1098: a6 17     -         ldx rl(register.getValue())
109a: a4 18     -         ldy rh(register.getValue())
109c: ec 3e 3f  -         cpx address
109f: d0 21     -         bne !failed+
10a1: ee 27 3f  -         inc TEST_PASS_COUNT
10a4: ad 86 02  -         lda foreground_color
10a7: 48        -         pha
10a8: a9 05     -         lda #color
10aa: 8d 86 02  -         sta foreground_color
10ad: a2 00     -         ldx #$00
10af: bd 22 3f  -         lda msg,x
10b2: f0 07     -         beq !done+
10b4: 20 d2 ff  -         jsr kernal_chrout
10b7: e8        -         inx
10b8: 4c af 10  -         jmp !loop-
10bb: 68        -         pla
10bc: 8d 86 02  -         sta foreground_color
10bf: 4c dd 10  -         jmp !done+
10c2: ad 86 02  -         lda foreground_color
10c5: 48        -         pha
10c6: a9 02     -         lda #color
10c8: 8d 86 02  -         sta foreground_color
10cb: a2 00     -         ldx #$00
10cd: bd 24 3f  -         lda msg,x
10d0: f0 07     -         beq !done+
10d2: 20 d2 ff  -         jsr kernal_chrout
10d5: e8        -         inx
10d6: 4c cd 10  -         jmp !loop-
10d9: 68        -         pla
10da: 8d 86 02  -         sta foreground_color
10dd: ee 26 3f  -         inc TEST_COUNT
10e0: ad 86 02  -         lda foreground_color
10e3: 48        -         pha
10e4: a9 0e     -         lda #color
10e6: 8d 86 02  -         sta foreground_color
10e9: a2 00     -         ldx #$00
10eb: bd fe 10  -         lda msg,x
10ee: f0 07     -         beq !done+
10f0: 20 d2 ff  -         jsr kernal_chrout
10f3: e8        -         inx
10f4: 4c eb 10  -         jmp !loop-
10f7: 68        -         pla
10f8: 8d 86 02  -         sta foreground_color
10fb: 4c 04 11  -         jmp !done+
10fe: 20        - memory: .byte spacebar
10ff: 52 45 47  -         .text description
1102: 3a        -         .text ":"
1103: 00        -         .byte NULL
1104: a6 21     -         ldx rl(register.getValue())
1106: a4 22     -         ldy rh(register.getValue())
1108: e0 3f     -         cpx #<value
110a: d0 25     -         bne !failed+
110c: c0 3f     -         cpy #>value
110e: d0 21     -         bne !failed+
1110: ee 27 3f  -         inc TEST_PASS_COUNT
1113: ad 86 02  -         lda foreground_color
1116: 48        -         pha
1117: a9 05     -         lda #color
1119: 8d 86 02  -         sta foreground_color
111c: a2 00     -         ldx #$00
111e: bd 22 3f  -         lda msg,x
1121: f0 07     -         beq !done+
1123: 20 d2 ff  -         jsr kernal_chrout
1126: e8        -         inx
1127: 4c 1e 11  -         jmp !loop-
112a: 68        -         pla
112b: 8d 86 02  -         sta foreground_color
112e: 4c 4c 11  -         jmp !done+
1131: ad 86 02  -         lda foreground_color
1134: 48        -         pha
1135: a9 02     -         lda #color
1137: 8d 86 02  -         sta foreground_color
113a: a2 00     -         ldx #$00
113c: bd 24 3f  -         lda msg,x
113f: f0 07     -         beq !done+
1141: 20 d2 ff  -         jsr kernal_chrout
1144: e8        -         inx
1145: 4c 3c 11  -         jmp !loop-
1148: 68        -         pla
1149: 8d 86 02  -         sta foreground_color
114c: a2 00     -         ldx #$00
114e: bd 5d 11  -         lda msg,x
1151: f0 07     -         beq !done+
1153: 20 d2 ff  -         jsr kernal_chrout
1156: e8        -         inx
1157: 4c 4e 11  -         jmp !loop-
115a: 4c 5f 11  -         jmp !done+
115d: 0d 00     - memory: .byte RETURN, NULL
115f: ae 28 3f  -         ldx TEST_NAME_COUNT
1162: e0 15     -         cpx #TESTS_PER_PAGE
1164: d0 5d     -         bne !exit+
1166: ad 86 02  -         lda foreground_color
1169: 48        -         pha
116a: a9 01     -         lda #color
116c: 8d 86 02  -         sta foreground_color
116f: a2 00     -         ldx #$00
1171: bd 84 11  -         lda msg,x
1174: f0 07     -         beq !done+
1176: 20 d2 ff  -         jsr kernal_chrout
1179: e8        -         inx
117a: 4c 71 11  -         jmp !loop-
117d: 68        -         pla
117e: 8d 86 02  -         sta foreground_color
1181: 4c a3 11  -         jmp !no_key+
1184: 0d        - memory: .byte RETURN
1185: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1195: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
11a1: 0d 00     -         .byte RETURN, NULL
11a3: 20 9f ff  -         jsr scnkey  // scan keyboard
11a6: 20 e4 ff  -         jsr getin	// put result into A
11a9: f0 f8     -         beq !no_key-
11ab: a2 00     -         ldx #$00
11ad: bd bc 11  -         lda msg,x
11b0: f0 07     -         beq !done+
11b2: 20 d2 ff  -         jsr kernal_chrout
11b5: e8        -         inx
11b6: 4c ad 11  -         jmp !loop-
11b9: 4c be 11  -         jmp !done+
11bc: 0d 00     - newline:.byte RETURN, NULL
11be: a2 00     -         ldx #$00
11c0: 8e 28 3f  -         stx TEST_NAME_COUNT
11c3: 60        -         rts
11c4: ee 28 3f  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
11c7: ad 86 02  -         lda foreground_color
11ca: 48        -         pha
11cb: a9 0f     -         lda #color
11cd: 8d 86 02  -         sta foreground_color
11d0: a2 00     -         ldx #$00
11d2: bd e5 11  -         lda msg,x
11d5: f0 07     -         beq !done+
11d7: 20 d2 ff  -         jsr kernal_chrout
11da: e8        -         inx
11db: 4c d2 11  -         jmp !loop-
11de: 68        -         pla
11df: 8d 86 02  -         sta foreground_color
11e2: 4c f9 11  -         jmp !done+
11e5: 20 20     - memory: .fill spacing, spacebar
11e7: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
11f5: 2e 2e 2e  -         .text "..."
11f8: 00        -         .byte NULL
11f9: 20 2e 08  -         jsr SW16
11fc: 15        -         .byte opcode(op, register)
11fd: 3e 3f     -         .word address.getValue()
11ff: 16        -         .byte opcode(op, register)
1200: 40 3f     -         .word address.getValue()
1202: 45        -         .byte opcode($40, register) }
1203: 56        -         .byte opcode($50, register) }
1204: 00        -         .byte $00 }
1205: ee 26 3f  -         inc TEST_COUNT
1208: ad 86 02  -         lda foreground_color
120b: 48        -         pha
120c: a9 0e     -         lda #color
120e: 8d 86 02  -         sta foreground_color
1211: a2 00     -         ldx #$00
1213: bd 26 12  -         lda msg,x
1216: f0 07     -         beq !done+
1218: 20 d2 ff  -         jsr kernal_chrout
121b: e8        -         inx
121c: 4c 13 12  -         jmp !loop-
121f: 68        -         pla
1220: 8d 86 02  -         sta foreground_color
1223: 4c 2c 12  -         jmp !done+
1226: 20        - memory: .byte spacebar
1227: 4d 45 4d  -         .text description
122a: 3a        -         .text ":"
122b: 00        -         .byte NULL
122c: a2 ff     -         ldx #$ff
122e: e8        -         inx
122f: e0 01     -         cpx #size
1231: f0 0b     -         beq !success+
1233: bd 3e 3f  -         lda source,x
1236: dd 40 3f  -         cmp dest,x
1239: f0 f3     -         beq !loop-
123b: 4c 5f 12  -         jmp !failed+
123e: ee 27 3f  -         inc TEST_PASS_COUNT
1241: ad 86 02  -         lda foreground_color
1244: 48        -         pha
1245: a9 05     -         lda #color
1247: 8d 86 02  -         sta foreground_color
124a: a2 00     -         ldx #$00
124c: bd 22 3f  -         lda msg,x
124f: f0 07     -         beq !done+
1251: 20 d2 ff  -         jsr kernal_chrout
1254: e8        -         inx
1255: 4c 4c 12  -         jmp !loop-
1258: 68        -         pla
1259: 8d 86 02  -         sta foreground_color
125c: 4c 7a 12  -         jmp !done+
125f: ad 86 02  -         lda foreground_color
1262: 48        -         pha
1263: a9 02     -         lda #color
1265: 8d 86 02  -         sta foreground_color
1268: a2 00     -         ldx #$00
126a: bd 24 3f  -         lda msg,x
126d: f0 07     -         beq !done+
126f: 20 d2 ff  -         jsr kernal_chrout
1272: e8        -         inx
1273: 4c 6a 12  -         jmp !loop-
1276: 68        -         pla
1277: 8d 86 02  -         sta foreground_color
127a: ee 26 3f  -         inc TEST_COUNT
127d: ad 86 02  -         lda foreground_color
1280: 48        -         pha
1281: a9 0e     -         lda #color
1283: 8d 86 02  -         sta foreground_color
1286: a2 00     -         ldx #$00
1288: bd 9b 12  -         lda msg,x
128b: f0 07     -         beq !done+
128d: 20 d2 ff  -         jsr kernal_chrout
1290: e8        -         inx
1291: 4c 88 12  -         jmp !loop-
1294: 68        -         pla
1295: 8d 86 02  -         sta foreground_color
1298: 4c a1 12  -         jmp !done+
129b: 20        - memory: .byte spacebar
129c: 53 52 43  -         .text description
129f: 3a        -         .text ":"
12a0: 00        -         .byte NULL
12a1: a6 21     -         ldx rl(register.getValue())
12a3: a4 22     -         ldy rh(register.getValue())
12a5: e0 3f     -         cpx #<value
12a7: d0 25     -         bne !failed+
12a9: c0 3f     -         cpy #>value
12ab: d0 21     -         bne !failed+
12ad: ee 27 3f  -         inc TEST_PASS_COUNT
12b0: ad 86 02  -         lda foreground_color
12b3: 48        -         pha
12b4: a9 05     -         lda #color
12b6: 8d 86 02  -         sta foreground_color
12b9: a2 00     -         ldx #$00
12bb: bd 22 3f  -         lda msg,x
12be: f0 07     -         beq !done+
12c0: 20 d2 ff  -         jsr kernal_chrout
12c3: e8        -         inx
12c4: 4c bb 12  -         jmp !loop-
12c7: 68        -         pla
12c8: 8d 86 02  -         sta foreground_color
12cb: 4c e9 12  -         jmp !done+
12ce: ad 86 02  -         lda foreground_color
12d1: 48        -         pha
12d2: a9 02     -         lda #color
12d4: 8d 86 02  -         sta foreground_color
12d7: a2 00     -         ldx #$00
12d9: bd 24 3f  -         lda msg,x
12dc: f0 07     -         beq !done+
12de: 20 d2 ff  -         jsr kernal_chrout
12e1: e8        -         inx
12e2: 4c d9 12  -         jmp !loop-
12e5: 68        -         pla
12e6: 8d 86 02  -         sta foreground_color
12e9: ee 26 3f  -         inc TEST_COUNT
12ec: ad 86 02  -         lda foreground_color
12ef: 48        -         pha
12f0: a9 0e     -         lda #color
12f2: 8d 86 02  -         sta foreground_color
12f5: a2 00     -         ldx #$00
12f7: bd 0a 13  -         lda msg,x
12fa: f0 07     -         beq !done+
12fc: 20 d2 ff  -         jsr kernal_chrout
12ff: e8        -         inx
1300: 4c f7 12  -         jmp !loop-
1303: 68        -         pla
1304: 8d 86 02  -         sta foreground_color
1307: 4c 10 13  -         jmp !done+
130a: 20        - memory: .byte spacebar
130b: 44 53 54  -         .text description
130e: 3a        -         .text ":"
130f: 00        -         .byte NULL
1310: a6 23     -         ldx rl(register.getValue())
1312: a4 24     -         ldy rh(register.getValue())
1314: e0 41     -         cpx #<value
1316: d0 25     -         bne !failed+
1318: c0 3f     -         cpy #>value
131a: d0 21     -         bne !failed+
131c: ee 27 3f  -         inc TEST_PASS_COUNT
131f: ad 86 02  -         lda foreground_color
1322: 48        -         pha
1323: a9 05     -         lda #color
1325: 8d 86 02  -         sta foreground_color
1328: a2 00     -         ldx #$00
132a: bd 22 3f  -         lda msg,x
132d: f0 07     -         beq !done+
132f: 20 d2 ff  -         jsr kernal_chrout
1332: e8        -         inx
1333: 4c 2a 13  -         jmp !loop-
1336: 68        -         pla
1337: 8d 86 02  -         sta foreground_color
133a: 4c 58 13  -         jmp !done+
133d: ad 86 02  -         lda foreground_color
1340: 48        -         pha
1341: a9 02     -         lda #color
1343: 8d 86 02  -         sta foreground_color
1346: a2 00     -         ldx #$00
1348: bd 24 3f  -         lda msg,x
134b: f0 07     -         beq !done+
134d: 20 d2 ff  -         jsr kernal_chrout
1350: e8        -         inx
1351: 4c 48 13  -         jmp !loop-
1354: 68        -         pla
1355: 8d 86 02  -         sta foreground_color
1358: a2 00     -         ldx #$00
135a: bd 69 13  -         lda msg,x
135d: f0 07     -         beq !done+
135f: 20 d2 ff  -         jsr kernal_chrout
1362: e8        -         inx
1363: 4c 5a 13  -         jmp !loop-
1366: 4c 6b 13  -         jmp !done+
1369: 0d 00     - memory: .byte RETURN, NULL
136b: ae 28 3f  -         ldx TEST_NAME_COUNT
136e: e0 15     -         cpx #TESTS_PER_PAGE
1370: d0 5d     -         bne !exit+
1372: ad 86 02  -         lda foreground_color
1375: 48        -         pha
1376: a9 01     -         lda #color
1378: 8d 86 02  -         sta foreground_color
137b: a2 00     -         ldx #$00
137d: bd 90 13  -         lda msg,x
1380: f0 07     -         beq !done+
1382: 20 d2 ff  -         jsr kernal_chrout
1385: e8        -         inx
1386: 4c 7d 13  -         jmp !loop-
1389: 68        -         pla
138a: 8d 86 02  -         sta foreground_color
138d: 4c af 13  -         jmp !no_key+
1390: 0d        - memory: .byte RETURN
1391: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
13a1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
13ad: 0d 00     -         .byte RETURN, NULL
13af: 20 9f ff  -         jsr scnkey  // scan keyboard
13b2: 20 e4 ff  -         jsr getin	// put result into A
13b5: f0 f8     -         beq !no_key-
13b7: a2 00     -         ldx #$00
13b9: bd c8 13  -         lda msg,x
13bc: f0 07     -         beq !done+
13be: 20 d2 ff  -         jsr kernal_chrout
13c1: e8        -         inx
13c2: 4c b9 13  -         jmp !loop-
13c5: 4c ca 13  -         jmp !done+
13c8: 0d 00     - newline:.byte RETURN, NULL
13ca: a2 00     -         ldx #$00
13cc: 8e 28 3f  -         stx TEST_NAME_COUNT
13cf: 60        -         rts
13d0: ee 28 3f  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
13d3: ad 86 02  -         lda foreground_color
13d6: 48        -         pha
13d7: a9 0f     -         lda #color
13d9: 8d 86 02  -         sta foreground_color
13dc: a2 00     -         ldx #$00
13de: bd f1 13  -         lda msg,x
13e1: f0 07     -         beq !done+
13e3: 20 d2 ff  -         jsr kernal_chrout
13e6: e8        -         inx
13e7: 4c de 13  -         jmp !loop-
13ea: 68        -         pla
13eb: 8d 86 02  -         sta foreground_color
13ee: 4c 0b 14  -         jmp !done+
13f1: 20 20     - memory: .fill spacing, spacebar
13f3: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
1403: 52 45 43 54                                     
1407: 2e 2e 2e  -         .text "..."
140a: 00        -         .byte NULL
140b: 20 2e 08  -         jsr SW16
140e: 15        -         .byte opcode(op, register)
140f: 3e 3f     -         .word address.getValue()
1411: 65        -         .byte opcode($60, register) }
1412: 00        -         .byte $00 }
1413: ee 26 3f  -         inc TEST_COUNT
1416: ad 86 02  -         lda foreground_color
1419: 48        -         pha
141a: a9 0e     -         lda #color
141c: 8d 86 02  -         sta foreground_color
141f: a2 00     -         ldx #$00
1421: bd 34 14  -         lda msg,x
1424: f0 07     -         beq !done+
1426: 20 d2 ff  -         jsr kernal_chrout
1429: e8        -         inx
142a: 4c 21 14  -         jmp !loop-
142d: 68        -         pla
142e: 8d 86 02  -         sta foreground_color
1431: 4c 3a 14  -         jmp !done+
1434: 20        - memory: .byte spacebar
1435: 41 43 43  -         .text description
1438: 3a        -         .text ":"
1439: 00        -         .byte NULL
143a: a6 17     -         ldx rl(register.getValue())
143c: a4 18     -         ldy rh(register.getValue())
143e: ec 3e 3f  -         cpx address
1441: d0 26     -         bne !failed+
1443: cc 3f 3f  -         cpy address+1
1446: d0 21     -         bne !failed+
1448: ee 27 3f  -         inc TEST_PASS_COUNT
144b: ad 86 02  -         lda foreground_color
144e: 48        -         pha
144f: a9 05     -         lda #color
1451: 8d 86 02  -         sta foreground_color
1454: a2 00     -         ldx #$00
1456: bd 22 3f  -         lda msg,x
1459: f0 07     -         beq !done+
145b: 20 d2 ff  -         jsr kernal_chrout
145e: e8        -         inx
145f: 4c 56 14  -         jmp !loop-
1462: 68        -         pla
1463: 8d 86 02  -         sta foreground_color
1466: 4c 84 14  -         jmp !done+
1469: ad 86 02  -         lda foreground_color
146c: 48        -         pha
146d: a9 02     -         lda #color
146f: 8d 86 02  -         sta foreground_color
1472: a2 00     -         ldx #$00
1474: bd 24 3f  -         lda msg,x
1477: f0 07     -         beq !done+
1479: 20 d2 ff  -         jsr kernal_chrout
147c: e8        -         inx
147d: 4c 74 14  -         jmp !loop-
1480: 68        -         pla
1481: 8d 86 02  -         sta foreground_color
1484: ee 26 3f  -         inc TEST_COUNT
1487: ad 86 02  -         lda foreground_color
148a: 48        -         pha
148b: a9 0e     -         lda #color
148d: 8d 86 02  -         sta foreground_color
1490: a2 00     -         ldx #$00
1492: bd a5 14  -         lda msg,x
1495: f0 07     -         beq !done+
1497: 20 d2 ff  -         jsr kernal_chrout
149a: e8        -         inx
149b: 4c 92 14  -         jmp !loop-
149e: 68        -         pla
149f: 8d 86 02  -         sta foreground_color
14a2: 4c aa 14  -         jmp !done+
14a5: 20        - memory: .byte spacebar
14a6: 2b 32     -         .text description
14a8: 3a        -         .text ":"
14a9: 00        -         .byte NULL
14aa: a6 21     -         ldx rl(register.getValue())
14ac: a4 22     -         ldy rh(register.getValue())
14ae: e0 40     -         cpx #<value
14b0: d0 25     -         bne !failed+
14b2: c0 3f     -         cpy #>value
14b4: d0 21     -         bne !failed+
14b6: ee 27 3f  -         inc TEST_PASS_COUNT
14b9: ad 86 02  -         lda foreground_color
14bc: 48        -         pha
14bd: a9 05     -         lda #color
14bf: 8d 86 02  -         sta foreground_color
14c2: a2 00     -         ldx #$00
14c4: bd 22 3f  -         lda msg,x
14c7: f0 07     -         beq !done+
14c9: 20 d2 ff  -         jsr kernal_chrout
14cc: e8        -         inx
14cd: 4c c4 14  -         jmp !loop-
14d0: 68        -         pla
14d1: 8d 86 02  -         sta foreground_color
14d4: 4c f2 14  -         jmp !done+
14d7: ad 86 02  -         lda foreground_color
14da: 48        -         pha
14db: a9 02     -         lda #color
14dd: 8d 86 02  -         sta foreground_color
14e0: a2 00     -         ldx #$00
14e2: bd 24 3f  -         lda msg,x
14e5: f0 07     -         beq !done+
14e7: 20 d2 ff  -         jsr kernal_chrout
14ea: e8        -         inx
14eb: 4c e2 14  -         jmp !loop-
14ee: 68        -         pla
14ef: 8d 86 02  -         sta foreground_color
14f2: a2 00     -         ldx #$00
14f4: bd 03 15  -         lda msg,x
14f7: f0 07     -         beq !done+
14f9: 20 d2 ff  -         jsr kernal_chrout
14fc: e8        -         inx
14fd: 4c f4 14  -         jmp !loop-
1500: 4c 05 15  -         jmp !done+
1503: 0d 00     - memory: .byte RETURN, NULL
1505: ae 28 3f  -         ldx TEST_NAME_COUNT
1508: e0 15     -         cpx #TESTS_PER_PAGE
150a: d0 5d     -         bne !exit+
150c: ad 86 02  -         lda foreground_color
150f: 48        -         pha
1510: a9 01     -         lda #color
1512: 8d 86 02  -         sta foreground_color
1515: a2 00     -         ldx #$00
1517: bd 2a 15  -         lda msg,x
151a: f0 07     -         beq !done+
151c: 20 d2 ff  -         jsr kernal_chrout
151f: e8        -         inx
1520: 4c 17 15  -         jmp !loop-
1523: 68        -         pla
1524: 8d 86 02  -         sta foreground_color
1527: 4c 49 15  -         jmp !no_key+
152a: 0d        - memory: .byte RETURN
152b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
153b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1547: 0d 00     -         .byte RETURN, NULL
1549: 20 9f ff  -         jsr scnkey  // scan keyboard
154c: 20 e4 ff  -         jsr getin	// put result into A
154f: f0 f8     -         beq !no_key-
1551: a2 00     -         ldx #$00
1553: bd 62 15  -         lda msg,x
1556: f0 07     -         beq !done+
1558: 20 d2 ff  -         jsr kernal_chrout
155b: e8        -         inx
155c: 4c 53 15  -         jmp !loop-
155f: 4c 64 15  -         jmp !done+
1562: 0d 00     - newline:.byte RETURN, NULL
1564: a2 00     -         ldx #$00
1566: 8e 28 3f  -         stx TEST_NAME_COUNT
1569: 60        -         rts
156a: ee 28 3f  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
156d: ad 86 02  -         lda foreground_color
1570: 48        -         pha
1571: a9 0f     -         lda #color
1573: 8d 86 02  -         sta foreground_color
1576: a2 00     -         ldx #$00
1578: bd 8b 15  -         lda msg,x
157b: f0 07     -         beq !done+
157d: 20 d2 ff  -         jsr kernal_chrout
1580: e8        -         inx
1581: 4c 78 15  -         jmp !loop-
1584: 68        -         pla
1585: 8d 86 02  -         sta foreground_color
1588: 4c 9e 15  -         jmp !done+
158b: 20 20     - memory: .fill spacing, spacebar
158d: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
159a: 2e 2e 2e  -         .text "..."
159d: 00        -         .byte NULL
159e: 20 2e 08  -         jsr SW16
15a1: 15        -         .byte opcode(op, register)
15a2: 3e 3f     -         .word address.getValue()
15a4: 16        -         .byte opcode(op, register)
15a5: 40 3f     -         .word address.getValue()
15a7: 65        -         .byte opcode($60, register) }
15a8: 76        -         .byte opcode($70, register) }
15a9: 00        -         .byte $00 }
15aa: ee 26 3f  -         inc TEST_COUNT
15ad: ad 86 02  -         lda foreground_color
15b0: 48        -         pha
15b1: a9 0e     -         lda #color
15b3: 8d 86 02  -         sta foreground_color
15b6: a2 00     -         ldx #$00
15b8: bd cb 15  -         lda msg,x
15bb: f0 07     -         beq !done+
15bd: 20 d2 ff  -         jsr kernal_chrout
15c0: e8        -         inx
15c1: 4c b8 15  -         jmp !loop-
15c4: 68        -         pla
15c5: 8d 86 02  -         sta foreground_color
15c8: 4c d1 15  -         jmp !done+
15cb: 20        - memory: .byte spacebar
15cc: 4d 45 4d  -         .text description
15cf: 3a        -         .text ":"
15d0: 00        -         .byte NULL
15d1: a2 ff     -         ldx #$ff
15d3: e8        -         inx
15d4: e0 02     -         cpx #size
15d6: f0 0b     -         beq !success+
15d8: bd 3e 3f  -         lda source,x
15db: dd 40 3f  -         cmp dest,x
15de: f0 f3     -         beq !loop-
15e0: 4c 04 16  -         jmp !failed+
15e3: ee 27 3f  -         inc TEST_PASS_COUNT
15e6: ad 86 02  -         lda foreground_color
15e9: 48        -         pha
15ea: a9 05     -         lda #color
15ec: 8d 86 02  -         sta foreground_color
15ef: a2 00     -         ldx #$00
15f1: bd 22 3f  -         lda msg,x
15f4: f0 07     -         beq !done+
15f6: 20 d2 ff  -         jsr kernal_chrout
15f9: e8        -         inx
15fa: 4c f1 15  -         jmp !loop-
15fd: 68        -         pla
15fe: 8d 86 02  -         sta foreground_color
1601: 4c 1f 16  -         jmp !done+
1604: ad 86 02  -         lda foreground_color
1607: 48        -         pha
1608: a9 02     -         lda #color
160a: 8d 86 02  -         sta foreground_color
160d: a2 00     -         ldx #$00
160f: bd 24 3f  -         lda msg,x
1612: f0 07     -         beq !done+
1614: 20 d2 ff  -         jsr kernal_chrout
1617: e8        -         inx
1618: 4c 0f 16  -         jmp !loop-
161b: 68        -         pla
161c: 8d 86 02  -         sta foreground_color
161f: ee 26 3f  -         inc TEST_COUNT
1622: ad 86 02  -         lda foreground_color
1625: 48        -         pha
1626: a9 0e     -         lda #color
1628: 8d 86 02  -         sta foreground_color
162b: a2 00     -         ldx #$00
162d: bd 40 16  -         lda msg,x
1630: f0 07     -         beq !done+
1632: 20 d2 ff  -         jsr kernal_chrout
1635: e8        -         inx
1636: 4c 2d 16  -         jmp !loop-
1639: 68        -         pla
163a: 8d 86 02  -         sta foreground_color
163d: 4c 46 16  -         jmp !done+
1640: 20        - memory: .byte spacebar
1641: 53 2b 32  -         .text description
1644: 3a        -         .text ":"
1645: 00        -         .byte NULL
1646: a6 21     -         ldx rl(register.getValue())
1648: a4 22     -         ldy rh(register.getValue())
164a: e0 40     -         cpx #<value
164c: d0 25     -         bne !failed+
164e: c0 3f     -         cpy #>value
1650: d0 21     -         bne !failed+
1652: ee 27 3f  -         inc TEST_PASS_COUNT
1655: ad 86 02  -         lda foreground_color
1658: 48        -         pha
1659: a9 05     -         lda #color
165b: 8d 86 02  -         sta foreground_color
165e: a2 00     -         ldx #$00
1660: bd 22 3f  -         lda msg,x
1663: f0 07     -         beq !done+
1665: 20 d2 ff  -         jsr kernal_chrout
1668: e8        -         inx
1669: 4c 60 16  -         jmp !loop-
166c: 68        -         pla
166d: 8d 86 02  -         sta foreground_color
1670: 4c 8e 16  -         jmp !done+
1673: ad 86 02  -         lda foreground_color
1676: 48        -         pha
1677: a9 02     -         lda #color
1679: 8d 86 02  -         sta foreground_color
167c: a2 00     -         ldx #$00
167e: bd 24 3f  -         lda msg,x
1681: f0 07     -         beq !done+
1683: 20 d2 ff  -         jsr kernal_chrout
1686: e8        -         inx
1687: 4c 7e 16  -         jmp !loop-
168a: 68        -         pla
168b: 8d 86 02  -         sta foreground_color
168e: ee 26 3f  -         inc TEST_COUNT
1691: ad 86 02  -         lda foreground_color
1694: 48        -         pha
1695: a9 0e     -         lda #color
1697: 8d 86 02  -         sta foreground_color
169a: a2 00     -         ldx #$00
169c: bd af 16  -         lda msg,x
169f: f0 07     -         beq !done+
16a1: 20 d2 ff  -         jsr kernal_chrout
16a4: e8        -         inx
16a5: 4c 9c 16  -         jmp !loop-
16a8: 68        -         pla
16a9: 8d 86 02  -         sta foreground_color
16ac: 4c b5 16  -         jmp !done+
16af: 20        - memory: .byte spacebar
16b0: 44 2b 32  -         .text description
16b3: 3a        -         .text ":"
16b4: 00        -         .byte NULL
16b5: a6 23     -         ldx rl(register.getValue())
16b7: a4 24     -         ldy rh(register.getValue())
16b9: e0 42     -         cpx #<value
16bb: d0 25     -         bne !failed+
16bd: c0 3f     -         cpy #>value
16bf: d0 21     -         bne !failed+
16c1: ee 27 3f  -         inc TEST_PASS_COUNT
16c4: ad 86 02  -         lda foreground_color
16c7: 48        -         pha
16c8: a9 05     -         lda #color
16ca: 8d 86 02  -         sta foreground_color
16cd: a2 00     -         ldx #$00
16cf: bd 22 3f  -         lda msg,x
16d2: f0 07     -         beq !done+
16d4: 20 d2 ff  -         jsr kernal_chrout
16d7: e8        -         inx
16d8: 4c cf 16  -         jmp !loop-
16db: 68        -         pla
16dc: 8d 86 02  -         sta foreground_color
16df: 4c fd 16  -         jmp !done+
16e2: ad 86 02  -         lda foreground_color
16e5: 48        -         pha
16e6: a9 02     -         lda #color
16e8: 8d 86 02  -         sta foreground_color
16eb: a2 00     -         ldx #$00
16ed: bd 24 3f  -         lda msg,x
16f0: f0 07     -         beq !done+
16f2: 20 d2 ff  -         jsr kernal_chrout
16f5: e8        -         inx
16f6: 4c ed 16  -         jmp !loop-
16f9: 68        -         pla
16fa: 8d 86 02  -         sta foreground_color
16fd: a2 00     -         ldx #$00
16ff: bd 0e 17  -         lda msg,x
1702: f0 07     -         beq !done+
1704: 20 d2 ff  -         jsr kernal_chrout
1707: e8        -         inx
1708: 4c ff 16  -         jmp !loop-
170b: 4c 10 17  -         jmp !done+
170e: 0d 00     - memory: .byte RETURN, NULL
1710: ae 28 3f  -         ldx TEST_NAME_COUNT
1713: e0 15     -         cpx #TESTS_PER_PAGE
1715: d0 5d     -         bne !exit+
1717: ad 86 02  -         lda foreground_color
171a: 48        -         pha
171b: a9 01     -         lda #color
171d: 8d 86 02  -         sta foreground_color
1720: a2 00     -         ldx #$00
1722: bd 35 17  -         lda msg,x
1725: f0 07     -         beq !done+
1727: 20 d2 ff  -         jsr kernal_chrout
172a: e8        -         inx
172b: 4c 22 17  -         jmp !loop-
172e: 68        -         pla
172f: 8d 86 02  -         sta foreground_color
1732: 4c 54 17  -         jmp !no_key+
1735: 0d        - memory: .byte RETURN
1736: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1746: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1752: 0d 00     -         .byte RETURN, NULL
1754: 20 9f ff  -         jsr scnkey  // scan keyboard
1757: 20 e4 ff  -         jsr getin	// put result into A
175a: f0 f8     -         beq !no_key-
175c: a2 00     -         ldx #$00
175e: bd 6d 17  -         lda msg,x
1761: f0 07     -         beq !done+
1763: 20 d2 ff  -         jsr kernal_chrout
1766: e8        -         inx
1767: 4c 5e 17  -         jmp !loop-
176a: 4c 6f 17  -         jmp !done+
176d: 0d 00     - newline:.byte RETURN, NULL
176f: a2 00     -         ldx #$00
1771: 8e 28 3f  -         stx TEST_NAME_COUNT
1774: 60        -         rts
1775: ee 28 3f  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1778: ad 86 02  -         lda foreground_color
177b: 48        -         pha
177c: a9 0f     -         lda #color
177e: 8d 86 02  -         sta foreground_color
1781: a2 00     -         ldx #$00
1783: bd 96 17  -         lda msg,x
1786: f0 07     -         beq !done+
1788: 20 d2 ff  -         jsr kernal_chrout
178b: e8        -         inx
178c: 4c 83 17  -         jmp !loop-
178f: 68        -         pla
1790: 8d 86 02  -         sta foreground_color
1793: 4c aa 17  -         jmp !done+
1796: 20 20     - memory: .fill spacing, spacebar
1798: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
17a6: 2e 2e 2e  -         .text "..."
17a9: 00        -         .byte NULL
17aa: 20 2e 08  -         jsr SW16
17ad: 15        -         .byte opcode(op, register)
17ae: 64 3f     -         .word address.getValue()
17b0: 10        -         .byte opcode(op, register)
17b1: 04 00     -         .word address.getValue()
17b3: 55        -         .byte opcode($50, register) }
17b4: 0d        -         .byte $0d
17b5: 18        -         .byte >(address.getValue()-1)
17b6: 49        -         .byte <(address.getValue()-1)
17b7: 10        -         .byte opcode(op, register)
17b8: 05 00     -         .word address.getValue()
17ba: 55        -         .byte opcode($50, register) }
17bb: 0d        -         .byte $0d
17bc: 18        -         .byte >(address.getValue()-1)
17bd: b4        -         .byte <(address.getValue()-1)
17be: 10        -         .byte opcode(op, register)
17bf: 06 00     -         .word address.getValue()
17c1: 55        -         .byte opcode($50, register) }
17c2: 0d        -         .byte $0d
17c3: 19        -         .byte >(address.getValue()-1)
17c4: 1f        -         .byte <(address.getValue()-1)
17c5: 85        -         .byte opcode($80, register) }
17c6: 0d        -         .byte $0d
17c7: 19        -         .byte >(address.getValue()-1)
17c8: 8a        -         .byte <(address.getValue()-1)
17c9: 85        -         .byte opcode($80, register) }
17ca: 0d        -         .byte $0d
17cb: 1a        -         .byte >(address.getValue()-1)
17cc: a5        -         .byte <(address.getValue()-1)
17cd: 85        -         .byte opcode($80, register) }
17ce: 0d        -         .byte $0d
17cf: 1b        -         .byte >(address.getValue()-1)
17d0: 14        -         .byte <(address.getValue()-1)
17d1: 00        -         .byte $00 }
17d2: a2 00     -         ldx #$00
17d4: bd e3 17  -         lda msg,x
17d7: f0 07     -         beq !done+
17d9: 20 d2 ff  -         jsr kernal_chrout
17dc: e8        -         inx
17dd: 4c d4 17  -         jmp !loop-
17e0: 4c e5 17  -         jmp !done+
17e3: 0d 00     - memory: .byte RETURN, NULL
17e5: ae 28 3f  -         ldx TEST_NAME_COUNT
17e8: e0 15     -         cpx #TESTS_PER_PAGE
17ea: d0 5d     -         bne !exit+
17ec: ad 86 02  -         lda foreground_color
17ef: 48        -         pha
17f0: a9 01     -         lda #color
17f2: 8d 86 02  -         sta foreground_color
17f5: a2 00     -         ldx #$00
17f7: bd 0a 18  -         lda msg,x
17fa: f0 07     -         beq !done+
17fc: 20 d2 ff  -         jsr kernal_chrout
17ff: e8        -         inx
1800: 4c f7 17  -         jmp !loop-
1803: 68        -         pla
1804: 8d 86 02  -         sta foreground_color
1807: 4c 29 18  -         jmp !no_key+
180a: 0d        - memory: .byte RETURN
180b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
181b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1827: 0d 00     -         .byte RETURN, NULL
1829: 20 9f ff  -         jsr scnkey  // scan keyboard
182c: 20 e4 ff  -         jsr getin	// put result into A
182f: f0 f8     -         beq !no_key-
1831: a2 00     -         ldx #$00
1833: bd 42 18  -         lda msg,x
1836: f0 07     -         beq !done+
1838: 20 d2 ff  -         jsr kernal_chrout
183b: e8        -         inx
183c: 4c 33 18  -         jmp !loop-
183f: 4c 44 18  -         jmp !done+
1842: 0d 00     - newline:.byte RETURN, NULL
1844: a2 00     -         ldx #$00
1846: 8e 28 3f  -         stx TEST_NAME_COUNT
1849: 60        -         rts
184a: ee 26 3f  -         inc TEST_COUNT
184d: ad 86 02  -         lda foreground_color
1850: 48        -         pha
1851: a9 0e     -         lda #color
1853: 8d 86 02  -         sta foreground_color
1856: a2 00     -         ldx #$00
1858: bd 6b 18  -         lda msg,x
185b: f0 07     -         beq !done+
185d: 20 d2 ff  -         jsr kernal_chrout
1860: e8        -         inx
1861: 4c 58 18  -         jmp !loop-
1864: 68        -         pla
1865: 8d 86 02  -         sta foreground_color
1868: 4c 6f 18  -         jmp !done+
186b: 20        - memory: .byte spacebar
186c: 31        -         .text description
186d: 3a        -         .text ":"
186e: 00        -         .byte NULL
186f: a6 17     -         ldx rl(register.getValue())
1871: a4 18     -         ldy rh(register.getValue())
1873: ec 64 3f  -         cpx address
1876: d0 21     -         bne !failed+
1878: ee 27 3f  -         inc TEST_PASS_COUNT
187b: ad 86 02  -         lda foreground_color
187e: 48        -         pha
187f: a9 05     -         lda #color
1881: 8d 86 02  -         sta foreground_color
1884: a2 00     -         ldx #$00
1886: bd 22 3f  -         lda msg,x
1889: f0 07     -         beq !done+
188b: 20 d2 ff  -         jsr kernal_chrout
188e: e8        -         inx
188f: 4c 86 18  -         jmp !loop-
1892: 68        -         pla
1893: 8d 86 02  -         sta foreground_color
1896: 4c b4 18  -         jmp !done+
1899: ad 86 02  -         lda foreground_color
189c: 48        -         pha
189d: a9 02     -         lda #color
189f: 8d 86 02  -         sta foreground_color
18a2: a2 00     -         ldx #$00
18a4: bd 24 3f  -         lda msg,x
18a7: f0 07     -         beq !done+
18a9: 20 d2 ff  -         jsr kernal_chrout
18ac: e8        -         inx
18ad: 4c a4 18  -         jmp !loop-
18b0: 68        -         pla
18b1: 8d 86 02  -         sta foreground_color
18b4: 60        -         rts
18b5: ee 26 3f  -         inc TEST_COUNT
18b8: ad 86 02  -         lda foreground_color
18bb: 48        -         pha
18bc: a9 0e     -         lda #color
18be: 8d 86 02  -         sta foreground_color
18c1: a2 00     -         ldx #$00
18c3: bd d6 18  -         lda msg,x
18c6: f0 07     -         beq !done+
18c8: 20 d2 ff  -         jsr kernal_chrout
18cb: e8        -         inx
18cc: 4c c3 18  -         jmp !loop-
18cf: 68        -         pla
18d0: 8d 86 02  -         sta foreground_color
18d3: 4c da 18  -         jmp !done+
18d6: 20        - memory: .byte spacebar
18d7: 32        -         .text description
18d8: 3a        -         .text ":"
18d9: 00        -         .byte NULL
18da: a6 17     -         ldx rl(register.getValue())
18dc: a4 18     -         ldy rh(register.getValue())
18de: ec 65 3f  -         cpx address
18e1: d0 21     -         bne !failed+
18e3: ee 27 3f  -         inc TEST_PASS_COUNT
18e6: ad 86 02  -         lda foreground_color
18e9: 48        -         pha
18ea: a9 05     -         lda #color
18ec: 8d 86 02  -         sta foreground_color
18ef: a2 00     -         ldx #$00
18f1: bd 22 3f  -         lda msg,x
18f4: f0 07     -         beq !done+
18f6: 20 d2 ff  -         jsr kernal_chrout
18f9: e8        -         inx
18fa: 4c f1 18  -         jmp !loop-
18fd: 68        -         pla
18fe: 8d 86 02  -         sta foreground_color
1901: 4c 1f 19  -         jmp !done+
1904: ad 86 02  -         lda foreground_color
1907: 48        -         pha
1908: a9 02     -         lda #color
190a: 8d 86 02  -         sta foreground_color
190d: a2 00     -         ldx #$00
190f: bd 24 3f  -         lda msg,x
1912: f0 07     -         beq !done+
1914: 20 d2 ff  -         jsr kernal_chrout
1917: e8        -         inx
1918: 4c 0f 19  -         jmp !loop-
191b: 68        -         pla
191c: 8d 86 02  -         sta foreground_color
191f: 60        -         rts
1920: ee 26 3f  -         inc TEST_COUNT
1923: ad 86 02  -         lda foreground_color
1926: 48        -         pha
1927: a9 0e     -         lda #color
1929: 8d 86 02  -         sta foreground_color
192c: a2 00     -         ldx #$00
192e: bd 41 19  -         lda msg,x
1931: f0 07     -         beq !done+
1933: 20 d2 ff  -         jsr kernal_chrout
1936: e8        -         inx
1937: 4c 2e 19  -         jmp !loop-
193a: 68        -         pla
193b: 8d 86 02  -         sta foreground_color
193e: 4c 45 19  -         jmp !done+
1941: 20        - memory: .byte spacebar
1942: 33        -         .text description
1943: 3a        -         .text ":"
1944: 00        -         .byte NULL
1945: a6 17     -         ldx rl(register.getValue())
1947: a4 18     -         ldy rh(register.getValue())
1949: ec 66 3f  -         cpx address
194c: d0 21     -         bne !failed+
194e: ee 27 3f  -         inc TEST_PASS_COUNT
1951: ad 86 02  -         lda foreground_color
1954: 48        -         pha
1955: a9 05     -         lda #color
1957: 8d 86 02  -         sta foreground_color
195a: a2 00     -         ldx #$00
195c: bd 22 3f  -         lda msg,x
195f: f0 07     -         beq !done+
1961: 20 d2 ff  -         jsr kernal_chrout
1964: e8        -         inx
1965: 4c 5c 19  -         jmp !loop-
1968: 68        -         pla
1969: 8d 86 02  -         sta foreground_color
196c: 4c 8a 19  -         jmp !done+
196f: ad 86 02  -         lda foreground_color
1972: 48        -         pha
1973: a9 02     -         lda #color
1975: 8d 86 02  -         sta foreground_color
1978: a2 00     -         ldx #$00
197a: bd 24 3f  -         lda msg,x
197d: f0 07     -         beq !done+
197f: 20 d2 ff  -         jsr kernal_chrout
1982: e8        -         inx
1983: 4c 7a 19  -         jmp !loop-
1986: 68        -         pla
1987: 8d 86 02  -         sta foreground_color
198a: 60        -         rts
198b: a2 00     -         ldx #$00
198d: bd 9c 19  -         lda msg,x
1990: f0 07     -         beq !done+
1992: 20 d2 ff  -         jsr kernal_chrout
1995: e8        -         inx
1996: 4c 8d 19  -         jmp !loop-
1999: 4c 9e 19  -         jmp !done+
199c: 0d 00     - memory: .byte RETURN, NULL
199e: ae 28 3f  -         ldx TEST_NAME_COUNT
19a1: e0 15     -         cpx #TESTS_PER_PAGE
19a3: d0 5d     -         bne !exit+
19a5: ad 86 02  -         lda foreground_color
19a8: 48        -         pha
19a9: a9 01     -         lda #color
19ab: 8d 86 02  -         sta foreground_color
19ae: a2 00     -         ldx #$00
19b0: bd c3 19  -         lda msg,x
19b3: f0 07     -         beq !done+
19b5: 20 d2 ff  -         jsr kernal_chrout
19b8: e8        -         inx
19b9: 4c b0 19  -         jmp !loop-
19bc: 68        -         pla
19bd: 8d 86 02  -         sta foreground_color
19c0: 4c e2 19  -         jmp !no_key+
19c3: 0d        - memory: .byte RETURN
19c4: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
19d4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
19e0: 0d 00     -         .byte RETURN, NULL
19e2: 20 9f ff  -         jsr scnkey  // scan keyboard
19e5: 20 e4 ff  -         jsr getin	// put result into A
19e8: f0 f8     -         beq !no_key-
19ea: a2 00     -         ldx #$00
19ec: bd fb 19  -         lda msg,x
19ef: f0 07     -         beq !done+
19f1: 20 d2 ff  -         jsr kernal_chrout
19f4: e8        -         inx
19f5: 4c ec 19  -         jmp !loop-
19f8: 4c fd 19  -         jmp !done+
19fb: 0d 00     - newline:.byte RETURN, NULL
19fd: a2 00     -         ldx #$00
19ff: 8e 28 3f  -         stx TEST_NAME_COUNT
1a02: ee 28 3f  -         inc TEST_NAME_COUNT
1a05: ad 86 02  -         lda foreground_color
1a08: 48        -         pha
1a09: a9 0f     -         lda #color
1a0b: 8d 86 02  -         sta foreground_color
1a0e: a2 00     -         ldx #$00
1a10: bd 23 1a  -         lda msg,x
1a13: f0 07     -         beq !done+
1a15: 20 d2 ff  -         jsr kernal_chrout
1a18: e8        -         inx
1a19: 4c 10 1a  -         jmp !loop-
1a1c: 68        -         pla
1a1d: 8d 86 02  -         sta foreground_color
1a20: 4c 37 1a  -         jmp !done+
1a23: 20 20     - memory: .fill spacing, spacebar
1a25: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
1a33: 2e 2e 2e  -         .text "..."
1a36: 00        -         .byte NULL
1a37: ee 26 3f  -         inc TEST_COUNT
1a3a: ad 86 02  -         lda foreground_color
1a3d: 48        -         pha
1a3e: a9 0e     -         lda #color
1a40: 8d 86 02  -         sta foreground_color
1a43: a2 00     -         ldx #$00
1a45: bd 58 1a  -         lda msg,x
1a48: f0 07     -         beq !done+
1a4a: 20 d2 ff  -         jsr kernal_chrout
1a4d: e8        -         inx
1a4e: 4c 45 1a  -         jmp !loop-
1a51: 68        -         pla
1a52: 8d 86 02  -         sta foreground_color
1a55: 4c 5d 1a  -         jmp !done+
1a58: 20        - memory: .byte spacebar
1a59: 50 33     -         .text description
1a5b: 3a        -         .text ":"
1a5c: 00        -         .byte NULL
1a5d: a6 17     -         ldx rl(register.getValue())
1a5f: a4 18     -         ldy rh(register.getValue())
1a61: e0 06     -         cpx #<value
1a63: d0 25     -         bne !failed+
1a65: c0 00     -         cpy #>value
1a67: d0 21     -         bne !failed+
1a69: ee 27 3f  -         inc TEST_PASS_COUNT
1a6c: ad 86 02  -         lda foreground_color
1a6f: 48        -         pha
1a70: a9 05     -         lda #color
1a72: 8d 86 02  -         sta foreground_color
1a75: a2 00     -         ldx #$00
1a77: bd 22 3f  -         lda msg,x
1a7a: f0 07     -         beq !done+
1a7c: 20 d2 ff  -         jsr kernal_chrout
1a7f: e8        -         inx
1a80: 4c 77 1a  -         jmp !loop-
1a83: 68        -         pla
1a84: 8d 86 02  -         sta foreground_color
1a87: 4c a5 1a  -         jmp !done+
1a8a: ad 86 02  -         lda foreground_color
1a8d: 48        -         pha
1a8e: a9 02     -         lda #color
1a90: 8d 86 02  -         sta foreground_color
1a93: a2 00     -         ldx #$00
1a95: bd 24 3f  -         lda msg,x
1a98: f0 07     -         beq !done+
1a9a: 20 d2 ff  -         jsr kernal_chrout
1a9d: e8        -         inx
1a9e: 4c 95 1a  -         jmp !loop-
1aa1: 68        -         pla
1aa2: 8d 86 02  -         sta foreground_color
1aa5: 60        -         rts
1aa6: ee 26 3f  -         inc TEST_COUNT
1aa9: ad 86 02  -         lda foreground_color
1aac: 48        -         pha
1aad: a9 0e     -         lda #color
1aaf: 8d 86 02  -         sta foreground_color
1ab2: a2 00     -         ldx #$00
1ab4: bd c7 1a  -         lda msg,x
1ab7: f0 07     -         beq !done+
1ab9: 20 d2 ff  -         jsr kernal_chrout
1abc: e8        -         inx
1abd: 4c b4 1a  -         jmp !loop-
1ac0: 68        -         pla
1ac1: 8d 86 02  -         sta foreground_color
1ac4: 4c cc 1a  -         jmp !done+
1ac7: 20        - memory: .byte spacebar
1ac8: 50 32     -         .text description
1aca: 3a        -         .text ":"
1acb: 00        -         .byte NULL
1acc: a6 17     -         ldx rl(register.getValue())
1ace: a4 18     -         ldy rh(register.getValue())
1ad0: e0 05     -         cpx #<value
1ad2: d0 25     -         bne !failed+
1ad4: c0 00     -         cpy #>value
1ad6: d0 21     -         bne !failed+
1ad8: ee 27 3f  -         inc TEST_PASS_COUNT
1adb: ad 86 02  -         lda foreground_color
1ade: 48        -         pha
1adf: a9 05     -         lda #color
1ae1: 8d 86 02  -         sta foreground_color
1ae4: a2 00     -         ldx #$00
1ae6: bd 22 3f  -         lda msg,x
1ae9: f0 07     -         beq !done+
1aeb: 20 d2 ff  -         jsr kernal_chrout
1aee: e8        -         inx
1aef: 4c e6 1a  -         jmp !loop-
1af2: 68        -         pla
1af3: 8d 86 02  -         sta foreground_color
1af6: 4c 14 1b  -         jmp !done+
1af9: ad 86 02  -         lda foreground_color
1afc: 48        -         pha
1afd: a9 02     -         lda #color
1aff: 8d 86 02  -         sta foreground_color
1b02: a2 00     -         ldx #$00
1b04: bd 24 3f  -         lda msg,x
1b07: f0 07     -         beq !done+
1b09: 20 d2 ff  -         jsr kernal_chrout
1b0c: e8        -         inx
1b0d: 4c 04 1b  -         jmp !loop-
1b10: 68        -         pla
1b11: 8d 86 02  -         sta foreground_color
1b14: 60        -         rts
1b15: ee 26 3f  -         inc TEST_COUNT
1b18: ad 86 02  -         lda foreground_color
1b1b: 48        -         pha
1b1c: a9 0e     -         lda #color
1b1e: 8d 86 02  -         sta foreground_color
1b21: a2 00     -         ldx #$00
1b23: bd 36 1b  -         lda msg,x
1b26: f0 07     -         beq !done+
1b28: 20 d2 ff  -         jsr kernal_chrout
1b2b: e8        -         inx
1b2c: 4c 23 1b  -         jmp !loop-
1b2f: 68        -         pla
1b30: 8d 86 02  -         sta foreground_color
1b33: 4c 3b 1b  -         jmp !done+
1b36: 20        - memory: .byte spacebar
1b37: 50 31     -         .text description
1b39: 3a        -         .text ":"
1b3a: 00        -         .byte NULL
1b3b: a6 17     -         ldx rl(register.getValue())
1b3d: a4 18     -         ldy rh(register.getValue())
1b3f: e0 04     -         cpx #<value
1b41: d0 25     -         bne !failed+
1b43: c0 00     -         cpy #>value
1b45: d0 21     -         bne !failed+
1b47: ee 27 3f  -         inc TEST_PASS_COUNT
1b4a: ad 86 02  -         lda foreground_color
1b4d: 48        -         pha
1b4e: a9 05     -         lda #color
1b50: 8d 86 02  -         sta foreground_color
1b53: a2 00     -         ldx #$00
1b55: bd 22 3f  -         lda msg,x
1b58: f0 07     -         beq !done+
1b5a: 20 d2 ff  -         jsr kernal_chrout
1b5d: e8        -         inx
1b5e: 4c 55 1b  -         jmp !loop-
1b61: 68        -         pla
1b62: 8d 86 02  -         sta foreground_color
1b65: 4c 83 1b  -         jmp !done+
1b68: ad 86 02  -         lda foreground_color
1b6b: 48        -         pha
1b6c: a9 02     -         lda #color
1b6e: 8d 86 02  -         sta foreground_color
1b71: a2 00     -         ldx #$00
1b73: bd 24 3f  -         lda msg,x
1b76: f0 07     -         beq !done+
1b78: 20 d2 ff  -         jsr kernal_chrout
1b7b: e8        -         inx
1b7c: 4c 73 1b  -         jmp !loop-
1b7f: 68        -         pla
1b80: 8d 86 02  -         sta foreground_color
1b83: 60        -         rts
1b84: ee 28 3f  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1b87: ad 86 02  -         lda foreground_color
1b8a: 48        -         pha
1b8b: a9 0f     -         lda #color
1b8d: 8d 86 02  -         sta foreground_color
1b90: a2 00     -         ldx #$00
1b92: bd a5 1b  -         lda msg,x
1b95: f0 07     -         beq !done+
1b97: 20 d2 ff  -         jsr kernal_chrout
1b9a: e8        -         inx
1b9b: 4c 92 1b  -         jmp !loop-
1b9e: 68        -         pla
1b9f: 8d 86 02  -         sta foreground_color
1ba2: 4c b8 1b  -         jmp !done+
1ba5: 20 20     - memory: .fill spacing, spacebar
1ba7: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
1bb4: 2e 2e 2e  -         .text "..."
1bb7: 00        -         .byte NULL
1bb8: 20 2e 08  -         jsr SW16
1bbb: 14        -         .byte opcode(op, register)
1bbc: 40 3f     -         .word address.getValue()
1bbe: 15        -         .byte opcode(op, register)
1bbf: 42 3f     -         .word address.getValue()
1bc1: 84        -         .byte opcode($80, register) }
1bc2: 95        -         .byte opcode($90, register) }
1bc3: 84        -         .byte opcode($80, register) }
1bc4: 95        -         .byte opcode($90, register) }
1bc5: 00        -         .byte $00 }
1bc6: ee 26 3f  -         inc TEST_COUNT
1bc9: ad 86 02  -         lda foreground_color
1bcc: 48        -         pha
1bcd: a9 0e     -         lda #color
1bcf: 8d 86 02  -         sta foreground_color
1bd2: a2 00     -         ldx #$00
1bd4: bd e7 1b  -         lda msg,x
1bd7: f0 07     -         beq !done+
1bd9: 20 d2 ff  -         jsr kernal_chrout
1bdc: e8        -         inx
1bdd: 4c d4 1b  -         jmp !loop-
1be0: 68        -         pla
1be1: 8d 86 02  -         sta foreground_color
1be4: 4c ed 1b  -         jmp !done+
1be7: 20        - memory: .byte spacebar
1be8: 4d 45 4d  -         .text description
1beb: 3a        -         .text ":"
1bec: 00        -         .byte NULL
1bed: a2 ff     -         ldx #$ff
1bef: e8        -         inx
1bf0: e0 02     -         cpx #size
1bf2: f0 0b     -         beq !success+
1bf4: bd 3e 3f  -         lda source,x
1bf7: dd 3e 3f  -         cmp dest,x
1bfa: f0 f3     -         beq !loop-
1bfc: 4c 20 1c  -         jmp !failed+
1bff: ee 27 3f  -         inc TEST_PASS_COUNT
1c02: ad 86 02  -         lda foreground_color
1c05: 48        -         pha
1c06: a9 05     -         lda #color
1c08: 8d 86 02  -         sta foreground_color
1c0b: a2 00     -         ldx #$00
1c0d: bd 22 3f  -         lda msg,x
1c10: f0 07     -         beq !done+
1c12: 20 d2 ff  -         jsr kernal_chrout
1c15: e8        -         inx
1c16: 4c 0d 1c  -         jmp !loop-
1c19: 68        -         pla
1c1a: 8d 86 02  -         sta foreground_color
1c1d: 4c 3b 1c  -         jmp !done+
1c20: ad 86 02  -         lda foreground_color
1c23: 48        -         pha
1c24: a9 02     -         lda #color
1c26: 8d 86 02  -         sta foreground_color
1c29: a2 00     -         ldx #$00
1c2b: bd 24 3f  -         lda msg,x
1c2e: f0 07     -         beq !done+
1c30: 20 d2 ff  -         jsr kernal_chrout
1c33: e8        -         inx
1c34: 4c 2b 1c  -         jmp !loop-
1c37: 68        -         pla
1c38: 8d 86 02  -         sta foreground_color
1c3b: a2 00     -         ldx #$00
1c3d: bd 4c 1c  -         lda msg,x
1c40: f0 07     -         beq !done+
1c42: 20 d2 ff  -         jsr kernal_chrout
1c45: e8        -         inx
1c46: 4c 3d 1c  -         jmp !loop-
1c49: 4c 4e 1c  -         jmp !done+
1c4c: 0d 00     - memory: .byte RETURN, NULL
1c4e: ae 28 3f  -         ldx TEST_NAME_COUNT
1c51: e0 15     -         cpx #TESTS_PER_PAGE
1c53: d0 5d     -         bne !exit+
1c55: ad 86 02  -         lda foreground_color
1c58: 48        -         pha
1c59: a9 01     -         lda #color
1c5b: 8d 86 02  -         sta foreground_color
1c5e: a2 00     -         ldx #$00
1c60: bd 73 1c  -         lda msg,x
1c63: f0 07     -         beq !done+
1c65: 20 d2 ff  -         jsr kernal_chrout
1c68: e8        -         inx
1c69: 4c 60 1c  -         jmp !loop-
1c6c: 68        -         pla
1c6d: 8d 86 02  -         sta foreground_color
1c70: 4c 92 1c  -         jmp !no_key+
1c73: 0d        - memory: .byte RETURN
1c74: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1c84: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1c90: 0d 00     -         .byte RETURN, NULL
1c92: 20 9f ff  -         jsr scnkey  // scan keyboard
1c95: 20 e4 ff  -         jsr getin	// put result into A
1c98: f0 f8     -         beq !no_key-
1c9a: a2 00     -         ldx #$00
1c9c: bd ab 1c  -         lda msg,x
1c9f: f0 07     -         beq !done+
1ca1: 20 d2 ff  -         jsr kernal_chrout
1ca4: e8        -         inx
1ca5: 4c 9c 1c  -         jmp !loop-
1ca8: 4c ad 1c  -         jmp !done+
1cab: 0d 00     - newline:.byte RETURN, NULL
1cad: a2 00     -         ldx #$00
1caf: 8e 28 3f  -         stx TEST_NAME_COUNT
1cb2: 60        -         rts
1cb3: ee 28 3f  - ADD_TEST:inc TEST_NAME_COUNT
1cb6: ad 86 02  -         lda foreground_color
1cb9: 48        -         pha
1cba: a9 0f     -         lda #color
1cbc: 8d 86 02  -         sta foreground_color
1cbf: a2 00     -         ldx #$00
1cc1: bd d4 1c  -         lda msg,x
1cc4: f0 07     -         beq !done+
1cc6: 20 d2 ff  -         jsr kernal_chrout
1cc9: e8        -         inx
1cca: 4c c1 1c  -         jmp !loop-
1ccd: 68        -         pla
1cce: 8d 86 02  -         sta foreground_color
1cd1: 4c e2 1c  -         jmp !done+
1cd4: 20 20     - memory: .fill spacing, spacebar
1cd6: 41 44 44 49 54 49 4f 4e                          -         .text name
1cde: 2e 2e 2e  -         .text "..."
1ce1: 00        -         .byte NULL
1ce2: 20 2e 08  -         jsr SW16
1ce5: 10        -         .byte opcode(op, register)
1ce6: 34 76     -         .word address.getValue()
1ce8: 11        -         .byte opcode(op, register)
1ce9: 27 42     -         .word address.getValue()
1ceb: a1        -         .byte opcode($a0, register) }
1cec: 0d        -         .byte $0d
1ced: 1d        -         .byte >(address.getValue()-1)
1cee: d6        -         .byte <(address.getValue()-1)
1cef: a0        -         .byte opcode($a0, register) }
1cf0: 00        -         .byte $00 }
1cf1: ee 26 3f  -         inc TEST_COUNT
1cf4: ad 86 02  -         lda foreground_color
1cf7: 48        -         pha
1cf8: a9 0e     -         lda #color
1cfa: 8d 86 02  -         sta foreground_color
1cfd: a2 00     -         ldx #$00
1cff: bd 12 1d  -         lda msg,x
1d02: f0 07     -         beq !done+
1d04: 20 d2 ff  -         jsr kernal_chrout
1d07: e8        -         inx
1d08: 4c ff 1c  -         jmp !loop-
1d0b: 68        -         pla
1d0c: 8d 86 02  -         sta foreground_color
1d0f: 4c 17 1d  -         jmp !done+
1d12: 20        - memory: .byte spacebar
1d13: 58 32     -         .text description
1d15: 3a        -         .text ":"
1d16: 00        -         .byte NULL
1d17: a6 17     -         ldx rl(register.getValue())
1d19: a4 18     -         ldy rh(register.getValue())
1d1b: e0 b6     -         cpx #<value
1d1d: d0 25     -         bne !failed+
1d1f: c0 70     -         cpy #>value
1d21: d0 21     -         bne !failed+
1d23: ee 27 3f  -         inc TEST_PASS_COUNT
1d26: ad 86 02  -         lda foreground_color
1d29: 48        -         pha
1d2a: a9 05     -         lda #color
1d2c: 8d 86 02  -         sta foreground_color
1d2f: a2 00     -         ldx #$00
1d31: bd 22 3f  -         lda msg,x
1d34: f0 07     -         beq !done+
1d36: 20 d2 ff  -         jsr kernal_chrout
1d39: e8        -         inx
1d3a: 4c 31 1d  -         jmp !loop-
1d3d: 68        -         pla
1d3e: 8d 86 02  -         sta foreground_color
1d41: 4c 5f 1d  -         jmp !done+
1d44: ad 86 02  -         lda foreground_color
1d47: 48        -         pha
1d48: a9 02     -         lda #color
1d4a: 8d 86 02  -         sta foreground_color
1d4d: a2 00     -         ldx #$00
1d4f: bd 24 3f  -         lda msg,x
1d52: f0 07     -         beq !done+
1d54: 20 d2 ff  -         jsr kernal_chrout
1d57: e8        -         inx
1d58: 4c 4f 1d  -         jmp !loop-
1d5b: 68        -         pla
1d5c: 8d 86 02  -         sta foreground_color
1d5f: a2 00     -         ldx #$00
1d61: bd 70 1d  -         lda msg,x
1d64: f0 07     -         beq !done+
1d66: 20 d2 ff  -         jsr kernal_chrout
1d69: e8        -         inx
1d6a: 4c 61 1d  -         jmp !loop-
1d6d: 4c 72 1d  -         jmp !done+
1d70: 0d 00     - memory: .byte RETURN, NULL
1d72: ae 28 3f  -         ldx TEST_NAME_COUNT
1d75: e0 15     -         cpx #TESTS_PER_PAGE
1d77: d0 5d     -         bne !exit+
1d79: ad 86 02  -         lda foreground_color
1d7c: 48        -         pha
1d7d: a9 01     -         lda #color
1d7f: 8d 86 02  -         sta foreground_color
1d82: a2 00     -         ldx #$00
1d84: bd 97 1d  -         lda msg,x
1d87: f0 07     -         beq !done+
1d89: 20 d2 ff  -         jsr kernal_chrout
1d8c: e8        -         inx
1d8d: 4c 84 1d  -         jmp !loop-
1d90: 68        -         pla
1d91: 8d 86 02  -         sta foreground_color
1d94: 4c b6 1d  -         jmp !no_key+
1d97: 0d        - memory: .byte RETURN
1d98: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1da8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1db4: 0d 00     -         .byte RETURN, NULL
1db6: 20 9f ff  -         jsr scnkey  // scan keyboard
1db9: 20 e4 ff  -         jsr getin	// put result into A
1dbc: f0 f8     -         beq !no_key-
1dbe: a2 00     -         ldx #$00
1dc0: bd cf 1d  -         lda msg,x
1dc3: f0 07     -         beq !done+
1dc5: 20 d2 ff  -         jsr kernal_chrout
1dc8: e8        -         inx
1dc9: 4c c0 1d  -         jmp !loop-
1dcc: 4c d1 1d  -         jmp !done+
1dcf: 0d 00     - newline:.byte RETURN, NULL
1dd1: a2 00     -         ldx #$00
1dd3: 8e 28 3f  -         stx TEST_NAME_COUNT
1dd6: 60        -         rts
1dd7: ee 26 3f  -         inc TEST_COUNT
1dda: ad 86 02  -         lda foreground_color
1ddd: 48        -         pha
1dde: a9 0e     -         lda #color
1de0: 8d 86 02  -         sta foreground_color
1de3: a2 00     -         ldx #$00
1de5: bd f8 1d  -         lda msg,x
1de8: f0 07     -         beq !done+
1dea: 20 d2 ff  -         jsr kernal_chrout
1ded: e8        -         inx
1dee: 4c e5 1d  -         jmp !loop-
1df1: 68        -         pla
1df2: 8d 86 02  -         sta foreground_color
1df5: 4c fe 1d  -         jmp !done+
1df8: 20        - memory: .byte spacebar
1df9: 41 44 44  -         .text description
1dfc: 3a        -         .text ":"
1dfd: 00        -         .byte NULL
1dfe: a6 17     -         ldx rl(register.getValue())
1e00: a4 18     -         ldy rh(register.getValue())
1e02: e0 5b     -         cpx #<value
1e04: d0 25     -         bne !failed+
1e06: c0 b8     -         cpy #>value
1e08: d0 21     -         bne !failed+
1e0a: ee 27 3f  -         inc TEST_PASS_COUNT
1e0d: ad 86 02  -         lda foreground_color
1e10: 48        -         pha
1e11: a9 05     -         lda #color
1e13: 8d 86 02  -         sta foreground_color
1e16: a2 00     -         ldx #$00
1e18: bd 22 3f  -         lda msg,x
1e1b: f0 07     -         beq !done+
1e1d: 20 d2 ff  -         jsr kernal_chrout
1e20: e8        -         inx
1e21: 4c 18 1e  -         jmp !loop-
1e24: 68        -         pla
1e25: 8d 86 02  -         sta foreground_color
1e28: 4c 46 1e  -         jmp !done+
1e2b: ad 86 02  -         lda foreground_color
1e2e: 48        -         pha
1e2f: a9 02     -         lda #color
1e31: 8d 86 02  -         sta foreground_color
1e34: a2 00     -         ldx #$00
1e36: bd 24 3f  -         lda msg,x
1e39: f0 07     -         beq !done+
1e3b: 20 d2 ff  -         jsr kernal_chrout
1e3e: e8        -         inx
1e3f: 4c 36 1e  -         jmp !loop-
1e42: 68        -         pla
1e43: 8d 86 02  -         sta foreground_color
1e46: 60        -         rts
1e47: ee 28 3f  - SUBTRACT_TEST:inc TEST_NAME_COUNT
1e4a: ad 86 02  -         lda foreground_color
1e4d: 48        -         pha
1e4e: a9 0f     -         lda #color
1e50: 8d 86 02  -         sta foreground_color
1e53: a2 00     -         ldx #$00
1e55: bd 68 1e  -         lda msg,x
1e58: f0 07     -         beq !done+
1e5a: 20 d2 ff  -         jsr kernal_chrout
1e5d: e8        -         inx
1e5e: 4c 55 1e  -         jmp !loop-
1e61: 68        -         pla
1e62: 8d 86 02  -         sta foreground_color
1e65: 4c 79 1e  -         jmp !done+
1e68: 20 20     - memory: .fill spacing, spacebar
1e6a: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
1e75: 2e 2e 2e  -         .text "..."
1e78: 00        -         .byte NULL
1e79: 20 2e 08  -         jsr SW16
1e7c: 10        -         .byte opcode(op, register)
1e7d: 34 76     -         .word address.getValue()
1e7f: 11        -         .byte opcode(op, register)
1e80: 27 42     -         .word address.getValue()
1e82: b1        -         .byte opcode($b0, register) }
1e83: 0d        -         .byte $0d
1e84: 1f        -         .byte >(address.getValue()-1)
1e85: 6c        -         .byte <(address.getValue()-1)
1e86: b0        -         .byte opcode($b0, register) }
1e87: 00        -         .byte $00 }
1e88: ee 26 3f  -         inc TEST_COUNT
1e8b: ad 86 02  -         lda foreground_color
1e8e: 48        -         pha
1e8f: a9 0e     -         lda #color
1e91: 8d 86 02  -         sta foreground_color
1e94: a2 00     -         ldx #$00
1e96: bd a9 1e  -         lda msg,x
1e99: f0 07     -         beq !done+
1e9b: 20 d2 ff  -         jsr kernal_chrout
1e9e: e8        -         inx
1e9f: 4c 96 1e  -         jmp !loop-
1ea2: 68        -         pla
1ea3: 8d 86 02  -         sta foreground_color
1ea6: 4c ad 1e  -         jmp !done+
1ea9: 20        - memory: .byte spacebar
1eaa: 30        -         .text description
1eab: 3a        -         .text ":"
1eac: 00        -         .byte NULL
1ead: a6 17     -         ldx rl(register.getValue())
1eaf: a4 18     -         ldy rh(register.getValue())
1eb1: e0 00     -         cpx #<value
1eb3: d0 25     -         bne !failed+
1eb5: c0 00     -         cpy #>value
1eb7: d0 21     -         bne !failed+
1eb9: ee 27 3f  -         inc TEST_PASS_COUNT
1ebc: ad 86 02  -         lda foreground_color
1ebf: 48        -         pha
1ec0: a9 05     -         lda #color
1ec2: 8d 86 02  -         sta foreground_color
1ec5: a2 00     -         ldx #$00
1ec7: bd 22 3f  -         lda msg,x
1eca: f0 07     -         beq !done+
1ecc: 20 d2 ff  -         jsr kernal_chrout
1ecf: e8        -         inx
1ed0: 4c c7 1e  -         jmp !loop-
1ed3: 68        -         pla
1ed4: 8d 86 02  -         sta foreground_color
1ed7: 4c f5 1e  -         jmp !done+
1eda: ad 86 02  -         lda foreground_color
1edd: 48        -         pha
1ede: a9 02     -         lda #color
1ee0: 8d 86 02  -         sta foreground_color
1ee3: a2 00     -         ldx #$00
1ee5: bd 24 3f  -         lda msg,x
1ee8: f0 07     -         beq !done+
1eea: 20 d2 ff  -         jsr kernal_chrout
1eed: e8        -         inx
1eee: 4c e5 1e  -         jmp !loop-
1ef1: 68        -         pla
1ef2: 8d 86 02  -         sta foreground_color
1ef5: a2 00     -         ldx #$00
1ef7: bd 06 1f  -         lda msg,x
1efa: f0 07     -         beq !done+
1efc: 20 d2 ff  -         jsr kernal_chrout
1eff: e8        -         inx
1f00: 4c f7 1e  -         jmp !loop-
1f03: 4c 08 1f  -         jmp !done+
1f06: 0d 00     - memory: .byte RETURN, NULL
1f08: ae 28 3f  -         ldx TEST_NAME_COUNT
1f0b: e0 15     -         cpx #TESTS_PER_PAGE
1f0d: d0 5d     -         bne !exit+
1f0f: ad 86 02  -         lda foreground_color
1f12: 48        -         pha
1f13: a9 01     -         lda #color
1f15: 8d 86 02  -         sta foreground_color
1f18: a2 00     -         ldx #$00
1f1a: bd 2d 1f  -         lda msg,x
1f1d: f0 07     -         beq !done+
1f1f: 20 d2 ff  -         jsr kernal_chrout
1f22: e8        -         inx
1f23: 4c 1a 1f  -         jmp !loop-
1f26: 68        -         pla
1f27: 8d 86 02  -         sta foreground_color
1f2a: 4c 4c 1f  -         jmp !no_key+
1f2d: 0d        - memory: .byte RETURN
1f2e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1f3e: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1f4a: 0d 00     -         .byte RETURN, NULL
1f4c: 20 9f ff  -         jsr scnkey  // scan keyboard
1f4f: 20 e4 ff  -         jsr getin	// put result into A
1f52: f0 f8     -         beq !no_key-
1f54: a2 00     -         ldx #$00
1f56: bd 65 1f  -         lda msg,x
1f59: f0 07     -         beq !done+
1f5b: 20 d2 ff  -         jsr kernal_chrout
1f5e: e8        -         inx
1f5f: 4c 56 1f  -         jmp !loop-
1f62: 4c 67 1f  -         jmp !done+
1f65: 0d 00     - newline:.byte RETURN, NULL
1f67: a2 00     -         ldx #$00
1f69: 8e 28 3f  -         stx TEST_NAME_COUNT
1f6c: 60        -         rts
1f6d: ee 26 3f  -         inc TEST_COUNT
1f70: ad 86 02  -         lda foreground_color
1f73: 48        -         pha
1f74: a9 0e     -         lda #color
1f76: 8d 86 02  -         sta foreground_color
1f79: a2 00     -         ldx #$00
1f7b: bd 8e 1f  -         lda msg,x
1f7e: f0 07     -         beq !done+
1f80: 20 d2 ff  -         jsr kernal_chrout
1f83: e8        -         inx
1f84: 4c 7b 1f  -         jmp !loop-
1f87: 68        -         pla
1f88: 8d 86 02  -         sta foreground_color
1f8b: 4c 94 1f  -         jmp !done+
1f8e: 20        - memory: .byte spacebar
1f8f: 53 55 42  -         .text description
1f92: 3a        -         .text ":"
1f93: 00        -         .byte NULL
1f94: a6 17     -         ldx rl(register.getValue())
1f96: a4 18     -         ldy rh(register.getValue())
1f98: e0 0d     -         cpx #<value
1f9a: d0 25     -         bne !failed+
1f9c: c0 34     -         cpy #>value
1f9e: d0 21     -         bne !failed+
1fa0: ee 27 3f  -         inc TEST_PASS_COUNT
1fa3: ad 86 02  -         lda foreground_color
1fa6: 48        -         pha
1fa7: a9 05     -         lda #color
1fa9: 8d 86 02  -         sta foreground_color
1fac: a2 00     -         ldx #$00
1fae: bd 22 3f  -         lda msg,x
1fb1: f0 07     -         beq !done+
1fb3: 20 d2 ff  -         jsr kernal_chrout
1fb6: e8        -         inx
1fb7: 4c ae 1f  -         jmp !loop-
1fba: 68        -         pla
1fbb: 8d 86 02  -         sta foreground_color
1fbe: 4c dc 1f  -         jmp !done+
1fc1: ad 86 02  -         lda foreground_color
1fc4: 48        -         pha
1fc5: a9 02     -         lda #color
1fc7: 8d 86 02  -         sta foreground_color
1fca: a2 00     -         ldx #$00
1fcc: bd 24 3f  -         lda msg,x
1fcf: f0 07     -         beq !done+
1fd1: 20 d2 ff  -         jsr kernal_chrout
1fd4: e8        -         inx
1fd5: 4c cc 1f  -         jmp !loop-
1fd8: 68        -         pla
1fd9: 8d 86 02  -         sta foreground_color
1fdc: 60        -         rts	
1fdd: ee 28 3f  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
1fe0: ad 86 02  -         lda foreground_color
1fe3: 48        -         pha
1fe4: a9 0f     -         lda #color
1fe6: 8d 86 02  -         sta foreground_color
1fe9: a2 00     -         ldx #$00
1feb: bd fe 1f  -         lda msg,x
1fee: f0 07     -         beq !done+
1ff0: 20 d2 ff  -         jsr kernal_chrout
1ff3: e8        -         inx
1ff4: 4c eb 1f  -         jmp !loop-
1ff7: 68        -         pla
1ff8: 8d 86 02  -         sta foreground_color
1ffb: 4c 11 20  -         jmp !done+
1ffe: 20 20     - memory: .fill spacing, spacebar
2000: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
200d: 2e 2e 2e  -         .text "..."
2010: 00        -         .byte NULL
2011: 20 2e 08  -         jsr SW16
2014: 15        -         .byte opcode(op, register)
2015: 64 3f     -         .word address.getValue()
2017: 10        -         .byte opcode(op, register)
2018: 3e 3f     -         .word address.getValue()
201a: 75        -         .byte opcode($70, register) }
201b: 0d        -         .byte $0d
201c: 21        -         .byte >(address.getValue()-1)
201d: 10        -         .byte <(address.getValue()-1)
201e: 10        -         .byte opcode(op, register)
201f: 40 3f     -         .word address.getValue()
2021: 75        -         .byte opcode($70, register) }
2022: 0d        -         .byte $0d
2023: 21        -         .byte >(address.getValue()-1)
2024: 80        -         .byte <(address.getValue()-1)
2025: c5        -         .byte opcode($c0, register) }
2026: 0d        -         .byte $0d
2027: 21        -         .byte >(address.getValue()-1)
2028: f0        -         .byte <(address.getValue()-1)
2029: c5        -         .byte opcode($c0, register) }
202a: 00        -         .byte $00 }
202b: ee 26 3f  -         inc TEST_COUNT
202e: ad 86 02  -         lda foreground_color
2031: 48        -         pha
2032: a9 0e     -         lda #color
2034: 8d 86 02  -         sta foreground_color
2037: a2 00     -         ldx #$00
2039: bd 4c 20  -         lda msg,x
203c: f0 07     -         beq !done+
203e: 20 d2 ff  -         jsr kernal_chrout
2041: e8        -         inx
2042: 4c 39 20  -         jmp !loop-
2045: 68        -         pla
2046: 8d 86 02  -         sta foreground_color
2049: 4c 51 20  -         jmp !done+
204c: 20        - memory: .byte spacebar
204d: 50 31     -         .text description
204f: 3a        -         .text ":"
2050: 00        -         .byte NULL
2051: a6 17     -         ldx addr
2053: e0 3e     -         cpx #<value
2055: d0 27     -         bne !failed+
2057: a6 18     -         ldx addr+1
2059: e0 3f     -         cpx #>value
205b: d0 21     -         bne !failed+
205d: ee 27 3f  -         inc TEST_PASS_COUNT
2060: ad 86 02  -         lda foreground_color
2063: 48        -         pha
2064: a9 05     -         lda #color
2066: 8d 86 02  -         sta foreground_color
2069: a2 00     -         ldx #$00
206b: bd 22 3f  -         lda msg,x
206e: f0 07     -         beq !done+
2070: 20 d2 ff  -         jsr kernal_chrout
2073: e8        -         inx
2074: 4c 6b 20  -         jmp !loop-
2077: 68        -         pla
2078: 8d 86 02  -         sta foreground_color
207b: 4c 99 20  -         jmp !done+
207e: ad 86 02  -         lda foreground_color
2081: 48        -         pha
2082: a9 02     -         lda #color
2084: 8d 86 02  -         sta foreground_color
2087: a2 00     -         ldx #$00
2089: bd 24 3f  -         lda msg,x
208c: f0 07     -         beq !done+
208e: 20 d2 ff  -         jsr kernal_chrout
2091: e8        -         inx
2092: 4c 89 20  -         jmp !loop-
2095: 68        -         pla
2096: 8d 86 02  -         sta foreground_color
2099: a2 00     -         ldx #$00
209b: bd aa 20  -         lda msg,x
209e: f0 07     -         beq !done+
20a0: 20 d2 ff  -         jsr kernal_chrout
20a3: e8        -         inx
20a4: 4c 9b 20  -         jmp !loop-
20a7: 4c ac 20  -         jmp !done+
20aa: 0d 00     - memory: .byte RETURN, NULL
20ac: ae 28 3f  -         ldx TEST_NAME_COUNT
20af: e0 15     -         cpx #TESTS_PER_PAGE
20b1: d0 5d     -         bne !exit+
20b3: ad 86 02  -         lda foreground_color
20b6: 48        -         pha
20b7: a9 01     -         lda #color
20b9: 8d 86 02  -         sta foreground_color
20bc: a2 00     -         ldx #$00
20be: bd d1 20  -         lda msg,x
20c1: f0 07     -         beq !done+
20c3: 20 d2 ff  -         jsr kernal_chrout
20c6: e8        -         inx
20c7: 4c be 20  -         jmp !loop-
20ca: 68        -         pla
20cb: 8d 86 02  -         sta foreground_color
20ce: 4c f0 20  -         jmp !no_key+
20d1: 0d        - memory: .byte RETURN
20d2: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
20e2: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
20ee: 0d 00     -         .byte RETURN, NULL
20f0: 20 9f ff  -         jsr scnkey  // scan keyboard
20f3: 20 e4 ff  -         jsr getin	// put result into A
20f6: f0 f8     -         beq !no_key-
20f8: a2 00     -         ldx #$00
20fa: bd 09 21  -         lda msg,x
20fd: f0 07     -         beq !done+
20ff: 20 d2 ff  -         jsr kernal_chrout
2102: e8        -         inx
2103: 4c fa 20  -         jmp !loop-
2106: 4c 0b 21  -         jmp !done+
2109: 0d 00     - newline:.byte RETURN, NULL
210b: a2 00     -         ldx #$00
210d: 8e 28 3f  -         stx TEST_NAME_COUNT
2110: 60        -         rts
2111: ee 26 3f  -         inc TEST_COUNT
2114: ad 86 02  -         lda foreground_color
2117: 48        -         pha
2118: a9 0e     -         lda #color
211a: 8d 86 02  -         sta foreground_color
211d: a2 00     -         ldx #$00
211f: bd 32 21  -         lda msg,x
2122: f0 07     -         beq !done+
2124: 20 d2 ff  -         jsr kernal_chrout
2127: e8        -         inx
2128: 4c 1f 21  -         jmp !loop-
212b: 68        -         pla
212c: 8d 86 02  -         sta foreground_color
212f: 4c 36 21  -         jmp !done+
2132: 20        - memory: .byte spacebar
2133: 31        -         .text description
2134: 3a        -         .text ":"
2135: 00        -         .byte NULL
2136: ae 64 3f  -         ldx addr
2139: e0 3e     -         cpx #<value
213b: d0 28     -         bne !failed+
213d: ae 65 3f  -         ldx addr+1
2140: e0 3f     -         cpx #>value
2142: d0 21     -         bne !failed+
2144: ee 27 3f  -         inc TEST_PASS_COUNT
2147: ad 86 02  -         lda foreground_color
214a: 48        -         pha
214b: a9 05     -         lda #color
214d: 8d 86 02  -         sta foreground_color
2150: a2 00     -         ldx #$00
2152: bd 22 3f  -         lda msg,x
2155: f0 07     -         beq !done+
2157: 20 d2 ff  -         jsr kernal_chrout
215a: e8        -         inx
215b: 4c 52 21  -         jmp !loop-
215e: 68        -         pla
215f: 8d 86 02  -         sta foreground_color
2162: 4c 80 21  -         jmp !done+
2165: ad 86 02  -         lda foreground_color
2168: 48        -         pha
2169: a9 02     -         lda #color
216b: 8d 86 02  -         sta foreground_color
216e: a2 00     -         ldx #$00
2170: bd 24 3f  -         lda msg,x
2173: f0 07     -         beq !done+
2175: 20 d2 ff  -         jsr kernal_chrout
2178: e8        -         inx
2179: 4c 70 21  -         jmp !loop-
217c: 68        -         pla
217d: 8d 86 02  -         sta foreground_color
2180: 60        -         rts
2181: ee 26 3f  -         inc TEST_COUNT
2184: ad 86 02  -         lda foreground_color
2187: 48        -         pha
2188: a9 0e     -         lda #color
218a: 8d 86 02  -         sta foreground_color
218d: a2 00     -         ldx #$00
218f: bd a2 21  -         lda msg,x
2192: f0 07     -         beq !done+
2194: 20 d2 ff  -         jsr kernal_chrout
2197: e8        -         inx
2198: 4c 8f 21  -         jmp !loop-
219b: 68        -         pla
219c: 8d 86 02  -         sta foreground_color
219f: 4c a6 21  -         jmp !done+
21a2: 20        - memory: .byte spacebar
21a3: 32        -         .text description
21a4: 3a        -         .text ":"
21a5: 00        -         .byte NULL
21a6: ae 66 3f  -         ldx addr
21a9: e0 40     -         cpx #<value
21ab: d0 28     -         bne !failed+
21ad: ae 67 3f  -         ldx addr+1
21b0: e0 3f     -         cpx #>value
21b2: d0 21     -         bne !failed+
21b4: ee 27 3f  -         inc TEST_PASS_COUNT
21b7: ad 86 02  -         lda foreground_color
21ba: 48        -         pha
21bb: a9 05     -         lda #color
21bd: 8d 86 02  -         sta foreground_color
21c0: a2 00     -         ldx #$00
21c2: bd 22 3f  -         lda msg,x
21c5: f0 07     -         beq !done+
21c7: 20 d2 ff  -         jsr kernal_chrout
21ca: e8        -         inx
21cb: 4c c2 21  -         jmp !loop-
21ce: 68        -         pla
21cf: 8d 86 02  -         sta foreground_color
21d2: 4c f0 21  -         jmp !done+
21d5: ad 86 02  -         lda foreground_color
21d8: 48        -         pha
21d9: a9 02     -         lda #color
21db: 8d 86 02  -         sta foreground_color
21de: a2 00     -         ldx #$00
21e0: bd 24 3f  -         lda msg,x
21e3: f0 07     -         beq !done+
21e5: 20 d2 ff  -         jsr kernal_chrout
21e8: e8        -         inx
21e9: 4c e0 21  -         jmp !loop-
21ec: 68        -         pla
21ed: 8d 86 02  -         sta foreground_color
21f0: 60        -         rts
21f1: ee 26 3f  -         inc TEST_COUNT
21f4: ad 86 02  -         lda foreground_color
21f7: 48        -         pha
21f8: a9 0e     -         lda #color
21fa: 8d 86 02  -         sta foreground_color
21fd: a2 00     -         ldx #$00
21ff: bd 12 22  -         lda msg,x
2202: f0 07     -         beq !done+
2204: 20 d2 ff  -         jsr kernal_chrout
2207: e8        -         inx
2208: 4c ff 21  -         jmp !loop-
220b: 68        -         pla
220c: 8d 86 02  -         sta foreground_color
220f: 4c 17 22  -         jmp !done+
2212: 20        - memory: .byte spacebar
2213: 50 32     -         .text description
2215: 3a        -         .text ":"
2216: 00        -         .byte NULL
2217: a6 17     -         ldx addr
2219: e0 40     -         cpx #<value
221b: d0 27     -         bne !failed+
221d: a6 18     -         ldx addr+1
221f: e0 3f     -         cpx #>value
2221: d0 21     -         bne !failed+
2223: ee 27 3f  -         inc TEST_PASS_COUNT
2226: ad 86 02  -         lda foreground_color
2229: 48        -         pha
222a: a9 05     -         lda #color
222c: 8d 86 02  -         sta foreground_color
222f: a2 00     -         ldx #$00
2231: bd 22 3f  -         lda msg,x
2234: f0 07     -         beq !done+
2236: 20 d2 ff  -         jsr kernal_chrout
2239: e8        -         inx
223a: 4c 31 22  -         jmp !loop-
223d: 68        -         pla
223e: 8d 86 02  -         sta foreground_color
2241: 4c 5f 22  -         jmp !done+
2244: ad 86 02  -         lda foreground_color
2247: 48        -         pha
2248: a9 02     -         lda #color
224a: 8d 86 02  -         sta foreground_color
224d: a2 00     -         ldx #$00
224f: bd 24 3f  -         lda msg,x
2252: f0 07     -         beq !done+
2254: 20 d2 ff  -         jsr kernal_chrout
2257: e8        -         inx
2258: 4c 4f 22  -         jmp !loop-
225b: 68        -         pla
225c: 8d 86 02  -         sta foreground_color
225f: 60        -         rts
2260: ee 28 3f  - COMPARE_TEST:inc TEST_NAME_COUNT
2263: ad 86 02  -         lda foreground_color
2266: 48        -         pha
2267: a9 0f     -         lda #color
2269: 8d 86 02  -         sta foreground_color
226c: a2 00     -         ldx #$00
226e: bd 81 22  -         lda msg,x
2271: f0 07     -         beq !done+
2273: 20 d2 ff  -         jsr kernal_chrout
2276: e8        -         inx
2277: 4c 6e 22  -         jmp !loop-
227a: 68        -         pla
227b: 8d 86 02  -         sta foreground_color
227e: 4c 8e 22  -         jmp !done+
2281: 20 20     - memory: .fill spacing, spacebar
2283: 43 4f 4d 50 41 52 45                             -         .text name
228a: 2e 2e 2e  -         .text "..."
228d: 00        -         .byte NULL
228e: 20 2e 08  -         jsr SW16
2291: 15        -         .byte opcode(op, register)
2292: 44 3f     -         .word address.getValue()
2294: 16        -         .byte opcode(op, register)
2295: 54 3f     -         .word address.getValue()
2297: 14        -         .byte opcode(op, register)
2298: 00 00     -         .word address.getValue()
229a: e4        -         .byte opcode($e0, register) }
229b: b0        -         .byte opcode($b0, register) }
229c: 75        -         .byte opcode($70, register) }
229d: 25        -         .byte opcode($20, register) }
229e: d6        -         .byte opcode($d0, register) }
229f: 02 f9     -         .byte $02, effective_address(ea,*) }
22a1: 00        -         .byte $00 }
22a2: ee 26 3f  -         inc TEST_COUNT
22a5: ad 86 02  -         lda foreground_color
22a8: 48        -         pha
22a9: a9 0e     -         lda #color
22ab: 8d 86 02  -         sta foreground_color
22ae: a2 00     -         ldx #$00
22b0: bd c3 22  -         lda msg,x
22b3: f0 07     -         beq !done+
22b5: 20 d2 ff  -         jsr kernal_chrout
22b8: e8        -         inx
22b9: 4c b0 22  -         jmp !loop-
22bc: 68        -         pla
22bd: 8d 86 02  -         sta foreground_color
22c0: 4c cb 22  -         jmp !done+
22c3: 20        - memory: .byte spacebar
22c4: 43 4f 55 4e 54                                   -         .text description
22c9: 3a        -         .text ":"
22ca: 00        -         .byte NULL
22cb: a6 1f     -         ldx rl(register.getValue())
22cd: a4 20     -         ldy rh(register.getValue())
22cf: e0 08     -         cpx #<value
22d1: d0 25     -         bne !failed+
22d3: c0 00     -         cpy #>value
22d5: d0 21     -         bne !failed+
22d7: ee 27 3f  -         inc TEST_PASS_COUNT
22da: ad 86 02  -         lda foreground_color
22dd: 48        -         pha
22de: a9 05     -         lda #color
22e0: 8d 86 02  -         sta foreground_color
22e3: a2 00     -         ldx #$00
22e5: bd 22 3f  -         lda msg,x
22e8: f0 07     -         beq !done+
22ea: 20 d2 ff  -         jsr kernal_chrout
22ed: e8        -         inx
22ee: 4c e5 22  -         jmp !loop-
22f1: 68        -         pla
22f2: 8d 86 02  -         sta foreground_color
22f5: 4c 13 23  -         jmp !done+
22f8: ad 86 02  -         lda foreground_color
22fb: 48        -         pha
22fc: a9 02     -         lda #color
22fe: 8d 86 02  -         sta foreground_color
2301: a2 00     -         ldx #$00
2303: bd 24 3f  -         lda msg,x
2306: f0 07     -         beq !done+
2308: 20 d2 ff  -         jsr kernal_chrout
230b: e8        -         inx
230c: 4c 03 23  -         jmp !loop-
230f: 68        -         pla
2310: 8d 86 02  -         sta foreground_color
2313: a2 00     -         ldx #$00
2315: bd 24 23  -         lda msg,x
2318: f0 07     -         beq !done+
231a: 20 d2 ff  -         jsr kernal_chrout
231d: e8        -         inx
231e: 4c 15 23  -         jmp !loop-
2321: 4c 26 23  -         jmp !done+
2324: 0d 00     - memory: .byte RETURN, NULL
2326: ae 28 3f  -         ldx TEST_NAME_COUNT
2329: e0 15     -         cpx #TESTS_PER_PAGE
232b: d0 5d     -         bne !exit+
232d: ad 86 02  -         lda foreground_color
2330: 48        -         pha
2331: a9 01     -         lda #color
2333: 8d 86 02  -         sta foreground_color
2336: a2 00     -         ldx #$00
2338: bd 4b 23  -         lda msg,x
233b: f0 07     -         beq !done+
233d: 20 d2 ff  -         jsr kernal_chrout
2340: e8        -         inx
2341: 4c 38 23  -         jmp !loop-
2344: 68        -         pla
2345: 8d 86 02  -         sta foreground_color
2348: 4c 6a 23  -         jmp !no_key+
234b: 0d        - memory: .byte RETURN
234c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
235c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2368: 0d 00     -         .byte RETURN, NULL
236a: 20 9f ff  -         jsr scnkey  // scan keyboard
236d: 20 e4 ff  -         jsr getin	// put result into A
2370: f0 f8     -         beq !no_key-
2372: a2 00     -         ldx #$00
2374: bd 83 23  -         lda msg,x
2377: f0 07     -         beq !done+
2379: 20 d2 ff  -         jsr kernal_chrout
237c: e8        -         inx
237d: 4c 74 23  -         jmp !loop-
2380: 4c 85 23  -         jmp !done+
2383: 0d 00     - newline:.byte RETURN, NULL
2385: a2 00     -         ldx #$00
2387: 8e 28 3f  -         stx TEST_NAME_COUNT
238a: 60        -         rts	
238b: ee 28 3f  - INCREMENT_TEST:inc TEST_NAME_COUNT
238e: ad 86 02  -         lda foreground_color
2391: 48        -         pha
2392: a9 0f     -         lda #color
2394: 8d 86 02  -         sta foreground_color
2397: a2 00     -         ldx #$00
2399: bd ac 23  -         lda msg,x
239c: f0 07     -         beq !done+
239e: 20 d2 ff  -         jsr kernal_chrout
23a1: e8        -         inx
23a2: 4c 99 23  -         jmp !loop-
23a5: 68        -         pla
23a6: 8d 86 02  -         sta foreground_color
23a9: 4c bb 23  -         jmp !done+
23ac: 20 20     - memory: .fill spacing, spacebar
23ae: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
23b7: 2e 2e 2e  -         .text "..."
23ba: 00        -         .byte NULL
23bb: 20 2e 08  -         jsr SW16
23be: 15        -         .byte opcode(op, register)
23bf: 3e 3f     -         .word address.getValue()
23c1: b0        -         .byte opcode($b0, register) }
23c2: 55        -         .byte opcode($50, register) }
23c3: e5        -         .byte opcode($e0, register) }
23c4: 00        -         .byte $00 }
23c5: ee 26 3f  -         inc TEST_COUNT
23c8: ad 86 02  -         lda foreground_color
23cb: 48        -         pha
23cc: a9 0e     -         lda #color
23ce: 8d 86 02  -         sta foreground_color
23d1: a2 00     -         ldx #$00
23d3: bd e6 23  -         lda msg,x
23d6: f0 07     -         beq !done+
23d8: 20 d2 ff  -         jsr kernal_chrout
23db: e8        -         inx
23dc: 4c d3 23  -         jmp !loop-
23df: 68        -         pla
23e0: 8d 86 02  -         sta foreground_color
23e3: 4c eb 23  -         jmp !done+
23e6: 20        - memory: .byte spacebar
23e7: 2b 32     -         .text description
23e9: 3a        -         .text ":"
23ea: 00        -         .byte NULL
23eb: a6 21     -         ldx rl(register.getValue())
23ed: a4 22     -         ldy rh(register.getValue())
23ef: e0 40     -         cpx #<value
23f1: d0 25     -         bne !failed+
23f3: c0 3f     -         cpy #>value
23f5: d0 21     -         bne !failed+
23f7: ee 27 3f  -         inc TEST_PASS_COUNT
23fa: ad 86 02  -         lda foreground_color
23fd: 48        -         pha
23fe: a9 05     -         lda #color
2400: 8d 86 02  -         sta foreground_color
2403: a2 00     -         ldx #$00
2405: bd 22 3f  -         lda msg,x
2408: f0 07     -         beq !done+
240a: 20 d2 ff  -         jsr kernal_chrout
240d: e8        -         inx
240e: 4c 05 24  -         jmp !loop-
2411: 68        -         pla
2412: 8d 86 02  -         sta foreground_color
2415: 4c 33 24  -         jmp !done+
2418: ad 86 02  -         lda foreground_color
241b: 48        -         pha
241c: a9 02     -         lda #color
241e: 8d 86 02  -         sta foreground_color
2421: a2 00     -         ldx #$00
2423: bd 24 3f  -         lda msg,x
2426: f0 07     -         beq !done+
2428: 20 d2 ff  -         jsr kernal_chrout
242b: e8        -         inx
242c: 4c 23 24  -         jmp !loop-
242f: 68        -         pla
2430: 8d 86 02  -         sta foreground_color
2433: a2 00     -         ldx #$00
2435: bd 44 24  -         lda msg,x
2438: f0 07     -         beq !done+
243a: 20 d2 ff  -         jsr kernal_chrout
243d: e8        -         inx
243e: 4c 35 24  -         jmp !loop-
2441: 4c 46 24  -         jmp !done+
2444: 0d 00     - memory: .byte RETURN, NULL
2446: ae 28 3f  -         ldx TEST_NAME_COUNT
2449: e0 15     -         cpx #TESTS_PER_PAGE
244b: d0 5d     -         bne !exit+
244d: ad 86 02  -         lda foreground_color
2450: 48        -         pha
2451: a9 01     -         lda #color
2453: 8d 86 02  -         sta foreground_color
2456: a2 00     -         ldx #$00
2458: bd 6b 24  -         lda msg,x
245b: f0 07     -         beq !done+
245d: 20 d2 ff  -         jsr kernal_chrout
2460: e8        -         inx
2461: 4c 58 24  -         jmp !loop-
2464: 68        -         pla
2465: 8d 86 02  -         sta foreground_color
2468: 4c 8a 24  -         jmp !no_key+
246b: 0d        - memory: .byte RETURN
246c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
247c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2488: 0d 00     -         .byte RETURN, NULL
248a: 20 9f ff  -         jsr scnkey  // scan keyboard
248d: 20 e4 ff  -         jsr getin	// put result into A
2490: f0 f8     -         beq !no_key-
2492: a2 00     -         ldx #$00
2494: bd a3 24  -         lda msg,x
2497: f0 07     -         beq !done+
2499: 20 d2 ff  -         jsr kernal_chrout
249c: e8        -         inx
249d: 4c 94 24  -         jmp !loop-
24a0: 4c a5 24  -         jmp !done+
24a3: 0d 00     - newline:.byte RETURN, NULL
24a5: a2 00     -         ldx #$00
24a7: 8e 28 3f  -         stx TEST_NAME_COUNT
24aa: 60        -         rts
24ab: ee 28 3f  - DECREMENT_TEST:inc TEST_NAME_COUNT
24ae: ad 86 02  -         lda foreground_color
24b1: 48        -         pha
24b2: a9 0f     -         lda #color
24b4: 8d 86 02  -         sta foreground_color
24b7: a2 00     -         ldx #$00
24b9: bd cc 24  -         lda msg,x
24bc: f0 07     -         beq !done+
24be: 20 d2 ff  -         jsr kernal_chrout
24c1: e8        -         inx
24c2: 4c b9 24  -         jmp !loop-
24c5: 68        -         pla
24c6: 8d 86 02  -         sta foreground_color
24c9: 4c db 24  -         jmp !done+
24cc: 20 20     - memory: .fill spacing, spacebar
24ce: 44 45 43 52 45 4d 45 4e 54                       -         .text name
24d7: 2e 2e 2e  -         .text "..."
24da: 00        -         .byte NULL
24db: 20 2e 08  -         jsr SW16
24de: 15        -         .byte opcode(op, register)
24df: 44 3f     -         .word address.getValue()
24e1: 14        -         .byte opcode(op, register)
24e2: 10 00     -         .word address.getValue()
24e4: b0        -         .byte opcode($b0, register) }
24e5: 55        -         .byte opcode($50, register) }
24e6: f4        -         .byte opcode($f0, register) }
24e7: 07 fc     -         .byte $07, effective_address(ea,*) }
24e9: 00        -         .byte $00 }
24ea: ee 26 3f  -         inc TEST_COUNT
24ed: ad 86 02  -         lda foreground_color
24f0: 48        -         pha
24f1: a9 0e     -         lda #color
24f3: 8d 86 02  -         sta foreground_color
24f6: a2 00     -         ldx #$00
24f8: bd 0b 25  -         lda msg,x
24fb: f0 07     -         beq !done+
24fd: 20 d2 ff  -         jsr kernal_chrout
2500: e8        -         inx
2501: 4c f8 24  -         jmp !loop-
2504: 68        -         pla
2505: 8d 86 02  -         sta foreground_color
2508: 4c 0f 25  -         jmp !done+
250b: 20        - memory: .byte spacebar
250c: 30        -         .text description
250d: 3a        -         .text ":"
250e: 00        -         .byte NULL
250f: a6 1f     -         ldx rl(register.getValue())
2511: a4 20     -         ldy rh(register.getValue())
2513: e0 00     -         cpx #<value
2515: d0 25     -         bne !failed+
2517: c0 00     -         cpy #>value
2519: d0 21     -         bne !failed+
251b: ee 27 3f  -         inc TEST_PASS_COUNT
251e: ad 86 02  -         lda foreground_color
2521: 48        -         pha
2522: a9 05     -         lda #color
2524: 8d 86 02  -         sta foreground_color
2527: a2 00     -         ldx #$00
2529: bd 22 3f  -         lda msg,x
252c: f0 07     -         beq !done+
252e: 20 d2 ff  -         jsr kernal_chrout
2531: e8        -         inx
2532: 4c 29 25  -         jmp !loop-
2535: 68        -         pla
2536: 8d 86 02  -         sta foreground_color
2539: 4c 57 25  -         jmp !done+
253c: ad 86 02  -         lda foreground_color
253f: 48        -         pha
2540: a9 02     -         lda #color
2542: 8d 86 02  -         sta foreground_color
2545: a2 00     -         ldx #$00
2547: bd 24 3f  -         lda msg,x
254a: f0 07     -         beq !done+
254c: 20 d2 ff  -         jsr kernal_chrout
254f: e8        -         inx
2550: 4c 47 25  -         jmp !loop-
2553: 68        -         pla
2554: 8d 86 02  -         sta foreground_color
2557: a2 00     -         ldx #$00
2559: bd 68 25  -         lda msg,x
255c: f0 07     -         beq !done+
255e: 20 d2 ff  -         jsr kernal_chrout
2561: e8        -         inx
2562: 4c 59 25  -         jmp !loop-
2565: 4c 6a 25  -         jmp !done+
2568: 0d 00     - memory: .byte RETURN, NULL
256a: ae 28 3f  -         ldx TEST_NAME_COUNT
256d: e0 15     -         cpx #TESTS_PER_PAGE
256f: d0 5d     -         bne !exit+
2571: ad 86 02  -         lda foreground_color
2574: 48        -         pha
2575: a9 01     -         lda #color
2577: 8d 86 02  -         sta foreground_color
257a: a2 00     -         ldx #$00
257c: bd 8f 25  -         lda msg,x
257f: f0 07     -         beq !done+
2581: 20 d2 ff  -         jsr kernal_chrout
2584: e8        -         inx
2585: 4c 7c 25  -         jmp !loop-
2588: 68        -         pla
2589: 8d 86 02  -         sta foreground_color
258c: 4c ae 25  -         jmp !no_key+
258f: 0d        - memory: .byte RETURN
2590: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
25a0: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
25ac: 0d 00     -         .byte RETURN, NULL
25ae: 20 9f ff  -         jsr scnkey  // scan keyboard
25b1: 20 e4 ff  -         jsr getin	// put result into A
25b4: f0 f8     -         beq !no_key-
25b6: a2 00     -         ldx #$00
25b8: bd c7 25  -         lda msg,x
25bb: f0 07     -         beq !done+
25bd: 20 d2 ff  -         jsr kernal_chrout
25c0: e8        -         inx
25c1: 4c b8 25  -         jmp !loop-
25c4: 4c c9 25  -         jmp !done+
25c7: 0d 00     - newline:.byte RETURN, NULL
25c9: a2 00     -         ldx #$00
25cb: 8e 28 3f  -         stx TEST_NAME_COUNT
25ce: 60        -         rts
25cf: ee 28 3f  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
25d2: ad 86 02  -         lda foreground_color
25d5: 48        -         pha
25d6: a9 0f     -         lda #color
25d8: 8d 86 02  -         sta foreground_color
25db: a2 00     -         ldx #$00
25dd: bd f0 25  -         lda msg,x
25e0: f0 07     -         beq !done+
25e2: 20 d2 ff  -         jsr kernal_chrout
25e5: e8        -         inx
25e6: 4c dd 25  -         jmp !loop-
25e9: 68        -         pla
25ea: 8d 86 02  -         sta foreground_color
25ed: 4c ff 25  -         jmp !done+
25f0: 20 20     - memory: .fill spacing, spacebar
25f2: 36 35 30 32 20 4d 4f 44 45                       -         .text name
25fb: 2e 2e 2e  -         .text "..."
25fe: 00        -         .byte NULL
25ff: 20 2e 08  -         jsr SW16
2602: 00        -         .byte $00 }
2603: ee 26 3f  -         inc TEST_COUNT
2606: ad 86 02  -         lda foreground_color
2609: 48        -         pha
260a: a9 0e     -         lda #color
260c: 8d 86 02  -         sta foreground_color
260f: a2 00     -         ldx #$00
2611: bd 24 26  -         lda msg,x
2614: f0 07     -         beq !done+
2616: 20 d2 ff  -         jsr kernal_chrout
2619: e8        -         inx
261a: 4c 11 26  -         jmp !loop-
261d: 68        -         pla
261e: 8d 86 02  -         sta foreground_color
2621: 4c 2a 26  -         jmp !done+
2624: 20        - memory: .byte spacebar
2625: 52 54 4e  -         .text description
2628: 3a        -         .text ":"
2629: 00        -         .byte NULL
262a: a2 01     -         ldx #value
262c: f0 21     -         beq !failed+
262e: ee 27 3f  -         inc TEST_PASS_COUNT
2631: ad 86 02  -         lda foreground_color
2634: 48        -         pha
2635: a9 05     -         lda #color
2637: 8d 86 02  -         sta foreground_color
263a: a2 00     -         ldx #$00
263c: bd 22 3f  -         lda msg,x
263f: f0 07     -         beq !done+
2641: 20 d2 ff  -         jsr kernal_chrout
2644: e8        -         inx
2645: 4c 3c 26  -         jmp !loop-
2648: 68        -         pla
2649: 8d 86 02  -         sta foreground_color
264c: 4c 6a 26  -         jmp !done+
264f: ad 86 02  -         lda foreground_color
2652: 48        -         pha
2653: a9 02     -         lda #color
2655: 8d 86 02  -         sta foreground_color
2658: a2 00     -         ldx #$00
265a: bd 24 3f  -         lda msg,x
265d: f0 07     -         beq !done+
265f: 20 d2 ff  -         jsr kernal_chrout
2662: e8        -         inx
2663: 4c 5a 26  -         jmp !loop-
2666: 68        -         pla
2667: 8d 86 02  -         sta foreground_color
266a: a2 00     -         ldx #$00
266c: bd 7b 26  -         lda msg,x
266f: f0 07     -         beq !done+
2671: 20 d2 ff  -         jsr kernal_chrout
2674: e8        -         inx
2675: 4c 6c 26  -         jmp !loop-
2678: 4c 7d 26  -         jmp !done+
267b: 0d 00     - memory: .byte RETURN, NULL
267d: ae 28 3f  -         ldx TEST_NAME_COUNT
2680: e0 15     -         cpx #TESTS_PER_PAGE
2682: d0 5d     -         bne !exit+
2684: ad 86 02  -         lda foreground_color
2687: 48        -         pha
2688: a9 01     -         lda #color
268a: 8d 86 02  -         sta foreground_color
268d: a2 00     -         ldx #$00
268f: bd a2 26  -         lda msg,x
2692: f0 07     -         beq !done+
2694: 20 d2 ff  -         jsr kernal_chrout
2697: e8        -         inx
2698: 4c 8f 26  -         jmp !loop-
269b: 68        -         pla
269c: 8d 86 02  -         sta foreground_color
269f: 4c c1 26  -         jmp !no_key+
26a2: 0d        - memory: .byte RETURN
26a3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
26b3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
26bf: 0d 00     -         .byte RETURN, NULL
26c1: 20 9f ff  -         jsr scnkey  // scan keyboard
26c4: 20 e4 ff  -         jsr getin	// put result into A
26c7: f0 f8     -         beq !no_key-
26c9: a2 00     -         ldx #$00
26cb: bd da 26  -         lda msg,x
26ce: f0 07     -         beq !done+
26d0: 20 d2 ff  -         jsr kernal_chrout
26d3: e8        -         inx
26d4: 4c cb 26  -         jmp !loop-
26d7: 4c dc 26  -         jmp !done+
26da: 0d 00     - newline:.byte RETURN, NULL
26dc: a2 00     -         ldx #$00
26de: 8e 28 3f  -         stx TEST_NAME_COUNT
26e1: 60        -         rts
26e2: ee 28 3f  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
26e5: ad 86 02  -         lda foreground_color
26e8: 48        -         pha
26e9: a9 0f     -         lda #color
26eb: 8d 86 02  -         sta foreground_color
26ee: a2 00     -         ldx #$00
26f0: bd 03 27  -         lda msg,x
26f3: f0 07     -         beq !done+
26f5: 20 d2 ff  -         jsr kernal_chrout
26f8: e8        -         inx
26f9: 4c f0 26  -         jmp !loop-
26fc: 68        -         pla
26fd: 8d 86 02  -         sta foreground_color
2700: 4c 16 27  -         jmp !done+
2703: 20 20     - memory: .fill spacing, spacebar
2705: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
2712: 2e 2e 2e  -         .text "..."
2715: 00        -         .byte NULL
2716: 20 2e 08  -         jsr SW16
2719: 01 00     -         .byte $01, effective_address(ea,*) }
271b: 10        -         .byte opcode(op, register)
271c: dc fe     -         .word address.getValue()
271e: 01 05     -         .byte $01, effective_address(ea,*) }
2720: 10        -         .byte opcode(op, register)
2721: 23 01     -         .word address.getValue()
2723: 01 00     -         .byte $01, effective_address(ea,*) }
2725: 00        -         .byte $00 }
2726: ee 26 3f  -         inc TEST_COUNT
2729: ad 86 02  -         lda foreground_color
272c: 48        -         pha
272d: a9 0e     -         lda #color
272f: 8d 86 02  -         sta foreground_color
2732: a2 00     -         ldx #$00
2734: bd 47 27  -         lda msg,x
2737: f0 07     -         beq !done+
2739: 20 d2 ff  -         jsr kernal_chrout
273c: e8        -         inx
273d: 4c 34 27  -         jmp !loop-
2740: 68        -         pla
2741: 8d 86 02  -         sta foreground_color
2744: 4c 4b 27  -         jmp !done+
2747: 20        - memory: .byte spacebar
2748: 31        -         .text description
2749: 3a        -         .text ":"
274a: 00        -         .byte NULL
274b: a6 17     -         ldx rl(register.getValue())
274d: a4 18     -         ldy rh(register.getValue())
274f: e0 dc     -         cpx #<value
2751: d0 25     -         bne !failed+
2753: c0 fe     -         cpy #>value
2755: d0 21     -         bne !failed+
2757: ee 27 3f  -         inc TEST_PASS_COUNT
275a: ad 86 02  -         lda foreground_color
275d: 48        -         pha
275e: a9 05     -         lda #color
2760: 8d 86 02  -         sta foreground_color
2763: a2 00     -         ldx #$00
2765: bd 22 3f  -         lda msg,x
2768: f0 07     -         beq !done+
276a: 20 d2 ff  -         jsr kernal_chrout
276d: e8        -         inx
276e: 4c 65 27  -         jmp !loop-
2771: 68        -         pla
2772: 8d 86 02  -         sta foreground_color
2775: 4c 93 27  -         jmp !done+
2778: ad 86 02  -         lda foreground_color
277b: 48        -         pha
277c: a9 02     -         lda #color
277e: 8d 86 02  -         sta foreground_color
2781: a2 00     -         ldx #$00
2783: bd 24 3f  -         lda msg,x
2786: f0 07     -         beq !done+
2788: 20 d2 ff  -         jsr kernal_chrout
278b: e8        -         inx
278c: 4c 83 27  -         jmp !loop-
278f: 68        -         pla
2790: 8d 86 02  -         sta foreground_color
2793: a2 00     -         ldx #$00
2795: bd a4 27  -         lda msg,x
2798: f0 07     -         beq !done+
279a: 20 d2 ff  -         jsr kernal_chrout
279d: e8        -         inx
279e: 4c 95 27  -         jmp !loop-
27a1: 4c a6 27  -         jmp !done+
27a4: 0d 00     - memory: .byte RETURN, NULL
27a6: ae 28 3f  -         ldx TEST_NAME_COUNT
27a9: e0 15     -         cpx #TESTS_PER_PAGE
27ab: d0 5d     -         bne !exit+
27ad: ad 86 02  -         lda foreground_color
27b0: 48        -         pha
27b1: a9 01     -         lda #color
27b3: 8d 86 02  -         sta foreground_color
27b6: a2 00     -         ldx #$00
27b8: bd cb 27  -         lda msg,x
27bb: f0 07     -         beq !done+
27bd: 20 d2 ff  -         jsr kernal_chrout
27c0: e8        -         inx
27c1: 4c b8 27  -         jmp !loop-
27c4: 68        -         pla
27c5: 8d 86 02  -         sta foreground_color
27c8: 4c ea 27  -         jmp !no_key+
27cb: 0d        - memory: .byte RETURN
27cc: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
27dc: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
27e8: 0d 00     -         .byte RETURN, NULL
27ea: 20 9f ff  -         jsr scnkey  // scan keyboard
27ed: 20 e4 ff  -         jsr getin	// put result into A
27f0: f0 f8     -         beq !no_key-
27f2: a2 00     -         ldx #$00
27f4: bd 03 28  -         lda msg,x
27f7: f0 07     -         beq !done+
27f9: 20 d2 ff  -         jsr kernal_chrout
27fc: e8        -         inx
27fd: 4c f4 27  -         jmp !loop-
2800: 4c 05 28  -         jmp !done+
2803: 0d 00     - newline:.byte RETURN, NULL
2805: a2 00     -         ldx #$00
2807: 8e 28 3f  -         stx TEST_NAME_COUNT
280a: 60        -         rts
280b: ee 28 3f  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
280e: ad 86 02  -         lda foreground_color
2811: 48        -         pha
2812: a9 0f     -         lda #color
2814: 8d 86 02  -         sta foreground_color
2817: a2 00     -         ldx #$00
2819: bd 2c 28  -         lda msg,x
281c: f0 07     -         beq !done+
281e: 20 d2 ff  -         jsr kernal_chrout
2821: e8        -         inx
2822: 4c 19 28  -         jmp !loop-
2825: 68        -         pla
2826: 8d 86 02  -         sta foreground_color
2829: 4c 41 28  -         jmp !done+
282c: 20 20     - memory: .fill spacing, spacebar
282e: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
283d: 2e 2e 2e  -         .text "..."
2840: 00        -         .byte NULL
2841: 20 2e 08  -         jsr SW16
2844: 15        -         .byte opcode(op, register)
2845: 00 10     -         .word address.getValue()
2847: 10        -         .byte opcode(op, register)
2848: ff ff     -         .word address.getValue()
284a: a5        -         .byte opcode($a0, register) }
284b: 02 02     -         .byte $02, effective_address(ea,*) }
284d: 01 05     -         .byte $01, effective_address(ea,*) }
284f: 10        -         .byte opcode(op, register)
2850: dc fe     -         .word address.getValue()
2852: 01 05     -         .byte $01, effective_address(ea,*) }
2854: 10        -         .byte opcode(op, register)
2855: 23 01     -         .word address.getValue()
2857: 01 00     -         .byte $01, effective_address(ea,*) }
2859: 00        -         .byte $00 }
285a: ee 26 3f  -         inc TEST_COUNT
285d: ad 86 02  -         lda foreground_color
2860: 48        -         pha
2861: a9 0e     -         lda #color
2863: 8d 86 02  -         sta foreground_color
2866: a2 00     -         ldx #$00
2868: bd 7b 28  -         lda msg,x
286b: f0 07     -         beq !done+
286d: 20 d2 ff  -         jsr kernal_chrout
2870: e8        -         inx
2871: 4c 68 28  -         jmp !loop-
2874: 68        -         pla
2875: 8d 86 02  -         sta foreground_color
2878: 4c 7f 28  -         jmp !done+
287b: 20        - memory: .byte spacebar
287c: 32        -         .text description
287d: 3a        -         .text ":"
287e: 00        -         .byte NULL
287f: a6 17     -         ldx rl(register.getValue())
2881: a4 18     -         ldy rh(register.getValue())
2883: e0 23     -         cpx #<value
2885: d0 25     -         bne !failed+
2887: c0 01     -         cpy #>value
2889: d0 21     -         bne !failed+
288b: ee 27 3f  -         inc TEST_PASS_COUNT
288e: ad 86 02  -         lda foreground_color
2891: 48        -         pha
2892: a9 05     -         lda #color
2894: 8d 86 02  -         sta foreground_color
2897: a2 00     -         ldx #$00
2899: bd 22 3f  -         lda msg,x
289c: f0 07     -         beq !done+
289e: 20 d2 ff  -         jsr kernal_chrout
28a1: e8        -         inx
28a2: 4c 99 28  -         jmp !loop-
28a5: 68        -         pla
28a6: 8d 86 02  -         sta foreground_color
28a9: 4c c7 28  -         jmp !done+
28ac: ad 86 02  -         lda foreground_color
28af: 48        -         pha
28b0: a9 02     -         lda #color
28b2: 8d 86 02  -         sta foreground_color
28b5: a2 00     -         ldx #$00
28b7: bd 24 3f  -         lda msg,x
28ba: f0 07     -         beq !done+
28bc: 20 d2 ff  -         jsr kernal_chrout
28bf: e8        -         inx
28c0: 4c b7 28  -         jmp !loop-
28c3: 68        -         pla
28c4: 8d 86 02  -         sta foreground_color
28c7: a2 00     -         ldx #$00
28c9: bd d8 28  -         lda msg,x
28cc: f0 07     -         beq !done+
28ce: 20 d2 ff  -         jsr kernal_chrout
28d1: e8        -         inx
28d2: 4c c9 28  -         jmp !loop-
28d5: 4c da 28  -         jmp !done+
28d8: 0d 00     - memory: .byte RETURN, NULL
28da: ae 28 3f  -         ldx TEST_NAME_COUNT
28dd: e0 15     -         cpx #TESTS_PER_PAGE
28df: d0 5d     -         bne !exit+
28e1: ad 86 02  -         lda foreground_color
28e4: 48        -         pha
28e5: a9 01     -         lda #color
28e7: 8d 86 02  -         sta foreground_color
28ea: a2 00     -         ldx #$00
28ec: bd ff 28  -         lda msg,x
28ef: f0 07     -         beq !done+
28f1: 20 d2 ff  -         jsr kernal_chrout
28f4: e8        -         inx
28f5: 4c ec 28  -         jmp !loop-
28f8: 68        -         pla
28f9: 8d 86 02  -         sta foreground_color
28fc: 4c 1e 29  -         jmp !no_key+
28ff: 0d        - memory: .byte RETURN
2900: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2910: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
291c: 0d 00     -         .byte RETURN, NULL
291e: 20 9f ff  -         jsr scnkey  // scan keyboard
2921: 20 e4 ff  -         jsr getin	// put result into A
2924: f0 f8     -         beq !no_key-
2926: a2 00     -         ldx #$00
2928: bd 37 29  -         lda msg,x
292b: f0 07     -         beq !done+
292d: 20 d2 ff  -         jsr kernal_chrout
2930: e8        -         inx
2931: 4c 28 29  -         jmp !loop-
2934: 4c 39 29  -         jmp !done+
2937: 0d 00     - newline:.byte RETURN, NULL
2939: a2 00     -         ldx #$00
293b: 8e 28 3f  -         stx TEST_NAME_COUNT
293e: 60        -         rts
293f: ee 28 3f  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
2942: ad 86 02  -         lda foreground_color
2945: 48        -         pha
2946: a9 0f     -         lda #color
2948: 8d 86 02  -         sta foreground_color
294b: a2 00     -         ldx #$00
294d: bd 60 29  -         lda msg,x
2950: f0 07     -         beq !done+
2952: 20 d2 ff  -         jsr kernal_chrout
2955: e8        -         inx
2956: 4c 4d 29  -         jmp !loop-
2959: 68        -         pla
295a: 8d 86 02  -         sta foreground_color
295d: 4c 75 29  -         jmp !done+
2960: 20 20     - memory: .fill spacing, spacebar
2962: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
2971: 2e 2e 2e  -         .text "..."
2974: 00        -         .byte NULL
2975: 20 2e 08  -         jsr SW16
2978: 15        -         .byte opcode(op, register)
2979: 00 10     -         .word address.getValue()
297b: 10        -         .byte opcode(op, register)
297c: ff ff     -         .word address.getValue()
297e: a5        -         .byte opcode($a0, register) }
297f: 03 02     -         .byte $03, effective_address(ea,*) }
2981: 01 05     -         .byte $01, effective_address(ea,*) }
2983: 10        -         .byte opcode(op, register)
2984: dc fe     -         .word address.getValue()
2986: 01 05     -         .byte $01, effective_address(ea,*) }
2988: 10        -         .byte opcode(op, register)
2989: 23 01     -         .word address.getValue()
298b: 01 00     -         .byte $01, effective_address(ea,*) }
298d: 00        -         .byte $00 }
298e: ee 26 3f  -         inc TEST_COUNT
2991: ad 86 02  -         lda foreground_color
2994: 48        -         pha
2995: a9 0e     -         lda #color
2997: 8d 86 02  -         sta foreground_color
299a: a2 00     -         ldx #$00
299c: bd af 29  -         lda msg,x
299f: f0 07     -         beq !done+
29a1: 20 d2 ff  -         jsr kernal_chrout
29a4: e8        -         inx
29a5: 4c 9c 29  -         jmp !loop-
29a8: 68        -         pla
29a9: 8d 86 02  -         sta foreground_color
29ac: 4c b3 29  -         jmp !done+
29af: 20        - memory: .byte spacebar
29b0: 31        -         .text description
29b1: 3a        -         .text ":"
29b2: 00        -         .byte NULL
29b3: a6 17     -         ldx rl(register.getValue())
29b5: a4 18     -         ldy rh(register.getValue())
29b7: e0 dc     -         cpx #<value
29b9: d0 25     -         bne !failed+
29bb: c0 fe     -         cpy #>value
29bd: d0 21     -         bne !failed+
29bf: ee 27 3f  -         inc TEST_PASS_COUNT
29c2: ad 86 02  -         lda foreground_color
29c5: 48        -         pha
29c6: a9 05     -         lda #color
29c8: 8d 86 02  -         sta foreground_color
29cb: a2 00     -         ldx #$00
29cd: bd 22 3f  -         lda msg,x
29d0: f0 07     -         beq !done+
29d2: 20 d2 ff  -         jsr kernal_chrout
29d5: e8        -         inx
29d6: 4c cd 29  -         jmp !loop-
29d9: 68        -         pla
29da: 8d 86 02  -         sta foreground_color
29dd: 4c fb 29  -         jmp !done+
29e0: ad 86 02  -         lda foreground_color
29e3: 48        -         pha
29e4: a9 02     -         lda #color
29e6: 8d 86 02  -         sta foreground_color
29e9: a2 00     -         ldx #$00
29eb: bd 24 3f  -         lda msg,x
29ee: f0 07     -         beq !done+
29f0: 20 d2 ff  -         jsr kernal_chrout
29f3: e8        -         inx
29f4: 4c eb 29  -         jmp !loop-
29f7: 68        -         pla
29f8: 8d 86 02  -         sta foreground_color
29fb: a2 00     -         ldx #$00
29fd: bd 0c 2a  -         lda msg,x
2a00: f0 07     -         beq !done+
2a02: 20 d2 ff  -         jsr kernal_chrout
2a05: e8        -         inx
2a06: 4c fd 29  -         jmp !loop-
2a09: 4c 0e 2a  -         jmp !done+
2a0c: 0d 00     - memory: .byte RETURN, NULL
2a0e: ae 28 3f  -         ldx TEST_NAME_COUNT
2a11: e0 15     -         cpx #TESTS_PER_PAGE
2a13: d0 5d     -         bne !exit+
2a15: ad 86 02  -         lda foreground_color
2a18: 48        -         pha
2a19: a9 01     -         lda #color
2a1b: 8d 86 02  -         sta foreground_color
2a1e: a2 00     -         ldx #$00
2a20: bd 33 2a  -         lda msg,x
2a23: f0 07     -         beq !done+
2a25: 20 d2 ff  -         jsr kernal_chrout
2a28: e8        -         inx
2a29: 4c 20 2a  -         jmp !loop-
2a2c: 68        -         pla
2a2d: 8d 86 02  -         sta foreground_color
2a30: 4c 52 2a  -         jmp !no_key+
2a33: 0d        - memory: .byte RETURN
2a34: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2a44: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2a50: 0d 00     -         .byte RETURN, NULL
2a52: 20 9f ff  -         jsr scnkey  // scan keyboard
2a55: 20 e4 ff  -         jsr getin	// put result into A
2a58: f0 f8     -         beq !no_key-
2a5a: a2 00     -         ldx #$00
2a5c: bd 6b 2a  -         lda msg,x
2a5f: f0 07     -         beq !done+
2a61: 20 d2 ff  -         jsr kernal_chrout
2a64: e8        -         inx
2a65: 4c 5c 2a  -         jmp !loop-
2a68: 4c 6d 2a  -         jmp !done+
2a6b: 0d 00     - newline:.byte RETURN, NULL
2a6d: a2 00     -         ldx #$00
2a6f: 8e 28 3f  -         stx TEST_NAME_COUNT
2a72: 60        -         rts
2a73: ee 28 3f  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
2a76: ad 86 02  -         lda foreground_color
2a79: 48        -         pha
2a7a: a9 0f     -         lda #color
2a7c: 8d 86 02  -         sta foreground_color
2a7f: a2 00     -         ldx #$00
2a81: bd 94 2a  -         lda msg,x
2a84: f0 07     -         beq !done+
2a86: 20 d2 ff  -         jsr kernal_chrout
2a89: e8        -         inx
2a8a: 4c 81 2a  -         jmp !loop-
2a8d: 68        -         pla
2a8e: 8d 86 02  -         sta foreground_color
2a91: 4c a7 2a  -         jmp !done+
2a94: 20 20     - memory: .fill spacing, spacebar
2a96: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
2aa3: 2e 2e 2e  -         .text "..."
2aa6: 00        -         .byte NULL
2aa7: 20 2e 08  -         jsr SW16
2aaa: 15        -         .byte opcode(op, register)
2aab: 44 3f     -         .word address.getValue()
2aad: 14        -         .byte opcode(op, register)
2aae: 54 3f     -         .word address.getValue()
2ab0: b0        -         .byte opcode($b0, register) }
2ab1: 55        -         .byte opcode($50, register) }
2ab2: 24        -         .byte opcode($20, register) }
2ab3: d5        -         .byte opcode($d0, register) }
2ab4: 04 fa     -         .byte $04, effective_address(ea,*) }
2ab6: 00        -         .byte $00 }
2ab7: ee 26 3f  -         inc TEST_COUNT
2aba: ad 86 02  -         lda foreground_color
2abd: 48        -         pha
2abe: a9 0e     -         lda #color
2ac0: 8d 86 02  -         sta foreground_color
2ac3: a2 00     -         ldx #$00
2ac5: bd d8 2a  -         lda msg,x
2ac8: f0 07     -         beq !done+
2aca: 20 d2 ff  -         jsr kernal_chrout
2acd: e8        -         inx
2ace: 4c c5 2a  -         jmp !loop-
2ad1: 68        -         pla
2ad2: 8d 86 02  -         sta foreground_color
2ad5: 4c de 2a  -         jmp !done+
2ad8: 20        - memory: .byte spacebar
2ad9: 43 4c 52  -         .text description
2adc: 3a        -         .text ":"
2add: 00        -         .byte NULL
2ade: a2 ff     -         ldx #$ff
2ae0: e8        -         inx
2ae1: e0 10     -         cpx #size
2ae3: f0 0a     -         beq !success+
2ae5: a9 00     -         lda #constant
2ae7: dd 44 3f  -         cmp source,x
2aea: f0 f4     -         beq !loop-
2aec: 4c 10 2b  -         jmp !failed+
2aef: ee 27 3f  -         inc TEST_PASS_COUNT
2af2: ad 86 02  -         lda foreground_color
2af5: 48        -         pha
2af6: a9 05     -         lda #color
2af8: 8d 86 02  -         sta foreground_color
2afb: a2 00     -         ldx #$00
2afd: bd 22 3f  -         lda msg,x
2b00: f0 07     -         beq !done+
2b02: 20 d2 ff  -         jsr kernal_chrout
2b05: e8        -         inx
2b06: 4c fd 2a  -         jmp !loop-
2b09: 68        -         pla
2b0a: 8d 86 02  -         sta foreground_color
2b0d: 4c 2b 2b  -         jmp !done+
2b10: ad 86 02  -         lda foreground_color
2b13: 48        -         pha
2b14: a9 02     -         lda #color
2b16: 8d 86 02  -         sta foreground_color
2b19: a2 00     -         ldx #$00
2b1b: bd 24 3f  -         lda msg,x
2b1e: f0 07     -         beq !done+
2b20: 20 d2 ff  -         jsr kernal_chrout
2b23: e8        -         inx
2b24: 4c 1b 2b  -         jmp !loop-
2b27: 68        -         pla
2b28: 8d 86 02  -         sta foreground_color
2b2b: a2 00     -         ldx #$00
2b2d: bd 3c 2b  -         lda msg,x
2b30: f0 07     -         beq !done+
2b32: 20 d2 ff  -         jsr kernal_chrout
2b35: e8        -         inx
2b36: 4c 2d 2b  -         jmp !loop-
2b39: 4c 3e 2b  -         jmp !done+
2b3c: 0d 00     - memory: .byte RETURN, NULL
2b3e: ae 28 3f  -         ldx TEST_NAME_COUNT
2b41: e0 15     -         cpx #TESTS_PER_PAGE
2b43: d0 5d     -         bne !exit+
2b45: ad 86 02  -         lda foreground_color
2b48: 48        -         pha
2b49: a9 01     -         lda #color
2b4b: 8d 86 02  -         sta foreground_color
2b4e: a2 00     -         ldx #$00
2b50: bd 63 2b  -         lda msg,x
2b53: f0 07     -         beq !done+
2b55: 20 d2 ff  -         jsr kernal_chrout
2b58: e8        -         inx
2b59: 4c 50 2b  -         jmp !loop-
2b5c: 68        -         pla
2b5d: 8d 86 02  -         sta foreground_color
2b60: 4c 82 2b  -         jmp !no_key+
2b63: 0d        - memory: .byte RETURN
2b64: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2b74: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2b80: 0d 00     -         .byte RETURN, NULL
2b82: 20 9f ff  -         jsr scnkey  // scan keyboard
2b85: 20 e4 ff  -         jsr getin	// put result into A
2b88: f0 f8     -         beq !no_key-
2b8a: a2 00     -         ldx #$00
2b8c: bd 9b 2b  -         lda msg,x
2b8f: f0 07     -         beq !done+
2b91: 20 d2 ff  -         jsr kernal_chrout
2b94: e8        -         inx
2b95: 4c 8c 2b  -         jmp !loop-
2b98: 4c 9d 2b  -         jmp !done+
2b9b: 0d 00     - newline:.byte RETURN, NULL
2b9d: a2 00     -         ldx #$00
2b9f: 8e 28 3f  -         stx TEST_NAME_COUNT
2ba2: 60        -         rts
2ba3: ee 28 3f  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
2ba6: ad 86 02  -         lda foreground_color
2ba9: 48        -         pha
2baa: a9 0f     -         lda #color
2bac: 8d 86 02  -         sta foreground_color
2baf: a2 00     -         ldx #$00
2bb1: bd c4 2b  -         lda msg,x
2bb4: f0 07     -         beq !done+
2bb6: 20 d2 ff  -         jsr kernal_chrout
2bb9: e8        -         inx
2bba: 4c b1 2b  -         jmp !loop-
2bbd: 68        -         pla
2bbe: 8d 86 02  -         sta foreground_color
2bc1: 4c d7 2b  -         jmp !done+
2bc4: 20 20     - memory: .fill spacing, spacebar
2bc6: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
2bd3: 2e 2e 2e  -         .text "..."
2bd6: 00        -         .byte NULL
2bd7: 20 2e 08  -         jsr SW16
2bda: 15        -         .byte opcode(op, register)
2bdb: 0a 00     -         .word address.getValue()
2bdd: b0        -         .byte opcode($b0, register) }
2bde: b5        -         .byte opcode($b0, register) }
2bdf: 05 07     -         .byte $05, effective_address(ea,*) }
2be1: 01 00     -         .byte $01, effective_address(ea,*) }
2be3: 10        -         .byte opcode(op, register)
2be4: dc fe     -         .word address.getValue()
2be6: 01 05     -         .byte $01, effective_address(ea,*) }
2be8: 10        -         .byte opcode(op, register)
2be9: 23 01     -         .word address.getValue()
2beb: 01 00     -         .byte $01, effective_address(ea,*) }
2bed: 00        -         .byte $00 }
2bee: ee 26 3f  -         inc TEST_COUNT
2bf1: ad 86 02  -         lda foreground_color
2bf4: 48        -         pha
2bf5: a9 0e     -         lda #color
2bf7: 8d 86 02  -         sta foreground_color
2bfa: a2 00     -         ldx #$00
2bfc: bd 0f 2c  -         lda msg,x
2bff: f0 07     -         beq !done+
2c01: 20 d2 ff  -         jsr kernal_chrout
2c04: e8        -         inx
2c05: 4c fc 2b  -         jmp !loop-
2c08: 68        -         pla
2c09: 8d 86 02  -         sta foreground_color
2c0c: 4c 13 2c  -         jmp !done+
2c0f: 20        - memory: .byte spacebar
2c10: 32        -         .text description
2c11: 3a        -         .text ":"
2c12: 00        -         .byte NULL
2c13: a6 17     -         ldx rl(register.getValue())
2c15: a4 18     -         ldy rh(register.getValue())
2c17: e0 23     -         cpx #<value
2c19: d0 25     -         bne !failed+
2c1b: c0 01     -         cpy #>value
2c1d: d0 21     -         bne !failed+
2c1f: ee 27 3f  -         inc TEST_PASS_COUNT
2c22: ad 86 02  -         lda foreground_color
2c25: 48        -         pha
2c26: a9 05     -         lda #color
2c28: 8d 86 02  -         sta foreground_color
2c2b: a2 00     -         ldx #$00
2c2d: bd 22 3f  -         lda msg,x
2c30: f0 07     -         beq !done+
2c32: 20 d2 ff  -         jsr kernal_chrout
2c35: e8        -         inx
2c36: 4c 2d 2c  -         jmp !loop-
2c39: 68        -         pla
2c3a: 8d 86 02  -         sta foreground_color
2c3d: 4c 5b 2c  -         jmp !done+
2c40: ad 86 02  -         lda foreground_color
2c43: 48        -         pha
2c44: a9 02     -         lda #color
2c46: 8d 86 02  -         sta foreground_color
2c49: a2 00     -         ldx #$00
2c4b: bd 24 3f  -         lda msg,x
2c4e: f0 07     -         beq !done+
2c50: 20 d2 ff  -         jsr kernal_chrout
2c53: e8        -         inx
2c54: 4c 4b 2c  -         jmp !loop-
2c57: 68        -         pla
2c58: 8d 86 02  -         sta foreground_color
2c5b: a2 00     -         ldx #$00
2c5d: bd 6c 2c  -         lda msg,x
2c60: f0 07     -         beq !done+
2c62: 20 d2 ff  -         jsr kernal_chrout
2c65: e8        -         inx
2c66: 4c 5d 2c  -         jmp !loop-
2c69: 4c 6e 2c  -         jmp !done+
2c6c: 0d 00     - memory: .byte RETURN, NULL
2c6e: ae 28 3f  -         ldx TEST_NAME_COUNT
2c71: e0 15     -         cpx #TESTS_PER_PAGE
2c73: d0 5d     -         bne !exit+
2c75: ad 86 02  -         lda foreground_color
2c78: 48        -         pha
2c79: a9 01     -         lda #color
2c7b: 8d 86 02  -         sta foreground_color
2c7e: a2 00     -         ldx #$00
2c80: bd 93 2c  -         lda msg,x
2c83: f0 07     -         beq !done+
2c85: 20 d2 ff  -         jsr kernal_chrout
2c88: e8        -         inx
2c89: 4c 80 2c  -         jmp !loop-
2c8c: 68        -         pla
2c8d: 8d 86 02  -         sta foreground_color
2c90: 4c b2 2c  -         jmp !no_key+
2c93: 0d        - memory: .byte RETURN
2c94: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2ca4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2cb0: 0d 00     -         .byte RETURN, NULL
2cb2: 20 9f ff  -         jsr scnkey  // scan keyboard
2cb5: 20 e4 ff  -         jsr getin	// put result into A
2cb8: f0 f8     -         beq !no_key-
2cba: a2 00     -         ldx #$00
2cbc: bd cb 2c  -         lda msg,x
2cbf: f0 07     -         beq !done+
2cc1: 20 d2 ff  -         jsr kernal_chrout
2cc4: e8        -         inx
2cc5: 4c bc 2c  -         jmp !loop-
2cc8: 4c cd 2c  -         jmp !done+
2ccb: 0d 00     - newline:.byte RETURN, NULL
2ccd: a2 00     -         ldx #$00
2ccf: 8e 28 3f  -         stx TEST_NAME_COUNT
2cd2: 60        -         rts
2cd3: ee 28 3f  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
2cd6: ad 86 02  -         lda foreground_color
2cd9: 48        -         pha
2cda: a9 0f     -         lda #color
2cdc: 8d 86 02  -         sta foreground_color
2cdf: a2 00     -         ldx #$00
2ce1: bd f4 2c  -         lda msg,x
2ce4: f0 07     -         beq !done+
2ce6: 20 d2 ff  -         jsr kernal_chrout
2ce9: e8        -         inx
2cea: 4c e1 2c  -         jmp !loop-
2ced: 68        -         pla
2cee: 8d 86 02  -         sta foreground_color
2cf1: 4c 05 2d  -         jmp !done+
2cf4: 20 20     - memory: .fill spacing, spacebar
2cf6: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
2d01: 2e 2e 2e  -         .text "..."
2d04: 00        -         .byte NULL
2d05: 20 2e 08  -         jsr SW16
2d08: b0        -         .byte opcode($b0, register) }
2d09: 06 07     -         .byte $06, effective_address(ea,*) }
2d0b: 01 00     -         .byte $01, effective_address(ea,*) }
2d0d: 10        -         .byte opcode(op, register)
2d0e: dc fe     -         .word address.getValue()
2d10: 01 05     -         .byte $01, effective_address(ea,*) }
2d12: 10        -         .byte opcode(op, register)
2d13: 23 01     -         .word address.getValue()
2d15: 01 00     -         .byte $01, effective_address(ea,*) }
2d17: 00        -         .byte $00 }
2d18: ee 26 3f  -         inc TEST_COUNT
2d1b: ad 86 02  -         lda foreground_color
2d1e: 48        -         pha
2d1f: a9 0e     -         lda #color
2d21: 8d 86 02  -         sta foreground_color
2d24: a2 00     -         ldx #$00
2d26: bd 39 2d  -         lda msg,x
2d29: f0 07     -         beq !done+
2d2b: 20 d2 ff  -         jsr kernal_chrout
2d2e: e8        -         inx
2d2f: 4c 26 2d  -         jmp !loop-
2d32: 68        -         pla
2d33: 8d 86 02  -         sta foreground_color
2d36: 4c 3d 2d  -         jmp !done+
2d39: 20        - memory: .byte spacebar
2d3a: 32        -         .text description
2d3b: 3a        -         .text ":"
2d3c: 00        -         .byte NULL
2d3d: a6 17     -         ldx rl(register.getValue())
2d3f: a4 18     -         ldy rh(register.getValue())
2d41: e0 23     -         cpx #<value
2d43: d0 25     -         bne !failed+
2d45: c0 01     -         cpy #>value
2d47: d0 21     -         bne !failed+
2d49: ee 27 3f  -         inc TEST_PASS_COUNT
2d4c: ad 86 02  -         lda foreground_color
2d4f: 48        -         pha
2d50: a9 05     -         lda #color
2d52: 8d 86 02  -         sta foreground_color
2d55: a2 00     -         ldx #$00
2d57: bd 22 3f  -         lda msg,x
2d5a: f0 07     -         beq !done+
2d5c: 20 d2 ff  -         jsr kernal_chrout
2d5f: e8        -         inx
2d60: 4c 57 2d  -         jmp !loop-
2d63: 68        -         pla
2d64: 8d 86 02  -         sta foreground_color
2d67: 4c 85 2d  -         jmp !done+
2d6a: ad 86 02  -         lda foreground_color
2d6d: 48        -         pha
2d6e: a9 02     -         lda #color
2d70: 8d 86 02  -         sta foreground_color
2d73: a2 00     -         ldx #$00
2d75: bd 24 3f  -         lda msg,x
2d78: f0 07     -         beq !done+
2d7a: 20 d2 ff  -         jsr kernal_chrout
2d7d: e8        -         inx
2d7e: 4c 75 2d  -         jmp !loop-
2d81: 68        -         pla
2d82: 8d 86 02  -         sta foreground_color
2d85: a2 00     -         ldx #$00
2d87: bd 96 2d  -         lda msg,x
2d8a: f0 07     -         beq !done+
2d8c: 20 d2 ff  -         jsr kernal_chrout
2d8f: e8        -         inx
2d90: 4c 87 2d  -         jmp !loop-
2d93: 4c 98 2d  -         jmp !done+
2d96: 0d 00     - memory: .byte RETURN, NULL
2d98: ae 28 3f  -         ldx TEST_NAME_COUNT
2d9b: e0 15     -         cpx #TESTS_PER_PAGE
2d9d: d0 5d     -         bne !exit+
2d9f: ad 86 02  -         lda foreground_color
2da2: 48        -         pha
2da3: a9 01     -         lda #color
2da5: 8d 86 02  -         sta foreground_color
2da8: a2 00     -         ldx #$00
2daa: bd bd 2d  -         lda msg,x
2dad: f0 07     -         beq !done+
2daf: 20 d2 ff  -         jsr kernal_chrout
2db2: e8        -         inx
2db3: 4c aa 2d  -         jmp !loop-
2db6: 68        -         pla
2db7: 8d 86 02  -         sta foreground_color
2dba: 4c dc 2d  -         jmp !no_key+
2dbd: 0d        - memory: .byte RETURN
2dbe: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2dce: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2dda: 0d 00     -         .byte RETURN, NULL
2ddc: 20 9f ff  -         jsr scnkey  // scan keyboard
2ddf: 20 e4 ff  -         jsr getin	// put result into A
2de2: f0 f8     -         beq !no_key-
2de4: a2 00     -         ldx #$00
2de6: bd f5 2d  -         lda msg,x
2de9: f0 07     -         beq !done+
2deb: 20 d2 ff  -         jsr kernal_chrout
2dee: e8        -         inx
2def: 4c e6 2d  -         jmp !loop-
2df2: 4c f7 2d  -         jmp !done+
2df5: 0d 00     - newline:.byte RETURN, NULL
2df7: a2 00     -         ldx #$00
2df9: 8e 28 3f  -         stx TEST_NAME_COUNT
2dfc: 60        -         rts
2dfd: ee 28 3f  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
2e00: ad 86 02  -         lda foreground_color
2e03: 48        -         pha
2e04: a9 0f     -         lda #color
2e06: 8d 86 02  -         sta foreground_color
2e09: a2 00     -         ldx #$00
2e0b: bd 1e 2e  -         lda msg,x
2e0e: f0 07     -         beq !done+
2e10: 20 d2 ff  -         jsr kernal_chrout
2e13: e8        -         inx
2e14: 4c 0b 2e  -         jmp !loop-
2e17: 68        -         pla
2e18: 8d 86 02  -         sta foreground_color
2e1b: 4c 30 2e  -         jmp !done+
2e1e: 20 20     - memory: .fill spacing, spacebar
2e20: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
2e2c: 2e 2e 2e  -         .text "..."
2e2f: 00        -         .byte NULL
2e30: 20 2e 08  -         jsr SW16
2e33: 15        -         .byte opcode(op, register)
2e34: 0a 00     -         .word address.getValue()
2e36: b0        -         .byte opcode($b0, register) }
2e37: a5        -         .byte opcode($a0, register) }
2e38: 07 07     -         .byte $07, effective_address(ea,*) }
2e3a: 01 00     -         .byte $01, effective_address(ea,*) }
2e3c: 10        -         .byte opcode(op, register)
2e3d: dc fe     -         .word address.getValue()
2e3f: 01 05     -         .byte $01, effective_address(ea,*) }
2e41: 10        -         .byte opcode(op, register)
2e42: 23 01     -         .word address.getValue()
2e44: 01 00     -         .byte $01, effective_address(ea,*) }
2e46: 00        -         .byte $00 }
2e47: ee 26 3f  -         inc TEST_COUNT
2e4a: ad 86 02  -         lda foreground_color
2e4d: 48        -         pha
2e4e: a9 0e     -         lda #color
2e50: 8d 86 02  -         sta foreground_color
2e53: a2 00     -         ldx #$00
2e55: bd 68 2e  -         lda msg,x
2e58: f0 07     -         beq !done+
2e5a: 20 d2 ff  -         jsr kernal_chrout
2e5d: e8        -         inx
2e5e: 4c 55 2e  -         jmp !loop-
2e61: 68        -         pla
2e62: 8d 86 02  -         sta foreground_color
2e65: 4c 6c 2e  -         jmp !done+
2e68: 20        - memory: .byte spacebar
2e69: 32        -         .text description
2e6a: 3a        -         .text ":"
2e6b: 00        -         .byte NULL
2e6c: a6 17     -         ldx rl(register.getValue())
2e6e: a4 18     -         ldy rh(register.getValue())
2e70: e0 23     -         cpx #<value
2e72: d0 25     -         bne !failed+
2e74: c0 01     -         cpy #>value
2e76: d0 21     -         bne !failed+
2e78: ee 27 3f  -         inc TEST_PASS_COUNT
2e7b: ad 86 02  -         lda foreground_color
2e7e: 48        -         pha
2e7f: a9 05     -         lda #color
2e81: 8d 86 02  -         sta foreground_color
2e84: a2 00     -         ldx #$00
2e86: bd 22 3f  -         lda msg,x
2e89: f0 07     -         beq !done+
2e8b: 20 d2 ff  -         jsr kernal_chrout
2e8e: e8        -         inx
2e8f: 4c 86 2e  -         jmp !loop-
2e92: 68        -         pla
2e93: 8d 86 02  -         sta foreground_color
2e96: 4c b4 2e  -         jmp !done+
2e99: ad 86 02  -         lda foreground_color
2e9c: 48        -         pha
2e9d: a9 02     -         lda #color
2e9f: 8d 86 02  -         sta foreground_color
2ea2: a2 00     -         ldx #$00
2ea4: bd 24 3f  -         lda msg,x
2ea7: f0 07     -         beq !done+
2ea9: 20 d2 ff  -         jsr kernal_chrout
2eac: e8        -         inx
2ead: 4c a4 2e  -         jmp !loop-
2eb0: 68        -         pla
2eb1: 8d 86 02  -         sta foreground_color
2eb4: a2 00     -         ldx #$00
2eb6: bd c5 2e  -         lda msg,x
2eb9: f0 07     -         beq !done+
2ebb: 20 d2 ff  -         jsr kernal_chrout
2ebe: e8        -         inx
2ebf: 4c b6 2e  -         jmp !loop-
2ec2: 4c c7 2e  -         jmp !done+
2ec5: 0d 00     - memory: .byte RETURN, NULL
2ec7: ae 28 3f  -         ldx TEST_NAME_COUNT
2eca: e0 15     -         cpx #TESTS_PER_PAGE
2ecc: d0 5d     -         bne !exit+
2ece: ad 86 02  -         lda foreground_color
2ed1: 48        -         pha
2ed2: a9 01     -         lda #color
2ed4: 8d 86 02  -         sta foreground_color
2ed7: a2 00     -         ldx #$00
2ed9: bd ec 2e  -         lda msg,x
2edc: f0 07     -         beq !done+
2ede: 20 d2 ff  -         jsr kernal_chrout
2ee1: e8        -         inx
2ee2: 4c d9 2e  -         jmp !loop-
2ee5: 68        -         pla
2ee6: 8d 86 02  -         sta foreground_color
2ee9: 4c 0b 2f  -         jmp !no_key+
2eec: 0d        - memory: .byte RETURN
2eed: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2efd: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2f09: 0d 00     -         .byte RETURN, NULL
2f0b: 20 9f ff  -         jsr scnkey  // scan keyboard
2f0e: 20 e4 ff  -         jsr getin	// put result into A
2f11: f0 f8     -         beq !no_key-
2f13: a2 00     -         ldx #$00
2f15: bd 24 2f  -         lda msg,x
2f18: f0 07     -         beq !done+
2f1a: 20 d2 ff  -         jsr kernal_chrout
2f1d: e8        -         inx
2f1e: 4c 15 2f  -         jmp !loop-
2f21: 4c 26 2f  -         jmp !done+
2f24: 0d 00     - newline:.byte RETURN, NULL
2f26: a2 00     -         ldx #$00
2f28: 8e 28 3f  -         stx TEST_NAME_COUNT
2f2b: 60        -         rts
2f2c: ee 28 3f  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
2f2f: ad 86 02  -         lda foreground_color
2f32: 48        -         pha
2f33: a9 0f     -         lda #color
2f35: 8d 86 02  -         sta foreground_color
2f38: a2 00     -         ldx #$00
2f3a: bd 4d 2f  -         lda msg,x
2f3d: f0 07     -         beq !done+
2f3f: 20 d2 ff  -         jsr kernal_chrout
2f42: e8        -         inx
2f43: 4c 3a 2f  -         jmp !loop-
2f46: 68        -         pla
2f47: 8d 86 02  -         sta foreground_color
2f4a: 4c 5f 2f  -         jmp !done+
2f4d: 20 20     - memory: .fill spacing, spacebar
2f4f: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
2f5b: 2e 2e 2e  -         .text "..."
2f5e: 00        -         .byte NULL
2f5f: 20 2e 08  -         jsr SW16
2f62: 15        -         .byte opcode(op, register)
2f63: 01 00     -         .word address.getValue()
2f65: b0        -         .byte opcode($b0, register) }
2f66: b5        -         .byte opcode($b0, register) }
2f67: 08 07     -         .byte $08, effective_address(ea,*) }
2f69: 01 00     -         .byte $01, effective_address(ea,*) }
2f6b: 10        -         .byte opcode(op, register)
2f6c: dc fe     -         .word address.getValue()
2f6e: 01 05     -         .byte $01, effective_address(ea,*) }
2f70: 10        -         .byte opcode(op, register)
2f71: 23 01     -         .word address.getValue()
2f73: 01 00     -         .byte $01, effective_address(ea,*) }
2f75: 00        -         .byte $00 }
2f76: ee 26 3f  -         inc TEST_COUNT
2f79: ad 86 02  -         lda foreground_color
2f7c: 48        -         pha
2f7d: a9 0e     -         lda #color
2f7f: 8d 86 02  -         sta foreground_color
2f82: a2 00     -         ldx #$00
2f84: bd 97 2f  -         lda msg,x
2f87: f0 07     -         beq !done+
2f89: 20 d2 ff  -         jsr kernal_chrout
2f8c: e8        -         inx
2f8d: 4c 84 2f  -         jmp !loop-
2f90: 68        -         pla
2f91: 8d 86 02  -         sta foreground_color
2f94: 4c 9b 2f  -         jmp !done+
2f97: 20        - memory: .byte spacebar
2f98: 32        -         .text description
2f99: 3a        -         .text ":"
2f9a: 00        -         .byte NULL
2f9b: a6 17     -         ldx rl(register.getValue())
2f9d: a4 18     -         ldy rh(register.getValue())
2f9f: e0 23     -         cpx #<value
2fa1: d0 25     -         bne !failed+
2fa3: c0 01     -         cpy #>value
2fa5: d0 21     -         bne !failed+
2fa7: ee 27 3f  -         inc TEST_PASS_COUNT
2faa: ad 86 02  -         lda foreground_color
2fad: 48        -         pha
2fae: a9 05     -         lda #color
2fb0: 8d 86 02  -         sta foreground_color
2fb3: a2 00     -         ldx #$00
2fb5: bd 22 3f  -         lda msg,x
2fb8: f0 07     -         beq !done+
2fba: 20 d2 ff  -         jsr kernal_chrout
2fbd: e8        -         inx
2fbe: 4c b5 2f  -         jmp !loop-
2fc1: 68        -         pla
2fc2: 8d 86 02  -         sta foreground_color
2fc5: 4c e3 2f  -         jmp !done+
2fc8: ad 86 02  -         lda foreground_color
2fcb: 48        -         pha
2fcc: a9 02     -         lda #color
2fce: 8d 86 02  -         sta foreground_color
2fd1: a2 00     -         ldx #$00
2fd3: bd 24 3f  -         lda msg,x
2fd6: f0 07     -         beq !done+
2fd8: 20 d2 ff  -         jsr kernal_chrout
2fdb: e8        -         inx
2fdc: 4c d3 2f  -         jmp !loop-
2fdf: 68        -         pla
2fe0: 8d 86 02  -         sta foreground_color
2fe3: a2 00     -         ldx #$00
2fe5: bd f4 2f  -         lda msg,x
2fe8: f0 07     -         beq !done+
2fea: 20 d2 ff  -         jsr kernal_chrout
2fed: e8        -         inx
2fee: 4c e5 2f  -         jmp !loop-
2ff1: 4c f6 2f  -         jmp !done+
2ff4: 0d 00     - memory: .byte RETURN, NULL
2ff6: ae 28 3f  -         ldx TEST_NAME_COUNT
2ff9: e0 15     -         cpx #TESTS_PER_PAGE
2ffb: d0 5d     -         bne !exit+
2ffd: ad 86 02  -         lda foreground_color
3000: 48        -         pha
3001: a9 01     -         lda #color
3003: 8d 86 02  -         sta foreground_color
3006: a2 00     -         ldx #$00
3008: bd 1b 30  -         lda msg,x
300b: f0 07     -         beq !done+
300d: 20 d2 ff  -         jsr kernal_chrout
3010: e8        -         inx
3011: 4c 08 30  -         jmp !loop-
3014: 68        -         pla
3015: 8d 86 02  -         sta foreground_color
3018: 4c 3a 30  -         jmp !no_key+
301b: 0d        - memory: .byte RETURN
301c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
302c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3038: 0d 00     -         .byte RETURN, NULL
303a: 20 9f ff  -         jsr scnkey  // scan keyboard
303d: 20 e4 ff  -         jsr getin	// put result into A
3040: f0 f8     -         beq !no_key-
3042: a2 00     -         ldx #$00
3044: bd 53 30  -         lda msg,x
3047: f0 07     -         beq !done+
3049: 20 d2 ff  -         jsr kernal_chrout
304c: e8        -         inx
304d: 4c 44 30  -         jmp !loop-
3050: 4c 55 30  -         jmp !done+
3053: 0d 00     - newline:.byte RETURN, NULL
3055: a2 00     -         ldx #$00
3057: 8e 28 3f  -         stx TEST_NAME_COUNT
305a: 60        -         rts
305b: ee 28 3f  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
305e: ad 86 02  -         lda foreground_color
3061: 48        -         pha
3062: a9 0f     -         lda #color
3064: 8d 86 02  -         sta foreground_color
3067: a2 00     -         ldx #$00
3069: bd 7c 30  -         lda msg,x
306c: f0 07     -         beq !done+
306e: 20 d2 ff  -         jsr kernal_chrout
3071: e8        -         inx
3072: 4c 69 30  -         jmp !loop-
3075: 68        -         pla
3076: 8d 86 02  -         sta foreground_color
3079: 4c 8f 30  -         jmp !done+
307c: 20 20     - memory: .fill spacing, spacebar
307e: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
308b: 2e 2e 2e  -         .text "..."
308e: 00        -         .byte NULL
308f: 20 2e 08  -         jsr SW16
3092: 15        -         .byte opcode(op, register)
3093: 02 00     -         .word address.getValue()
3095: b0        -         .byte opcode($b0, register) }
3096: b5        -         .byte opcode($b0, register) }
3097: 09 07     -         .byte $09, effective_address(ea,*) }
3099: 01 00     -         .byte $01, effective_address(ea,*) }
309b: 10        -         .byte opcode(op, register)
309c: dc fe     -         .word address.getValue()
309e: 01 05     -         .byte $01, effective_address(ea,*) }
30a0: 10        -         .byte opcode(op, register)
30a1: 23 01     -         .word address.getValue()
30a3: 01 00     -         .byte $01, effective_address(ea,*) }
30a5: 00        -         .byte $00 }
30a6: ee 26 3f  -         inc TEST_COUNT
30a9: ad 86 02  -         lda foreground_color
30ac: 48        -         pha
30ad: a9 0e     -         lda #color
30af: 8d 86 02  -         sta foreground_color
30b2: a2 00     -         ldx #$00
30b4: bd c7 30  -         lda msg,x
30b7: f0 07     -         beq !done+
30b9: 20 d2 ff  -         jsr kernal_chrout
30bc: e8        -         inx
30bd: 4c b4 30  -         jmp !loop-
30c0: 68        -         pla
30c1: 8d 86 02  -         sta foreground_color
30c4: 4c cb 30  -         jmp !done+
30c7: 20        - memory: .byte spacebar
30c8: 32        -         .text description
30c9: 3a        -         .text ":"
30ca: 00        -         .byte NULL
30cb: a6 17     -         ldx rl(register.getValue())
30cd: a4 18     -         ldy rh(register.getValue())
30cf: e0 23     -         cpx #<value
30d1: d0 25     -         bne !failed+
30d3: c0 01     -         cpy #>value
30d5: d0 21     -         bne !failed+
30d7: ee 27 3f  -         inc TEST_PASS_COUNT
30da: ad 86 02  -         lda foreground_color
30dd: 48        -         pha
30de: a9 05     -         lda #color
30e0: 8d 86 02  -         sta foreground_color
30e3: a2 00     -         ldx #$00
30e5: bd 22 3f  -         lda msg,x
30e8: f0 07     -         beq !done+
30ea: 20 d2 ff  -         jsr kernal_chrout
30ed: e8        -         inx
30ee: 4c e5 30  -         jmp !loop-
30f1: 68        -         pla
30f2: 8d 86 02  -         sta foreground_color
30f5: 4c 13 31  -         jmp !done+
30f8: ad 86 02  -         lda foreground_color
30fb: 48        -         pha
30fc: a9 02     -         lda #color
30fe: 8d 86 02  -         sta foreground_color
3101: a2 00     -         ldx #$00
3103: bd 24 3f  -         lda msg,x
3106: f0 07     -         beq !done+
3108: 20 d2 ff  -         jsr kernal_chrout
310b: e8        -         inx
310c: 4c 03 31  -         jmp !loop-
310f: 68        -         pla
3110: 8d 86 02  -         sta foreground_color
3113: a2 00     -         ldx #$00
3115: bd 24 31  -         lda msg,x
3118: f0 07     -         beq !done+
311a: 20 d2 ff  -         jsr kernal_chrout
311d: e8        -         inx
311e: 4c 15 31  -         jmp !loop-
3121: 4c 26 31  -         jmp !done+
3124: 0d 00     - memory: .byte RETURN, NULL
3126: ae 28 3f  -         ldx TEST_NAME_COUNT
3129: e0 15     -         cpx #TESTS_PER_PAGE
312b: d0 5d     -         bne !exit+
312d: ad 86 02  -         lda foreground_color
3130: 48        -         pha
3131: a9 01     -         lda #color
3133: 8d 86 02  -         sta foreground_color
3136: a2 00     -         ldx #$00
3138: bd 4b 31  -         lda msg,x
313b: f0 07     -         beq !done+
313d: 20 d2 ff  -         jsr kernal_chrout
3140: e8        -         inx
3141: 4c 38 31  -         jmp !loop-
3144: 68        -         pla
3145: 8d 86 02  -         sta foreground_color
3148: 4c 6a 31  -         jmp !no_key+
314b: 0d        - memory: .byte RETURN
314c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
315c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3168: 0d 00     -         .byte RETURN, NULL
316a: 20 9f ff  -         jsr scnkey  // scan keyboard
316d: 20 e4 ff  -         jsr getin	// put result into A
3170: f0 f8     -         beq !no_key-
3172: a2 00     -         ldx #$00
3174: bd 83 31  -         lda msg,x
3177: f0 07     -         beq !done+
3179: 20 d2 ff  -         jsr kernal_chrout
317c: e8        -         inx
317d: 4c 74 31  -         jmp !loop-
3180: 4c 85 31  -         jmp !done+
3183: 0d 00     - newline:.byte RETURN, NULL
3185: a2 00     -         ldx #$00
3187: 8e 28 3f  -         stx TEST_NAME_COUNT
318a: 60        -         rts
318b: ee 28 3f  - BREAK_TEST:inc TEST_NAME_COUNT
318e: ad 86 02  -         lda foreground_color
3191: 48        -         pha
3192: a9 0f     -         lda #color
3194: 8d 86 02  -         sta foreground_color
3197: a2 00     -         ldx #$00
3199: bd ac 31  -         lda msg,x
319c: f0 07     -         beq !done+
319e: 20 d2 ff  -         jsr kernal_chrout
31a1: e8        -         inx
31a2: 4c 99 31  -         jmp !loop-
31a5: 68        -         pla
31a6: 8d 86 02  -         sta foreground_color
31a9: 4c b7 31  -         jmp !done+
31ac: 20 20     - memory: .fill spacing, spacebar
31ae: 42 52 45 41 4b                                   -         .text name
31b3: 2e 2e 2e  -         .text "..."
31b6: 00        -         .byte NULL
31b7: a9 35     -         lda #<handler
31b9: 8d 16 03  -         sta address
31bc: a9 0a     -         lda #>handler
31be: 8d 17 03  -         sta address+1
31c1: 20 2e 08  -         jsr SW16
31c4: 10        -         .byte opcode(op, register)
31c5: ed fe     -         .word address.getValue()
31c7: 0a        -         .byte $0a }
31c8: 0d        -         .byte $0d
31c9: 32        -         .byte >(address.getValue()-1)
31ca: b4        -         .byte <(address.getValue()-1)
31cb: 10        -         .byte opcode(op, register)
31cc: 23 01     -         .word address.getValue()
31ce: 0a        -         .byte $0a }
31cf: 00        -         .byte $00 }
31d0: ee 26 3f  -         inc TEST_COUNT
31d3: ad 86 02  -         lda foreground_color
31d6: 48        -         pha
31d7: a9 0e     -         lda #color
31d9: 8d 86 02  -         sta foreground_color
31dc: a2 00     -         ldx #$00
31de: bd f1 31  -         lda msg,x
31e1: f0 07     -         beq !done+
31e3: 20 d2 ff  -         jsr kernal_chrout
31e6: e8        -         inx
31e7: 4c de 31  -         jmp !loop-
31ea: 68        -         pla
31eb: 8d 86 02  -         sta foreground_color
31ee: 4c f5 31  -         jmp !done+
31f1: 20        - memory: .byte spacebar
31f2: 32        -         .text description
31f3: 3a        -         .text ":"
31f4: 00        -         .byte NULL
31f5: a6 17     -         ldx rl(register.getValue())
31f7: a4 18     -         ldy rh(register.getValue())
31f9: e0 23     -         cpx #<value
31fb: d0 25     -         bne !failed+
31fd: c0 01     -         cpy #>value
31ff: d0 21     -         bne !failed+
3201: ee 27 3f  -         inc TEST_PASS_COUNT
3204: ad 86 02  -         lda foreground_color
3207: 48        -         pha
3208: a9 05     -         lda #color
320a: 8d 86 02  -         sta foreground_color
320d: a2 00     -         ldx #$00
320f: bd 22 3f  -         lda msg,x
3212: f0 07     -         beq !done+
3214: 20 d2 ff  -         jsr kernal_chrout
3217: e8        -         inx
3218: 4c 0f 32  -         jmp !loop-
321b: 68        -         pla
321c: 8d 86 02  -         sta foreground_color
321f: 4c 3d 32  -         jmp !done+
3222: ad 86 02  -         lda foreground_color
3225: 48        -         pha
3226: a9 02     -         lda #color
3228: 8d 86 02  -         sta foreground_color
322b: a2 00     -         ldx #$00
322d: bd 24 3f  -         lda msg,x
3230: f0 07     -         beq !done+
3232: 20 d2 ff  -         jsr kernal_chrout
3235: e8        -         inx
3236: 4c 2d 32  -         jmp !loop-
3239: 68        -         pla
323a: 8d 86 02  -         sta foreground_color
323d: a2 00     -         ldx #$00
323f: bd 4e 32  -         lda msg,x
3242: f0 07     -         beq !done+
3244: 20 d2 ff  -         jsr kernal_chrout
3247: e8        -         inx
3248: 4c 3f 32  -         jmp !loop-
324b: 4c 50 32  -         jmp !done+
324e: 0d 00     - memory: .byte RETURN, NULL
3250: ae 28 3f  -         ldx TEST_NAME_COUNT
3253: e0 15     -         cpx #TESTS_PER_PAGE
3255: d0 5d     -         bne !exit+
3257: ad 86 02  -         lda foreground_color
325a: 48        -         pha
325b: a9 01     -         lda #color
325d: 8d 86 02  -         sta foreground_color
3260: a2 00     -         ldx #$00
3262: bd 75 32  -         lda msg,x
3265: f0 07     -         beq !done+
3267: 20 d2 ff  -         jsr kernal_chrout
326a: e8        -         inx
326b: 4c 62 32  -         jmp !loop-
326e: 68        -         pla
326f: 8d 86 02  -         sta foreground_color
3272: 4c 94 32  -         jmp !no_key+
3275: 0d        - memory: .byte RETURN
3276: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3286: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3292: 0d 00     -         .byte RETURN, NULL
3294: 20 9f ff  -         jsr scnkey  // scan keyboard
3297: 20 e4 ff  -         jsr getin	// put result into A
329a: f0 f8     -         beq !no_key-
329c: a2 00     -         ldx #$00
329e: bd ad 32  -         lda msg,x
32a1: f0 07     -         beq !done+
32a3: 20 d2 ff  -         jsr kernal_chrout
32a6: e8        -         inx
32a7: 4c 9e 32  -         jmp !loop-
32aa: 4c af 32  -         jmp !done+
32ad: 0d 00     - newline:.byte RETURN, NULL
32af: a2 00     -         ldx #$00
32b1: 8e 28 3f  -         stx TEST_NAME_COUNT
32b4: 60        -         rts
32b5: ee 26 3f  -         inc TEST_COUNT
32b8: ad 86 02  -         lda foreground_color
32bb: 48        -         pha
32bc: a9 0e     -         lda #color
32be: 8d 86 02  -         sta foreground_color
32c1: a2 00     -         ldx #$00
32c3: bd d6 32  -         lda msg,x
32c6: f0 07     -         beq !done+
32c8: 20 d2 ff  -         jsr kernal_chrout
32cb: e8        -         inx
32cc: 4c c3 32  -         jmp !loop-
32cf: 68        -         pla
32d0: 8d 86 02  -         sta foreground_color
32d3: 4c da 32  -         jmp !done+
32d6: 20        - memory: .byte spacebar
32d7: 31        -         .text description
32d8: 3a        -         .text ":"
32d9: 00        -         .byte NULL
32da: a6 17     -         ldx rl(register.getValue())
32dc: a4 18     -         ldy rh(register.getValue())
32de: e0 ed     -         cpx #<value
32e0: d0 25     -         bne !failed+
32e2: c0 fe     -         cpy #>value
32e4: d0 21     -         bne !failed+
32e6: ee 27 3f  -         inc TEST_PASS_COUNT
32e9: ad 86 02  -         lda foreground_color
32ec: 48        -         pha
32ed: a9 05     -         lda #color
32ef: 8d 86 02  -         sta foreground_color
32f2: a2 00     -         ldx #$00
32f4: bd 22 3f  -         lda msg,x
32f7: f0 07     -         beq !done+
32f9: 20 d2 ff  -         jsr kernal_chrout
32fc: e8        -         inx
32fd: 4c f4 32  -         jmp !loop-
3300: 68        -         pla
3301: 8d 86 02  -         sta foreground_color
3304: 4c 22 33  -         jmp !done+
3307: ad 86 02  -         lda foreground_color
330a: 48        -         pha
330b: a9 02     -         lda #color
330d: 8d 86 02  -         sta foreground_color
3310: a2 00     -         ldx #$00
3312: bd 24 3f  -         lda msg,x
3315: f0 07     -         beq !done+
3317: 20 d2 ff  -         jsr kernal_chrout
331a: e8        -         inx
331b: 4c 12 33  -         jmp !loop-
331e: 68        -         pla
331f: 8d 86 02  -         sta foreground_color
3322: 60        -         rts
3323: ee 28 3f  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
3326: ad 86 02  -         lda foreground_color
3329: 48        -         pha
332a: a9 0f     -         lda #color
332c: 8d 86 02  -         sta foreground_color
332f: a2 00     -         ldx #$00
3331: bd 44 33  -         lda msg,x
3334: f0 07     -         beq !done+
3336: 20 d2 ff  -         jsr kernal_chrout
3339: e8        -         inx
333a: 4c 31 33  -         jmp !loop-
333d: 68        -         pla
333e: 8d 86 02  -         sta foreground_color
3341: 4c 53 33  -         jmp !done+
3344: 20 20     - memory: .fill spacing, spacebar
3346: 49 4e 54 20 42 52 45 41 4b                       -         .text name
334f: 2e 2e 2e  -         .text "..."
3352: 00        -         .byte NULL
3353: a9 35     -         lda #<handler
3355: 8d 16 03  -         sta address
3358: a9 0a     -         lda #>handler
335a: 8d 17 03  -         sta address+1
335d: 20 2e 08  -         jsr SW16
3360: 10        -         .byte opcode(op, register)
3361: ed fe     -         .word address.getValue()
3363: 0a        -         .byte $0a }
3364: 0d        -         .byte $0d
3365: 33        -         .byte >(address.getValue()-1)
3366: e6        -         .byte <(address.getValue()-1)
3367: 10        -         .byte opcode(op, register)
3368: 23 01     -         .word address.getValue()
336a: 0a        -         .byte $0a }
336b: 0d        -         .byte $0d
336c: 34        -         .byte >(address.getValue()-1)
336d: 54        -         .byte <(address.getValue()-1)
336e: 00        -         .byte $00 }
336f: a2 00     -         ldx #$00
3371: bd 80 33  -         lda msg,x
3374: f0 07     -         beq !done+
3376: 20 d2 ff  -         jsr kernal_chrout
3379: e8        -         inx
337a: 4c 71 33  -         jmp !loop-
337d: 4c 82 33  -         jmp !done+
3380: 0d 00     - memory: .byte RETURN, NULL
3382: ae 28 3f  -         ldx TEST_NAME_COUNT
3385: e0 15     -         cpx #TESTS_PER_PAGE
3387: d0 5d     -         bne !exit+
3389: ad 86 02  -         lda foreground_color
338c: 48        -         pha
338d: a9 01     -         lda #color
338f: 8d 86 02  -         sta foreground_color
3392: a2 00     -         ldx #$00
3394: bd a7 33  -         lda msg,x
3397: f0 07     -         beq !done+
3399: 20 d2 ff  -         jsr kernal_chrout
339c: e8        -         inx
339d: 4c 94 33  -         jmp !loop-
33a0: 68        -         pla
33a1: 8d 86 02  -         sta foreground_color
33a4: 4c c6 33  -         jmp !no_key+
33a7: 0d        - memory: .byte RETURN
33a8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
33b8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
33c4: 0d 00     -         .byte RETURN, NULL
33c6: 20 9f ff  -         jsr scnkey  // scan keyboard
33c9: 20 e4 ff  -         jsr getin	// put result into A
33cc: f0 f8     -         beq !no_key-
33ce: a2 00     -         ldx #$00
33d0: bd df 33  -         lda msg,x
33d3: f0 07     -         beq !done+
33d5: 20 d2 ff  -         jsr kernal_chrout
33d8: e8        -         inx
33d9: 4c d0 33  -         jmp !loop-
33dc: 4c e1 33  -         jmp !done+
33df: 0d 00     - newline:.byte RETURN, NULL
33e1: a2 00     -         ldx #$00
33e3: 8e 28 3f  -         stx TEST_NAME_COUNT
33e6: 60        -         rts
33e7: ee 26 3f  -         inc TEST_COUNT
33ea: ad 86 02  -         lda foreground_color
33ed: 48        -         pha
33ee: a9 0e     -         lda #color
33f0: 8d 86 02  -         sta foreground_color
33f3: a2 00     -         ldx #$00
33f5: bd 08 34  -         lda msg,x
33f8: f0 07     -         beq !done+
33fa: 20 d2 ff  -         jsr kernal_chrout
33fd: e8        -         inx
33fe: 4c f5 33  -         jmp !loop-
3401: 68        -         pla
3402: 8d 86 02  -         sta foreground_color
3405: 4c 0c 34  -         jmp !done+
3408: 20        - memory: .byte spacebar
3409: 31        -         .text description
340a: 3a        -         .text ":"
340b: 00        -         .byte NULL
340c: a6 17     -         ldx rl(register.getValue())
340e: a4 18     -         ldy rh(register.getValue())
3410: e0 ed     -         cpx #<value
3412: d0 25     -         bne !failed+
3414: c0 fe     -         cpy #>value
3416: d0 21     -         bne !failed+
3418: ee 27 3f  -         inc TEST_PASS_COUNT
341b: ad 86 02  -         lda foreground_color
341e: 48        -         pha
341f: a9 05     -         lda #color
3421: 8d 86 02  -         sta foreground_color
3424: a2 00     -         ldx #$00
3426: bd 22 3f  -         lda msg,x
3429: f0 07     -         beq !done+
342b: 20 d2 ff  -         jsr kernal_chrout
342e: e8        -         inx
342f: 4c 26 34  -         jmp !loop-
3432: 68        -         pla
3433: 8d 86 02  -         sta foreground_color
3436: 4c 54 34  -         jmp !done+
3439: ad 86 02  -         lda foreground_color
343c: 48        -         pha
343d: a9 02     -         lda #color
343f: 8d 86 02  -         sta foreground_color
3442: a2 00     -         ldx #$00
3444: bd 24 3f  -         lda msg,x
3447: f0 07     -         beq !done+
3449: 20 d2 ff  -         jsr kernal_chrout
344c: e8        -         inx
344d: 4c 44 34  -         jmp !loop-
3450: 68        -         pla
3451: 8d 86 02  -         sta foreground_color
3454: 60        -         rts
3455: ee 26 3f  -         inc TEST_COUNT
3458: ad 86 02  -         lda foreground_color
345b: 48        -         pha
345c: a9 0e     -         lda #color
345e: 8d 86 02  -         sta foreground_color
3461: a2 00     -         ldx #$00
3463: bd 76 34  -         lda msg,x
3466: f0 07     -         beq !done+
3468: 20 d2 ff  -         jsr kernal_chrout
346b: e8        -         inx
346c: 4c 63 34  -         jmp !loop-
346f: 68        -         pla
3470: 8d 86 02  -         sta foreground_color
3473: 4c 7a 34  -         jmp !done+
3476: 20        - memory: .byte spacebar
3477: 32        -         .text description
3478: 3a        -         .text ":"
3479: 00        -         .byte NULL
347a: a6 17     -         ldx rl(register.getValue())
347c: a4 18     -         ldy rh(register.getValue())
347e: e0 23     -         cpx #<value
3480: d0 25     -         bne !failed+
3482: c0 01     -         cpy #>value
3484: d0 21     -         bne !failed+
3486: ee 27 3f  -         inc TEST_PASS_COUNT
3489: ad 86 02  -         lda foreground_color
348c: 48        -         pha
348d: a9 05     -         lda #color
348f: 8d 86 02  -         sta foreground_color
3492: a2 00     -         ldx #$00
3494: bd 22 3f  -         lda msg,x
3497: f0 07     -         beq !done+
3499: 20 d2 ff  -         jsr kernal_chrout
349c: e8        -         inx
349d: 4c 94 34  -         jmp !loop-
34a0: 68        -         pla
34a1: 8d 86 02  -         sta foreground_color
34a4: 4c c2 34  -         jmp !done+
34a7: ad 86 02  -         lda foreground_color
34aa: 48        -         pha
34ab: a9 02     -         lda #color
34ad: 8d 86 02  -         sta foreground_color
34b0: a2 00     -         ldx #$00
34b2: bd 24 3f  -         lda msg,x
34b5: f0 07     -         beq !done+
34b7: 20 d2 ff  -         jsr kernal_chrout
34ba: e8        -         inx
34bb: 4c b2 34  -         jmp !loop-
34be: 68        -         pla
34bf: 8d 86 02  -         sta foreground_color
34c2: 60        -         rts
34c3: ee 28 3f  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
34c6: ad 86 02  -         lda foreground_color
34c9: 48        -         pha
34ca: a9 0f     -         lda #color
34cc: 8d 86 02  -         sta foreground_color
34cf: a2 00     -         ldx #$00
34d1: bd e4 34  -         lda msg,x
34d4: f0 07     -         beq !done+
34d6: 20 d2 ff  -         jsr kernal_chrout
34d9: e8        -         inx
34da: 4c d1 34  -         jmp !loop-
34dd: 68        -         pla
34de: 8d 86 02  -         sta foreground_color
34e1: 4c f7 34  -         jmp !done+
34e4: 20 20     - memory: .fill spacing, spacebar
34e6: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
34f3: 2e 2e 2e  -         .text "..."
34f6: 00        -         .byte NULL
34f7: 20 2e 08  -         jsr SW16
34fa: 15        -         .byte opcode(op, register)
34fb: 44 3f     -         .word address.getValue()
34fd: 14        -         .byte opcode(op, register)
34fe: 54 3f     -         .word address.getValue()
3500: 16        -         .byte opcode(op, register)
3501: 54 3f     -         .word address.getValue()
3503: 0c 04     -         .byte $0c, effective_address(ea,*) }
3505: 00        -         .byte $00 }
3506: 4c 10 35  -         jmp !done+
3509: 45        -         .byte opcode($40, register) }
350a: 56        -         .byte opcode($50, register) }
350b: 24        -         .byte opcode($20, register) }
350c: d5        -         .byte opcode($d0, register) }
350d: 04 fa     -         .byte $04, effective_address(ea,*) }
350f: 0b        -         .byte $0b }
3510: ee 26 3f  -         inc TEST_COUNT
3513: ad 86 02  -         lda foreground_color
3516: 48        -         pha
3517: a9 0e     -         lda #color
3519: 8d 86 02  -         sta foreground_color
351c: a2 00     -         ldx #$00
351e: bd 31 35  -         lda msg,x
3521: f0 07     -         beq !done+
3523: 20 d2 ff  -         jsr kernal_chrout
3526: e8        -         inx
3527: 4c 1e 35  -         jmp !loop-
352a: 68        -         pla
352b: 8d 86 02  -         sta foreground_color
352e: 4c 37 35  -         jmp !done+
3531: 20        - memory: .byte spacebar
3532: 4d 45 4d  -         .text description
3535: 3a        -         .text ":"
3536: 00        -         .byte NULL
3537: a2 ff     -         ldx #$ff
3539: e8        -         inx
353a: e0 10     -         cpx #size
353c: f0 0b     -         beq !success+
353e: bd 44 3f  -         lda source,x
3541: dd 54 3f  -         cmp dest,x
3544: f0 f3     -         beq !loop-
3546: 4c 6a 35  -         jmp !failed+
3549: ee 27 3f  -         inc TEST_PASS_COUNT
354c: ad 86 02  -         lda foreground_color
354f: 48        -         pha
3550: a9 05     -         lda #color
3552: 8d 86 02  -         sta foreground_color
3555: a2 00     -         ldx #$00
3557: bd 22 3f  -         lda msg,x
355a: f0 07     -         beq !done+
355c: 20 d2 ff  -         jsr kernal_chrout
355f: e8        -         inx
3560: 4c 57 35  -         jmp !loop-
3563: 68        -         pla
3564: 8d 86 02  -         sta foreground_color
3567: 4c 85 35  -         jmp !done+
356a: ad 86 02  -         lda foreground_color
356d: 48        -         pha
356e: a9 02     -         lda #color
3570: 8d 86 02  -         sta foreground_color
3573: a2 00     -         ldx #$00
3575: bd 24 3f  -         lda msg,x
3578: f0 07     -         beq !done+
357a: 20 d2 ff  -         jsr kernal_chrout
357d: e8        -         inx
357e: 4c 75 35  -         jmp !loop-
3581: 68        -         pla
3582: 8d 86 02  -         sta foreground_color
3585: a2 00     -         ldx #$00
3587: bd 96 35  -         lda msg,x
358a: f0 07     -         beq !done+
358c: 20 d2 ff  -         jsr kernal_chrout
358f: e8        -         inx
3590: 4c 87 35  -         jmp !loop-
3593: 4c 98 35  -         jmp !done+
3596: 0d 00     - memory: .byte RETURN, NULL
3598: ae 28 3f  -         ldx TEST_NAME_COUNT
359b: e0 15     -         cpx #TESTS_PER_PAGE
359d: d0 5d     -         bne !exit+
359f: ad 86 02  -         lda foreground_color
35a2: 48        -         pha
35a3: a9 01     -         lda #color
35a5: 8d 86 02  -         sta foreground_color
35a8: a2 00     -         ldx #$00
35aa: bd bd 35  -         lda msg,x
35ad: f0 07     -         beq !done+
35af: 20 d2 ff  -         jsr kernal_chrout
35b2: e8        -         inx
35b3: 4c aa 35  -         jmp !loop-
35b6: 68        -         pla
35b7: 8d 86 02  -         sta foreground_color
35ba: 4c dc 35  -         jmp !no_key+
35bd: 0d        - memory: .byte RETURN
35be: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
35ce: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
35da: 0d 00     -         .byte RETURN, NULL
35dc: 20 9f ff  -         jsr scnkey  // scan keyboard
35df: 20 e4 ff  -         jsr getin	// put result into A
35e2: f0 f8     -         beq !no_key-
35e4: a2 00     -         ldx #$00
35e6: bd f5 35  -         lda msg,x
35e9: f0 07     -         beq !done+
35eb: 20 d2 ff  -         jsr kernal_chrout
35ee: e8        -         inx
35ef: 4c e6 35  -         jmp !loop-
35f2: 4c f7 35  -         jmp !done+
35f5: 0d 00     - newline:.byte RETURN, NULL
35f7: a2 00     -         ldx #$00
35f9: 8e 28 3f  -         stx TEST_NAME_COUNT
35fc: 60        -         rts
35fd: ee 28 3f  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
3600: ad 86 02  -         lda foreground_color
3603: 48        -         pha
3604: a9 0f     -         lda #color
3606: 8d 86 02  -         sta foreground_color
3609: a2 00     -         ldx #$00
360b: bd 1e 36  -         lda msg,x
360e: f0 07     -         beq !done+
3610: 20 d2 ff  -         jsr kernal_chrout
3613: e8        -         inx
3614: 4c 0b 36  -         jmp !loop-
3617: 68        -         pla
3618: 8d 86 02  -         sta foreground_color
361b: 4c 33 36  -         jmp !done+
361e: 20 20     - memory: .fill spacing, spacebar
3620: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
362f: 2e 2e 2e  -         .text "..."
3632: 00        -         .byte NULL
3633: 20 2e 08  -         jsr SW16
3636: 10        -         .byte opcode(op, register)
3637: 34 12     -         .word address.getValue()
3639: 0c 04     -         .byte $0c, effective_address(ea,*) }
363b: 00        -         .byte $00 }
363c: 4c 43 36  -         jmp !done+
363f: 10        -         .byte opcode(op, register)
3640: 78 56     -         .word address.getValue()
3642: 0b        -         .byte $0b }
3643: ee 26 3f  -         inc TEST_COUNT
3646: ad 86 02  -         lda foreground_color
3649: 48        -         pha
364a: a9 0e     -         lda #color
364c: 8d 86 02  -         sta foreground_color
364f: a2 00     -         ldx #$00
3651: bd 64 36  -         lda msg,x
3654: f0 07     -         beq !done+
3656: 20 d2 ff  -         jsr kernal_chrout
3659: e8        -         inx
365a: 4c 51 36  -         jmp !loop-
365d: 68        -         pla
365e: 8d 86 02  -         sta foreground_color
3661: 4c 6a 36  -         jmp !done+
3664: 20        - memory: .byte spacebar
3665: 53 55 42  -         .text description
3668: 3a        -         .text ":"
3669: 00        -         .byte NULL
366a: a6 17     -         ldx rl(register.getValue())
366c: a4 18     -         ldy rh(register.getValue())
366e: e0 78     -         cpx #<value
3670: d0 25     -         bne !failed+
3672: c0 56     -         cpy #>value
3674: d0 21     -         bne !failed+
3676: ee 27 3f  -         inc TEST_PASS_COUNT
3679: ad 86 02  -         lda foreground_color
367c: 48        -         pha
367d: a9 05     -         lda #color
367f: 8d 86 02  -         sta foreground_color
3682: a2 00     -         ldx #$00
3684: bd 22 3f  -         lda msg,x
3687: f0 07     -         beq !done+
3689: 20 d2 ff  -         jsr kernal_chrout
368c: e8        -         inx
368d: 4c 84 36  -         jmp !loop-
3690: 68        -         pla
3691: 8d 86 02  -         sta foreground_color
3694: 4c b2 36  -         jmp !done+
3697: ad 86 02  -         lda foreground_color
369a: 48        -         pha
369b: a9 02     -         lda #color
369d: 8d 86 02  -         sta foreground_color
36a0: a2 00     -         ldx #$00
36a2: bd 24 3f  -         lda msg,x
36a5: f0 07     -         beq !done+
36a7: 20 d2 ff  -         jsr kernal_chrout
36aa: e8        -         inx
36ab: 4c a2 36  -         jmp !loop-
36ae: 68        -         pla
36af: 8d 86 02  -         sta foreground_color
36b2: a2 00     -         ldx #$00
36b4: bd c3 36  -         lda msg,x
36b7: f0 07     -         beq !done+
36b9: 20 d2 ff  -         jsr kernal_chrout
36bc: e8        -         inx
36bd: 4c b4 36  -         jmp !loop-
36c0: 4c c5 36  -         jmp !done+
36c3: 0d 00     - memory: .byte RETURN, NULL
36c5: ae 28 3f  -         ldx TEST_NAME_COUNT
36c8: e0 15     -         cpx #TESTS_PER_PAGE
36ca: d0 5d     -         bne !exit+
36cc: ad 86 02  -         lda foreground_color
36cf: 48        -         pha
36d0: a9 01     -         lda #color
36d2: 8d 86 02  -         sta foreground_color
36d5: a2 00     -         ldx #$00
36d7: bd ea 36  -         lda msg,x
36da: f0 07     -         beq !done+
36dc: 20 d2 ff  -         jsr kernal_chrout
36df: e8        -         inx
36e0: 4c d7 36  -         jmp !loop-
36e3: 68        -         pla
36e4: 8d 86 02  -         sta foreground_color
36e7: 4c 09 37  -         jmp !no_key+
36ea: 0d        - memory: .byte RETURN
36eb: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
36fb: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3707: 0d 00     -         .byte RETURN, NULL
3709: 20 9f ff  -         jsr scnkey  // scan keyboard
370c: 20 e4 ff  -         jsr getin	// put result into A
370f: f0 f8     -         beq !no_key-
3711: a2 00     -         ldx #$00
3713: bd 22 37  -         lda msg,x
3716: f0 07     -         beq !done+
3718: 20 d2 ff  -         jsr kernal_chrout
371b: e8        -         inx
371c: 4c 13 37  -         jmp !loop-
371f: 4c 24 37  -         jmp !done+
3722: 0d 00     - newline:.byte RETURN, NULL
3724: a2 00     -         ldx #$00
3726: 8e 28 3f  -         stx TEST_NAME_COUNT
3729: 60        -         rts
372a: ee 28 3f  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
372d: ad 86 02  -         lda foreground_color
3730: 48        -         pha
3731: a9 0f     -         lda #color
3733: 8d 86 02  -         sta foreground_color
3736: a2 00     -         ldx #$00
3738: bd 4b 37  -         lda msg,x
373b: f0 07     -         beq !done+
373d: 20 d2 ff  -         jsr kernal_chrout
3740: e8        -         inx
3741: 4c 38 37  -         jmp !loop-
3744: 68        -         pla
3745: 8d 86 02  -         sta foreground_color
3748: 4c 5e 37  -         jmp !done+
374b: 20 20     - memory: .fill spacing, spacebar
374d: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
375a: 2e 2e 2e  -         .text "..."
375d: 00        -         .byte NULL
375e: 20 2e 08  -         jsr SW16
3761: 15        -         .byte opcode(op, register)
3762: 00 00     -         .word address.getValue()
3764: 10        -         .byte opcode(op, register)
3765: 4f 38     -         .word address.getValue()
3767: 3f        -         .byte opcode($30, register) }
3768: 00        -         .byte $00 }
3769: ee 26 3f  -         inc TEST_COUNT
376c: ad 86 02  -         lda foreground_color
376f: 48        -         pha
3770: a9 0e     -         lda #color
3772: 8d 86 02  -         sta foreground_color
3775: a2 00     -         ldx #$00
3777: bd 8a 37  -         lda msg,x
377a: f0 07     -         beq !done+
377c: 20 d2 ff  -         jsr kernal_chrout
377f: e8        -         inx
3780: 4c 77 37  -         jmp !loop-
3783: 68        -         pla
3784: 8d 86 02  -         sta foreground_color
3787: 4c 90 37  -         jmp !done+
378a: 20        - memory: .byte spacebar
378b: 53 45 54  -         .text description
378e: 3a        -         .text ":"
378f: 00        -         .byte NULL
3790: a6 21     -         ldx rl(register.getValue())
3792: a4 22     -         ldy rh(register.getValue())
3794: e0 34     -         cpx #<value
3796: d0 25     -         bne !failed+
3798: c0 12     -         cpy #>value
379a: d0 21     -         bne !failed+
379c: ee 27 3f  -         inc TEST_PASS_COUNT
379f: ad 86 02  -         lda foreground_color
37a2: 48        -         pha
37a3: a9 05     -         lda #color
37a5: 8d 86 02  -         sta foreground_color
37a8: a2 00     -         ldx #$00
37aa: bd 22 3f  -         lda msg,x
37ad: f0 07     -         beq !done+
37af: 20 d2 ff  -         jsr kernal_chrout
37b2: e8        -         inx
37b3: 4c aa 37  -         jmp !loop-
37b6: 68        -         pla
37b7: 8d 86 02  -         sta foreground_color
37ba: 4c d8 37  -         jmp !done+
37bd: ad 86 02  -         lda foreground_color
37c0: 48        -         pha
37c1: a9 02     -         lda #color
37c3: 8d 86 02  -         sta foreground_color
37c6: a2 00     -         ldx #$00
37c8: bd 24 3f  -         lda msg,x
37cb: f0 07     -         beq !done+
37cd: 20 d2 ff  -         jsr kernal_chrout
37d0: e8        -         inx
37d1: 4c c8 37  -         jmp !loop-
37d4: 68        -         pla
37d5: 8d 86 02  -         sta foreground_color
37d8: a2 00     -         ldx #$00
37da: bd e9 37  -         lda msg,x
37dd: f0 07     -         beq !done+
37df: 20 d2 ff  -         jsr kernal_chrout
37e2: e8        -         inx
37e3: 4c da 37  -         jmp !loop-
37e6: 4c eb 37  -         jmp !done+
37e9: 0d 00     - memory: .byte RETURN, NULL
37eb: ae 28 3f  -         ldx TEST_NAME_COUNT
37ee: e0 15     -         cpx #TESTS_PER_PAGE
37f0: d0 5d     -         bne !exit+
37f2: ad 86 02  -         lda foreground_color
37f5: 48        -         pha
37f6: a9 01     -         lda #color
37f8: 8d 86 02  -         sta foreground_color
37fb: a2 00     -         ldx #$00
37fd: bd 10 38  -         lda msg,x
3800: f0 07     -         beq !done+
3802: 20 d2 ff  -         jsr kernal_chrout
3805: e8        -         inx
3806: 4c fd 37  -         jmp !loop-
3809: 68        -         pla
380a: 8d 86 02  -         sta foreground_color
380d: 4c 2f 38  -         jmp !no_key+
3810: 0d        - memory: .byte RETURN
3811: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3821: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
382d: 0d 00     -         .byte RETURN, NULL
382f: 20 9f ff  -         jsr scnkey  // scan keyboard
3832: 20 e4 ff  -         jsr getin	// put result into A
3835: f0 f8     -         beq !no_key-
3837: a2 00     -         ldx #$00
3839: bd 48 38  -         lda msg,x
383c: f0 07     -         beq !done+
383e: 20 d2 ff  -         jsr kernal_chrout
3841: e8        -         inx
3842: 4c 39 38  -         jmp !loop-
3845: 4c 4a 38  -         jmp !done+
3848: 0d 00     - newline:.byte RETURN, NULL
384a: a2 00     -         ldx #$00
384c: 8e 28 3f  -         stx TEST_NAME_COUNT
384f: 60        -         rts
3850: 15        -         .byte opcode(op, register)
3851: 34 12     -         .word address.getValue()
3853: 10        -         .byte opcode(op, register)
3854: 67 37     -         .word address.getValue()
3856: 3f        -         .byte opcode($30, register) }
3857: ee 28 3f  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
385a: ad 86 02  -         lda foreground_color
385d: 48        -         pha
385e: a9 0f     -         lda #color
3860: 8d 86 02  -         sta foreground_color
3863: a2 00     -         ldx #$00
3865: bd 78 38  -         lda msg,x
3868: f0 07     -         beq !done+
386a: 20 d2 ff  -         jsr kernal_chrout
386d: e8        -         inx
386e: 4c 65 38  -         jmp !loop-
3871: 68        -         pla
3872: 8d 86 02  -         sta foreground_color
3875: 4c 8a 38  -         jmp !done+
3878: 20 20     - memory: .fill spacing, spacebar
387a: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
3886: 2e 2e 2e  -         .text "..."
3889: 00        -         .byte NULL
388a: 20 2e 08  -         jsr SW16
388d: 15        -         .byte opcode(op, register)
388e: 21 43     -         .word address.getValue()
3890: 0d        -         .byte $0d
3891: 39        -         .byte >(address.getValue()-1)
3892: 84        -         .byte <(address.getValue()-1)
3893: 15        -         .byte opcode(op, register)
3894: 34 12     -         .word address.getValue()
3896: 0d        -         .byte $0d
3897: 39        -         .byte >(address.getValue()-1)
3898: f6        -         .byte <(address.getValue()-1)
3899: 15        -         .byte opcode(op, register)
389a: 21 43     -         .word address.getValue()
389c: 00        -         .byte $00 }
389d: ee 26 3f  -         inc TEST_COUNT
38a0: ad 86 02  -         lda foreground_color
38a3: 48        -         pha
38a4: a9 0e     -         lda #color
38a6: 8d 86 02  -         sta foreground_color
38a9: a2 00     -         ldx #$00
38ab: bd be 38  -         lda msg,x
38ae: f0 07     -         beq !done+
38b0: 20 d2 ff  -         jsr kernal_chrout
38b3: e8        -         inx
38b4: 4c ab 38  -         jmp !loop-
38b7: 68        -         pla
38b8: 8d 86 02  -         sta foreground_color
38bb: 4c c5 38  -         jmp !done+
38be: 20        - memory: .byte spacebar
38bf: 53 41 4d 45                                      -         .text description
38c3: 3a        -         .text ":"
38c4: 00        -         .byte NULL
38c5: a6 21     -         ldx rl(register.getValue())
38c7: a4 22     -         ldy rh(register.getValue())
38c9: e0 21     -         cpx #<value
38cb: d0 25     -         bne !failed+
38cd: c0 43     -         cpy #>value
38cf: d0 21     -         bne !failed+
38d1: ee 27 3f  -         inc TEST_PASS_COUNT
38d4: ad 86 02  -         lda foreground_color
38d7: 48        -         pha
38d8: a9 05     -         lda #color
38da: 8d 86 02  -         sta foreground_color
38dd: a2 00     -         ldx #$00
38df: bd 22 3f  -         lda msg,x
38e2: f0 07     -         beq !done+
38e4: 20 d2 ff  -         jsr kernal_chrout
38e7: e8        -         inx
38e8: 4c df 38  -         jmp !loop-
38eb: 68        -         pla
38ec: 8d 86 02  -         sta foreground_color
38ef: 4c 0d 39  -         jmp !done+
38f2: ad 86 02  -         lda foreground_color
38f5: 48        -         pha
38f6: a9 02     -         lda #color
38f8: 8d 86 02  -         sta foreground_color
38fb: a2 00     -         ldx #$00
38fd: bd 24 3f  -         lda msg,x
3900: f0 07     -         beq !done+
3902: 20 d2 ff  -         jsr kernal_chrout
3905: e8        -         inx
3906: 4c fd 38  -         jmp !loop-
3909: 68        -         pla
390a: 8d 86 02  -         sta foreground_color
390d: a2 00     -         ldx #$00
390f: bd 1e 39  -         lda msg,x
3912: f0 07     -         beq !done+
3914: 20 d2 ff  -         jsr kernal_chrout
3917: e8        -         inx
3918: 4c 0f 39  -         jmp !loop-
391b: 4c 20 39  -         jmp !done+
391e: 0d 00     - memory: .byte RETURN, NULL
3920: ae 28 3f  -         ldx TEST_NAME_COUNT
3923: e0 15     -         cpx #TESTS_PER_PAGE
3925: d0 5d     -         bne !exit+
3927: ad 86 02  -         lda foreground_color
392a: 48        -         pha
392b: a9 01     -         lda #color
392d: 8d 86 02  -         sta foreground_color
3930: a2 00     -         ldx #$00
3932: bd 45 39  -         lda msg,x
3935: f0 07     -         beq !done+
3937: 20 d2 ff  -         jsr kernal_chrout
393a: e8        -         inx
393b: 4c 32 39  -         jmp !loop-
393e: 68        -         pla
393f: 8d 86 02  -         sta foreground_color
3942: 4c 64 39  -         jmp !no_key+
3945: 0d        - memory: .byte RETURN
3946: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3956: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3962: 0d 00     -         .byte RETURN, NULL
3964: 20 9f ff  -         jsr scnkey  // scan keyboard
3967: 20 e4 ff  -         jsr getin	// put result into A
396a: f0 f8     -         beq !no_key-
396c: a2 00     -         ldx #$00
396e: bd 7d 39  -         lda msg,x
3971: f0 07     -         beq !done+
3973: 20 d2 ff  -         jsr kernal_chrout
3976: e8        -         inx
3977: 4c 6e 39  -         jmp !loop-
397a: 4c 7f 39  -         jmp !done+
397d: 0d 00     - newline:.byte RETURN, NULL
397f: a2 00     -         ldx #$00
3981: 8e 28 3f  -         stx TEST_NAME_COUNT
3984: 60        -         rts
3985: ee 26 3f  -         inc TEST_COUNT
3988: ad 86 02  -         lda foreground_color
398b: 48        -         pha
398c: a9 0e     -         lda #color
398e: 8d 86 02  -         sta foreground_color
3991: a2 00     -         ldx #$00
3993: bd a6 39  -         lda msg,x
3996: f0 07     -         beq !done+
3998: 20 d2 ff  -         jsr kernal_chrout
399b: e8        -         inx
399c: 4c 93 39  -         jmp !loop-
399f: 68        -         pla
39a0: 8d 86 02  -         sta foreground_color
39a3: 4c ae 39  -         jmp !done+
39a6: 20        - memory: .byte spacebar
39a7: 56 41 4c 55 45                                   -         .text description
39ac: 3a        -         .text ":"
39ad: 00        -         .byte NULL
39ae: a6 21     -         ldx rl(register.getValue())
39b0: a4 22     -         ldy rh(register.getValue())
39b2: e0 21     -         cpx #<value
39b4: d0 25     -         bne !failed+
39b6: c0 43     -         cpy #>value
39b8: d0 21     -         bne !failed+
39ba: ee 27 3f  -         inc TEST_PASS_COUNT
39bd: ad 86 02  -         lda foreground_color
39c0: 48        -         pha
39c1: a9 05     -         lda #color
39c3: 8d 86 02  -         sta foreground_color
39c6: a2 00     -         ldx #$00
39c8: bd 22 3f  -         lda msg,x
39cb: f0 07     -         beq !done+
39cd: 20 d2 ff  -         jsr kernal_chrout
39d0: e8        -         inx
39d1: 4c c8 39  -         jmp !loop-
39d4: 68        -         pla
39d5: 8d 86 02  -         sta foreground_color
39d8: 4c f6 39  -         jmp !done+
39db: ad 86 02  -         lda foreground_color
39de: 48        -         pha
39df: a9 02     -         lda #color
39e1: 8d 86 02  -         sta foreground_color
39e4: a2 00     -         ldx #$00
39e6: bd 24 3f  -         lda msg,x
39e9: f0 07     -         beq !done+
39eb: 20 d2 ff  -         jsr kernal_chrout
39ee: e8        -         inx
39ef: 4c e6 39  -         jmp !loop-
39f2: 68        -         pla
39f3: 8d 86 02  -         sta foreground_color
39f6: 60        -         rts
39f7: a9 fe     -         lda #>VALUE_3
39f9: 85 22     -         sta rh(REGISTER)
39fb: a9 ed     -         lda #<VALUE_3
39fd: 85 21     -         sta rl(REGISTER)
39ff: a6 21     -         ldx rl(register.getValue())
3a01: a4 22     -         ldy rh(register.getValue())
3a03: ee 26 3f  -         inc TEST_COUNT
3a06: ad 86 02  -         lda foreground_color
3a09: 48        -         pha
3a0a: a9 0e     -         lda #color
3a0c: 8d 86 02  -         sta foreground_color
3a0f: a2 00     -         ldx #$00
3a11: bd 24 3a  -         lda msg,x
3a14: f0 07     -         beq !done+
3a16: 20 d2 ff  -         jsr kernal_chrout
3a19: e8        -         inx
3a1a: 4c 11 3a  -         jmp !loop-
3a1d: 68        -         pla
3a1e: 8d 86 02  -         sta foreground_color
3a21: 4c 2b 3a  -         jmp !done+
3a24: 20        - memory: .byte spacebar
3a25: 36 35 30 32                                      -         .text description
3a29: 3a        -         .text ":"
3a2a: 00        -         .byte NULL
3a2b: a6 21     -         ldx rl(register.getValue())
3a2d: a4 22     -         ldy rh(register.getValue())
3a2f: e0 ed     -         cpx #<value
3a31: d0 25     -         bne !failed+
3a33: c0 fe     -         cpy #>value
3a35: d0 21     -         bne !failed+
3a37: ee 27 3f  -         inc TEST_PASS_COUNT
3a3a: ad 86 02  -         lda foreground_color
3a3d: 48        -         pha
3a3e: a9 05     -         lda #color
3a40: 8d 86 02  -         sta foreground_color
3a43: a2 00     -         ldx #$00
3a45: bd 22 3f  -         lda msg,x
3a48: f0 07     -         beq !done+
3a4a: 20 d2 ff  -         jsr kernal_chrout
3a4d: e8        -         inx
3a4e: 4c 45 3a  -         jmp !loop-
3a51: 68        -         pla
3a52: 8d 86 02  -         sta foreground_color
3a55: 4c 73 3a  -         jmp !done+
3a58: ad 86 02  -         lda foreground_color
3a5b: 48        -         pha
3a5c: a9 02     -         lda #color
3a5e: 8d 86 02  -         sta foreground_color
3a61: a2 00     -         ldx #$00
3a63: bd 24 3f  -         lda msg,x
3a66: f0 07     -         beq !done+
3a68: 20 d2 ff  -         jsr kernal_chrout
3a6b: e8        -         inx
3a6c: 4c 63 3a  -         jmp !loop-
3a6f: 68        -         pla
3a70: 8d 86 02  -         sta foreground_color
3a73: 60        -         rts
3a74: ee 28 3f  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
3a77: ad 86 02  -         lda foreground_color
3a7a: 48        -         pha
3a7b: a9 0f     -         lda #color
3a7d: 8d 86 02  -         sta foreground_color
3a80: a2 00     -         ldx #$00
3a82: bd 95 3a  -         lda msg,x
3a85: f0 07     -         beq !done+
3a87: 20 d2 ff  -         jsr kernal_chrout
3a8a: e8        -         inx
3a8b: 4c 82 3a  -         jmp !loop-
3a8e: 68        -         pla
3a8f: 8d 86 02  -         sta foreground_color
3a92: 4c a7 3a  -         jmp !done+
3a95: 20 20     - memory: .fill spacing, spacebar
3a97: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
3aa3: 2e 2e 2e  -         .text "..."
3aa6: 00        -         .byte NULL
3aa7: 20 2e 08  -         jsr SW16
3aaa: 0f        -         .byte $0f
3aab: 3e 3f     -         .word address.getValue()
3aad: 21        -         .byte rl(register.getValue())
3aae: 00        -         .byte $00 }
3aaf: ee 26 3f  -         inc TEST_COUNT
3ab2: ad 86 02  -         lda foreground_color
3ab5: 48        -         pha
3ab6: a9 0e     -         lda #color
3ab8: 8d 86 02  -         sta foreground_color
3abb: a2 00     -         ldx #$00
3abd: bd d0 3a  -         lda msg,x
3ac0: f0 07     -         beq !done+
3ac2: 20 d2 ff  -         jsr kernal_chrout
3ac5: e8        -         inx
3ac6: 4c bd 3a  -         jmp !loop-
3ac9: 68        -         pla
3aca: 8d 86 02  -         sta foreground_color
3acd: 4c db 3a  -         jmp !done+
3ad0: 20        - memory: .byte spacebar
3ad1: 54 45 53 54 20 4d 45 4d                          -         .text description
3ad9: 3a        -         .text ":"
3ada: 00        -         .byte NULL
3adb: a6 21     -         ldx rl(register.getValue())
3add: a4 22     -         ldy rh(register.getValue())
3adf: cc 3e 3f  -         cpy address
3ae2: d0 26     -         bne !failed+
3ae4: ec 3f 3f  -         cpx address+1
3ae7: d0 21     -         bne !failed+
3ae9: ee 27 3f  -         inc TEST_PASS_COUNT
3aec: ad 86 02  -         lda foreground_color
3aef: 48        -         pha
3af0: a9 05     -         lda #color
3af2: 8d 86 02  -         sta foreground_color
3af5: a2 00     -         ldx #$00
3af7: bd 22 3f  -         lda msg,x
3afa: f0 07     -         beq !done+
3afc: 20 d2 ff  -         jsr kernal_chrout
3aff: e8        -         inx
3b00: 4c f7 3a  -         jmp !loop-
3b03: 68        -         pla
3b04: 8d 86 02  -         sta foreground_color
3b07: 4c 25 3b  -         jmp !done+
3b0a: ad 86 02  -         lda foreground_color
3b0d: 48        -         pha
3b0e: a9 02     -         lda #color
3b10: 8d 86 02  -         sta foreground_color
3b13: a2 00     -         ldx #$00
3b15: bd 24 3f  -         lda msg,x
3b18: f0 07     -         beq !done+
3b1a: 20 d2 ff  -         jsr kernal_chrout
3b1d: e8        -         inx
3b1e: 4c 15 3b  -         jmp !loop-
3b21: 68        -         pla
3b22: 8d 86 02  -         sta foreground_color
3b25: a2 00     -         ldx #$00
3b27: bd 36 3b  -         lda msg,x
3b2a: f0 07     -         beq !done+
3b2c: 20 d2 ff  -         jsr kernal_chrout
3b2f: e8        -         inx
3b30: 4c 27 3b  -         jmp !loop-
3b33: 4c 38 3b  -         jmp !done+
3b36: 0d 00     - memory: .byte RETURN, NULL
3b38: ae 28 3f  -         ldx TEST_NAME_COUNT
3b3b: e0 15     -         cpx #TESTS_PER_PAGE
3b3d: d0 5d     -         bne !exit+
3b3f: ad 86 02  -         lda foreground_color
3b42: 48        -         pha
3b43: a9 01     -         lda #color
3b45: 8d 86 02  -         sta foreground_color
3b48: a2 00     -         ldx #$00
3b4a: bd 5d 3b  -         lda msg,x
3b4d: f0 07     -         beq !done+
3b4f: 20 d2 ff  -         jsr kernal_chrout
3b52: e8        -         inx
3b53: 4c 4a 3b  -         jmp !loop-
3b56: 68        -         pla
3b57: 8d 86 02  -         sta foreground_color
3b5a: 4c 7c 3b  -         jmp !no_key+
3b5d: 0d        - memory: .byte RETURN
3b5e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3b6e: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3b7a: 0d 00     -         .byte RETURN, NULL
3b7c: 20 9f ff  -         jsr scnkey  // scan keyboard
3b7f: 20 e4 ff  -         jsr getin	// put result into A
3b82: f0 f8     -         beq !no_key-
3b84: a2 00     -         ldx #$00
3b86: bd 95 3b  -         lda msg,x
3b89: f0 07     -         beq !done+
3b8b: 20 d2 ff  -         jsr kernal_chrout
3b8e: e8        -         inx
3b8f: 4c 86 3b  -         jmp !loop-
3b92: 4c 97 3b  -         jmp !done+
3b95: 0d 00     - newline:.byte RETURN, NULL
3b97: a2 00     -         ldx #$00
3b99: 8e 28 3f  -         stx TEST_NAME_COUNT
3b9c: 60        -         rts
3b9d: ee 28 3f  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
3ba0: ad 86 02  -         lda foreground_color
3ba3: 48        -         pha
3ba4: a9 0f     -         lda #color
3ba6: 8d 86 02  -         sta foreground_color
3ba9: a2 00     -         ldx #$00
3bab: bd be 3b  -         lda msg,x
3bae: f0 07     -         beq !done+
3bb0: 20 d2 ff  -         jsr kernal_chrout
3bb3: e8        -         inx
3bb4: 4c ab 3b  -         jmp !loop-
3bb7: 68        -         pla
3bb8: 8d 86 02  -         sta foreground_color
3bbb: 4c ce 3b  -         jmp !done+
3bbe: 20 20     - memory: .fill spacing, spacebar
3bc0: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
3bca: 2e 2e 2e  -         .text "..."
3bcd: 00        -         .byte NULL
3bce: 20 2e 08  -         jsr SW16
3bd1: 0e        -         .byte $0e
3bd2: 3e 3f     -         .word address.getValue()
3bd4: 21        -         .byte rl(register.getValue())
3bd5: 00        -         .byte $00 }
3bd6: ee 26 3f  -         inc TEST_COUNT
3bd9: ad 86 02  -         lda foreground_color
3bdc: 48        -         pha
3bdd: a9 0e     -         lda #color
3bdf: 8d 86 02  -         sta foreground_color
3be2: a2 00     -         ldx #$00
3be4: bd f7 3b  -         lda msg,x
3be7: f0 07     -         beq !done+
3be9: 20 d2 ff  -         jsr kernal_chrout
3bec: e8        -         inx
3bed: 4c e4 3b  -         jmp !loop-
3bf0: 68        -         pla
3bf1: 8d 86 02  -         sta foreground_color
3bf4: 4c 02 3c  -         jmp !done+
3bf7: 20        - memory: .byte spacebar
3bf8: 54 45 53 54 20 4d 45 4d                          -         .text description
3c00: 3a        -         .text ":"
3c01: 00        -         .byte NULL
3c02: a6 21     -         ldx rl(register.getValue())
3c04: a4 22     -         ldy rh(register.getValue())
3c06: ec 3e 3f  -         cpx address
3c09: d0 26     -         bne !failed+
3c0b: cc 3f 3f  -         cpy address+1
3c0e: d0 21     -         bne !failed+
3c10: ee 27 3f  -         inc TEST_PASS_COUNT
3c13: ad 86 02  -         lda foreground_color
3c16: 48        -         pha
3c17: a9 05     -         lda #color
3c19: 8d 86 02  -         sta foreground_color
3c1c: a2 00     -         ldx #$00
3c1e: bd 22 3f  -         lda msg,x
3c21: f0 07     -         beq !done+
3c23: 20 d2 ff  -         jsr kernal_chrout
3c26: e8        -         inx
3c27: 4c 1e 3c  -         jmp !loop-
3c2a: 68        -         pla
3c2b: 8d 86 02  -         sta foreground_color
3c2e: 4c 4c 3c  -         jmp !done+
3c31: ad 86 02  -         lda foreground_color
3c34: 48        -         pha
3c35: a9 02     -         lda #color
3c37: 8d 86 02  -         sta foreground_color
3c3a: a2 00     -         ldx #$00
3c3c: bd 24 3f  -         lda msg,x
3c3f: f0 07     -         beq !done+
3c41: 20 d2 ff  -         jsr kernal_chrout
3c44: e8        -         inx
3c45: 4c 3c 3c  -         jmp !loop-
3c48: 68        -         pla
3c49: 8d 86 02  -         sta foreground_color
3c4c: a2 00     -         ldx #$00
3c4e: bd 5d 3c  -         lda msg,x
3c51: f0 07     -         beq !done+
3c53: 20 d2 ff  -         jsr kernal_chrout
3c56: e8        -         inx
3c57: 4c 4e 3c  -         jmp !loop-
3c5a: 4c 5f 3c  -         jmp !done+
3c5d: 0d 00     - memory: .byte RETURN, NULL
3c5f: ae 28 3f  -         ldx TEST_NAME_COUNT
3c62: e0 15     -         cpx #TESTS_PER_PAGE
3c64: d0 5d     -         bne !exit+
3c66: ad 86 02  -         lda foreground_color
3c69: 48        -         pha
3c6a: a9 01     -         lda #color
3c6c: 8d 86 02  -         sta foreground_color
3c6f: a2 00     -         ldx #$00
3c71: bd 84 3c  -         lda msg,x
3c74: f0 07     -         beq !done+
3c76: 20 d2 ff  -         jsr kernal_chrout
3c79: e8        -         inx
3c7a: 4c 71 3c  -         jmp !loop-
3c7d: 68        -         pla
3c7e: 8d 86 02  -         sta foreground_color
3c81: 4c a3 3c  -         jmp !no_key+
3c84: 0d        - memory: .byte RETURN
3c85: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3c95: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3ca1: 0d 00     -         .byte RETURN, NULL
3ca3: 20 9f ff  -         jsr scnkey  // scan keyboard
3ca6: 20 e4 ff  -         jsr getin	// put result into A
3ca9: f0 f8     -         beq !no_key-
3cab: a2 00     -         ldx #$00
3cad: bd bc 3c  -         lda msg,x
3cb0: f0 07     -         beq !done+
3cb2: 20 d2 ff  -         jsr kernal_chrout
3cb5: e8        -         inx
3cb6: 4c ad 3c  -         jmp !loop-
3cb9: 4c be 3c  -         jmp !done+
3cbc: 0d 00     - newline:.byte RETURN, NULL
3cbe: a2 00     -         ldx #$00
3cc0: 8e 28 3f  -         stx TEST_NAME_COUNT
3cc3: 60        -         rts
3cc4: a9 00     - TestRun:lda #color
3cc6: 8d 20 d0  -         sta border_color
3cc9: a9 00     -         lda #color
3ccb: 8d 21 d0  -         sta background_color
3cce: a9 01     -         lda #color
3cd0: 8d 86 02  -         sta foreground_color
3cd3: a2 00     -         ldx #color
3cd5: 8e 21 d0  -         stx background_color
3cd8: a9 20     -         lda #spacebar
3cda: a2 00     -         ldx #$00
3cdc: 9d 00 04  -         sta screen,x
3cdf: 9d 00 05  -         sta screen+$100,x
3ce2: 9d 00 06  -         sta screen+$200,x
3ce5: 9d 00 07  -         sta screen+$300,x
3ce8: e8        -         inx
3ce9: d0 f1     -         bne !loop-
3ceb: a9 00     -         lda #row
3ced: 85 d6     -         sta cursor_row
3cef: a9 00     -         lda #column
3cf1: 85 d3     -         sta cursor_col
3cf3: a2 00     -         ldx #$00
3cf5: bd 04 3d  -         lda msg,x
3cf8: f0 07     -         beq !done+
3cfa: 20 d2 ff  -         jsr kernal_chrout
3cfd: e8        -         inx
3cfe: 4c f5 3c  -         jmp !loop-
3d01: 4c 06 3d  -         jmp !done+
3d04: 0d 00     - newline:.byte RETURN, NULL
3d06: a2 00     -         ldx #$00
3d08: bd 29 3f  -         lda msg,x
3d0b: f0 07     -         beq !done+
3d0d: 20 d2 ff  -         jsr kernal_chrout
3d10: e8        -         inx
3d11: 4c 08 3d  -         jmp !loop-
3d14: a9 0c     -         lda #color
3d16: 8d 86 02  -         sta foreground_color
3d19: a9 00     -         lda #$00
3d1b: 8d 26 3f  -         sta TEST_COUNT
3d1e: 8d 27 3f  -         sta TEST_PASS_COUNT
3d21: 8d 28 3f  -         sta TEST_NAME_COUNT
3d24: 20 e3 0c  -         jsr SET_TEST
3d27: 20 fd 0d  -         jsr LOAD_TEST
3d2a: 20 17 0f  -         jsr STORE_TEST
3d2d: 20 35 10  -         jsr LOAD_INDIRECT_TEST
3d30: 20 c4 11  -         jsr STORE_INDIRECT_TEST
3d33: 20 d0 13  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
3d36: 20 6a 15  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
3d39: 20 75 17  -         jsr POP_INDIRECT_TEST
3d3c: 20 84 1b  -         jsr STORE_POP_INDIRECT_TEST
3d3f: 20 b3 1c  -         jsr ADD_TEST
3d42: 20 47 1e  -         jsr SUBTRACT_TEST
3d45: 20 dd 1f  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
3d48: 20 60 22  -         jsr COMPARE_TEST
3d4b: 20 8b 23  -         jsr INCREMENT_TEST
3d4e: 20 ab 24  -         jsr DECREMENT_TEST
3d51: 20 cf 25  -         jsr RETURN_TO_6502_MODE_TEST
3d54: 20 e2 26  -         jsr BRANCH_ALWAYS_TEST
3d57: 20 0b 28  -         jsr BRANCH_IF_NO_CARRY_TEST	
3d5a: 20 3f 29  -         jsr BRANCH_IF_CARRY_SET_TEST
3d5d: 20 73 2a  -         jsr BRANCH_IF_PLUS_TEST
3d60: 20 a3 2b  -         jsr BRANCH_IF_MINUS_TEST
3d63: 20 d3 2c  -         jsr BRANCH_IF_ZERO_TEST	
3d66: 20 fd 2d  -         jsr BRANCH_IF_NONZERO_TEST
3d69: 20 2c 2f  -         jsr BRANCH_IF_MINUS_ONE_TEST
3d6c: 20 5b 30  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
3d6f: 20 8b 31  -         jsr BREAK_TEST
3d72: 20 c3 34  -         jsr BRANCH_TO_SUBROUTINE_TEST
3d75: 20 fd 35  -         jsr RETURN_FROM_SUBROUTINE_TEST
3d78: 20 2a 37  -         jsr ABSOLUTE_JUMP_TEST
3d7b: 20 57 38  -         jsr EXTERNAL_JSR_TEST
3d7e: 20 74 3a  -         jsr SET_INDIRECT_TEST
3d81: 20 9d 3b  -         jsr SET_MEMORY_TEST
3d84: 20 23 33  -         jsr INTERRUPT_BREAK_TEST
3d87: ad 86 02  -         lda foreground_color
3d8a: 48        -         pha
3d8b: a9 01     -         lda #color
3d8d: 8d 86 02  -         sta foreground_color
3d90: a2 00     -         ldx #$00
3d92: bd 09 3f  -         lda msg,x
3d95: f0 07     -         beq !done+
3d97: 20 d2 ff  -         jsr kernal_chrout
3d9a: e8        -         inx
3d9b: 4c 92 3d  -         jmp !loop-
3d9e: 68        -         pla
3d9f: 8d 86 02  -         sta foreground_color
3da2: ad 27 3f  -         lda value
3da5: c9 64     -         cmp #three_digit
3da7: 90 5a     -         bcc !twoDigit+
3da9: ad 27 3f  -         lda value
3dac: c9 64     -         cmp #reference
3dae: 90 09     -         bcc !done+
3db0: a0 00     -         ldy #$00		// counter
3db2: c8        -         iny				// count references's
3db3: e9 64     -         sbc #reference
3db5: c9 64     -         cmp #reference
3db7: b0 f9     -         bcs !loop-		// still larger than reference
3db9: 98        -         tya
3dba: 48        -         pha
3dbb: 09 30     -         ora #$30
3dbd: 20 d2 ff  -         jsr kernal_chrout
3dc0: 68        -         pla
3dc1: a8        -         tay
3dc2: ad 27 3f  -         lda value
3dc5: 38        -         sec
3dc6: e9 64     -         sbc #three_digit
3dc8: 88        -         dey
3dc9: d0 fa     -         bne !subby-
3dcb: 85 fe     -         sta zp
3dcd: a5 fe     -         lda value
3dcf: c9 0a     -         cmp #two_digit
3dd1: 90 28     -         bcc !oneDigit+
3dd3: a5 fe     -         lda value
3dd5: c9 0a     -         cmp #reference
3dd7: 90 09     -         bcc !done+
3dd9: a0 00     -         ldy #$00		// counter
3ddb: c8        -         iny				// count references's
3ddc: e9 0a     -         sbc #reference
3dde: c9 0a     -         cmp #reference
3de0: b0 f9     -         bcs !loop-		// still larger than reference
3de2: 98        -         tya
3de3: 48        -         pha
3de4: 09 30     -         ora #$30
3de6: 20 d2 ff  -         jsr kernal_chrout
3de9: 68        -         pla
3dea: a8        -         tay
3deb: a5 fe     -         lda value
3ded: 38        -         sec
3dee: e9 0a     -         sbc #two_digit
3df0: 88        -         dey
3df1: d0 fa     -         bne !subby-
3df3: 09 30     -         ora #$30
3df5: 20 d2 ff  -         jsr kernal_chrout
3df8: 4c 00 3e  -         jmp !done+
3dfb: 09 30     -         ora #$30
3dfd: 20 d2 ff  -         jsr kernal_chrout
3e00: 4c 39 3e  -         jmp !done+
3e03: ad 27 3f  -         lda value
3e06: c9 0a     -         cmp #two_digit
3e08: 90 2a     -         bcc !oneDigit+
3e0a: ad 27 3f  -         lda value
3e0d: c9 0a     -         cmp #reference
3e0f: 90 09     -         bcc !done+
3e11: a0 00     -         ldy #$00		// counter
3e13: c8        -         iny				// count references's
3e14: e9 0a     -         sbc #reference
3e16: c9 0a     -         cmp #reference
3e18: b0 f9     -         bcs !loop-		// still larger than reference
3e1a: 98        -         tya
3e1b: 48        -         pha
3e1c: 09 30     -         ora #$30
3e1e: 20 d2 ff  -         jsr kernal_chrout
3e21: 68        -         pla
3e22: a8        -         tay
3e23: ad 27 3f  -         lda value
3e26: 38        -         sec
3e27: e9 0a     -         sbc #two_digit
3e29: 88        -         dey
3e2a: d0 fa     -         bne !subby-
3e2c: 09 30     -         ora #$30
3e2e: 20 d2 ff  -         jsr kernal_chrout
3e31: 4c 39 3e  -         jmp !done+
3e34: 09 30     -         ora #$30
3e36: 20 d2 ff  -         jsr kernal_chrout
3e39: ad 86 02  -         lda foreground_color
3e3c: 48        -         pha
3e3d: a9 01     -         lda #color
3e3f: 8d 86 02  -         sta foreground_color
3e42: a2 00     -         ldx #$00
3e44: bd 1b 3f  -         lda msg,x
3e47: f0 07     -         beq !done+
3e49: 20 d2 ff  -         jsr kernal_chrout
3e4c: e8        -         inx
3e4d: 4c 44 3e  -         jmp !loop-
3e50: 68        -         pla
3e51: 8d 86 02  -         sta foreground_color
3e54: ad 26 3f  -         lda value
3e57: c9 64     -         cmp #three_digit
3e59: 90 5a     -         bcc !twoDigit+
3e5b: ad 26 3f  -         lda value
3e5e: c9 64     -         cmp #reference
3e60: 90 09     -         bcc !done+
3e62: a0 00     -         ldy #$00		// counter
3e64: c8        -         iny				// count references's
3e65: e9 64     -         sbc #reference
3e67: c9 64     -         cmp #reference
3e69: b0 f9     -         bcs !loop-		// still larger than reference
3e6b: 98        -         tya
3e6c: 48        -         pha
3e6d: 09 30     -         ora #$30
3e6f: 20 d2 ff  -         jsr kernal_chrout
3e72: 68        -         pla
3e73: a8        -         tay
3e74: ad 26 3f  -         lda value
3e77: 38        -         sec
3e78: e9 64     -         sbc #three_digit
3e7a: 88        -         dey
3e7b: d0 fa     -         bne !subby-
3e7d: 85 fe     -         sta zp
3e7f: a5 fe     -         lda value
3e81: c9 0a     -         cmp #two_digit
3e83: 90 28     -         bcc !oneDigit+
3e85: a5 fe     -         lda value
3e87: c9 0a     -         cmp #reference
3e89: 90 09     -         bcc !done+
3e8b: a0 00     -         ldy #$00		// counter
3e8d: c8        -         iny				// count references's
3e8e: e9 0a     -         sbc #reference
3e90: c9 0a     -         cmp #reference
3e92: b0 f9     -         bcs !loop-		// still larger than reference
3e94: 98        -         tya
3e95: 48        -         pha
3e96: 09 30     -         ora #$30
3e98: 20 d2 ff  -         jsr kernal_chrout
3e9b: 68        -         pla
3e9c: a8        -         tay
3e9d: a5 fe     -         lda value
3e9f: 38        -         sec
3ea0: e9 0a     -         sbc #two_digit
3ea2: 88        -         dey
3ea3: d0 fa     -         bne !subby-
3ea5: 09 30     -         ora #$30
3ea7: 20 d2 ff  -         jsr kernal_chrout
3eaa: 4c b2 3e  -         jmp !done+
3ead: 09 30     -         ora #$30
3eaf: 20 d2 ff  -         jsr kernal_chrout
3eb2: 4c eb 3e  -         jmp !done+
3eb5: ad 26 3f  -         lda value
3eb8: c9 0a     -         cmp #two_digit
3eba: 90 2a     -         bcc !oneDigit+
3ebc: ad 26 3f  -         lda value
3ebf: c9 0a     -         cmp #reference
3ec1: 90 09     -         bcc !done+
3ec3: a0 00     -         ldy #$00		// counter
3ec5: c8        -         iny				// count references's
3ec6: e9 0a     -         sbc #reference
3ec8: c9 0a     -         cmp #reference
3eca: b0 f9     -         bcs !loop-		// still larger than reference
3ecc: 98        -         tya
3ecd: 48        -         pha
3ece: 09 30     -         ora #$30
3ed0: 20 d2 ff  -         jsr kernal_chrout
3ed3: 68        -         pla
3ed4: a8        -         tay
3ed5: ad 26 3f  -         lda value
3ed8: 38        -         sec
3ed9: e9 0a     -         sbc #two_digit
3edb: 88        -         dey
3edc: d0 fa     -         bne !subby-
3ede: 09 30     -         ora #$30
3ee0: 20 d2 ff  -         jsr kernal_chrout
3ee3: 4c eb 3e  -         jmp !done+
3ee6: 09 30     -         ora #$30
3ee8: 20 d2 ff  -         jsr kernal_chrout
3eeb: ad 86 02  -         lda foreground_color
3eee: 48        -         pha
3eef: a9 01     -         lda #color
3ef1: 8d 86 02  -         sta foreground_color
3ef4: a2 00     -         ldx #$00
3ef6: bd 1f 3f  -         lda msg,x
3ef9: f0 07     -         beq !done+
3efb: 20 d2 ff  -         jsr kernal_chrout
3efe: e8        -         inx
3eff: 4c f6 3e  -         jmp !loop-
3f02: 68        -         pla
3f03: 8d 86 02  -         sta foreground_color
3f06: 4c 21 3f  -         jmp !done+
3f09: 0d        - memory: .byte RETURN
3f0a: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
3f1a: 00        -         .byte NULL
3f1b: 20 2f 20  - memory_2:.text " / "
3f1e: 00        -         .byte NULL
3f1f: 0d 00     - memory_3:.byte RETURN, NULL
3f21: 60        -         rts

[TestData]
3f22: 73 00     -         .byte $73, $00
3f24: 76 00     -         .byte $76, $00
3f26: 00        -         .byte $00
3f27: 00        -         .byte $00
3f28: 00        -         .byte $00
3f29: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  -         .text "SWEET16 TEST RUNNER"
3f39: 4e 45 52                                        
3f3c: 0d 00     -         .byte RETURN, NULL
3f3e: 12 34     -         .byte $12,$34
3f40: 56 78     -         .byte $56,$78
3f42: 9a bc     -         .byte $9a,$bc
3f44: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  -         .fill TMS_SIZE, i
3f54: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  -         .fill TMS_SIZE, $ff
3f64: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill STACK_SIZE, 0
****************************** Segment: UtilData *******************************
[UtilData]
0aab: 0d 00     - Newline:.byte RETURN, NULL

[ManagedBuffer256]
0aad: ff 00     - ManagedBuffer256,totalSize,lo,hi-1:.byte <value, >value
0aaf: 00 00     - allocSize,lo,hi-1:.byte <value, >value
0ab1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - buffer: .fill $ff, $00
0ad1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0af1: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b31: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b51: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0b91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    
0bb0: a0 00     - CopyMemoryZeroPageSize:ldy #$00
0bb2: 84 50     -         sty ZpVar.Four.lo     // LSB size
0bb4: 84 51     -         sty ZpVar.Four.hi     // MSH size
0bb6: a5 4f     -         lda ZpVar.Three.hi
0bb8: c5 51     -         cmp ZpVar.Four.hi
0bba: f0 17     -         beq !msb_match+
0bbc: b1 fb     -         lda (ZpVar.One.lo),y 
0bbe: 91 fd     -         sta (ZpVar.Two.lo),y
0bc0: e6 50     -         inc ZpVar.Four.lo
0bc2: f0 0a     -         beq inc_msb
0bc4: c8        -         iny
0bc5: d0 ef     -         bne !loop-
0bc7: e6 fc     -         inc ZpVar.One.hi 	// inc MSB source 
0bc9: e6 fe     -         inc ZpVar.Two.hi 	// inc MSB dest 
0bcb: 4c b6 0b  -         jmp !loop-
0bce: e6 51     - inc_msb:inc ZpVar.Four.hi
0bd0: 4c c4 0b  -         jmp !cont-
0bd3: a5 4e     -         lda ZpVar.Three.lo
0bd5: c5 50     -         cmp ZpVar.Four.lo
0bd7: f0 03     -         beq !done+
0bd9: 4c bc 0b  -         jmp !copy-
0bdc: 60        -         rts
0bdd: a9 fd     - LoadPrgFileFromManagedBuffer:lda #ZpVar.One+2
0bdf: a2 ff     -         ldx #<ZpVar.One+4
0be1: a0 00     -         ldy #>ZpVar.One+4
0be3: 20 bd ff  -         jsr $ffbd     // call setnam
0be6: a9 01     -         lda #$01
0be8: a6 ba     -         ldx $ba       // last used device number
0bea: d0 02     -         bne !skip+
0bec: a2 08     -         ldx #$08      // default to device 8
0bee: a0 01     -         ldy #$01      // not $01 means: load to address stored in file
0bf0: 20 ba ff  -         jsr $ffba     // call setlfs
0bf3: a9 00     -         lda #$00      // $00 means: load to memory (not verify)
0bf5: 20 d5 ff  -         jsr $ffd5     // call load
0bf8: b0 03     -         bcs !error+    // if carry set, a load error has happened
0bfa: 4c e2 0c  -         jmp !done+
0bfd: 85 50     - LoadPrgFileFromManagedBufferError:sta ZpVar.Four
0bff: a2 00     -         ldx #$00
0c01: bd da 0c  -         lda msg,x
0c04: f0 07     -         beq !done+
0c06: 20 d2 ff  -         jsr kernal_chrout
0c09: e8        -         inx
0c0a: 4c 01 0c  -         jmp !loop-
0c0d: a5 50     -         lda value
0c0f: c9 64     -         cmp #three_digit
0c11: 90 58     -         bcc !twoDigit+
0c13: a5 50     -         lda value
0c15: c9 64     -         cmp #reference
0c17: 90 09     -         bcc !done+
0c19: a0 00     -         ldy #$00		// counter
0c1b: c8        -         iny				// count references's
0c1c: e9 64     -         sbc #reference
0c1e: c9 64     -         cmp #reference
0c20: b0 f9     -         bcs !loop-		// still larger than reference
0c22: 98        -         tya
0c23: 48        -         pha
0c24: 09 30     -         ora #$30
0c26: 20 d2 ff  -         jsr kernal_chrout
0c29: 68        -         pla
0c2a: a8        -         tay
0c2b: a5 50     -         lda value
0c2d: 38        -         sec
0c2e: e9 64     -         sbc #three_digit
0c30: 88        -         dey
0c31: d0 fa     -         bne !subby-
0c33: 85 fe     -         sta zp
0c35: a5 fe     -         lda value
0c37: c9 0a     -         cmp #two_digit
0c39: 90 28     -         bcc !oneDigit+
0c3b: a5 fe     -         lda value
0c3d: c9 0a     -         cmp #reference
0c3f: 90 09     -         bcc !done+
0c41: a0 00     -         ldy #$00		// counter
0c43: c8        -         iny				// count references's
0c44: e9 0a     -         sbc #reference
0c46: c9 0a     -         cmp #reference
0c48: b0 f9     -         bcs !loop-		// still larger than reference
0c4a: 98        -         tya
0c4b: 48        -         pha
0c4c: 09 30     -         ora #$30
0c4e: 20 d2 ff  -         jsr kernal_chrout
0c51: 68        -         pla
0c52: a8        -         tay
0c53: a5 fe     -         lda value
0c55: 38        -         sec
0c56: e9 0a     -         sbc #two_digit
0c58: 88        -         dey
0c59: d0 fa     -         bne !subby-
0c5b: 09 30     -         ora #$30
0c5d: 20 d2 ff  -         jsr kernal_chrout
0c60: 4c 68 0c  -         jmp !done+
0c63: 09 30     -         ora #$30
0c65: 20 d2 ff  -         jsr kernal_chrout
0c68: 4c 9e 0c  -         jmp !done+
0c6b: a5 50     -         lda value
0c6d: c9 0a     -         cmp #two_digit
0c6f: 90 28     -         bcc !oneDigit+
0c71: a5 50     -         lda value
0c73: c9 0a     -         cmp #reference
0c75: 90 09     -         bcc !done+
0c77: a0 00     -         ldy #$00		// counter
0c79: c8        -         iny				// count references's
0c7a: e9 0a     -         sbc #reference
0c7c: c9 0a     -         cmp #reference
0c7e: b0 f9     -         bcs !loop-		// still larger than reference
0c80: 98        -         tya
0c81: 48        -         pha
0c82: 09 30     -         ora #$30
0c84: 20 d2 ff  -         jsr kernal_chrout
0c87: 68        -         pla
0c88: a8        -         tay
0c89: a5 50     -         lda value
0c8b: 38        -         sec
0c8c: e9 0a     -         sbc #two_digit
0c8e: 88        -         dey
0c8f: d0 fa     -         bne !subby-
0c91: 09 30     -         ora #$30
0c93: 20 d2 ff  -         jsr kernal_chrout
0c96: 4c 9e 0c  -         jmp !done+
0c99: 09 30     -         ora #$30
0c9b: 20 d2 ff  -         jsr kernal_chrout
0c9e: a5 50     -         lda ZpVar.Four
0ca0: c9 04     -         cmp #$04
0ca2: f0 17     -         beq !fileNotFound+
0ca4: 4c a4 0c  -         jmp *
0ca7: 20 3e 20 46 49 4c 45 20 4e 4f 54 20 46 4f 55 4e  - fileNotFoundMessage:.text " > FILE NOT FOUND: "
0cb7: 44 3a 20                                        
0cba: 00        -         .byte NULL
0cbb: a2 00     -         ldx #$00
0cbd: bd a7 0c  -         lda msg,x
0cc0: f0 07     -         beq !done+
0cc2: 20 d2 ff  -         jsr kernal_chrout
0cc5: e8        -         inx
0cc6: 4c bd 0c  -         jmp !loop-
0cc9: a2 00     -         ldx #$00
0ccb: b5 ff     -         lda msg,x
0ccd: f0 07     -         beq !done+
0ccf: 20 d2 ff  -         jsr kernal_chrout
0cd2: e8        -         inx
0cd3: 4c cb 0c  -         jmp !loop-
0cd6: 4c d6 0c  -         jmp *
0cd9: 60        -         rts
0cda: 45 52 52 4f 52 3a 20                             - errormessage:.text "ERROR: "
0ce1: 00        -         .byte NULL
0ce2: 60        -         rts
************************** Segment: Sweet16JumpTable ***************************
[Sweet16JumpTable]
0887: 00        - OPTBL:  .byte <SET-1          // 1X
0888: f7        - BRTBL:  .byte  <RTN-1          // 0
0889: 03        -         .byte  <LD-1           // 2X
088a: 8b        -         .byte  <BR-1           // 1
088b: 13        -         .byte  <ST-1           // 3X
088c: 8c        -         .byte  <BNC-1          // 2
088d: 2b        -         .byte  <LDAT-1         // 4X
088e: 9d        -         .byte  <BC-1           // 3
088f: 1c        -         .byte  <STAT-1         // 5X
0890: a0        -         .byte  <BP-1           // 4
0891: 35        -         .byte  <LDDAT-1        // 6X
0892: a7        -         .byte  <BM-1           // 5
0893: 3f        -         .byte  <STDAT-1        // 7X
0894: ae        -         .byte  <BZ-1           // 6
0895: e7        -         .byte  <POP-1          // 8X
0896: b7        -         .byte  <BNZ-1          // 7
0897: 49        -         .byte  <STPAT-1        // 9X
0898: c0        -         .byte  <BM1-1          // 8
0899: 73        -         .byte  <ADD-1          // AX
089a: cb        -         .byte  <BNM1-1         // 9
089b: 5c        -         .byte  <SUB-1          // BX
089c: 0c        -         .byte  <BK-1           // A
089d: eb        -         .byte  <POPD-1         // CX
089e: d6        -         .byte  <RS-1           // B
089f: 5e        -         .byte  <CPR-1          // DX
08a0: 81        -         .byte  <BS-1           // C
08a1: 24        -         .byte  <INR-1          // EX
08a2: 10        -         .byte  <XJSR-1         // D
08a3: 53        -         .byte  <DCR-1          // FX
08a4: 0d        -         .byte  <SETM-1         // E
08a5: d5        -         .byte  <NUL-1          // UNUSED
08a6: f4        -         .byte  <SETI-1         // F
***************************** Segment: Sweet16Page *****************************
[Sweet16Page]
0900: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
0901: 4c 73 08  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     - LD:     lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        - BK:     brk
090e: 4c 78 0a  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     - ST:     lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     - STAT:   lda  R0L	
091f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     - INR:    inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        - INR2:   rts
092c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  - STPAT:  jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     - DCR:    lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     - DCR2:   dec  R0L,X
095c: 60        -         rts
095d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
095f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  - SUB2:   sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     - ADD:    lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        - BR:     clc
098d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
098f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     - BR2:    adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        - BNC2:   rts
099e: b0 ec     - BC:     bcs  BR
09a0: 60        -         rts
09a1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        - NUL:    rts
09d7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  - POPD:   jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  - SETI:   jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  - RTN:    jmp  RTNZ
09fb: 20 54 09  - POP2:   jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  - SAVE:   sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  - RESTORE:lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        - BREAK_HANDLER:pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c 4a 08  -         jmp SW16D
0a44: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts
************************** Segment: Sweet16OutOfPage ***************************
[Sweet16OutOfPage]
0a66: 20 44 0a  - SETI_OUTOFPAGE:jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c 4a 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  - SETM_OUTOFPAGE:jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c 4a 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c 4a 08  -         jmp SW16D				// back to SWEET16
***************************** Segment: Sweet16Data *****************************
[Sweet16Data]
0aa6: 00        - ACCUMULATOR:.byte 0
0aa7: 00        - XREG:   .byte 0
0aa8: 00        - YREG:   .byte 0
0aa9: 00        - STATUS: .byte 0
0aaa: 00        - SW16_SAVE_RESTORE:.byte 0
****************************** Segment: TestData *******************************
[TestData]
3f22: 73 00     - TEST_SUCCESS:.byte $73, $00
3f24: 76 00     - TEST_FAILURE:.byte $76, $00
3f26: 00        - TEST_COUNT:.byte $00
3f27: 00        - TEST_PASS_COUNT:.byte $00
3f28: 00        - TEST_NAME_COUNT:.byte $00
3f29: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  - TEST_TITLE:.text "SWEET16 TEST RUNNER"
3f39: 4e 45 52                                        
3f3c: 0d 00     -         .byte RETURN, NULL
3f3e: 12 34     - TEST_MEMORY:.byte $12,$34
3f40: 56 78     - TEST_MEMORY_2:.byte $56,$78
3f42: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
3f44: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
3f54: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
3f64: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
