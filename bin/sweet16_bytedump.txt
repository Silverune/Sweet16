******************************* Segment: Default *******************************
******************************** Segment: Main *********************************
[Main]
0810: 20 3c 3d  - Main:   jsr Bootstrap
0813: 20 8c 3a  -         jsr TestRun
0816: 20 1d 08  -         jsr Anykey
0819: 4c 26 08  -         jmp Reset
081c: 60        -         rts
081d: 20 9f ff  - Anykey: jsr scnkey  // scan keyboard
0820: 20 e4 ff  -         jsr getin	// put result into A
0823: f0 f8     -         beq !-	
0825: 60        -         rts
0826: 6c fc ff  - Reset:  jmp ($FFFC)
******************************* Segment: Sweet16 *******************************
[Sweet16]
0829: a9 00     - SW16_NONE:lda #$00
082b: 8d aa 0a  -         sta SW16_SAVE_RESTORE
082e: 4c 36 08  -         jmp SW160
0831: a9 01     - SW16:   lda #$01
0833: 8d aa 0a  -         sta SW16_SAVE_RESTORE
0836: f0 03     - SW160:  beq SW16A
0838: 20 16 0a  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
083b: 68        - SW16A:  pla
083c: 85 35     -         sta R15L            // INIT SWEET16 PC
083e: 68        -         pla                 // FROM RETURN
083f: 85 36     -         sta R15H	        // ADDRESS
0841: 20 47 08  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
0844: 4c 41 08  -         jmp  SW16B          // ONE SWEET16 INSTR.
0847: e6 35     - SW16C:  inc  R15L
0849: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
084b: e6 36     -         inc  R15H
084d: a9 09     - SW16D:  lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
084f: 48        -         pha                 // PUSH ON STACK FOR RTS
0850: a0 00     -         ldy  #$00
0852: b1 35     -         lda  (R15L),Y       // FETCH INSTR
0854: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
0856: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
0857: aa        -         tax                 // TO X REG FOR INDEXING
0858: 4a        -         lsr
0859: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
085b: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
085d: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
085f: 4a        -         lsr
0860: 4a        -         lsr                 // OPCODE*2 TO LSB'S
0861: 4a        -         lsr
0862: a8        -         tay                 // TO Y REG FOR INDEXING
0863: b9 88 08  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
0866: 48        -         pha                 // ONTO STACK
0867: 60        -         rts                 // GOTO REG-OP ROUTINE
0868: e6 35     - TOBR:   inc  R15L
086a: d0 02     -         bne  TOBR2          // INCR PC
086c: e6 36     -         inc  R15H
086e: bd 8b 08  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
0871: 48        -         pha                 // ONTO STACK FOR NON-REG OP
0872: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
0874: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
0875: 60        -         rts                 // GOTO NON-REG OP ROUTINE
0876: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
0878: 95 18     -         sta  R0H,X
087a: 88        -         dey
087b: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
087d: 95 17     -         sta  R0L,X
087f: 98        -         tya                 // Y REG CONTAINS 1
0880: 38        -         sec
0881: 65 35     -         adc  R15L           // ADD 2 TO PC
0883: 85 35     -         sta  R15L
0885: 90 02     -         bcc  SET2
0887: e6 36     -         inc  R15H
0889: 60        - SET2:   rts

[Sweet16JumpTable]
088a: 00        -         .byte <SET-1          // 1X
088b: f7        -         .byte  <RTN-1          // 0
088c: 03        -         .byte  <LD-1           // 2X
088d: 8b        -         .byte  <BR-1           // 1
088e: 13        -         .byte  <ST-1           // 3X
088f: 8c        -         .byte  <BNC-1          // 2
0890: 2b        -         .byte  <LDAT-1         // 4X
0891: 9d        -         .byte  <BC-1           // 3
0892: 1c        -         .byte  <STAT-1         // 5X
0893: a0        -         .byte  <BP-1           // 4
0894: 35        -         .byte  <LDDAT-1        // 6X
0895: a7        -         .byte  <BM-1           // 5
0896: 3f        -         .byte  <STDAT-1        // 7X
0897: ae        -         .byte  <BZ-1           // 6
0898: e7        -         .byte  <POP-1          // 8X
0899: b7        -         .byte  <BNZ-1          // 7
089a: 49        -         .byte  <STPAT-1        // 9X
089b: c0        -         .byte  <BM1-1          // 8
089c: 73        -         .byte  <ADD-1          // AX
089d: cb        -         .byte  <BNM1-1         // 9
089e: 5c        -         .byte  <SUB-1          // BX
089f: 0c        -         .byte  <BK-1           // A
08a0: eb        -         .byte  <POPD-1         // CX
08a1: d6        -         .byte  <RS-1           // B
08a2: 5e        -         .byte  <CPR-1          // DX
08a3: 81        -         .byte  <BS-1           // C
08a4: 24        -         .byte  <INR-1          // EX
08a5: 10        -         .byte  <XJSR-1         // D
08a6: 53        -         .byte  <DCR-1          // FX
08a7: 0d        -         .byte  <SETM-1         // E
08a8: d5        -         .byte  <NUL-1          // UNUSED
08a9: f4        -         .byte  <SETI-1         // F

[Sweet16Page]
0900: ea        -         nop                // otherwise RTS "cleverness" not so clever
0901: 4c 76 08  -         jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     -         lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        -         brk
090e: 4c 78 0a  -         jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  -         jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     -         lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     -         lda  R0L	
091f: 81 17     -         sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     -         sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     -         inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        -         rts
092c: a1 17     -         lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  -         jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  -         jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  -         jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     -         lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     -         dec  R0L,X
095c: 60        -         rts
095d: a0 00     -         ldy  #$00           // RESULT TO R0
095f: 38        -         sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  -         sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     -         lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     -         lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        -         clc
098d: b0 0e     -         bcs  BNC2           // NO CARRY TEST	
098f: b1 35     -         lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     -         adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        -         rts
099e: b0 ec     -         bcs  BR
09a0: 60        -         rts
09a1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        -         rts
09d7: a2 18     -         ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     -         ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  -         jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  -         jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  -         jmp  RTNZ
09fb: 20 54 09  -         jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     -         ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        -         pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  -         jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  -         sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  -         lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        -         pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c 4d 08  -         jmp SW16D
0a44: b1 35     -         lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts

[Sweet16OutOfPage]
0a66: 20 44 0a  -         jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c 4d 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  -         jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c 4d 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     -         lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c 4d 08  -         jmp SW16D				// back to SWEET16

[Sweet16Data]
0aa6: 00        -         .byte 0
0aa7: 00        -         .byte 0
0aa8: 00        -         .byte 0
0aa9: 00        -         .byte 0
0aaa: 00        -         .byte 0
******************************** Segment: Tests ********************************
[Set]
0aab: ee f0 3c  - SET_TEST:inc TEST_NAME_COUNT
0aae: ad 86 02  -         lda foreground_color
0ab1: 48        -         pha
0ab2: a9 0f     -         lda #color
0ab4: 8d 86 02  -         sta foreground_color
0ab7: a2 00     -         ldx #$00
0ab9: bd cc 0a  -         lda msg,x
0abc: f0 07     -         beq !done+
0abe: 20 d2 ff  -         jsr kernal_chrout
0ac1: e8        -         inx
0ac2: 4c b9 0a  -         jmp !loop-
0ac5: 68        -         pla
0ac6: 8d 86 02  -         sta foreground_color
0ac9: 4c d5 0a  -         jmp !done+
0acc: 20 20     - memory: .fill spacing, spacebar
0ace: 53 45 54  -         .text name
0ad1: 2e 2e 2e  -         .text "..."
0ad4: 00        -         .byte NULL
0ad5: 20 31 08  -         jsr SW16
0ad8: 15        -         .byte opcode(op, register)
0ad9: 34 12     -         .word address.getValue()
0adb: 00        -         .byte $00 }
0adc: ee ee 3c  -         inc TEST_COUNT
0adf: ad 86 02  -         lda foreground_color
0ae2: 48        -         pha
0ae3: a9 0e     -         lda #color
0ae5: 8d 86 02  -         sta foreground_color
0ae8: a2 00     -         ldx #$00
0aea: bd fd 0a  -         lda msg,x
0aed: f0 07     -         beq !done+
0aef: 20 d2 ff  -         jsr kernal_chrout
0af2: e8        -         inx
0af3: 4c ea 0a  -         jmp !loop-
0af6: 68        -         pla
0af7: 8d 86 02  -         sta foreground_color
0afa: 4c 05 0b  -         jmp !done+
0afd: 20        - memory: .byte spacebar
0afe: 56 41 4c 55 45                                   -         .text description
0b03: 3a        -         .text ":"
0b04: 00        -         .byte NULL
0b05: a6 21     -         ldx rl(register.getValue())
0b07: a4 22     -         ldy rh(register.getValue())
0b09: e0 34     -         cpx #<value
0b0b: d0 25     -         bne !failed+
0b0d: c0 12     -         cpy #>value
0b0f: d0 21     -         bne !failed+
0b11: ee ef 3c  -         inc TEST_PASS_COUNT
0b14: ad 86 02  -         lda foreground_color
0b17: 48        -         pha
0b18: a9 05     -         lda #color
0b1a: 8d 86 02  -         sta foreground_color
0b1d: a2 00     -         ldx #$00
0b1f: bd ea 3c  -         lda msg,x
0b22: f0 07     -         beq !done+
0b24: 20 d2 ff  -         jsr kernal_chrout
0b27: e8        -         inx
0b28: 4c 1f 0b  -         jmp !loop-
0b2b: 68        -         pla
0b2c: 8d 86 02  -         sta foreground_color
0b2f: 4c 4d 0b  -         jmp !done+
0b32: ad 86 02  -         lda foreground_color
0b35: 48        -         pha
0b36: a9 02     -         lda #color
0b38: 8d 86 02  -         sta foreground_color
0b3b: a2 00     -         ldx #$00
0b3d: bd ec 3c  -         lda msg,x
0b40: f0 07     -         beq !done+
0b42: 20 d2 ff  -         jsr kernal_chrout
0b45: e8        -         inx
0b46: 4c 3d 0b  -         jmp !loop-
0b49: 68        -         pla
0b4a: 8d 86 02  -         sta foreground_color
0b4d: a2 00     -         ldx #$00
0b4f: bd 5e 0b  -         lda msg,x
0b52: f0 07     -         beq !done+
0b54: 20 d2 ff  -         jsr kernal_chrout
0b57: e8        -         inx
0b58: 4c 4f 0b  -         jmp !loop-
0b5b: 4c 60 0b  -         jmp !done+
0b5e: 0d 00     - memory: .byte RETURN, NULL
0b60: ae f0 3c  -         ldx TEST_NAME_COUNT
0b63: e0 15     -         cpx #TESTS_PER_PAGE
0b65: d0 5d     -         bne !exit+
0b67: ad 86 02  -         lda foreground_color
0b6a: 48        -         pha
0b6b: a9 01     -         lda #color
0b6d: 8d 86 02  -         sta foreground_color
0b70: a2 00     -         ldx #$00
0b72: bd 85 0b  -         lda msg,x
0b75: f0 07     -         beq !done+
0b77: 20 d2 ff  -         jsr kernal_chrout
0b7a: e8        -         inx
0b7b: 4c 72 0b  -         jmp !loop-
0b7e: 68        -         pla
0b7f: 8d 86 02  -         sta foreground_color
0b82: 4c a4 0b  -         jmp !no_key+
0b85: 0d        - memory: .byte RETURN
0b86: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0b96: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0ba2: 0d 00     -         .byte RETURN, NULL
0ba4: 20 9f ff  -         jsr scnkey  // scan keyboard
0ba7: 20 e4 ff  -         jsr getin	// put result into A
0baa: f0 f8     -         beq !no_key-
0bac: a2 00     -         ldx #$00
0bae: bd bd 0b  -         lda msg,x
0bb1: f0 07     -         beq !done+
0bb3: 20 d2 ff  -         jsr kernal_chrout
0bb6: e8        -         inx
0bb7: 4c ae 0b  -         jmp !loop-
0bba: 4c bf 0b  -         jmp !done+
0bbd: 0d 00     - newline:.byte RETURN, NULL
0bbf: a2 00     -         ldx #$00
0bc1: 8e f0 3c  -         stx TEST_NAME_COUNT
0bc4: 60        -         rts

[Load]
0bc5: ee f0 3c  - LOAD_TEST:inc TEST_NAME_COUNT
0bc8: ad 86 02  -         lda foreground_color
0bcb: 48        -         pha
0bcc: a9 0f     -         lda #color
0bce: 8d 86 02  -         sta foreground_color
0bd1: a2 00     -         ldx #$00
0bd3: bd e6 0b  -         lda msg,x
0bd6: f0 07     -         beq !done+
0bd8: 20 d2 ff  -         jsr kernal_chrout
0bdb: e8        -         inx
0bdc: 4c d3 0b  -         jmp !loop-
0bdf: 68        -         pla
0be0: 8d 86 02  -         sta foreground_color
0be3: 4c f0 0b  -         jmp !done+
0be6: 20 20     - memory: .fill spacing, spacebar
0be8: 4c 4f 41 44                                      -         .text name
0bec: 2e 2e 2e  -         .text "..."
0bef: 00        -         .byte NULL
0bf0: 20 31 08  -         jsr SW16
0bf3: 15        -         .byte opcode(op, register)
0bf4: 21 43     -         .word address.getValue()
0bf6: 25        -         .byte opcode($20, register) }
0bf7: 00        -         .byte $00 }
0bf8: ee ee 3c  -         inc TEST_COUNT
0bfb: ad 86 02  -         lda foreground_color
0bfe: 48        -         pha
0bff: a9 0e     -         lda #color
0c01: 8d 86 02  -         sta foreground_color
0c04: a2 00     -         ldx #$00
0c06: bd 19 0c  -         lda msg,x
0c09: f0 07     -         beq !done+
0c0b: 20 d2 ff  -         jsr kernal_chrout
0c0e: e8        -         inx
0c0f: 4c 06 0c  -         jmp !loop-
0c12: 68        -         pla
0c13: 8d 86 02  -         sta foreground_color
0c16: 4c 1f 0c  -         jmp !done+
0c19: 20        - memory: .byte spacebar
0c1a: 41 43 43  -         .text description
0c1d: 3a        -         .text ":"
0c1e: 00        -         .byte NULL
0c1f: a6 17     -         ldx rl(register.getValue())
0c21: a4 18     -         ldy rh(register.getValue())
0c23: e0 21     -         cpx #<value
0c25: d0 25     -         bne !failed+
0c27: c0 43     -         cpy #>value
0c29: d0 21     -         bne !failed+
0c2b: ee ef 3c  -         inc TEST_PASS_COUNT
0c2e: ad 86 02  -         lda foreground_color
0c31: 48        -         pha
0c32: a9 05     -         lda #color
0c34: 8d 86 02  -         sta foreground_color
0c37: a2 00     -         ldx #$00
0c39: bd ea 3c  -         lda msg,x
0c3c: f0 07     -         beq !done+
0c3e: 20 d2 ff  -         jsr kernal_chrout
0c41: e8        -         inx
0c42: 4c 39 0c  -         jmp !loop-
0c45: 68        -         pla
0c46: 8d 86 02  -         sta foreground_color
0c49: 4c 67 0c  -         jmp !done+
0c4c: ad 86 02  -         lda foreground_color
0c4f: 48        -         pha
0c50: a9 02     -         lda #color
0c52: 8d 86 02  -         sta foreground_color
0c55: a2 00     -         ldx #$00
0c57: bd ec 3c  -         lda msg,x
0c5a: f0 07     -         beq !done+
0c5c: 20 d2 ff  -         jsr kernal_chrout
0c5f: e8        -         inx
0c60: 4c 57 0c  -         jmp !loop-
0c63: 68        -         pla
0c64: 8d 86 02  -         sta foreground_color
0c67: a2 00     -         ldx #$00
0c69: bd 78 0c  -         lda msg,x
0c6c: f0 07     -         beq !done+
0c6e: 20 d2 ff  -         jsr kernal_chrout
0c71: e8        -         inx
0c72: 4c 69 0c  -         jmp !loop-
0c75: 4c 7a 0c  -         jmp !done+
0c78: 0d 00     - memory: .byte RETURN, NULL
0c7a: ae f0 3c  -         ldx TEST_NAME_COUNT
0c7d: e0 15     -         cpx #TESTS_PER_PAGE
0c7f: d0 5d     -         bne !exit+
0c81: ad 86 02  -         lda foreground_color
0c84: 48        -         pha
0c85: a9 01     -         lda #color
0c87: 8d 86 02  -         sta foreground_color
0c8a: a2 00     -         ldx #$00
0c8c: bd 9f 0c  -         lda msg,x
0c8f: f0 07     -         beq !done+
0c91: 20 d2 ff  -         jsr kernal_chrout
0c94: e8        -         inx
0c95: 4c 8c 0c  -         jmp !loop-
0c98: 68        -         pla
0c99: 8d 86 02  -         sta foreground_color
0c9c: 4c be 0c  -         jmp !no_key+
0c9f: 0d        - memory: .byte RETURN
0ca0: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0cb0: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0cbc: 0d 00     -         .byte RETURN, NULL
0cbe: 20 9f ff  -         jsr scnkey  // scan keyboard
0cc1: 20 e4 ff  -         jsr getin	// put result into A
0cc4: f0 f8     -         beq !no_key-
0cc6: a2 00     -         ldx #$00
0cc8: bd d7 0c  -         lda msg,x
0ccb: f0 07     -         beq !done+
0ccd: 20 d2 ff  -         jsr kernal_chrout
0cd0: e8        -         inx
0cd1: 4c c8 0c  -         jmp !loop-
0cd4: 4c d9 0c  -         jmp !done+
0cd7: 0d 00     - newline:.byte RETURN, NULL
0cd9: a2 00     -         ldx #$00
0cdb: 8e f0 3c  -         stx TEST_NAME_COUNT
0cde: 60        -         rts
0cdf: ee f0 3c  - STORE_TEST:inc TEST_NAME_COUNT
0ce2: ad 86 02  -         lda foreground_color
0ce5: 48        -         pha
0ce6: a9 0f     -         lda #color
0ce8: 8d 86 02  -         sta foreground_color
0ceb: a2 00     -         ldx #$00
0ced: bd 00 0d  -         lda msg,x
0cf0: f0 07     -         beq !done+
0cf2: 20 d2 ff  -         jsr kernal_chrout
0cf5: e8        -         inx
0cf6: 4c ed 0c  -         jmp !loop-
0cf9: 68        -         pla
0cfa: 8d 86 02  -         sta foreground_color
0cfd: 4c 0b 0d  -         jmp !done+
0d00: 20 20     - memory: .fill spacing, spacebar
0d02: 53 54 4f 52 45                                   -         .text name
0d07: 2e 2e 2e  -         .text "..."
0d0a: 00        -         .byte NULL
0d0b: 20 31 08  -         jsr SW16
0d0e: 15        -         .byte opcode(op, register)
0d0f: 34 12     -         .word address.getValue()
0d11: 25        -         .byte opcode($20, register) }
0d12: 36        -         .byte opcode($30, register) }
0d13: 00        -         .byte $00 }
0d14: ee ee 3c  -         inc TEST_COUNT
0d17: ad 86 02  -         lda foreground_color
0d1a: 48        -         pha
0d1b: a9 0e     -         lda #color
0d1d: 8d 86 02  -         sta foreground_color
0d20: a2 00     -         ldx #$00
0d22: bd 35 0d  -         lda msg,x
0d25: f0 07     -         beq !done+
0d27: 20 d2 ff  -         jsr kernal_chrout
0d2a: e8        -         inx
0d2b: 4c 22 0d  -         jmp !loop-
0d2e: 68        -         pla
0d2f: 8d 86 02  -         sta foreground_color
0d32: 4c 3d 0d  -         jmp !done+
0d35: 20        - memory: .byte spacebar
0d36: 56 41 4c 55 45                                   -         .text description
0d3b: 3a        -         .text ":"
0d3c: 00        -         .byte NULL
0d3d: a6 23     -         ldx rl(register.getValue())
0d3f: a4 24     -         ldy rh(register.getValue())
0d41: e0 34     -         cpx #<value
0d43: d0 25     -         bne !failed+
0d45: c0 12     -         cpy #>value
0d47: d0 21     -         bne !failed+
0d49: ee ef 3c  -         inc TEST_PASS_COUNT
0d4c: ad 86 02  -         lda foreground_color
0d4f: 48        -         pha
0d50: a9 05     -         lda #color
0d52: 8d 86 02  -         sta foreground_color
0d55: a2 00     -         ldx #$00
0d57: bd ea 3c  -         lda msg,x
0d5a: f0 07     -         beq !done+
0d5c: 20 d2 ff  -         jsr kernal_chrout
0d5f: e8        -         inx
0d60: 4c 57 0d  -         jmp !loop-
0d63: 68        -         pla
0d64: 8d 86 02  -         sta foreground_color
0d67: 4c 85 0d  -         jmp !done+
0d6a: ad 86 02  -         lda foreground_color
0d6d: 48        -         pha
0d6e: a9 02     -         lda #color
0d70: 8d 86 02  -         sta foreground_color
0d73: a2 00     -         ldx #$00
0d75: bd ec 3c  -         lda msg,x
0d78: f0 07     -         beq !done+
0d7a: 20 d2 ff  -         jsr kernal_chrout
0d7d: e8        -         inx
0d7e: 4c 75 0d  -         jmp !loop-
0d81: 68        -         pla
0d82: 8d 86 02  -         sta foreground_color
0d85: a2 00     -         ldx #$00
0d87: bd 96 0d  -         lda msg,x
0d8a: f0 07     -         beq !done+
0d8c: 20 d2 ff  -         jsr kernal_chrout
0d8f: e8        -         inx
0d90: 4c 87 0d  -         jmp !loop-
0d93: 4c 98 0d  -         jmp !done+
0d96: 0d 00     - memory: .byte RETURN, NULL
0d98: ae f0 3c  -         ldx TEST_NAME_COUNT
0d9b: e0 15     -         cpx #TESTS_PER_PAGE
0d9d: d0 5d     -         bne !exit+
0d9f: ad 86 02  -         lda foreground_color
0da2: 48        -         pha
0da3: a9 01     -         lda #color
0da5: 8d 86 02  -         sta foreground_color
0da8: a2 00     -         ldx #$00
0daa: bd bd 0d  -         lda msg,x
0dad: f0 07     -         beq !done+
0daf: 20 d2 ff  -         jsr kernal_chrout
0db2: e8        -         inx
0db3: 4c aa 0d  -         jmp !loop-
0db6: 68        -         pla
0db7: 8d 86 02  -         sta foreground_color
0dba: 4c dc 0d  -         jmp !no_key+
0dbd: 0d        - memory: .byte RETURN
0dbe: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0dce: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0dda: 0d 00     -         .byte RETURN, NULL
0ddc: 20 9f ff  -         jsr scnkey  // scan keyboard
0ddf: 20 e4 ff  -         jsr getin	// put result into A
0de2: f0 f8     -         beq !no_key-
0de4: a2 00     -         ldx #$00
0de6: bd f5 0d  -         lda msg,x
0de9: f0 07     -         beq !done+
0deb: 20 d2 ff  -         jsr kernal_chrout
0dee: e8        -         inx
0def: 4c e6 0d  -         jmp !loop-
0df2: 4c f7 0d  -         jmp !done+
0df5: 0d 00     - newline:.byte RETURN, NULL
0df7: a2 00     -         ldx #$00
0df9: 8e f0 3c  -         stx TEST_NAME_COUNT
0dfc: 60        -         rts
0dfd: ee f0 3c  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
0e00: ad 86 02  -         lda foreground_color
0e03: 48        -         pha
0e04: a9 0f     -         lda #color
0e06: 8d 86 02  -         sta foreground_color
0e09: a2 00     -         ldx #$00
0e0b: bd 1e 0e  -         lda msg,x
0e0e: f0 07     -         beq !done+
0e10: 20 d2 ff  -         jsr kernal_chrout
0e13: e8        -         inx
0e14: 4c 0b 0e  -         jmp !loop-
0e17: 68        -         pla
0e18: 8d 86 02  -         sta foreground_color
0e1b: 4c 31 0e  -         jmp !done+
0e1e: 20 20     - memory: .fill spacing, spacebar
0e20: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
0e2d: 2e 2e 2e  -         .text "..."
0e30: 00        -         .byte NULL
0e31: 20 31 08  -         jsr SW16
0e34: 15        -         .byte opcode(op, register)
0e35: 06 3d     -         .word address.getValue()
0e37: 45        -         .byte opcode($40, register) }
0e38: 00        -         .byte $00 }
0e39: ee ee 3c  -         inc TEST_COUNT
0e3c: ad 86 02  -         lda foreground_color
0e3f: 48        -         pha
0e40: a9 0e     -         lda #color
0e42: 8d 86 02  -         sta foreground_color
0e45: a2 00     -         ldx #$00
0e47: bd 5a 0e  -         lda msg,x
0e4a: f0 07     -         beq !done+
0e4c: 20 d2 ff  -         jsr kernal_chrout
0e4f: e8        -         inx
0e50: 4c 47 0e  -         jmp !loop-
0e53: 68        -         pla
0e54: 8d 86 02  -         sta foreground_color
0e57: 4c 60 0e  -         jmp !done+
0e5a: 20        - memory: .byte spacebar
0e5b: 41 43 43  -         .text description
0e5e: 3a        -         .text ":"
0e5f: 00        -         .byte NULL
0e60: a6 17     -         ldx rl(register.getValue())
0e62: a4 18     -         ldy rh(register.getValue())
0e64: ec 06 3d  -         cpx address
0e67: d0 21     -         bne !failed+
0e69: ee ef 3c  -         inc TEST_PASS_COUNT
0e6c: ad 86 02  -         lda foreground_color
0e6f: 48        -         pha
0e70: a9 05     -         lda #color
0e72: 8d 86 02  -         sta foreground_color
0e75: a2 00     -         ldx #$00
0e77: bd ea 3c  -         lda msg,x
0e7a: f0 07     -         beq !done+
0e7c: 20 d2 ff  -         jsr kernal_chrout
0e7f: e8        -         inx
0e80: 4c 77 0e  -         jmp !loop-
0e83: 68        -         pla
0e84: 8d 86 02  -         sta foreground_color
0e87: 4c a5 0e  -         jmp !done+
0e8a: ad 86 02  -         lda foreground_color
0e8d: 48        -         pha
0e8e: a9 02     -         lda #color
0e90: 8d 86 02  -         sta foreground_color
0e93: a2 00     -         ldx #$00
0e95: bd ec 3c  -         lda msg,x
0e98: f0 07     -         beq !done+
0e9a: 20 d2 ff  -         jsr kernal_chrout
0e9d: e8        -         inx
0e9e: 4c 95 0e  -         jmp !loop-
0ea1: 68        -         pla
0ea2: 8d 86 02  -         sta foreground_color
0ea5: ee ee 3c  -         inc TEST_COUNT
0ea8: ad 86 02  -         lda foreground_color
0eab: 48        -         pha
0eac: a9 0e     -         lda #color
0eae: 8d 86 02  -         sta foreground_color
0eb1: a2 00     -         ldx #$00
0eb3: bd c6 0e  -         lda msg,x
0eb6: f0 07     -         beq !done+
0eb8: 20 d2 ff  -         jsr kernal_chrout
0ebb: e8        -         inx
0ebc: 4c b3 0e  -         jmp !loop-
0ebf: 68        -         pla
0ec0: 8d 86 02  -         sta foreground_color
0ec3: 4c cc 0e  -         jmp !done+
0ec6: 20        - memory: .byte spacebar
0ec7: 52 45 47  -         .text description
0eca: 3a        -         .text ":"
0ecb: 00        -         .byte NULL
0ecc: a6 21     -         ldx rl(register.getValue())
0ece: a4 22     -         ldy rh(register.getValue())
0ed0: e0 07     -         cpx #<value
0ed2: d0 25     -         bne !failed+
0ed4: c0 3d     -         cpy #>value
0ed6: d0 21     -         bne !failed+
0ed8: ee ef 3c  -         inc TEST_PASS_COUNT
0edb: ad 86 02  -         lda foreground_color
0ede: 48        -         pha
0edf: a9 05     -         lda #color
0ee1: 8d 86 02  -         sta foreground_color
0ee4: a2 00     -         ldx #$00
0ee6: bd ea 3c  -         lda msg,x
0ee9: f0 07     -         beq !done+
0eeb: 20 d2 ff  -         jsr kernal_chrout
0eee: e8        -         inx
0eef: 4c e6 0e  -         jmp !loop-
0ef2: 68        -         pla
0ef3: 8d 86 02  -         sta foreground_color
0ef6: 4c 14 0f  -         jmp !done+
0ef9: ad 86 02  -         lda foreground_color
0efc: 48        -         pha
0efd: a9 02     -         lda #color
0eff: 8d 86 02  -         sta foreground_color
0f02: a2 00     -         ldx #$00
0f04: bd ec 3c  -         lda msg,x
0f07: f0 07     -         beq !done+
0f09: 20 d2 ff  -         jsr kernal_chrout
0f0c: e8        -         inx
0f0d: 4c 04 0f  -         jmp !loop-
0f10: 68        -         pla
0f11: 8d 86 02  -         sta foreground_color
0f14: a2 00     -         ldx #$00
0f16: bd 25 0f  -         lda msg,x
0f19: f0 07     -         beq !done+
0f1b: 20 d2 ff  -         jsr kernal_chrout
0f1e: e8        -         inx
0f1f: 4c 16 0f  -         jmp !loop-
0f22: 4c 27 0f  -         jmp !done+
0f25: 0d 00     - memory: .byte RETURN, NULL
0f27: ae f0 3c  -         ldx TEST_NAME_COUNT
0f2a: e0 15     -         cpx #TESTS_PER_PAGE
0f2c: d0 5d     -         bne !exit+
0f2e: ad 86 02  -         lda foreground_color
0f31: 48        -         pha
0f32: a9 01     -         lda #color
0f34: 8d 86 02  -         sta foreground_color
0f37: a2 00     -         ldx #$00
0f39: bd 4c 0f  -         lda msg,x
0f3c: f0 07     -         beq !done+
0f3e: 20 d2 ff  -         jsr kernal_chrout
0f41: e8        -         inx
0f42: 4c 39 0f  -         jmp !loop-
0f45: 68        -         pla
0f46: 8d 86 02  -         sta foreground_color
0f49: 4c 6b 0f  -         jmp !no_key+
0f4c: 0d        - memory: .byte RETURN
0f4d: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
0f5d: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
0f69: 0d 00     -         .byte RETURN, NULL
0f6b: 20 9f ff  -         jsr scnkey  // scan keyboard
0f6e: 20 e4 ff  -         jsr getin	// put result into A
0f71: f0 f8     -         beq !no_key-
0f73: a2 00     -         ldx #$00
0f75: bd 84 0f  -         lda msg,x
0f78: f0 07     -         beq !done+
0f7a: 20 d2 ff  -         jsr kernal_chrout
0f7d: e8        -         inx
0f7e: 4c 75 0f  -         jmp !loop-
0f81: 4c 86 0f  -         jmp !done+
0f84: 0d 00     - newline:.byte RETURN, NULL
0f86: a2 00     -         ldx #$00
0f88: 8e f0 3c  -         stx TEST_NAME_COUNT
0f8b: 60        -         rts
0f8c: ee f0 3c  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
0f8f: ad 86 02  -         lda foreground_color
0f92: 48        -         pha
0f93: a9 0f     -         lda #color
0f95: 8d 86 02  -         sta foreground_color
0f98: a2 00     -         ldx #$00
0f9a: bd ad 0f  -         lda msg,x
0f9d: f0 07     -         beq !done+
0f9f: 20 d2 ff  -         jsr kernal_chrout
0fa2: e8        -         inx
0fa3: 4c 9a 0f  -         jmp !loop-
0fa6: 68        -         pla
0fa7: 8d 86 02  -         sta foreground_color
0faa: 4c c1 0f  -         jmp !done+
0fad: 20 20     - memory: .fill spacing, spacebar
0faf: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
0fbd: 2e 2e 2e  -         .text "..."
0fc0: 00        -         .byte NULL
0fc1: 20 31 08  -         jsr SW16
0fc4: 15        -         .byte opcode(op, register)
0fc5: 06 3d     -         .word address.getValue()
0fc7: 16        -         .byte opcode(op, register)
0fc8: 08 3d     -         .word address.getValue()
0fca: 45        -         .byte opcode($40, register) }
0fcb: 56        -         .byte opcode($50, register) }
0fcc: 00        -         .byte $00 }
0fcd: ee ee 3c  -         inc TEST_COUNT
0fd0: ad 86 02  -         lda foreground_color
0fd3: 48        -         pha
0fd4: a9 0e     -         lda #color
0fd6: 8d 86 02  -         sta foreground_color
0fd9: a2 00     -         ldx #$00
0fdb: bd ee 0f  -         lda msg,x
0fde: f0 07     -         beq !done+
0fe0: 20 d2 ff  -         jsr kernal_chrout
0fe3: e8        -         inx
0fe4: 4c db 0f  -         jmp !loop-
0fe7: 68        -         pla
0fe8: 8d 86 02  -         sta foreground_color
0feb: 4c f4 0f  -         jmp !done+
0fee: 20        - memory: .byte spacebar
0fef: 4d 45 4d  -         .text description
0ff2: 3a        -         .text ":"
0ff3: 00        -         .byte NULL
0ff4: a2 ff     -         ldx #$ff
0ff6: e8        -         inx
0ff7: e0 01     -         cpx #size
0ff9: f0 0b     -         beq !success+
0ffb: bd 06 3d  -         lda source,x
0ffe: dd 08 3d  -         cmp dest,x
1001: f0 f3     -         beq !loop-
1003: 4c 27 10  -         jmp !failed+
1006: ee ef 3c  -         inc TEST_PASS_COUNT
1009: ad 86 02  -         lda foreground_color
100c: 48        -         pha
100d: a9 05     -         lda #color
100f: 8d 86 02  -         sta foreground_color
1012: a2 00     -         ldx #$00
1014: bd ea 3c  -         lda msg,x
1017: f0 07     -         beq !done+
1019: 20 d2 ff  -         jsr kernal_chrout
101c: e8        -         inx
101d: 4c 14 10  -         jmp !loop-
1020: 68        -         pla
1021: 8d 86 02  -         sta foreground_color
1024: 4c 42 10  -         jmp !done+
1027: ad 86 02  -         lda foreground_color
102a: 48        -         pha
102b: a9 02     -         lda #color
102d: 8d 86 02  -         sta foreground_color
1030: a2 00     -         ldx #$00
1032: bd ec 3c  -         lda msg,x
1035: f0 07     -         beq !done+
1037: 20 d2 ff  -         jsr kernal_chrout
103a: e8        -         inx
103b: 4c 32 10  -         jmp !loop-
103e: 68        -         pla
103f: 8d 86 02  -         sta foreground_color
1042: ee ee 3c  -         inc TEST_COUNT
1045: ad 86 02  -         lda foreground_color
1048: 48        -         pha
1049: a9 0e     -         lda #color
104b: 8d 86 02  -         sta foreground_color
104e: a2 00     -         ldx #$00
1050: bd 63 10  -         lda msg,x
1053: f0 07     -         beq !done+
1055: 20 d2 ff  -         jsr kernal_chrout
1058: e8        -         inx
1059: 4c 50 10  -         jmp !loop-
105c: 68        -         pla
105d: 8d 86 02  -         sta foreground_color
1060: 4c 69 10  -         jmp !done+
1063: 20        - memory: .byte spacebar
1064: 53 52 43  -         .text description
1067: 3a        -         .text ":"
1068: 00        -         .byte NULL
1069: a6 21     -         ldx rl(register.getValue())
106b: a4 22     -         ldy rh(register.getValue())
106d: e0 07     -         cpx #<value
106f: d0 25     -         bne !failed+
1071: c0 3d     -         cpy #>value
1073: d0 21     -         bne !failed+
1075: ee ef 3c  -         inc TEST_PASS_COUNT
1078: ad 86 02  -         lda foreground_color
107b: 48        -         pha
107c: a9 05     -         lda #color
107e: 8d 86 02  -         sta foreground_color
1081: a2 00     -         ldx #$00
1083: bd ea 3c  -         lda msg,x
1086: f0 07     -         beq !done+
1088: 20 d2 ff  -         jsr kernal_chrout
108b: e8        -         inx
108c: 4c 83 10  -         jmp !loop-
108f: 68        -         pla
1090: 8d 86 02  -         sta foreground_color
1093: 4c b1 10  -         jmp !done+
1096: ad 86 02  -         lda foreground_color
1099: 48        -         pha
109a: a9 02     -         lda #color
109c: 8d 86 02  -         sta foreground_color
109f: a2 00     -         ldx #$00
10a1: bd ec 3c  -         lda msg,x
10a4: f0 07     -         beq !done+
10a6: 20 d2 ff  -         jsr kernal_chrout
10a9: e8        -         inx
10aa: 4c a1 10  -         jmp !loop-
10ad: 68        -         pla
10ae: 8d 86 02  -         sta foreground_color
10b1: ee ee 3c  -         inc TEST_COUNT
10b4: ad 86 02  -         lda foreground_color
10b7: 48        -         pha
10b8: a9 0e     -         lda #color
10ba: 8d 86 02  -         sta foreground_color
10bd: a2 00     -         ldx #$00
10bf: bd d2 10  -         lda msg,x
10c2: f0 07     -         beq !done+
10c4: 20 d2 ff  -         jsr kernal_chrout
10c7: e8        -         inx
10c8: 4c bf 10  -         jmp !loop-
10cb: 68        -         pla
10cc: 8d 86 02  -         sta foreground_color
10cf: 4c d8 10  -         jmp !done+
10d2: 20        - memory: .byte spacebar
10d3: 44 53 54  -         .text description
10d6: 3a        -         .text ":"
10d7: 00        -         .byte NULL
10d8: a6 23     -         ldx rl(register.getValue())
10da: a4 24     -         ldy rh(register.getValue())
10dc: e0 09     -         cpx #<value
10de: d0 25     -         bne !failed+
10e0: c0 3d     -         cpy #>value
10e2: d0 21     -         bne !failed+
10e4: ee ef 3c  -         inc TEST_PASS_COUNT
10e7: ad 86 02  -         lda foreground_color
10ea: 48        -         pha
10eb: a9 05     -         lda #color
10ed: 8d 86 02  -         sta foreground_color
10f0: a2 00     -         ldx #$00
10f2: bd ea 3c  -         lda msg,x
10f5: f0 07     -         beq !done+
10f7: 20 d2 ff  -         jsr kernal_chrout
10fa: e8        -         inx
10fb: 4c f2 10  -         jmp !loop-
10fe: 68        -         pla
10ff: 8d 86 02  -         sta foreground_color
1102: 4c 20 11  -         jmp !done+
1105: ad 86 02  -         lda foreground_color
1108: 48        -         pha
1109: a9 02     -         lda #color
110b: 8d 86 02  -         sta foreground_color
110e: a2 00     -         ldx #$00
1110: bd ec 3c  -         lda msg,x
1113: f0 07     -         beq !done+
1115: 20 d2 ff  -         jsr kernal_chrout
1118: e8        -         inx
1119: 4c 10 11  -         jmp !loop-
111c: 68        -         pla
111d: 8d 86 02  -         sta foreground_color
1120: a2 00     -         ldx #$00
1122: bd 31 11  -         lda msg,x
1125: f0 07     -         beq !done+
1127: 20 d2 ff  -         jsr kernal_chrout
112a: e8        -         inx
112b: 4c 22 11  -         jmp !loop-
112e: 4c 33 11  -         jmp !done+
1131: 0d 00     - memory: .byte RETURN, NULL
1133: ae f0 3c  -         ldx TEST_NAME_COUNT
1136: e0 15     -         cpx #TESTS_PER_PAGE
1138: d0 5d     -         bne !exit+
113a: ad 86 02  -         lda foreground_color
113d: 48        -         pha
113e: a9 01     -         lda #color
1140: 8d 86 02  -         sta foreground_color
1143: a2 00     -         ldx #$00
1145: bd 58 11  -         lda msg,x
1148: f0 07     -         beq !done+
114a: 20 d2 ff  -         jsr kernal_chrout
114d: e8        -         inx
114e: 4c 45 11  -         jmp !loop-
1151: 68        -         pla
1152: 8d 86 02  -         sta foreground_color
1155: 4c 77 11  -         jmp !no_key+
1158: 0d        - memory: .byte RETURN
1159: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1169: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1175: 0d 00     -         .byte RETURN, NULL
1177: 20 9f ff  -         jsr scnkey  // scan keyboard
117a: 20 e4 ff  -         jsr getin	// put result into A
117d: f0 f8     -         beq !no_key-
117f: a2 00     -         ldx #$00
1181: bd 90 11  -         lda msg,x
1184: f0 07     -         beq !done+
1186: 20 d2 ff  -         jsr kernal_chrout
1189: e8        -         inx
118a: 4c 81 11  -         jmp !loop-
118d: 4c 92 11  -         jmp !done+
1190: 0d 00     - newline:.byte RETURN, NULL
1192: a2 00     -         ldx #$00
1194: 8e f0 3c  -         stx TEST_NAME_COUNT
1197: 60        -         rts
1198: ee f0 3c  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
119b: ad 86 02  -         lda foreground_color
119e: 48        -         pha
119f: a9 0f     -         lda #color
11a1: 8d 86 02  -         sta foreground_color
11a4: a2 00     -         ldx #$00
11a6: bd b9 11  -         lda msg,x
11a9: f0 07     -         beq !done+
11ab: 20 d2 ff  -         jsr kernal_chrout
11ae: e8        -         inx
11af: 4c a6 11  -         jmp !loop-
11b2: 68        -         pla
11b3: 8d 86 02  -         sta foreground_color
11b6: 4c d3 11  -         jmp !done+
11b9: 20 20     - memory: .fill spacing, spacebar
11bb: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
11cb: 52 45 43 54                                     
11cf: 2e 2e 2e  -         .text "..."
11d2: 00        -         .byte NULL
11d3: 20 31 08  -         jsr SW16
11d6: 15        -         .byte opcode(op, register)
11d7: 06 3d     -         .word address.getValue()
11d9: 65        -         .byte opcode($60, register) }
11da: 00        -         .byte $00 }
11db: ee ee 3c  -         inc TEST_COUNT
11de: ad 86 02  -         lda foreground_color
11e1: 48        -         pha
11e2: a9 0e     -         lda #color
11e4: 8d 86 02  -         sta foreground_color
11e7: a2 00     -         ldx #$00
11e9: bd fc 11  -         lda msg,x
11ec: f0 07     -         beq !done+
11ee: 20 d2 ff  -         jsr kernal_chrout
11f1: e8        -         inx
11f2: 4c e9 11  -         jmp !loop-
11f5: 68        -         pla
11f6: 8d 86 02  -         sta foreground_color
11f9: 4c 02 12  -         jmp !done+
11fc: 20        - memory: .byte spacebar
11fd: 41 43 43  -         .text description
1200: 3a        -         .text ":"
1201: 00        -         .byte NULL
1202: a6 17     -         ldx rl(register.getValue())
1204: a4 18     -         ldy rh(register.getValue())
1206: ec 06 3d  -         cpx address
1209: d0 26     -         bne !failed+
120b: cc 07 3d  -         cpy address+1
120e: d0 21     -         bne !failed+
1210: ee ef 3c  -         inc TEST_PASS_COUNT
1213: ad 86 02  -         lda foreground_color
1216: 48        -         pha
1217: a9 05     -         lda #color
1219: 8d 86 02  -         sta foreground_color
121c: a2 00     -         ldx #$00
121e: bd ea 3c  -         lda msg,x
1221: f0 07     -         beq !done+
1223: 20 d2 ff  -         jsr kernal_chrout
1226: e8        -         inx
1227: 4c 1e 12  -         jmp !loop-
122a: 68        -         pla
122b: 8d 86 02  -         sta foreground_color
122e: 4c 4c 12  -         jmp !done+
1231: ad 86 02  -         lda foreground_color
1234: 48        -         pha
1235: a9 02     -         lda #color
1237: 8d 86 02  -         sta foreground_color
123a: a2 00     -         ldx #$00
123c: bd ec 3c  -         lda msg,x
123f: f0 07     -         beq !done+
1241: 20 d2 ff  -         jsr kernal_chrout
1244: e8        -         inx
1245: 4c 3c 12  -         jmp !loop-
1248: 68        -         pla
1249: 8d 86 02  -         sta foreground_color
124c: ee ee 3c  -         inc TEST_COUNT
124f: ad 86 02  -         lda foreground_color
1252: 48        -         pha
1253: a9 0e     -         lda #color
1255: 8d 86 02  -         sta foreground_color
1258: a2 00     -         ldx #$00
125a: bd 6d 12  -         lda msg,x
125d: f0 07     -         beq !done+
125f: 20 d2 ff  -         jsr kernal_chrout
1262: e8        -         inx
1263: 4c 5a 12  -         jmp !loop-
1266: 68        -         pla
1267: 8d 86 02  -         sta foreground_color
126a: 4c 72 12  -         jmp !done+
126d: 20        - memory: .byte spacebar
126e: 2b 32     -         .text description
1270: 3a        -         .text ":"
1271: 00        -         .byte NULL
1272: a6 21     -         ldx rl(register.getValue())
1274: a4 22     -         ldy rh(register.getValue())
1276: e0 08     -         cpx #<value
1278: d0 25     -         bne !failed+
127a: c0 3d     -         cpy #>value
127c: d0 21     -         bne !failed+
127e: ee ef 3c  -         inc TEST_PASS_COUNT
1281: ad 86 02  -         lda foreground_color
1284: 48        -         pha
1285: a9 05     -         lda #color
1287: 8d 86 02  -         sta foreground_color
128a: a2 00     -         ldx #$00
128c: bd ea 3c  -         lda msg,x
128f: f0 07     -         beq !done+
1291: 20 d2 ff  -         jsr kernal_chrout
1294: e8        -         inx
1295: 4c 8c 12  -         jmp !loop-
1298: 68        -         pla
1299: 8d 86 02  -         sta foreground_color
129c: 4c ba 12  -         jmp !done+
129f: ad 86 02  -         lda foreground_color
12a2: 48        -         pha
12a3: a9 02     -         lda #color
12a5: 8d 86 02  -         sta foreground_color
12a8: a2 00     -         ldx #$00
12aa: bd ec 3c  -         lda msg,x
12ad: f0 07     -         beq !done+
12af: 20 d2 ff  -         jsr kernal_chrout
12b2: e8        -         inx
12b3: 4c aa 12  -         jmp !loop-
12b6: 68        -         pla
12b7: 8d 86 02  -         sta foreground_color
12ba: a2 00     -         ldx #$00
12bc: bd cb 12  -         lda msg,x
12bf: f0 07     -         beq !done+
12c1: 20 d2 ff  -         jsr kernal_chrout
12c4: e8        -         inx
12c5: 4c bc 12  -         jmp !loop-
12c8: 4c cd 12  -         jmp !done+
12cb: 0d 00     - memory: .byte RETURN, NULL
12cd: ae f0 3c  -         ldx TEST_NAME_COUNT
12d0: e0 15     -         cpx #TESTS_PER_PAGE
12d2: d0 5d     -         bne !exit+
12d4: ad 86 02  -         lda foreground_color
12d7: 48        -         pha
12d8: a9 01     -         lda #color
12da: 8d 86 02  -         sta foreground_color
12dd: a2 00     -         ldx #$00
12df: bd f2 12  -         lda msg,x
12e2: f0 07     -         beq !done+
12e4: 20 d2 ff  -         jsr kernal_chrout
12e7: e8        -         inx
12e8: 4c df 12  -         jmp !loop-
12eb: 68        -         pla
12ec: 8d 86 02  -         sta foreground_color
12ef: 4c 11 13  -         jmp !no_key+
12f2: 0d        - memory: .byte RETURN
12f3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1303: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
130f: 0d 00     -         .byte RETURN, NULL
1311: 20 9f ff  -         jsr scnkey  // scan keyboard
1314: 20 e4 ff  -         jsr getin	// put result into A
1317: f0 f8     -         beq !no_key-
1319: a2 00     -         ldx #$00
131b: bd 2a 13  -         lda msg,x
131e: f0 07     -         beq !done+
1320: 20 d2 ff  -         jsr kernal_chrout
1323: e8        -         inx
1324: 4c 1b 13  -         jmp !loop-
1327: 4c 2c 13  -         jmp !done+
132a: 0d 00     - newline:.byte RETURN, NULL
132c: a2 00     -         ldx #$00
132e: 8e f0 3c  -         stx TEST_NAME_COUNT
1331: 60        -         rts
1332: ee f0 3c  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
1335: ad 86 02  -         lda foreground_color
1338: 48        -         pha
1339: a9 0f     -         lda #color
133b: 8d 86 02  -         sta foreground_color
133e: a2 00     -         ldx #$00
1340: bd 53 13  -         lda msg,x
1343: f0 07     -         beq !done+
1345: 20 d2 ff  -         jsr kernal_chrout
1348: e8        -         inx
1349: 4c 40 13  -         jmp !loop-
134c: 68        -         pla
134d: 8d 86 02  -         sta foreground_color
1350: 4c 66 13  -         jmp !done+
1353: 20 20     - memory: .fill spacing, spacebar
1355: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
1362: 2e 2e 2e  -         .text "..."
1365: 00        -         .byte NULL
1366: 20 31 08  -         jsr SW16
1369: 15        -         .byte opcode(op, register)
136a: 06 3d     -         .word address.getValue()
136c: 16        -         .byte opcode(op, register)
136d: 08 3d     -         .word address.getValue()
136f: 65        -         .byte opcode($60, register) }
1370: 76        -         .byte opcode($70, register) }
1371: 00        -         .byte $00 }
1372: ee ee 3c  -         inc TEST_COUNT
1375: ad 86 02  -         lda foreground_color
1378: 48        -         pha
1379: a9 0e     -         lda #color
137b: 8d 86 02  -         sta foreground_color
137e: a2 00     -         ldx #$00
1380: bd 93 13  -         lda msg,x
1383: f0 07     -         beq !done+
1385: 20 d2 ff  -         jsr kernal_chrout
1388: e8        -         inx
1389: 4c 80 13  -         jmp !loop-
138c: 68        -         pla
138d: 8d 86 02  -         sta foreground_color
1390: 4c 99 13  -         jmp !done+
1393: 20        - memory: .byte spacebar
1394: 4d 45 4d  -         .text description
1397: 3a        -         .text ":"
1398: 00        -         .byte NULL
1399: a2 ff     -         ldx #$ff
139b: e8        -         inx
139c: e0 02     -         cpx #size
139e: f0 0b     -         beq !success+
13a0: bd 06 3d  -         lda source,x
13a3: dd 08 3d  -         cmp dest,x
13a6: f0 f3     -         beq !loop-
13a8: 4c cc 13  -         jmp !failed+
13ab: ee ef 3c  -         inc TEST_PASS_COUNT
13ae: ad 86 02  -         lda foreground_color
13b1: 48        -         pha
13b2: a9 05     -         lda #color
13b4: 8d 86 02  -         sta foreground_color
13b7: a2 00     -         ldx #$00
13b9: bd ea 3c  -         lda msg,x
13bc: f0 07     -         beq !done+
13be: 20 d2 ff  -         jsr kernal_chrout
13c1: e8        -         inx
13c2: 4c b9 13  -         jmp !loop-
13c5: 68        -         pla
13c6: 8d 86 02  -         sta foreground_color
13c9: 4c e7 13  -         jmp !done+
13cc: ad 86 02  -         lda foreground_color
13cf: 48        -         pha
13d0: a9 02     -         lda #color
13d2: 8d 86 02  -         sta foreground_color
13d5: a2 00     -         ldx #$00
13d7: bd ec 3c  -         lda msg,x
13da: f0 07     -         beq !done+
13dc: 20 d2 ff  -         jsr kernal_chrout
13df: e8        -         inx
13e0: 4c d7 13  -         jmp !loop-
13e3: 68        -         pla
13e4: 8d 86 02  -         sta foreground_color
13e7: ee ee 3c  -         inc TEST_COUNT
13ea: ad 86 02  -         lda foreground_color
13ed: 48        -         pha
13ee: a9 0e     -         lda #color
13f0: 8d 86 02  -         sta foreground_color
13f3: a2 00     -         ldx #$00
13f5: bd 08 14  -         lda msg,x
13f8: f0 07     -         beq !done+
13fa: 20 d2 ff  -         jsr kernal_chrout
13fd: e8        -         inx
13fe: 4c f5 13  -         jmp !loop-
1401: 68        -         pla
1402: 8d 86 02  -         sta foreground_color
1405: 4c 0e 14  -         jmp !done+
1408: 20        - memory: .byte spacebar
1409: 53 2b 32  -         .text description
140c: 3a        -         .text ":"
140d: 00        -         .byte NULL
140e: a6 21     -         ldx rl(register.getValue())
1410: a4 22     -         ldy rh(register.getValue())
1412: e0 08     -         cpx #<value
1414: d0 25     -         bne !failed+
1416: c0 3d     -         cpy #>value
1418: d0 21     -         bne !failed+
141a: ee ef 3c  -         inc TEST_PASS_COUNT
141d: ad 86 02  -         lda foreground_color
1420: 48        -         pha
1421: a9 05     -         lda #color
1423: 8d 86 02  -         sta foreground_color
1426: a2 00     -         ldx #$00
1428: bd ea 3c  -         lda msg,x
142b: f0 07     -         beq !done+
142d: 20 d2 ff  -         jsr kernal_chrout
1430: e8        -         inx
1431: 4c 28 14  -         jmp !loop-
1434: 68        -         pla
1435: 8d 86 02  -         sta foreground_color
1438: 4c 56 14  -         jmp !done+
143b: ad 86 02  -         lda foreground_color
143e: 48        -         pha
143f: a9 02     -         lda #color
1441: 8d 86 02  -         sta foreground_color
1444: a2 00     -         ldx #$00
1446: bd ec 3c  -         lda msg,x
1449: f0 07     -         beq !done+
144b: 20 d2 ff  -         jsr kernal_chrout
144e: e8        -         inx
144f: 4c 46 14  -         jmp !loop-
1452: 68        -         pla
1453: 8d 86 02  -         sta foreground_color
1456: ee ee 3c  -         inc TEST_COUNT
1459: ad 86 02  -         lda foreground_color
145c: 48        -         pha
145d: a9 0e     -         lda #color
145f: 8d 86 02  -         sta foreground_color
1462: a2 00     -         ldx #$00
1464: bd 77 14  -         lda msg,x
1467: f0 07     -         beq !done+
1469: 20 d2 ff  -         jsr kernal_chrout
146c: e8        -         inx
146d: 4c 64 14  -         jmp !loop-
1470: 68        -         pla
1471: 8d 86 02  -         sta foreground_color
1474: 4c 7d 14  -         jmp !done+
1477: 20        - memory: .byte spacebar
1478: 44 2b 32  -         .text description
147b: 3a        -         .text ":"
147c: 00        -         .byte NULL
147d: a6 23     -         ldx rl(register.getValue())
147f: a4 24     -         ldy rh(register.getValue())
1481: e0 0a     -         cpx #<value
1483: d0 25     -         bne !failed+
1485: c0 3d     -         cpy #>value
1487: d0 21     -         bne !failed+
1489: ee ef 3c  -         inc TEST_PASS_COUNT
148c: ad 86 02  -         lda foreground_color
148f: 48        -         pha
1490: a9 05     -         lda #color
1492: 8d 86 02  -         sta foreground_color
1495: a2 00     -         ldx #$00
1497: bd ea 3c  -         lda msg,x
149a: f0 07     -         beq !done+
149c: 20 d2 ff  -         jsr kernal_chrout
149f: e8        -         inx
14a0: 4c 97 14  -         jmp !loop-
14a3: 68        -         pla
14a4: 8d 86 02  -         sta foreground_color
14a7: 4c c5 14  -         jmp !done+
14aa: ad 86 02  -         lda foreground_color
14ad: 48        -         pha
14ae: a9 02     -         lda #color
14b0: 8d 86 02  -         sta foreground_color
14b3: a2 00     -         ldx #$00
14b5: bd ec 3c  -         lda msg,x
14b8: f0 07     -         beq !done+
14ba: 20 d2 ff  -         jsr kernal_chrout
14bd: e8        -         inx
14be: 4c b5 14  -         jmp !loop-
14c1: 68        -         pla
14c2: 8d 86 02  -         sta foreground_color
14c5: a2 00     -         ldx #$00
14c7: bd d6 14  -         lda msg,x
14ca: f0 07     -         beq !done+
14cc: 20 d2 ff  -         jsr kernal_chrout
14cf: e8        -         inx
14d0: 4c c7 14  -         jmp !loop-
14d3: 4c d8 14  -         jmp !done+
14d6: 0d 00     - memory: .byte RETURN, NULL
14d8: ae f0 3c  -         ldx TEST_NAME_COUNT
14db: e0 15     -         cpx #TESTS_PER_PAGE
14dd: d0 5d     -         bne !exit+
14df: ad 86 02  -         lda foreground_color
14e2: 48        -         pha
14e3: a9 01     -         lda #color
14e5: 8d 86 02  -         sta foreground_color
14e8: a2 00     -         ldx #$00
14ea: bd fd 14  -         lda msg,x
14ed: f0 07     -         beq !done+
14ef: 20 d2 ff  -         jsr kernal_chrout
14f2: e8        -         inx
14f3: 4c ea 14  -         jmp !loop-
14f6: 68        -         pla
14f7: 8d 86 02  -         sta foreground_color
14fa: 4c 1c 15  -         jmp !no_key+
14fd: 0d        - memory: .byte RETURN
14fe: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
150e: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
151a: 0d 00     -         .byte RETURN, NULL
151c: 20 9f ff  -         jsr scnkey  // scan keyboard
151f: 20 e4 ff  -         jsr getin	// put result into A
1522: f0 f8     -         beq !no_key-
1524: a2 00     -         ldx #$00
1526: bd 35 15  -         lda msg,x
1529: f0 07     -         beq !done+
152b: 20 d2 ff  -         jsr kernal_chrout
152e: e8        -         inx
152f: 4c 26 15  -         jmp !loop-
1532: 4c 37 15  -         jmp !done+
1535: 0d 00     - newline:.byte RETURN, NULL
1537: a2 00     -         ldx #$00
1539: 8e f0 3c  -         stx TEST_NAME_COUNT
153c: 60        -         rts
153d: ee f0 3c  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
1540: ad 86 02  -         lda foreground_color
1543: 48        -         pha
1544: a9 0f     -         lda #color
1546: 8d 86 02  -         sta foreground_color
1549: a2 00     -         ldx #$00
154b: bd 5e 15  -         lda msg,x
154e: f0 07     -         beq !done+
1550: 20 d2 ff  -         jsr kernal_chrout
1553: e8        -         inx
1554: 4c 4b 15  -         jmp !loop-
1557: 68        -         pla
1558: 8d 86 02  -         sta foreground_color
155b: 4c 72 15  -         jmp !done+
155e: 20 20     - memory: .fill spacing, spacebar
1560: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
156e: 2e 2e 2e  -         .text "..."
1571: 00        -         .byte NULL
1572: 20 31 08  -         jsr SW16
1575: 15        -         .byte opcode(op, register)
1576: 2c 3d     -         .word address.getValue()
1578: 10        -         .byte opcode(op, register)
1579: 04 00     -         .word address.getValue()
157b: 55        -         .byte opcode($50, register) }
157c: 0d        -         .byte $0d
157d: 16        -         .byte >(address.getValue()-1)
157e: 11        -         .byte <(address.getValue()-1)
157f: 10        -         .byte opcode(op, register)
1580: 05 00     -         .word address.getValue()
1582: 55        -         .byte opcode($50, register) }
1583: 0d        -         .byte $0d
1584: 16        -         .byte >(address.getValue()-1)
1585: 7c        -         .byte <(address.getValue()-1)
1586: 10        -         .byte opcode(op, register)
1587: 06 00     -         .word address.getValue()
1589: 55        -         .byte opcode($50, register) }
158a: 0d        -         .byte $0d
158b: 16        -         .byte >(address.getValue()-1)
158c: e7        -         .byte <(address.getValue()-1)
158d: 85        -         .byte opcode($80, register) }
158e: 0d        -         .byte $0d
158f: 17        -         .byte >(address.getValue()-1)
1590: 52        -         .byte <(address.getValue()-1)
1591: 85        -         .byte opcode($80, register) }
1592: 0d        -         .byte $0d
1593: 18        -         .byte >(address.getValue()-1)
1594: 6d        -         .byte <(address.getValue()-1)
1595: 85        -         .byte opcode($80, register) }
1596: 0d        -         .byte $0d
1597: 18        -         .byte >(address.getValue()-1)
1598: dc        -         .byte <(address.getValue()-1)
1599: 00        -         .byte $00 }
159a: a2 00     -         ldx #$00
159c: bd ab 15  -         lda msg,x
159f: f0 07     -         beq !done+
15a1: 20 d2 ff  -         jsr kernal_chrout
15a4: e8        -         inx
15a5: 4c 9c 15  -         jmp !loop-
15a8: 4c ad 15  -         jmp !done+
15ab: 0d 00     - memory: .byte RETURN, NULL
15ad: ae f0 3c  -         ldx TEST_NAME_COUNT
15b0: e0 15     -         cpx #TESTS_PER_PAGE
15b2: d0 5d     -         bne !exit+
15b4: ad 86 02  -         lda foreground_color
15b7: 48        -         pha
15b8: a9 01     -         lda #color
15ba: 8d 86 02  -         sta foreground_color
15bd: a2 00     -         ldx #$00
15bf: bd d2 15  -         lda msg,x
15c2: f0 07     -         beq !done+
15c4: 20 d2 ff  -         jsr kernal_chrout
15c7: e8        -         inx
15c8: 4c bf 15  -         jmp !loop-
15cb: 68        -         pla
15cc: 8d 86 02  -         sta foreground_color
15cf: 4c f1 15  -         jmp !no_key+
15d2: 0d        - memory: .byte RETURN
15d3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
15e3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
15ef: 0d 00     -         .byte RETURN, NULL
15f1: 20 9f ff  -         jsr scnkey  // scan keyboard
15f4: 20 e4 ff  -         jsr getin	// put result into A
15f7: f0 f8     -         beq !no_key-
15f9: a2 00     -         ldx #$00
15fb: bd 0a 16  -         lda msg,x
15fe: f0 07     -         beq !done+
1600: 20 d2 ff  -         jsr kernal_chrout
1603: e8        -         inx
1604: 4c fb 15  -         jmp !loop-
1607: 4c 0c 16  -         jmp !done+
160a: 0d 00     - newline:.byte RETURN, NULL
160c: a2 00     -         ldx #$00
160e: 8e f0 3c  -         stx TEST_NAME_COUNT
1611: 60        -         rts
1612: ee ee 3c  -         inc TEST_COUNT
1615: ad 86 02  -         lda foreground_color
1618: 48        -         pha
1619: a9 0e     -         lda #color
161b: 8d 86 02  -         sta foreground_color
161e: a2 00     -         ldx #$00
1620: bd 33 16  -         lda msg,x
1623: f0 07     -         beq !done+
1625: 20 d2 ff  -         jsr kernal_chrout
1628: e8        -         inx
1629: 4c 20 16  -         jmp !loop-
162c: 68        -         pla
162d: 8d 86 02  -         sta foreground_color
1630: 4c 37 16  -         jmp !done+
1633: 20        - memory: .byte spacebar
1634: 31        -         .text description
1635: 3a        -         .text ":"
1636: 00        -         .byte NULL
1637: a6 17     -         ldx rl(register.getValue())
1639: a4 18     -         ldy rh(register.getValue())
163b: ec 2c 3d  -         cpx address
163e: d0 21     -         bne !failed+
1640: ee ef 3c  -         inc TEST_PASS_COUNT
1643: ad 86 02  -         lda foreground_color
1646: 48        -         pha
1647: a9 05     -         lda #color
1649: 8d 86 02  -         sta foreground_color
164c: a2 00     -         ldx #$00
164e: bd ea 3c  -         lda msg,x
1651: f0 07     -         beq !done+
1653: 20 d2 ff  -         jsr kernal_chrout
1656: e8        -         inx
1657: 4c 4e 16  -         jmp !loop-
165a: 68        -         pla
165b: 8d 86 02  -         sta foreground_color
165e: 4c 7c 16  -         jmp !done+
1661: ad 86 02  -         lda foreground_color
1664: 48        -         pha
1665: a9 02     -         lda #color
1667: 8d 86 02  -         sta foreground_color
166a: a2 00     -         ldx #$00
166c: bd ec 3c  -         lda msg,x
166f: f0 07     -         beq !done+
1671: 20 d2 ff  -         jsr kernal_chrout
1674: e8        -         inx
1675: 4c 6c 16  -         jmp !loop-
1678: 68        -         pla
1679: 8d 86 02  -         sta foreground_color
167c: 60        -         rts
167d: ee ee 3c  -         inc TEST_COUNT
1680: ad 86 02  -         lda foreground_color
1683: 48        -         pha
1684: a9 0e     -         lda #color
1686: 8d 86 02  -         sta foreground_color
1689: a2 00     -         ldx #$00
168b: bd 9e 16  -         lda msg,x
168e: f0 07     -         beq !done+
1690: 20 d2 ff  -         jsr kernal_chrout
1693: e8        -         inx
1694: 4c 8b 16  -         jmp !loop-
1697: 68        -         pla
1698: 8d 86 02  -         sta foreground_color
169b: 4c a2 16  -         jmp !done+
169e: 20        - memory: .byte spacebar
169f: 32        -         .text description
16a0: 3a        -         .text ":"
16a1: 00        -         .byte NULL
16a2: a6 17     -         ldx rl(register.getValue())
16a4: a4 18     -         ldy rh(register.getValue())
16a6: ec 2d 3d  -         cpx address
16a9: d0 21     -         bne !failed+
16ab: ee ef 3c  -         inc TEST_PASS_COUNT
16ae: ad 86 02  -         lda foreground_color
16b1: 48        -         pha
16b2: a9 05     -         lda #color
16b4: 8d 86 02  -         sta foreground_color
16b7: a2 00     -         ldx #$00
16b9: bd ea 3c  -         lda msg,x
16bc: f0 07     -         beq !done+
16be: 20 d2 ff  -         jsr kernal_chrout
16c1: e8        -         inx
16c2: 4c b9 16  -         jmp !loop-
16c5: 68        -         pla
16c6: 8d 86 02  -         sta foreground_color
16c9: 4c e7 16  -         jmp !done+
16cc: ad 86 02  -         lda foreground_color
16cf: 48        -         pha
16d0: a9 02     -         lda #color
16d2: 8d 86 02  -         sta foreground_color
16d5: a2 00     -         ldx #$00
16d7: bd ec 3c  -         lda msg,x
16da: f0 07     -         beq !done+
16dc: 20 d2 ff  -         jsr kernal_chrout
16df: e8        -         inx
16e0: 4c d7 16  -         jmp !loop-
16e3: 68        -         pla
16e4: 8d 86 02  -         sta foreground_color
16e7: 60        -         rts
16e8: ee ee 3c  -         inc TEST_COUNT
16eb: ad 86 02  -         lda foreground_color
16ee: 48        -         pha
16ef: a9 0e     -         lda #color
16f1: 8d 86 02  -         sta foreground_color
16f4: a2 00     -         ldx #$00
16f6: bd 09 17  -         lda msg,x
16f9: f0 07     -         beq !done+
16fb: 20 d2 ff  -         jsr kernal_chrout
16fe: e8        -         inx
16ff: 4c f6 16  -         jmp !loop-
1702: 68        -         pla
1703: 8d 86 02  -         sta foreground_color
1706: 4c 0d 17  -         jmp !done+
1709: 20        - memory: .byte spacebar
170a: 33        -         .text description
170b: 3a        -         .text ":"
170c: 00        -         .byte NULL
170d: a6 17     -         ldx rl(register.getValue())
170f: a4 18     -         ldy rh(register.getValue())
1711: ec 2e 3d  -         cpx address
1714: d0 21     -         bne !failed+
1716: ee ef 3c  -         inc TEST_PASS_COUNT
1719: ad 86 02  -         lda foreground_color
171c: 48        -         pha
171d: a9 05     -         lda #color
171f: 8d 86 02  -         sta foreground_color
1722: a2 00     -         ldx #$00
1724: bd ea 3c  -         lda msg,x
1727: f0 07     -         beq !done+
1729: 20 d2 ff  -         jsr kernal_chrout
172c: e8        -         inx
172d: 4c 24 17  -         jmp !loop-
1730: 68        -         pla
1731: 8d 86 02  -         sta foreground_color
1734: 4c 52 17  -         jmp !done+
1737: ad 86 02  -         lda foreground_color
173a: 48        -         pha
173b: a9 02     -         lda #color
173d: 8d 86 02  -         sta foreground_color
1740: a2 00     -         ldx #$00
1742: bd ec 3c  -         lda msg,x
1745: f0 07     -         beq !done+
1747: 20 d2 ff  -         jsr kernal_chrout
174a: e8        -         inx
174b: 4c 42 17  -         jmp !loop-
174e: 68        -         pla
174f: 8d 86 02  -         sta foreground_color
1752: 60        -         rts
1753: a2 00     -         ldx #$00
1755: bd 64 17  -         lda msg,x
1758: f0 07     -         beq !done+
175a: 20 d2 ff  -         jsr kernal_chrout
175d: e8        -         inx
175e: 4c 55 17  -         jmp !loop-
1761: 4c 66 17  -         jmp !done+
1764: 0d 00     - memory: .byte RETURN, NULL
1766: ae f0 3c  -         ldx TEST_NAME_COUNT
1769: e0 15     -         cpx #TESTS_PER_PAGE
176b: d0 5d     -         bne !exit+
176d: ad 86 02  -         lda foreground_color
1770: 48        -         pha
1771: a9 01     -         lda #color
1773: 8d 86 02  -         sta foreground_color
1776: a2 00     -         ldx #$00
1778: bd 8b 17  -         lda msg,x
177b: f0 07     -         beq !done+
177d: 20 d2 ff  -         jsr kernal_chrout
1780: e8        -         inx
1781: 4c 78 17  -         jmp !loop-
1784: 68        -         pla
1785: 8d 86 02  -         sta foreground_color
1788: 4c aa 17  -         jmp !no_key+
178b: 0d        - memory: .byte RETURN
178c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
179c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
17a8: 0d 00     -         .byte RETURN, NULL
17aa: 20 9f ff  -         jsr scnkey  // scan keyboard
17ad: 20 e4 ff  -         jsr getin	// put result into A
17b0: f0 f8     -         beq !no_key-
17b2: a2 00     -         ldx #$00
17b4: bd c3 17  -         lda msg,x
17b7: f0 07     -         beq !done+
17b9: 20 d2 ff  -         jsr kernal_chrout
17bc: e8        -         inx
17bd: 4c b4 17  -         jmp !loop-
17c0: 4c c5 17  -         jmp !done+
17c3: 0d 00     - newline:.byte RETURN, NULL
17c5: a2 00     -         ldx #$00
17c7: 8e f0 3c  -         stx TEST_NAME_COUNT
17ca: ee f0 3c  -         inc TEST_NAME_COUNT
17cd: ad 86 02  -         lda foreground_color
17d0: 48        -         pha
17d1: a9 0f     -         lda #color
17d3: 8d 86 02  -         sta foreground_color
17d6: a2 00     -         ldx #$00
17d8: bd eb 17  -         lda msg,x
17db: f0 07     -         beq !done+
17dd: 20 d2 ff  -         jsr kernal_chrout
17e0: e8        -         inx
17e1: 4c d8 17  -         jmp !loop-
17e4: 68        -         pla
17e5: 8d 86 02  -         sta foreground_color
17e8: 4c ff 17  -         jmp !done+
17eb: 20 20     - memory: .fill spacing, spacebar
17ed: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
17fb: 2e 2e 2e  -         .text "..."
17fe: 00        -         .byte NULL
17ff: ee ee 3c  -         inc TEST_COUNT
1802: ad 86 02  -         lda foreground_color
1805: 48        -         pha
1806: a9 0e     -         lda #color
1808: 8d 86 02  -         sta foreground_color
180b: a2 00     -         ldx #$00
180d: bd 20 18  -         lda msg,x
1810: f0 07     -         beq !done+
1812: 20 d2 ff  -         jsr kernal_chrout
1815: e8        -         inx
1816: 4c 0d 18  -         jmp !loop-
1819: 68        -         pla
181a: 8d 86 02  -         sta foreground_color
181d: 4c 25 18  -         jmp !done+
1820: 20        - memory: .byte spacebar
1821: 50 33     -         .text description
1823: 3a        -         .text ":"
1824: 00        -         .byte NULL
1825: a6 17     -         ldx rl(register.getValue())
1827: a4 18     -         ldy rh(register.getValue())
1829: e0 06     -         cpx #<value
182b: d0 25     -         bne !failed+
182d: c0 00     -         cpy #>value
182f: d0 21     -         bne !failed+
1831: ee ef 3c  -         inc TEST_PASS_COUNT
1834: ad 86 02  -         lda foreground_color
1837: 48        -         pha
1838: a9 05     -         lda #color
183a: 8d 86 02  -         sta foreground_color
183d: a2 00     -         ldx #$00
183f: bd ea 3c  -         lda msg,x
1842: f0 07     -         beq !done+
1844: 20 d2 ff  -         jsr kernal_chrout
1847: e8        -         inx
1848: 4c 3f 18  -         jmp !loop-
184b: 68        -         pla
184c: 8d 86 02  -         sta foreground_color
184f: 4c 6d 18  -         jmp !done+
1852: ad 86 02  -         lda foreground_color
1855: 48        -         pha
1856: a9 02     -         lda #color
1858: 8d 86 02  -         sta foreground_color
185b: a2 00     -         ldx #$00
185d: bd ec 3c  -         lda msg,x
1860: f0 07     -         beq !done+
1862: 20 d2 ff  -         jsr kernal_chrout
1865: e8        -         inx
1866: 4c 5d 18  -         jmp !loop-
1869: 68        -         pla
186a: 8d 86 02  -         sta foreground_color
186d: 60        -         rts
186e: ee ee 3c  -         inc TEST_COUNT
1871: ad 86 02  -         lda foreground_color
1874: 48        -         pha
1875: a9 0e     -         lda #color
1877: 8d 86 02  -         sta foreground_color
187a: a2 00     -         ldx #$00
187c: bd 8f 18  -         lda msg,x
187f: f0 07     -         beq !done+
1881: 20 d2 ff  -         jsr kernal_chrout
1884: e8        -         inx
1885: 4c 7c 18  -         jmp !loop-
1888: 68        -         pla
1889: 8d 86 02  -         sta foreground_color
188c: 4c 94 18  -         jmp !done+
188f: 20        - memory: .byte spacebar
1890: 50 32     -         .text description
1892: 3a        -         .text ":"
1893: 00        -         .byte NULL
1894: a6 17     -         ldx rl(register.getValue())
1896: a4 18     -         ldy rh(register.getValue())
1898: e0 05     -         cpx #<value
189a: d0 25     -         bne !failed+
189c: c0 00     -         cpy #>value
189e: d0 21     -         bne !failed+
18a0: ee ef 3c  -         inc TEST_PASS_COUNT
18a3: ad 86 02  -         lda foreground_color
18a6: 48        -         pha
18a7: a9 05     -         lda #color
18a9: 8d 86 02  -         sta foreground_color
18ac: a2 00     -         ldx #$00
18ae: bd ea 3c  -         lda msg,x
18b1: f0 07     -         beq !done+
18b3: 20 d2 ff  -         jsr kernal_chrout
18b6: e8        -         inx
18b7: 4c ae 18  -         jmp !loop-
18ba: 68        -         pla
18bb: 8d 86 02  -         sta foreground_color
18be: 4c dc 18  -         jmp !done+
18c1: ad 86 02  -         lda foreground_color
18c4: 48        -         pha
18c5: a9 02     -         lda #color
18c7: 8d 86 02  -         sta foreground_color
18ca: a2 00     -         ldx #$00
18cc: bd ec 3c  -         lda msg,x
18cf: f0 07     -         beq !done+
18d1: 20 d2 ff  -         jsr kernal_chrout
18d4: e8        -         inx
18d5: 4c cc 18  -         jmp !loop-
18d8: 68        -         pla
18d9: 8d 86 02  -         sta foreground_color
18dc: 60        -         rts
18dd: ee ee 3c  -         inc TEST_COUNT
18e0: ad 86 02  -         lda foreground_color
18e3: 48        -         pha
18e4: a9 0e     -         lda #color
18e6: 8d 86 02  -         sta foreground_color
18e9: a2 00     -         ldx #$00
18eb: bd fe 18  -         lda msg,x
18ee: f0 07     -         beq !done+
18f0: 20 d2 ff  -         jsr kernal_chrout
18f3: e8        -         inx
18f4: 4c eb 18  -         jmp !loop-
18f7: 68        -         pla
18f8: 8d 86 02  -         sta foreground_color
18fb: 4c 03 19  -         jmp !done+
18fe: 20        - memory: .byte spacebar
18ff: 50 31     -         .text description
1901: 3a        -         .text ":"
1902: 00        -         .byte NULL
1903: a6 17     -         ldx rl(register.getValue())
1905: a4 18     -         ldy rh(register.getValue())
1907: e0 04     -         cpx #<value
1909: d0 25     -         bne !failed+
190b: c0 00     -         cpy #>value
190d: d0 21     -         bne !failed+
190f: ee ef 3c  -         inc TEST_PASS_COUNT
1912: ad 86 02  -         lda foreground_color
1915: 48        -         pha
1916: a9 05     -         lda #color
1918: 8d 86 02  -         sta foreground_color
191b: a2 00     -         ldx #$00
191d: bd ea 3c  -         lda msg,x
1920: f0 07     -         beq !done+
1922: 20 d2 ff  -         jsr kernal_chrout
1925: e8        -         inx
1926: 4c 1d 19  -         jmp !loop-
1929: 68        -         pla
192a: 8d 86 02  -         sta foreground_color
192d: 4c 4b 19  -         jmp !done+
1930: ad 86 02  -         lda foreground_color
1933: 48        -         pha
1934: a9 02     -         lda #color
1936: 8d 86 02  -         sta foreground_color
1939: a2 00     -         ldx #$00
193b: bd ec 3c  -         lda msg,x
193e: f0 07     -         beq !done+
1940: 20 d2 ff  -         jsr kernal_chrout
1943: e8        -         inx
1944: 4c 3b 19  -         jmp !loop-
1947: 68        -         pla
1948: 8d 86 02  -         sta foreground_color
194b: 60        -         rts
194c: ee f0 3c  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
194f: ad 86 02  -         lda foreground_color
1952: 48        -         pha
1953: a9 0f     -         lda #color
1955: 8d 86 02  -         sta foreground_color
1958: a2 00     -         ldx #$00
195a: bd 6d 19  -         lda msg,x
195d: f0 07     -         beq !done+
195f: 20 d2 ff  -         jsr kernal_chrout
1962: e8        -         inx
1963: 4c 5a 19  -         jmp !loop-
1966: 68        -         pla
1967: 8d 86 02  -         sta foreground_color
196a: 4c 80 19  -         jmp !done+
196d: 20 20     - memory: .fill spacing, spacebar
196f: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
197c: 2e 2e 2e  -         .text "..."
197f: 00        -         .byte NULL
1980: 20 31 08  -         jsr SW16
1983: 14        -         .byte opcode(op, register)
1984: 08 3d     -         .word address.getValue()
1986: 15        -         .byte opcode(op, register)
1987: 0a 3d     -         .word address.getValue()
1989: 84        -         .byte opcode($80, register) }
198a: 95        -         .byte opcode($90, register) }
198b: 84        -         .byte opcode($80, register) }
198c: 95        -         .byte opcode($90, register) }
198d: 00        -         .byte $00 }
198e: ee ee 3c  -         inc TEST_COUNT
1991: ad 86 02  -         lda foreground_color
1994: 48        -         pha
1995: a9 0e     -         lda #color
1997: 8d 86 02  -         sta foreground_color
199a: a2 00     -         ldx #$00
199c: bd af 19  -         lda msg,x
199f: f0 07     -         beq !done+
19a1: 20 d2 ff  -         jsr kernal_chrout
19a4: e8        -         inx
19a5: 4c 9c 19  -         jmp !loop-
19a8: 68        -         pla
19a9: 8d 86 02  -         sta foreground_color
19ac: 4c b5 19  -         jmp !done+
19af: 20        - memory: .byte spacebar
19b0: 4d 45 4d  -         .text description
19b3: 3a        -         .text ":"
19b4: 00        -         .byte NULL
19b5: a2 ff     -         ldx #$ff
19b7: e8        -         inx
19b8: e0 02     -         cpx #size
19ba: f0 0b     -         beq !success+
19bc: bd 06 3d  -         lda source,x
19bf: dd 06 3d  -         cmp dest,x
19c2: f0 f3     -         beq !loop-
19c4: 4c e8 19  -         jmp !failed+
19c7: ee ef 3c  -         inc TEST_PASS_COUNT
19ca: ad 86 02  -         lda foreground_color
19cd: 48        -         pha
19ce: a9 05     -         lda #color
19d0: 8d 86 02  -         sta foreground_color
19d3: a2 00     -         ldx #$00
19d5: bd ea 3c  -         lda msg,x
19d8: f0 07     -         beq !done+
19da: 20 d2 ff  -         jsr kernal_chrout
19dd: e8        -         inx
19de: 4c d5 19  -         jmp !loop-
19e1: 68        -         pla
19e2: 8d 86 02  -         sta foreground_color
19e5: 4c 03 1a  -         jmp !done+
19e8: ad 86 02  -         lda foreground_color
19eb: 48        -         pha
19ec: a9 02     -         lda #color
19ee: 8d 86 02  -         sta foreground_color
19f1: a2 00     -         ldx #$00
19f3: bd ec 3c  -         lda msg,x
19f6: f0 07     -         beq !done+
19f8: 20 d2 ff  -         jsr kernal_chrout
19fb: e8        -         inx
19fc: 4c f3 19  -         jmp !loop-
19ff: 68        -         pla
1a00: 8d 86 02  -         sta foreground_color
1a03: a2 00     -         ldx #$00
1a05: bd 14 1a  -         lda msg,x
1a08: f0 07     -         beq !done+
1a0a: 20 d2 ff  -         jsr kernal_chrout
1a0d: e8        -         inx
1a0e: 4c 05 1a  -         jmp !loop-
1a11: 4c 16 1a  -         jmp !done+
1a14: 0d 00     - memory: .byte RETURN, NULL
1a16: ae f0 3c  -         ldx TEST_NAME_COUNT
1a19: e0 15     -         cpx #TESTS_PER_PAGE
1a1b: d0 5d     -         bne !exit+
1a1d: ad 86 02  -         lda foreground_color
1a20: 48        -         pha
1a21: a9 01     -         lda #color
1a23: 8d 86 02  -         sta foreground_color
1a26: a2 00     -         ldx #$00
1a28: bd 3b 1a  -         lda msg,x
1a2b: f0 07     -         beq !done+
1a2d: 20 d2 ff  -         jsr kernal_chrout
1a30: e8        -         inx
1a31: 4c 28 1a  -         jmp !loop-
1a34: 68        -         pla
1a35: 8d 86 02  -         sta foreground_color
1a38: 4c 5a 1a  -         jmp !no_key+
1a3b: 0d        - memory: .byte RETURN
1a3c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1a4c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1a58: 0d 00     -         .byte RETURN, NULL
1a5a: 20 9f ff  -         jsr scnkey  // scan keyboard
1a5d: 20 e4 ff  -         jsr getin	// put result into A
1a60: f0 f8     -         beq !no_key-
1a62: a2 00     -         ldx #$00
1a64: bd 73 1a  -         lda msg,x
1a67: f0 07     -         beq !done+
1a69: 20 d2 ff  -         jsr kernal_chrout
1a6c: e8        -         inx
1a6d: 4c 64 1a  -         jmp !loop-
1a70: 4c 75 1a  -         jmp !done+
1a73: 0d 00     - newline:.byte RETURN, NULL
1a75: a2 00     -         ldx #$00
1a77: 8e f0 3c  -         stx TEST_NAME_COUNT
1a7a: 60        -         rts
1a7b: ee f0 3c  - ADD_TEST:inc TEST_NAME_COUNT
1a7e: ad 86 02  -         lda foreground_color
1a81: 48        -         pha
1a82: a9 0f     -         lda #color
1a84: 8d 86 02  -         sta foreground_color
1a87: a2 00     -         ldx #$00
1a89: bd 9c 1a  -         lda msg,x
1a8c: f0 07     -         beq !done+
1a8e: 20 d2 ff  -         jsr kernal_chrout
1a91: e8        -         inx
1a92: 4c 89 1a  -         jmp !loop-
1a95: 68        -         pla
1a96: 8d 86 02  -         sta foreground_color
1a99: 4c aa 1a  -         jmp !done+
1a9c: 20 20     - memory: .fill spacing, spacebar
1a9e: 41 44 44 49 54 49 4f 4e                          -         .text name
1aa6: 2e 2e 2e  -         .text "..."
1aa9: 00        -         .byte NULL
1aaa: 20 31 08  -         jsr SW16
1aad: 10        -         .byte opcode(op, register)
1aae: 34 76     -         .word address.getValue()
1ab0: 11        -         .byte opcode(op, register)
1ab1: 27 42     -         .word address.getValue()
1ab3: a1        -         .byte opcode($a0, register) }
1ab4: 0d        -         .byte $0d
1ab5: 1b        -         .byte >(address.getValue()-1)
1ab6: 9e        -         .byte <(address.getValue()-1)
1ab7: a0        -         .byte opcode($a0, register) }
1ab8: 00        -         .byte $00 }
1ab9: ee ee 3c  -         inc TEST_COUNT
1abc: ad 86 02  -         lda foreground_color
1abf: 48        -         pha
1ac0: a9 0e     -         lda #color
1ac2: 8d 86 02  -         sta foreground_color
1ac5: a2 00     -         ldx #$00
1ac7: bd da 1a  -         lda msg,x
1aca: f0 07     -         beq !done+
1acc: 20 d2 ff  -         jsr kernal_chrout
1acf: e8        -         inx
1ad0: 4c c7 1a  -         jmp !loop-
1ad3: 68        -         pla
1ad4: 8d 86 02  -         sta foreground_color
1ad7: 4c df 1a  -         jmp !done+
1ada: 20        - memory: .byte spacebar
1adb: 58 32     -         .text description
1add: 3a        -         .text ":"
1ade: 00        -         .byte NULL
1adf: a6 17     -         ldx rl(register.getValue())
1ae1: a4 18     -         ldy rh(register.getValue())
1ae3: e0 b6     -         cpx #<value
1ae5: d0 25     -         bne !failed+
1ae7: c0 70     -         cpy #>value
1ae9: d0 21     -         bne !failed+
1aeb: ee ef 3c  -         inc TEST_PASS_COUNT
1aee: ad 86 02  -         lda foreground_color
1af1: 48        -         pha
1af2: a9 05     -         lda #color
1af4: 8d 86 02  -         sta foreground_color
1af7: a2 00     -         ldx #$00
1af9: bd ea 3c  -         lda msg,x
1afc: f0 07     -         beq !done+
1afe: 20 d2 ff  -         jsr kernal_chrout
1b01: e8        -         inx
1b02: 4c f9 1a  -         jmp !loop-
1b05: 68        -         pla
1b06: 8d 86 02  -         sta foreground_color
1b09: 4c 27 1b  -         jmp !done+
1b0c: ad 86 02  -         lda foreground_color
1b0f: 48        -         pha
1b10: a9 02     -         lda #color
1b12: 8d 86 02  -         sta foreground_color
1b15: a2 00     -         ldx #$00
1b17: bd ec 3c  -         lda msg,x
1b1a: f0 07     -         beq !done+
1b1c: 20 d2 ff  -         jsr kernal_chrout
1b1f: e8        -         inx
1b20: 4c 17 1b  -         jmp !loop-
1b23: 68        -         pla
1b24: 8d 86 02  -         sta foreground_color
1b27: a2 00     -         ldx #$00
1b29: bd 38 1b  -         lda msg,x
1b2c: f0 07     -         beq !done+
1b2e: 20 d2 ff  -         jsr kernal_chrout
1b31: e8        -         inx
1b32: 4c 29 1b  -         jmp !loop-
1b35: 4c 3a 1b  -         jmp !done+
1b38: 0d 00     - memory: .byte RETURN, NULL
1b3a: ae f0 3c  -         ldx TEST_NAME_COUNT
1b3d: e0 15     -         cpx #TESTS_PER_PAGE
1b3f: d0 5d     -         bne !exit+
1b41: ad 86 02  -         lda foreground_color
1b44: 48        -         pha
1b45: a9 01     -         lda #color
1b47: 8d 86 02  -         sta foreground_color
1b4a: a2 00     -         ldx #$00
1b4c: bd 5f 1b  -         lda msg,x
1b4f: f0 07     -         beq !done+
1b51: 20 d2 ff  -         jsr kernal_chrout
1b54: e8        -         inx
1b55: 4c 4c 1b  -         jmp !loop-
1b58: 68        -         pla
1b59: 8d 86 02  -         sta foreground_color
1b5c: 4c 7e 1b  -         jmp !no_key+
1b5f: 0d        - memory: .byte RETURN
1b60: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1b70: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1b7c: 0d 00     -         .byte RETURN, NULL
1b7e: 20 9f ff  -         jsr scnkey  // scan keyboard
1b81: 20 e4 ff  -         jsr getin	// put result into A
1b84: f0 f8     -         beq !no_key-
1b86: a2 00     -         ldx #$00
1b88: bd 97 1b  -         lda msg,x
1b8b: f0 07     -         beq !done+
1b8d: 20 d2 ff  -         jsr kernal_chrout
1b90: e8        -         inx
1b91: 4c 88 1b  -         jmp !loop-
1b94: 4c 99 1b  -         jmp !done+
1b97: 0d 00     - newline:.byte RETURN, NULL
1b99: a2 00     -         ldx #$00
1b9b: 8e f0 3c  -         stx TEST_NAME_COUNT
1b9e: 60        -         rts
1b9f: ee ee 3c  -         inc TEST_COUNT
1ba2: ad 86 02  -         lda foreground_color
1ba5: 48        -         pha
1ba6: a9 0e     -         lda #color
1ba8: 8d 86 02  -         sta foreground_color
1bab: a2 00     -         ldx #$00
1bad: bd c0 1b  -         lda msg,x
1bb0: f0 07     -         beq !done+
1bb2: 20 d2 ff  -         jsr kernal_chrout
1bb5: e8        -         inx
1bb6: 4c ad 1b  -         jmp !loop-
1bb9: 68        -         pla
1bba: 8d 86 02  -         sta foreground_color
1bbd: 4c c6 1b  -         jmp !done+
1bc0: 20        - memory: .byte spacebar
1bc1: 41 44 44  -         .text description
1bc4: 3a        -         .text ":"
1bc5: 00        -         .byte NULL
1bc6: a6 17     -         ldx rl(register.getValue())
1bc8: a4 18     -         ldy rh(register.getValue())
1bca: e0 5b     -         cpx #<value
1bcc: d0 25     -         bne !failed+
1bce: c0 b8     -         cpy #>value
1bd0: d0 21     -         bne !failed+
1bd2: ee ef 3c  -         inc TEST_PASS_COUNT
1bd5: ad 86 02  -         lda foreground_color
1bd8: 48        -         pha
1bd9: a9 05     -         lda #color
1bdb: 8d 86 02  -         sta foreground_color
1bde: a2 00     -         ldx #$00
1be0: bd ea 3c  -         lda msg,x
1be3: f0 07     -         beq !done+
1be5: 20 d2 ff  -         jsr kernal_chrout
1be8: e8        -         inx
1be9: 4c e0 1b  -         jmp !loop-
1bec: 68        -         pla
1bed: 8d 86 02  -         sta foreground_color
1bf0: 4c 0e 1c  -         jmp !done+
1bf3: ad 86 02  -         lda foreground_color
1bf6: 48        -         pha
1bf7: a9 02     -         lda #color
1bf9: 8d 86 02  -         sta foreground_color
1bfc: a2 00     -         ldx #$00
1bfe: bd ec 3c  -         lda msg,x
1c01: f0 07     -         beq !done+
1c03: 20 d2 ff  -         jsr kernal_chrout
1c06: e8        -         inx
1c07: 4c fe 1b  -         jmp !loop-
1c0a: 68        -         pla
1c0b: 8d 86 02  -         sta foreground_color
1c0e: 60        -         rts
1c0f: ee f0 3c  - SUBTRACT_TEST:inc TEST_NAME_COUNT
1c12: ad 86 02  -         lda foreground_color
1c15: 48        -         pha
1c16: a9 0f     -         lda #color
1c18: 8d 86 02  -         sta foreground_color
1c1b: a2 00     -         ldx #$00
1c1d: bd 30 1c  -         lda msg,x
1c20: f0 07     -         beq !done+
1c22: 20 d2 ff  -         jsr kernal_chrout
1c25: e8        -         inx
1c26: 4c 1d 1c  -         jmp !loop-
1c29: 68        -         pla
1c2a: 8d 86 02  -         sta foreground_color
1c2d: 4c 41 1c  -         jmp !done+
1c30: 20 20     - memory: .fill spacing, spacebar
1c32: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
1c3d: 2e 2e 2e  -         .text "..."
1c40: 00        -         .byte NULL
1c41: 20 31 08  -         jsr SW16
1c44: 10        -         .byte opcode(op, register)
1c45: 34 76     -         .word address.getValue()
1c47: 11        -         .byte opcode(op, register)
1c48: 27 42     -         .word address.getValue()
1c4a: b1        -         .byte opcode($b0, register) }
1c4b: 0d        -         .byte $0d
1c4c: 1d        -         .byte >(address.getValue()-1)
1c4d: 34        -         .byte <(address.getValue()-1)
1c4e: b0        -         .byte opcode($b0, register) }
1c4f: 00        -         .byte $00 }
1c50: ee ee 3c  -         inc TEST_COUNT
1c53: ad 86 02  -         lda foreground_color
1c56: 48        -         pha
1c57: a9 0e     -         lda #color
1c59: 8d 86 02  -         sta foreground_color
1c5c: a2 00     -         ldx #$00
1c5e: bd 71 1c  -         lda msg,x
1c61: f0 07     -         beq !done+
1c63: 20 d2 ff  -         jsr kernal_chrout
1c66: e8        -         inx
1c67: 4c 5e 1c  -         jmp !loop-
1c6a: 68        -         pla
1c6b: 8d 86 02  -         sta foreground_color
1c6e: 4c 75 1c  -         jmp !done+
1c71: 20        - memory: .byte spacebar
1c72: 30        -         .text description
1c73: 3a        -         .text ":"
1c74: 00        -         .byte NULL
1c75: a6 17     -         ldx rl(register.getValue())
1c77: a4 18     -         ldy rh(register.getValue())
1c79: e0 00     -         cpx #<value
1c7b: d0 25     -         bne !failed+
1c7d: c0 00     -         cpy #>value
1c7f: d0 21     -         bne !failed+
1c81: ee ef 3c  -         inc TEST_PASS_COUNT
1c84: ad 86 02  -         lda foreground_color
1c87: 48        -         pha
1c88: a9 05     -         lda #color
1c8a: 8d 86 02  -         sta foreground_color
1c8d: a2 00     -         ldx #$00
1c8f: bd ea 3c  -         lda msg,x
1c92: f0 07     -         beq !done+
1c94: 20 d2 ff  -         jsr kernal_chrout
1c97: e8        -         inx
1c98: 4c 8f 1c  -         jmp !loop-
1c9b: 68        -         pla
1c9c: 8d 86 02  -         sta foreground_color
1c9f: 4c bd 1c  -         jmp !done+
1ca2: ad 86 02  -         lda foreground_color
1ca5: 48        -         pha
1ca6: a9 02     -         lda #color
1ca8: 8d 86 02  -         sta foreground_color
1cab: a2 00     -         ldx #$00
1cad: bd ec 3c  -         lda msg,x
1cb0: f0 07     -         beq !done+
1cb2: 20 d2 ff  -         jsr kernal_chrout
1cb5: e8        -         inx
1cb6: 4c ad 1c  -         jmp !loop-
1cb9: 68        -         pla
1cba: 8d 86 02  -         sta foreground_color
1cbd: a2 00     -         ldx #$00
1cbf: bd ce 1c  -         lda msg,x
1cc2: f0 07     -         beq !done+
1cc4: 20 d2 ff  -         jsr kernal_chrout
1cc7: e8        -         inx
1cc8: 4c bf 1c  -         jmp !loop-
1ccb: 4c d0 1c  -         jmp !done+
1cce: 0d 00     - memory: .byte RETURN, NULL
1cd0: ae f0 3c  -         ldx TEST_NAME_COUNT
1cd3: e0 15     -         cpx #TESTS_PER_PAGE
1cd5: d0 5d     -         bne !exit+
1cd7: ad 86 02  -         lda foreground_color
1cda: 48        -         pha
1cdb: a9 01     -         lda #color
1cdd: 8d 86 02  -         sta foreground_color
1ce0: a2 00     -         ldx #$00
1ce2: bd f5 1c  -         lda msg,x
1ce5: f0 07     -         beq !done+
1ce7: 20 d2 ff  -         jsr kernal_chrout
1cea: e8        -         inx
1ceb: 4c e2 1c  -         jmp !loop-
1cee: 68        -         pla
1cef: 8d 86 02  -         sta foreground_color
1cf2: 4c 14 1d  -         jmp !no_key+
1cf5: 0d        - memory: .byte RETURN
1cf6: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1d06: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1d12: 0d 00     -         .byte RETURN, NULL
1d14: 20 9f ff  -         jsr scnkey  // scan keyboard
1d17: 20 e4 ff  -         jsr getin	// put result into A
1d1a: f0 f8     -         beq !no_key-
1d1c: a2 00     -         ldx #$00
1d1e: bd 2d 1d  -         lda msg,x
1d21: f0 07     -         beq !done+
1d23: 20 d2 ff  -         jsr kernal_chrout
1d26: e8        -         inx
1d27: 4c 1e 1d  -         jmp !loop-
1d2a: 4c 2f 1d  -         jmp !done+
1d2d: 0d 00     - newline:.byte RETURN, NULL
1d2f: a2 00     -         ldx #$00
1d31: 8e f0 3c  -         stx TEST_NAME_COUNT
1d34: 60        -         rts
1d35: ee ee 3c  -         inc TEST_COUNT
1d38: ad 86 02  -         lda foreground_color
1d3b: 48        -         pha
1d3c: a9 0e     -         lda #color
1d3e: 8d 86 02  -         sta foreground_color
1d41: a2 00     -         ldx #$00
1d43: bd 56 1d  -         lda msg,x
1d46: f0 07     -         beq !done+
1d48: 20 d2 ff  -         jsr kernal_chrout
1d4b: e8        -         inx
1d4c: 4c 43 1d  -         jmp !loop-
1d4f: 68        -         pla
1d50: 8d 86 02  -         sta foreground_color
1d53: 4c 5c 1d  -         jmp !done+
1d56: 20        - memory: .byte spacebar
1d57: 53 55 42  -         .text description
1d5a: 3a        -         .text ":"
1d5b: 00        -         .byte NULL
1d5c: a6 17     -         ldx rl(register.getValue())
1d5e: a4 18     -         ldy rh(register.getValue())
1d60: e0 0d     -         cpx #<value
1d62: d0 25     -         bne !failed+
1d64: c0 34     -         cpy #>value
1d66: d0 21     -         bne !failed+
1d68: ee ef 3c  -         inc TEST_PASS_COUNT
1d6b: ad 86 02  -         lda foreground_color
1d6e: 48        -         pha
1d6f: a9 05     -         lda #color
1d71: 8d 86 02  -         sta foreground_color
1d74: a2 00     -         ldx #$00
1d76: bd ea 3c  -         lda msg,x
1d79: f0 07     -         beq !done+
1d7b: 20 d2 ff  -         jsr kernal_chrout
1d7e: e8        -         inx
1d7f: 4c 76 1d  -         jmp !loop-
1d82: 68        -         pla
1d83: 8d 86 02  -         sta foreground_color
1d86: 4c a4 1d  -         jmp !done+
1d89: ad 86 02  -         lda foreground_color
1d8c: 48        -         pha
1d8d: a9 02     -         lda #color
1d8f: 8d 86 02  -         sta foreground_color
1d92: a2 00     -         ldx #$00
1d94: bd ec 3c  -         lda msg,x
1d97: f0 07     -         beq !done+
1d99: 20 d2 ff  -         jsr kernal_chrout
1d9c: e8        -         inx
1d9d: 4c 94 1d  -         jmp !loop-
1da0: 68        -         pla
1da1: 8d 86 02  -         sta foreground_color
1da4: 60        -         rts	
1da5: ee f0 3c  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
1da8: ad 86 02  -         lda foreground_color
1dab: 48        -         pha
1dac: a9 0f     -         lda #color
1dae: 8d 86 02  -         sta foreground_color
1db1: a2 00     -         ldx #$00
1db3: bd c6 1d  -         lda msg,x
1db6: f0 07     -         beq !done+
1db8: 20 d2 ff  -         jsr kernal_chrout
1dbb: e8        -         inx
1dbc: 4c b3 1d  -         jmp !loop-
1dbf: 68        -         pla
1dc0: 8d 86 02  -         sta foreground_color
1dc3: 4c d9 1d  -         jmp !done+
1dc6: 20 20     - memory: .fill spacing, spacebar
1dc8: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
1dd5: 2e 2e 2e  -         .text "..."
1dd8: 00        -         .byte NULL
1dd9: 20 31 08  -         jsr SW16
1ddc: 15        -         .byte opcode(op, register)
1ddd: 2c 3d     -         .word address.getValue()
1ddf: 10        -         .byte opcode(op, register)
1de0: 06 3d     -         .word address.getValue()
1de2: 75        -         .byte opcode($70, register) }
1de3: 0d        -         .byte $0d
1de4: 1e        -         .byte >(address.getValue()-1)
1de5: d8        -         .byte <(address.getValue()-1)
1de6: 10        -         .byte opcode(op, register)
1de7: 08 3d     -         .word address.getValue()
1de9: 75        -         .byte opcode($70, register) }
1dea: 0d        -         .byte $0d
1deb: 1f        -         .byte >(address.getValue()-1)
1dec: 48        -         .byte <(address.getValue()-1)
1ded: c5        -         .byte opcode($c0, register) }
1dee: 0d        -         .byte $0d
1def: 1f        -         .byte >(address.getValue()-1)
1df0: b8        -         .byte <(address.getValue()-1)
1df1: c5        -         .byte opcode($c0, register) }
1df2: 00        -         .byte $00 }
1df3: ee ee 3c  -         inc TEST_COUNT
1df6: ad 86 02  -         lda foreground_color
1df9: 48        -         pha
1dfa: a9 0e     -         lda #color
1dfc: 8d 86 02  -         sta foreground_color
1dff: a2 00     -         ldx #$00
1e01: bd 14 1e  -         lda msg,x
1e04: f0 07     -         beq !done+
1e06: 20 d2 ff  -         jsr kernal_chrout
1e09: e8        -         inx
1e0a: 4c 01 1e  -         jmp !loop-
1e0d: 68        -         pla
1e0e: 8d 86 02  -         sta foreground_color
1e11: 4c 19 1e  -         jmp !done+
1e14: 20        - memory: .byte spacebar
1e15: 50 31     -         .text description
1e17: 3a        -         .text ":"
1e18: 00        -         .byte NULL
1e19: a6 17     -         ldx addr
1e1b: e0 06     -         cpx #<value
1e1d: d0 27     -         bne !failed+
1e1f: a6 18     -         ldx addr+1
1e21: e0 3d     -         cpx #>value
1e23: d0 21     -         bne !failed+
1e25: ee ef 3c  -         inc TEST_PASS_COUNT
1e28: ad 86 02  -         lda foreground_color
1e2b: 48        -         pha
1e2c: a9 05     -         lda #color
1e2e: 8d 86 02  -         sta foreground_color
1e31: a2 00     -         ldx #$00
1e33: bd ea 3c  -         lda msg,x
1e36: f0 07     -         beq !done+
1e38: 20 d2 ff  -         jsr kernal_chrout
1e3b: e8        -         inx
1e3c: 4c 33 1e  -         jmp !loop-
1e3f: 68        -         pla
1e40: 8d 86 02  -         sta foreground_color
1e43: 4c 61 1e  -         jmp !done+
1e46: ad 86 02  -         lda foreground_color
1e49: 48        -         pha
1e4a: a9 02     -         lda #color
1e4c: 8d 86 02  -         sta foreground_color
1e4f: a2 00     -         ldx #$00
1e51: bd ec 3c  -         lda msg,x
1e54: f0 07     -         beq !done+
1e56: 20 d2 ff  -         jsr kernal_chrout
1e59: e8        -         inx
1e5a: 4c 51 1e  -         jmp !loop-
1e5d: 68        -         pla
1e5e: 8d 86 02  -         sta foreground_color
1e61: a2 00     -         ldx #$00
1e63: bd 72 1e  -         lda msg,x
1e66: f0 07     -         beq !done+
1e68: 20 d2 ff  -         jsr kernal_chrout
1e6b: e8        -         inx
1e6c: 4c 63 1e  -         jmp !loop-
1e6f: 4c 74 1e  -         jmp !done+
1e72: 0d 00     - memory: .byte RETURN, NULL
1e74: ae f0 3c  -         ldx TEST_NAME_COUNT
1e77: e0 15     -         cpx #TESTS_PER_PAGE
1e79: d0 5d     -         bne !exit+
1e7b: ad 86 02  -         lda foreground_color
1e7e: 48        -         pha
1e7f: a9 01     -         lda #color
1e81: 8d 86 02  -         sta foreground_color
1e84: a2 00     -         ldx #$00
1e86: bd 99 1e  -         lda msg,x
1e89: f0 07     -         beq !done+
1e8b: 20 d2 ff  -         jsr kernal_chrout
1e8e: e8        -         inx
1e8f: 4c 86 1e  -         jmp !loop-
1e92: 68        -         pla
1e93: 8d 86 02  -         sta foreground_color
1e96: 4c b8 1e  -         jmp !no_key+
1e99: 0d        - memory: .byte RETURN
1e9a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
1eaa: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
1eb6: 0d 00     -         .byte RETURN, NULL
1eb8: 20 9f ff  -         jsr scnkey  // scan keyboard
1ebb: 20 e4 ff  -         jsr getin	// put result into A
1ebe: f0 f8     -         beq !no_key-
1ec0: a2 00     -         ldx #$00
1ec2: bd d1 1e  -         lda msg,x
1ec5: f0 07     -         beq !done+
1ec7: 20 d2 ff  -         jsr kernal_chrout
1eca: e8        -         inx
1ecb: 4c c2 1e  -         jmp !loop-
1ece: 4c d3 1e  -         jmp !done+
1ed1: 0d 00     - newline:.byte RETURN, NULL
1ed3: a2 00     -         ldx #$00
1ed5: 8e f0 3c  -         stx TEST_NAME_COUNT
1ed8: 60        -         rts
1ed9: ee ee 3c  -         inc TEST_COUNT
1edc: ad 86 02  -         lda foreground_color
1edf: 48        -         pha
1ee0: a9 0e     -         lda #color
1ee2: 8d 86 02  -         sta foreground_color
1ee5: a2 00     -         ldx #$00
1ee7: bd fa 1e  -         lda msg,x
1eea: f0 07     -         beq !done+
1eec: 20 d2 ff  -         jsr kernal_chrout
1eef: e8        -         inx
1ef0: 4c e7 1e  -         jmp !loop-
1ef3: 68        -         pla
1ef4: 8d 86 02  -         sta foreground_color
1ef7: 4c fe 1e  -         jmp !done+
1efa: 20        - memory: .byte spacebar
1efb: 31        -         .text description
1efc: 3a        -         .text ":"
1efd: 00        -         .byte NULL
1efe: ae 2c 3d  -         ldx addr
1f01: e0 06     -         cpx #<value
1f03: d0 28     -         bne !failed+
1f05: ae 2d 3d  -         ldx addr+1
1f08: e0 3d     -         cpx #>value
1f0a: d0 21     -         bne !failed+
1f0c: ee ef 3c  -         inc TEST_PASS_COUNT
1f0f: ad 86 02  -         lda foreground_color
1f12: 48        -         pha
1f13: a9 05     -         lda #color
1f15: 8d 86 02  -         sta foreground_color
1f18: a2 00     -         ldx #$00
1f1a: bd ea 3c  -         lda msg,x
1f1d: f0 07     -         beq !done+
1f1f: 20 d2 ff  -         jsr kernal_chrout
1f22: e8        -         inx
1f23: 4c 1a 1f  -         jmp !loop-
1f26: 68        -         pla
1f27: 8d 86 02  -         sta foreground_color
1f2a: 4c 48 1f  -         jmp !done+
1f2d: ad 86 02  -         lda foreground_color
1f30: 48        -         pha
1f31: a9 02     -         lda #color
1f33: 8d 86 02  -         sta foreground_color
1f36: a2 00     -         ldx #$00
1f38: bd ec 3c  -         lda msg,x
1f3b: f0 07     -         beq !done+
1f3d: 20 d2 ff  -         jsr kernal_chrout
1f40: e8        -         inx
1f41: 4c 38 1f  -         jmp !loop-
1f44: 68        -         pla
1f45: 8d 86 02  -         sta foreground_color
1f48: 60        -         rts
1f49: ee ee 3c  -         inc TEST_COUNT
1f4c: ad 86 02  -         lda foreground_color
1f4f: 48        -         pha
1f50: a9 0e     -         lda #color
1f52: 8d 86 02  -         sta foreground_color
1f55: a2 00     -         ldx #$00
1f57: bd 6a 1f  -         lda msg,x
1f5a: f0 07     -         beq !done+
1f5c: 20 d2 ff  -         jsr kernal_chrout
1f5f: e8        -         inx
1f60: 4c 57 1f  -         jmp !loop-
1f63: 68        -         pla
1f64: 8d 86 02  -         sta foreground_color
1f67: 4c 6e 1f  -         jmp !done+
1f6a: 20        - memory: .byte spacebar
1f6b: 32        -         .text description
1f6c: 3a        -         .text ":"
1f6d: 00        -         .byte NULL
1f6e: ae 2e 3d  -         ldx addr
1f71: e0 08     -         cpx #<value
1f73: d0 28     -         bne !failed+
1f75: ae 2f 3d  -         ldx addr+1
1f78: e0 3d     -         cpx #>value
1f7a: d0 21     -         bne !failed+
1f7c: ee ef 3c  -         inc TEST_PASS_COUNT
1f7f: ad 86 02  -         lda foreground_color
1f82: 48        -         pha
1f83: a9 05     -         lda #color
1f85: 8d 86 02  -         sta foreground_color
1f88: a2 00     -         ldx #$00
1f8a: bd ea 3c  -         lda msg,x
1f8d: f0 07     -         beq !done+
1f8f: 20 d2 ff  -         jsr kernal_chrout
1f92: e8        -         inx
1f93: 4c 8a 1f  -         jmp !loop-
1f96: 68        -         pla
1f97: 8d 86 02  -         sta foreground_color
1f9a: 4c b8 1f  -         jmp !done+
1f9d: ad 86 02  -         lda foreground_color
1fa0: 48        -         pha
1fa1: a9 02     -         lda #color
1fa3: 8d 86 02  -         sta foreground_color
1fa6: a2 00     -         ldx #$00
1fa8: bd ec 3c  -         lda msg,x
1fab: f0 07     -         beq !done+
1fad: 20 d2 ff  -         jsr kernal_chrout
1fb0: e8        -         inx
1fb1: 4c a8 1f  -         jmp !loop-
1fb4: 68        -         pla
1fb5: 8d 86 02  -         sta foreground_color
1fb8: 60        -         rts
1fb9: ee ee 3c  -         inc TEST_COUNT
1fbc: ad 86 02  -         lda foreground_color
1fbf: 48        -         pha
1fc0: a9 0e     -         lda #color
1fc2: 8d 86 02  -         sta foreground_color
1fc5: a2 00     -         ldx #$00
1fc7: bd da 1f  -         lda msg,x
1fca: f0 07     -         beq !done+
1fcc: 20 d2 ff  -         jsr kernal_chrout
1fcf: e8        -         inx
1fd0: 4c c7 1f  -         jmp !loop-
1fd3: 68        -         pla
1fd4: 8d 86 02  -         sta foreground_color
1fd7: 4c df 1f  -         jmp !done+
1fda: 20        - memory: .byte spacebar
1fdb: 50 32     -         .text description
1fdd: 3a        -         .text ":"
1fde: 00        -         .byte NULL
1fdf: a6 17     -         ldx addr
1fe1: e0 08     -         cpx #<value
1fe3: d0 27     -         bne !failed+
1fe5: a6 18     -         ldx addr+1
1fe7: e0 3d     -         cpx #>value
1fe9: d0 21     -         bne !failed+
1feb: ee ef 3c  -         inc TEST_PASS_COUNT
1fee: ad 86 02  -         lda foreground_color
1ff1: 48        -         pha
1ff2: a9 05     -         lda #color
1ff4: 8d 86 02  -         sta foreground_color
1ff7: a2 00     -         ldx #$00
1ff9: bd ea 3c  -         lda msg,x
1ffc: f0 07     -         beq !done+
1ffe: 20 d2 ff  -         jsr kernal_chrout
2001: e8        -         inx
2002: 4c f9 1f  -         jmp !loop-
2005: 68        -         pla
2006: 8d 86 02  -         sta foreground_color
2009: 4c 27 20  -         jmp !done+
200c: ad 86 02  -         lda foreground_color
200f: 48        -         pha
2010: a9 02     -         lda #color
2012: 8d 86 02  -         sta foreground_color
2015: a2 00     -         ldx #$00
2017: bd ec 3c  -         lda msg,x
201a: f0 07     -         beq !done+
201c: 20 d2 ff  -         jsr kernal_chrout
201f: e8        -         inx
2020: 4c 17 20  -         jmp !loop-
2023: 68        -         pla
2024: 8d 86 02  -         sta foreground_color
2027: 60        -         rts
2028: ee f0 3c  - COMPARE_TEST:inc TEST_NAME_COUNT
202b: ad 86 02  -         lda foreground_color
202e: 48        -         pha
202f: a9 0f     -         lda #color
2031: 8d 86 02  -         sta foreground_color
2034: a2 00     -         ldx #$00
2036: bd 49 20  -         lda msg,x
2039: f0 07     -         beq !done+
203b: 20 d2 ff  -         jsr kernal_chrout
203e: e8        -         inx
203f: 4c 36 20  -         jmp !loop-
2042: 68        -         pla
2043: 8d 86 02  -         sta foreground_color
2046: 4c 56 20  -         jmp !done+
2049: 20 20     - memory: .fill spacing, spacebar
204b: 43 4f 4d 50 41 52 45                             -         .text name
2052: 2e 2e 2e  -         .text "..."
2055: 00        -         .byte NULL
2056: 20 31 08  -         jsr SW16
2059: 15        -         .byte opcode(op, register)
205a: 0c 3d     -         .word address.getValue()
205c: 16        -         .byte opcode(op, register)
205d: 1c 3d     -         .word address.getValue()
205f: 14        -         .byte opcode(op, register)
2060: 00 00     -         .word address.getValue()
2062: e4        -         .byte opcode($e0, register) }
2063: b0        -         .byte opcode($b0, register) }
2064: 75        -         .byte opcode($70, register) }
2065: 25        -         .byte opcode($20, register) }
2066: d6        -         .byte opcode($d0, register) }
2067: 02 f9     -         .byte $02, effective_address(ea,*) }
2069: 00        -         .byte $00 }
206a: ee ee 3c  -         inc TEST_COUNT
206d: ad 86 02  -         lda foreground_color
2070: 48        -         pha
2071: a9 0e     -         lda #color
2073: 8d 86 02  -         sta foreground_color
2076: a2 00     -         ldx #$00
2078: bd 8b 20  -         lda msg,x
207b: f0 07     -         beq !done+
207d: 20 d2 ff  -         jsr kernal_chrout
2080: e8        -         inx
2081: 4c 78 20  -         jmp !loop-
2084: 68        -         pla
2085: 8d 86 02  -         sta foreground_color
2088: 4c 93 20  -         jmp !done+
208b: 20        - memory: .byte spacebar
208c: 43 4f 55 4e 54                                   -         .text description
2091: 3a        -         .text ":"
2092: 00        -         .byte NULL
2093: a6 1f     -         ldx rl(register.getValue())
2095: a4 20     -         ldy rh(register.getValue())
2097: e0 08     -         cpx #<value
2099: d0 25     -         bne !failed+
209b: c0 00     -         cpy #>value
209d: d0 21     -         bne !failed+
209f: ee ef 3c  -         inc TEST_PASS_COUNT
20a2: ad 86 02  -         lda foreground_color
20a5: 48        -         pha
20a6: a9 05     -         lda #color
20a8: 8d 86 02  -         sta foreground_color
20ab: a2 00     -         ldx #$00
20ad: bd ea 3c  -         lda msg,x
20b0: f0 07     -         beq !done+
20b2: 20 d2 ff  -         jsr kernal_chrout
20b5: e8        -         inx
20b6: 4c ad 20  -         jmp !loop-
20b9: 68        -         pla
20ba: 8d 86 02  -         sta foreground_color
20bd: 4c db 20  -         jmp !done+
20c0: ad 86 02  -         lda foreground_color
20c3: 48        -         pha
20c4: a9 02     -         lda #color
20c6: 8d 86 02  -         sta foreground_color
20c9: a2 00     -         ldx #$00
20cb: bd ec 3c  -         lda msg,x
20ce: f0 07     -         beq !done+
20d0: 20 d2 ff  -         jsr kernal_chrout
20d3: e8        -         inx
20d4: 4c cb 20  -         jmp !loop-
20d7: 68        -         pla
20d8: 8d 86 02  -         sta foreground_color
20db: a2 00     -         ldx #$00
20dd: bd ec 20  -         lda msg,x
20e0: f0 07     -         beq !done+
20e2: 20 d2 ff  -         jsr kernal_chrout
20e5: e8        -         inx
20e6: 4c dd 20  -         jmp !loop-
20e9: 4c ee 20  -         jmp !done+
20ec: 0d 00     - memory: .byte RETURN, NULL
20ee: ae f0 3c  -         ldx TEST_NAME_COUNT
20f1: e0 15     -         cpx #TESTS_PER_PAGE
20f3: d0 5d     -         bne !exit+
20f5: ad 86 02  -         lda foreground_color
20f8: 48        -         pha
20f9: a9 01     -         lda #color
20fb: 8d 86 02  -         sta foreground_color
20fe: a2 00     -         ldx #$00
2100: bd 13 21  -         lda msg,x
2103: f0 07     -         beq !done+
2105: 20 d2 ff  -         jsr kernal_chrout
2108: e8        -         inx
2109: 4c 00 21  -         jmp !loop-
210c: 68        -         pla
210d: 8d 86 02  -         sta foreground_color
2110: 4c 32 21  -         jmp !no_key+
2113: 0d        - memory: .byte RETURN
2114: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2124: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2130: 0d 00     -         .byte RETURN, NULL
2132: 20 9f ff  -         jsr scnkey  // scan keyboard
2135: 20 e4 ff  -         jsr getin	// put result into A
2138: f0 f8     -         beq !no_key-
213a: a2 00     -         ldx #$00
213c: bd 4b 21  -         lda msg,x
213f: f0 07     -         beq !done+
2141: 20 d2 ff  -         jsr kernal_chrout
2144: e8        -         inx
2145: 4c 3c 21  -         jmp !loop-
2148: 4c 4d 21  -         jmp !done+
214b: 0d 00     - newline:.byte RETURN, NULL
214d: a2 00     -         ldx #$00
214f: 8e f0 3c  -         stx TEST_NAME_COUNT
2152: 60        -         rts	
2153: ee f0 3c  - INCREMENT_TEST:inc TEST_NAME_COUNT
2156: ad 86 02  -         lda foreground_color
2159: 48        -         pha
215a: a9 0f     -         lda #color
215c: 8d 86 02  -         sta foreground_color
215f: a2 00     -         ldx #$00
2161: bd 74 21  -         lda msg,x
2164: f0 07     -         beq !done+
2166: 20 d2 ff  -         jsr kernal_chrout
2169: e8        -         inx
216a: 4c 61 21  -         jmp !loop-
216d: 68        -         pla
216e: 8d 86 02  -         sta foreground_color
2171: 4c 83 21  -         jmp !done+
2174: 20 20     - memory: .fill spacing, spacebar
2176: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
217f: 2e 2e 2e  -         .text "..."
2182: 00        -         .byte NULL
2183: 20 31 08  -         jsr SW16
2186: 15        -         .byte opcode(op, register)
2187: 06 3d     -         .word address.getValue()
2189: b0        -         .byte opcode($b0, register) }
218a: 55        -         .byte opcode($50, register) }
218b: e5        -         .byte opcode($e0, register) }
218c: 00        -         .byte $00 }
218d: ee ee 3c  -         inc TEST_COUNT
2190: ad 86 02  -         lda foreground_color
2193: 48        -         pha
2194: a9 0e     -         lda #color
2196: 8d 86 02  -         sta foreground_color
2199: a2 00     -         ldx #$00
219b: bd ae 21  -         lda msg,x
219e: f0 07     -         beq !done+
21a0: 20 d2 ff  -         jsr kernal_chrout
21a3: e8        -         inx
21a4: 4c 9b 21  -         jmp !loop-
21a7: 68        -         pla
21a8: 8d 86 02  -         sta foreground_color
21ab: 4c b3 21  -         jmp !done+
21ae: 20        - memory: .byte spacebar
21af: 2b 32     -         .text description
21b1: 3a        -         .text ":"
21b2: 00        -         .byte NULL
21b3: a6 21     -         ldx rl(register.getValue())
21b5: a4 22     -         ldy rh(register.getValue())
21b7: e0 08     -         cpx #<value
21b9: d0 25     -         bne !failed+
21bb: c0 3d     -         cpy #>value
21bd: d0 21     -         bne !failed+
21bf: ee ef 3c  -         inc TEST_PASS_COUNT
21c2: ad 86 02  -         lda foreground_color
21c5: 48        -         pha
21c6: a9 05     -         lda #color
21c8: 8d 86 02  -         sta foreground_color
21cb: a2 00     -         ldx #$00
21cd: bd ea 3c  -         lda msg,x
21d0: f0 07     -         beq !done+
21d2: 20 d2 ff  -         jsr kernal_chrout
21d5: e8        -         inx
21d6: 4c cd 21  -         jmp !loop-
21d9: 68        -         pla
21da: 8d 86 02  -         sta foreground_color
21dd: 4c fb 21  -         jmp !done+
21e0: ad 86 02  -         lda foreground_color
21e3: 48        -         pha
21e4: a9 02     -         lda #color
21e6: 8d 86 02  -         sta foreground_color
21e9: a2 00     -         ldx #$00
21eb: bd ec 3c  -         lda msg,x
21ee: f0 07     -         beq !done+
21f0: 20 d2 ff  -         jsr kernal_chrout
21f3: e8        -         inx
21f4: 4c eb 21  -         jmp !loop-
21f7: 68        -         pla
21f8: 8d 86 02  -         sta foreground_color
21fb: a2 00     -         ldx #$00
21fd: bd 0c 22  -         lda msg,x
2200: f0 07     -         beq !done+
2202: 20 d2 ff  -         jsr kernal_chrout
2205: e8        -         inx
2206: 4c fd 21  -         jmp !loop-
2209: 4c 0e 22  -         jmp !done+
220c: 0d 00     - memory: .byte RETURN, NULL
220e: ae f0 3c  -         ldx TEST_NAME_COUNT
2211: e0 15     -         cpx #TESTS_PER_PAGE
2213: d0 5d     -         bne !exit+
2215: ad 86 02  -         lda foreground_color
2218: 48        -         pha
2219: a9 01     -         lda #color
221b: 8d 86 02  -         sta foreground_color
221e: a2 00     -         ldx #$00
2220: bd 33 22  -         lda msg,x
2223: f0 07     -         beq !done+
2225: 20 d2 ff  -         jsr kernal_chrout
2228: e8        -         inx
2229: 4c 20 22  -         jmp !loop-
222c: 68        -         pla
222d: 8d 86 02  -         sta foreground_color
2230: 4c 52 22  -         jmp !no_key+
2233: 0d        - memory: .byte RETURN
2234: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2244: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2250: 0d 00     -         .byte RETURN, NULL
2252: 20 9f ff  -         jsr scnkey  // scan keyboard
2255: 20 e4 ff  -         jsr getin	// put result into A
2258: f0 f8     -         beq !no_key-
225a: a2 00     -         ldx #$00
225c: bd 6b 22  -         lda msg,x
225f: f0 07     -         beq !done+
2261: 20 d2 ff  -         jsr kernal_chrout
2264: e8        -         inx
2265: 4c 5c 22  -         jmp !loop-
2268: 4c 6d 22  -         jmp !done+
226b: 0d 00     - newline:.byte RETURN, NULL
226d: a2 00     -         ldx #$00
226f: 8e f0 3c  -         stx TEST_NAME_COUNT
2272: 60        -         rts
2273: ee f0 3c  - DECREMENT_TEST:inc TEST_NAME_COUNT
2276: ad 86 02  -         lda foreground_color
2279: 48        -         pha
227a: a9 0f     -         lda #color
227c: 8d 86 02  -         sta foreground_color
227f: a2 00     -         ldx #$00
2281: bd 94 22  -         lda msg,x
2284: f0 07     -         beq !done+
2286: 20 d2 ff  -         jsr kernal_chrout
2289: e8        -         inx
228a: 4c 81 22  -         jmp !loop-
228d: 68        -         pla
228e: 8d 86 02  -         sta foreground_color
2291: 4c a3 22  -         jmp !done+
2294: 20 20     - memory: .fill spacing, spacebar
2296: 44 45 43 52 45 4d 45 4e 54                       -         .text name
229f: 2e 2e 2e  -         .text "..."
22a2: 00        -         .byte NULL
22a3: 20 31 08  -         jsr SW16
22a6: 15        -         .byte opcode(op, register)
22a7: 0c 3d     -         .word address.getValue()
22a9: 14        -         .byte opcode(op, register)
22aa: 10 00     -         .word address.getValue()
22ac: b0        -         .byte opcode($b0, register) }
22ad: 55        -         .byte opcode($50, register) }
22ae: f4        -         .byte opcode($f0, register) }
22af: 07 fc     -         .byte $07, effective_address(ea,*) }
22b1: 00        -         .byte $00 }
22b2: ee ee 3c  -         inc TEST_COUNT
22b5: ad 86 02  -         lda foreground_color
22b8: 48        -         pha
22b9: a9 0e     -         lda #color
22bb: 8d 86 02  -         sta foreground_color
22be: a2 00     -         ldx #$00
22c0: bd d3 22  -         lda msg,x
22c3: f0 07     -         beq !done+
22c5: 20 d2 ff  -         jsr kernal_chrout
22c8: e8        -         inx
22c9: 4c c0 22  -         jmp !loop-
22cc: 68        -         pla
22cd: 8d 86 02  -         sta foreground_color
22d0: 4c d7 22  -         jmp !done+
22d3: 20        - memory: .byte spacebar
22d4: 30        -         .text description
22d5: 3a        -         .text ":"
22d6: 00        -         .byte NULL
22d7: a6 1f     -         ldx rl(register.getValue())
22d9: a4 20     -         ldy rh(register.getValue())
22db: e0 00     -         cpx #<value
22dd: d0 25     -         bne !failed+
22df: c0 00     -         cpy #>value
22e1: d0 21     -         bne !failed+
22e3: ee ef 3c  -         inc TEST_PASS_COUNT
22e6: ad 86 02  -         lda foreground_color
22e9: 48        -         pha
22ea: a9 05     -         lda #color
22ec: 8d 86 02  -         sta foreground_color
22ef: a2 00     -         ldx #$00
22f1: bd ea 3c  -         lda msg,x
22f4: f0 07     -         beq !done+
22f6: 20 d2 ff  -         jsr kernal_chrout
22f9: e8        -         inx
22fa: 4c f1 22  -         jmp !loop-
22fd: 68        -         pla
22fe: 8d 86 02  -         sta foreground_color
2301: 4c 1f 23  -         jmp !done+
2304: ad 86 02  -         lda foreground_color
2307: 48        -         pha
2308: a9 02     -         lda #color
230a: 8d 86 02  -         sta foreground_color
230d: a2 00     -         ldx #$00
230f: bd ec 3c  -         lda msg,x
2312: f0 07     -         beq !done+
2314: 20 d2 ff  -         jsr kernal_chrout
2317: e8        -         inx
2318: 4c 0f 23  -         jmp !loop-
231b: 68        -         pla
231c: 8d 86 02  -         sta foreground_color
231f: a2 00     -         ldx #$00
2321: bd 30 23  -         lda msg,x
2324: f0 07     -         beq !done+
2326: 20 d2 ff  -         jsr kernal_chrout
2329: e8        -         inx
232a: 4c 21 23  -         jmp !loop-
232d: 4c 32 23  -         jmp !done+
2330: 0d 00     - memory: .byte RETURN, NULL
2332: ae f0 3c  -         ldx TEST_NAME_COUNT
2335: e0 15     -         cpx #TESTS_PER_PAGE
2337: d0 5d     -         bne !exit+
2339: ad 86 02  -         lda foreground_color
233c: 48        -         pha
233d: a9 01     -         lda #color
233f: 8d 86 02  -         sta foreground_color
2342: a2 00     -         ldx #$00
2344: bd 57 23  -         lda msg,x
2347: f0 07     -         beq !done+
2349: 20 d2 ff  -         jsr kernal_chrout
234c: e8        -         inx
234d: 4c 44 23  -         jmp !loop-
2350: 68        -         pla
2351: 8d 86 02  -         sta foreground_color
2354: 4c 76 23  -         jmp !no_key+
2357: 0d        - memory: .byte RETURN
2358: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2368: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2374: 0d 00     -         .byte RETURN, NULL
2376: 20 9f ff  -         jsr scnkey  // scan keyboard
2379: 20 e4 ff  -         jsr getin	// put result into A
237c: f0 f8     -         beq !no_key-
237e: a2 00     -         ldx #$00
2380: bd 8f 23  -         lda msg,x
2383: f0 07     -         beq !done+
2385: 20 d2 ff  -         jsr kernal_chrout
2388: e8        -         inx
2389: 4c 80 23  -         jmp !loop-
238c: 4c 91 23  -         jmp !done+
238f: 0d 00     - newline:.byte RETURN, NULL
2391: a2 00     -         ldx #$00
2393: 8e f0 3c  -         stx TEST_NAME_COUNT
2396: 60        -         rts
2397: ee f0 3c  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
239a: ad 86 02  -         lda foreground_color
239d: 48        -         pha
239e: a9 0f     -         lda #color
23a0: 8d 86 02  -         sta foreground_color
23a3: a2 00     -         ldx #$00
23a5: bd b8 23  -         lda msg,x
23a8: f0 07     -         beq !done+
23aa: 20 d2 ff  -         jsr kernal_chrout
23ad: e8        -         inx
23ae: 4c a5 23  -         jmp !loop-
23b1: 68        -         pla
23b2: 8d 86 02  -         sta foreground_color
23b5: 4c c7 23  -         jmp !done+
23b8: 20 20     - memory: .fill spacing, spacebar
23ba: 36 35 30 32 20 4d 4f 44 45                       -         .text name
23c3: 2e 2e 2e  -         .text "..."
23c6: 00        -         .byte NULL
23c7: 20 31 08  -         jsr SW16
23ca: 00        -         .byte $00 }
23cb: ee ee 3c  -         inc TEST_COUNT
23ce: ad 86 02  -         lda foreground_color
23d1: 48        -         pha
23d2: a9 0e     -         lda #color
23d4: 8d 86 02  -         sta foreground_color
23d7: a2 00     -         ldx #$00
23d9: bd ec 23  -         lda msg,x
23dc: f0 07     -         beq !done+
23de: 20 d2 ff  -         jsr kernal_chrout
23e1: e8        -         inx
23e2: 4c d9 23  -         jmp !loop-
23e5: 68        -         pla
23e6: 8d 86 02  -         sta foreground_color
23e9: 4c f2 23  -         jmp !done+
23ec: 20        - memory: .byte spacebar
23ed: 52 54 4e  -         .text description
23f0: 3a        -         .text ":"
23f1: 00        -         .byte NULL
23f2: a2 01     -         ldx #value
23f4: f0 21     -         beq !failed+
23f6: ee ef 3c  -         inc TEST_PASS_COUNT
23f9: ad 86 02  -         lda foreground_color
23fc: 48        -         pha
23fd: a9 05     -         lda #color
23ff: 8d 86 02  -         sta foreground_color
2402: a2 00     -         ldx #$00
2404: bd ea 3c  -         lda msg,x
2407: f0 07     -         beq !done+
2409: 20 d2 ff  -         jsr kernal_chrout
240c: e8        -         inx
240d: 4c 04 24  -         jmp !loop-
2410: 68        -         pla
2411: 8d 86 02  -         sta foreground_color
2414: 4c 32 24  -         jmp !done+
2417: ad 86 02  -         lda foreground_color
241a: 48        -         pha
241b: a9 02     -         lda #color
241d: 8d 86 02  -         sta foreground_color
2420: a2 00     -         ldx #$00
2422: bd ec 3c  -         lda msg,x
2425: f0 07     -         beq !done+
2427: 20 d2 ff  -         jsr kernal_chrout
242a: e8        -         inx
242b: 4c 22 24  -         jmp !loop-
242e: 68        -         pla
242f: 8d 86 02  -         sta foreground_color
2432: a2 00     -         ldx #$00
2434: bd 43 24  -         lda msg,x
2437: f0 07     -         beq !done+
2439: 20 d2 ff  -         jsr kernal_chrout
243c: e8        -         inx
243d: 4c 34 24  -         jmp !loop-
2440: 4c 45 24  -         jmp !done+
2443: 0d 00     - memory: .byte RETURN, NULL
2445: ae f0 3c  -         ldx TEST_NAME_COUNT
2448: e0 15     -         cpx #TESTS_PER_PAGE
244a: d0 5d     -         bne !exit+
244c: ad 86 02  -         lda foreground_color
244f: 48        -         pha
2450: a9 01     -         lda #color
2452: 8d 86 02  -         sta foreground_color
2455: a2 00     -         ldx #$00
2457: bd 6a 24  -         lda msg,x
245a: f0 07     -         beq !done+
245c: 20 d2 ff  -         jsr kernal_chrout
245f: e8        -         inx
2460: 4c 57 24  -         jmp !loop-
2463: 68        -         pla
2464: 8d 86 02  -         sta foreground_color
2467: 4c 89 24  -         jmp !no_key+
246a: 0d        - memory: .byte RETURN
246b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
247b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2487: 0d 00     -         .byte RETURN, NULL
2489: 20 9f ff  -         jsr scnkey  // scan keyboard
248c: 20 e4 ff  -         jsr getin	// put result into A
248f: f0 f8     -         beq !no_key-
2491: a2 00     -         ldx #$00
2493: bd a2 24  -         lda msg,x
2496: f0 07     -         beq !done+
2498: 20 d2 ff  -         jsr kernal_chrout
249b: e8        -         inx
249c: 4c 93 24  -         jmp !loop-
249f: 4c a4 24  -         jmp !done+
24a2: 0d 00     - newline:.byte RETURN, NULL
24a4: a2 00     -         ldx #$00
24a6: 8e f0 3c  -         stx TEST_NAME_COUNT
24a9: 60        -         rts
24aa: ee f0 3c  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
24ad: ad 86 02  -         lda foreground_color
24b0: 48        -         pha
24b1: a9 0f     -         lda #color
24b3: 8d 86 02  -         sta foreground_color
24b6: a2 00     -         ldx #$00
24b8: bd cb 24  -         lda msg,x
24bb: f0 07     -         beq !done+
24bd: 20 d2 ff  -         jsr kernal_chrout
24c0: e8        -         inx
24c1: 4c b8 24  -         jmp !loop-
24c4: 68        -         pla
24c5: 8d 86 02  -         sta foreground_color
24c8: 4c de 24  -         jmp !done+
24cb: 20 20     - memory: .fill spacing, spacebar
24cd: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
24da: 2e 2e 2e  -         .text "..."
24dd: 00        -         .byte NULL
24de: 20 31 08  -         jsr SW16
24e1: 01 00     -         .byte $01, effective_address(ea,*) }
24e3: 10        -         .byte opcode(op, register)
24e4: dc fe     -         .word address.getValue()
24e6: 01 05     -         .byte $01, effective_address(ea,*) }
24e8: 10        -         .byte opcode(op, register)
24e9: 23 01     -         .word address.getValue()
24eb: 01 00     -         .byte $01, effective_address(ea,*) }
24ed: 00        -         .byte $00 }
24ee: ee ee 3c  -         inc TEST_COUNT
24f1: ad 86 02  -         lda foreground_color
24f4: 48        -         pha
24f5: a9 0e     -         lda #color
24f7: 8d 86 02  -         sta foreground_color
24fa: a2 00     -         ldx #$00
24fc: bd 0f 25  -         lda msg,x
24ff: f0 07     -         beq !done+
2501: 20 d2 ff  -         jsr kernal_chrout
2504: e8        -         inx
2505: 4c fc 24  -         jmp !loop-
2508: 68        -         pla
2509: 8d 86 02  -         sta foreground_color
250c: 4c 13 25  -         jmp !done+
250f: 20        - memory: .byte spacebar
2510: 31        -         .text description
2511: 3a        -         .text ":"
2512: 00        -         .byte NULL
2513: a6 17     -         ldx rl(register.getValue())
2515: a4 18     -         ldy rh(register.getValue())
2517: e0 dc     -         cpx #<value
2519: d0 25     -         bne !failed+
251b: c0 fe     -         cpy #>value
251d: d0 21     -         bne !failed+
251f: ee ef 3c  -         inc TEST_PASS_COUNT
2522: ad 86 02  -         lda foreground_color
2525: 48        -         pha
2526: a9 05     -         lda #color
2528: 8d 86 02  -         sta foreground_color
252b: a2 00     -         ldx #$00
252d: bd ea 3c  -         lda msg,x
2530: f0 07     -         beq !done+
2532: 20 d2 ff  -         jsr kernal_chrout
2535: e8        -         inx
2536: 4c 2d 25  -         jmp !loop-
2539: 68        -         pla
253a: 8d 86 02  -         sta foreground_color
253d: 4c 5b 25  -         jmp !done+
2540: ad 86 02  -         lda foreground_color
2543: 48        -         pha
2544: a9 02     -         lda #color
2546: 8d 86 02  -         sta foreground_color
2549: a2 00     -         ldx #$00
254b: bd ec 3c  -         lda msg,x
254e: f0 07     -         beq !done+
2550: 20 d2 ff  -         jsr kernal_chrout
2553: e8        -         inx
2554: 4c 4b 25  -         jmp !loop-
2557: 68        -         pla
2558: 8d 86 02  -         sta foreground_color
255b: a2 00     -         ldx #$00
255d: bd 6c 25  -         lda msg,x
2560: f0 07     -         beq !done+
2562: 20 d2 ff  -         jsr kernal_chrout
2565: e8        -         inx
2566: 4c 5d 25  -         jmp !loop-
2569: 4c 6e 25  -         jmp !done+
256c: 0d 00     - memory: .byte RETURN, NULL
256e: ae f0 3c  -         ldx TEST_NAME_COUNT
2571: e0 15     -         cpx #TESTS_PER_PAGE
2573: d0 5d     -         bne !exit+
2575: ad 86 02  -         lda foreground_color
2578: 48        -         pha
2579: a9 01     -         lda #color
257b: 8d 86 02  -         sta foreground_color
257e: a2 00     -         ldx #$00
2580: bd 93 25  -         lda msg,x
2583: f0 07     -         beq !done+
2585: 20 d2 ff  -         jsr kernal_chrout
2588: e8        -         inx
2589: 4c 80 25  -         jmp !loop-
258c: 68        -         pla
258d: 8d 86 02  -         sta foreground_color
2590: 4c b2 25  -         jmp !no_key+
2593: 0d        - memory: .byte RETURN
2594: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
25a4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
25b0: 0d 00     -         .byte RETURN, NULL
25b2: 20 9f ff  -         jsr scnkey  // scan keyboard
25b5: 20 e4 ff  -         jsr getin	// put result into A
25b8: f0 f8     -         beq !no_key-
25ba: a2 00     -         ldx #$00
25bc: bd cb 25  -         lda msg,x
25bf: f0 07     -         beq !done+
25c1: 20 d2 ff  -         jsr kernal_chrout
25c4: e8        -         inx
25c5: 4c bc 25  -         jmp !loop-
25c8: 4c cd 25  -         jmp !done+
25cb: 0d 00     - newline:.byte RETURN, NULL
25cd: a2 00     -         ldx #$00
25cf: 8e f0 3c  -         stx TEST_NAME_COUNT
25d2: 60        -         rts
25d3: ee f0 3c  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
25d6: ad 86 02  -         lda foreground_color
25d9: 48        -         pha
25da: a9 0f     -         lda #color
25dc: 8d 86 02  -         sta foreground_color
25df: a2 00     -         ldx #$00
25e1: bd f4 25  -         lda msg,x
25e4: f0 07     -         beq !done+
25e6: 20 d2 ff  -         jsr kernal_chrout
25e9: e8        -         inx
25ea: 4c e1 25  -         jmp !loop-
25ed: 68        -         pla
25ee: 8d 86 02  -         sta foreground_color
25f1: 4c 09 26  -         jmp !done+
25f4: 20 20     - memory: .fill spacing, spacebar
25f6: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
2605: 2e 2e 2e  -         .text "..."
2608: 00        -         .byte NULL
2609: 20 31 08  -         jsr SW16
260c: 15        -         .byte opcode(op, register)
260d: 00 10     -         .word address.getValue()
260f: 10        -         .byte opcode(op, register)
2610: ff ff     -         .word address.getValue()
2612: a5        -         .byte opcode($a0, register) }
2613: 02 02     -         .byte $02, effective_address(ea,*) }
2615: 01 05     -         .byte $01, effective_address(ea,*) }
2617: 10        -         .byte opcode(op, register)
2618: dc fe     -         .word address.getValue()
261a: 01 05     -         .byte $01, effective_address(ea,*) }
261c: 10        -         .byte opcode(op, register)
261d: 23 01     -         .word address.getValue()
261f: 01 00     -         .byte $01, effective_address(ea,*) }
2621: 00        -         .byte $00 }
2622: ee ee 3c  -         inc TEST_COUNT
2625: ad 86 02  -         lda foreground_color
2628: 48        -         pha
2629: a9 0e     -         lda #color
262b: 8d 86 02  -         sta foreground_color
262e: a2 00     -         ldx #$00
2630: bd 43 26  -         lda msg,x
2633: f0 07     -         beq !done+
2635: 20 d2 ff  -         jsr kernal_chrout
2638: e8        -         inx
2639: 4c 30 26  -         jmp !loop-
263c: 68        -         pla
263d: 8d 86 02  -         sta foreground_color
2640: 4c 47 26  -         jmp !done+
2643: 20        - memory: .byte spacebar
2644: 32        -         .text description
2645: 3a        -         .text ":"
2646: 00        -         .byte NULL
2647: a6 17     -         ldx rl(register.getValue())
2649: a4 18     -         ldy rh(register.getValue())
264b: e0 23     -         cpx #<value
264d: d0 25     -         bne !failed+
264f: c0 01     -         cpy #>value
2651: d0 21     -         bne !failed+
2653: ee ef 3c  -         inc TEST_PASS_COUNT
2656: ad 86 02  -         lda foreground_color
2659: 48        -         pha
265a: a9 05     -         lda #color
265c: 8d 86 02  -         sta foreground_color
265f: a2 00     -         ldx #$00
2661: bd ea 3c  -         lda msg,x
2664: f0 07     -         beq !done+
2666: 20 d2 ff  -         jsr kernal_chrout
2669: e8        -         inx
266a: 4c 61 26  -         jmp !loop-
266d: 68        -         pla
266e: 8d 86 02  -         sta foreground_color
2671: 4c 8f 26  -         jmp !done+
2674: ad 86 02  -         lda foreground_color
2677: 48        -         pha
2678: a9 02     -         lda #color
267a: 8d 86 02  -         sta foreground_color
267d: a2 00     -         ldx #$00
267f: bd ec 3c  -         lda msg,x
2682: f0 07     -         beq !done+
2684: 20 d2 ff  -         jsr kernal_chrout
2687: e8        -         inx
2688: 4c 7f 26  -         jmp !loop-
268b: 68        -         pla
268c: 8d 86 02  -         sta foreground_color
268f: a2 00     -         ldx #$00
2691: bd a0 26  -         lda msg,x
2694: f0 07     -         beq !done+
2696: 20 d2 ff  -         jsr kernal_chrout
2699: e8        -         inx
269a: 4c 91 26  -         jmp !loop-
269d: 4c a2 26  -         jmp !done+
26a0: 0d 00     - memory: .byte RETURN, NULL
26a2: ae f0 3c  -         ldx TEST_NAME_COUNT
26a5: e0 15     -         cpx #TESTS_PER_PAGE
26a7: d0 5d     -         bne !exit+
26a9: ad 86 02  -         lda foreground_color
26ac: 48        -         pha
26ad: a9 01     -         lda #color
26af: 8d 86 02  -         sta foreground_color
26b2: a2 00     -         ldx #$00
26b4: bd c7 26  -         lda msg,x
26b7: f0 07     -         beq !done+
26b9: 20 d2 ff  -         jsr kernal_chrout
26bc: e8        -         inx
26bd: 4c b4 26  -         jmp !loop-
26c0: 68        -         pla
26c1: 8d 86 02  -         sta foreground_color
26c4: 4c e6 26  -         jmp !no_key+
26c7: 0d        - memory: .byte RETURN
26c8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
26d8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
26e4: 0d 00     -         .byte RETURN, NULL
26e6: 20 9f ff  -         jsr scnkey  // scan keyboard
26e9: 20 e4 ff  -         jsr getin	// put result into A
26ec: f0 f8     -         beq !no_key-
26ee: a2 00     -         ldx #$00
26f0: bd ff 26  -         lda msg,x
26f3: f0 07     -         beq !done+
26f5: 20 d2 ff  -         jsr kernal_chrout
26f8: e8        -         inx
26f9: 4c f0 26  -         jmp !loop-
26fc: 4c 01 27  -         jmp !done+
26ff: 0d 00     - newline:.byte RETURN, NULL
2701: a2 00     -         ldx #$00
2703: 8e f0 3c  -         stx TEST_NAME_COUNT
2706: 60        -         rts
2707: ee f0 3c  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
270a: ad 86 02  -         lda foreground_color
270d: 48        -         pha
270e: a9 0f     -         lda #color
2710: 8d 86 02  -         sta foreground_color
2713: a2 00     -         ldx #$00
2715: bd 28 27  -         lda msg,x
2718: f0 07     -         beq !done+
271a: 20 d2 ff  -         jsr kernal_chrout
271d: e8        -         inx
271e: 4c 15 27  -         jmp !loop-
2721: 68        -         pla
2722: 8d 86 02  -         sta foreground_color
2725: 4c 3d 27  -         jmp !done+
2728: 20 20     - memory: .fill spacing, spacebar
272a: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
2739: 2e 2e 2e  -         .text "..."
273c: 00        -         .byte NULL
273d: 20 31 08  -         jsr SW16
2740: 15        -         .byte opcode(op, register)
2741: 00 10     -         .word address.getValue()
2743: 10        -         .byte opcode(op, register)
2744: ff ff     -         .word address.getValue()
2746: a5        -         .byte opcode($a0, register) }
2747: 03 02     -         .byte $03, effective_address(ea,*) }
2749: 01 05     -         .byte $01, effective_address(ea,*) }
274b: 10        -         .byte opcode(op, register)
274c: dc fe     -         .word address.getValue()
274e: 01 05     -         .byte $01, effective_address(ea,*) }
2750: 10        -         .byte opcode(op, register)
2751: 23 01     -         .word address.getValue()
2753: 01 00     -         .byte $01, effective_address(ea,*) }
2755: 00        -         .byte $00 }
2756: ee ee 3c  -         inc TEST_COUNT
2759: ad 86 02  -         lda foreground_color
275c: 48        -         pha
275d: a9 0e     -         lda #color
275f: 8d 86 02  -         sta foreground_color
2762: a2 00     -         ldx #$00
2764: bd 77 27  -         lda msg,x
2767: f0 07     -         beq !done+
2769: 20 d2 ff  -         jsr kernal_chrout
276c: e8        -         inx
276d: 4c 64 27  -         jmp !loop-
2770: 68        -         pla
2771: 8d 86 02  -         sta foreground_color
2774: 4c 7b 27  -         jmp !done+
2777: 20        - memory: .byte spacebar
2778: 31        -         .text description
2779: 3a        -         .text ":"
277a: 00        -         .byte NULL
277b: a6 17     -         ldx rl(register.getValue())
277d: a4 18     -         ldy rh(register.getValue())
277f: e0 dc     -         cpx #<value
2781: d0 25     -         bne !failed+
2783: c0 fe     -         cpy #>value
2785: d0 21     -         bne !failed+
2787: ee ef 3c  -         inc TEST_PASS_COUNT
278a: ad 86 02  -         lda foreground_color
278d: 48        -         pha
278e: a9 05     -         lda #color
2790: 8d 86 02  -         sta foreground_color
2793: a2 00     -         ldx #$00
2795: bd ea 3c  -         lda msg,x
2798: f0 07     -         beq !done+
279a: 20 d2 ff  -         jsr kernal_chrout
279d: e8        -         inx
279e: 4c 95 27  -         jmp !loop-
27a1: 68        -         pla
27a2: 8d 86 02  -         sta foreground_color
27a5: 4c c3 27  -         jmp !done+
27a8: ad 86 02  -         lda foreground_color
27ab: 48        -         pha
27ac: a9 02     -         lda #color
27ae: 8d 86 02  -         sta foreground_color
27b1: a2 00     -         ldx #$00
27b3: bd ec 3c  -         lda msg,x
27b6: f0 07     -         beq !done+
27b8: 20 d2 ff  -         jsr kernal_chrout
27bb: e8        -         inx
27bc: 4c b3 27  -         jmp !loop-
27bf: 68        -         pla
27c0: 8d 86 02  -         sta foreground_color
27c3: a2 00     -         ldx #$00
27c5: bd d4 27  -         lda msg,x
27c8: f0 07     -         beq !done+
27ca: 20 d2 ff  -         jsr kernal_chrout
27cd: e8        -         inx
27ce: 4c c5 27  -         jmp !loop-
27d1: 4c d6 27  -         jmp !done+
27d4: 0d 00     - memory: .byte RETURN, NULL
27d6: ae f0 3c  -         ldx TEST_NAME_COUNT
27d9: e0 15     -         cpx #TESTS_PER_PAGE
27db: d0 5d     -         bne !exit+
27dd: ad 86 02  -         lda foreground_color
27e0: 48        -         pha
27e1: a9 01     -         lda #color
27e3: 8d 86 02  -         sta foreground_color
27e6: a2 00     -         ldx #$00
27e8: bd fb 27  -         lda msg,x
27eb: f0 07     -         beq !done+
27ed: 20 d2 ff  -         jsr kernal_chrout
27f0: e8        -         inx
27f1: 4c e8 27  -         jmp !loop-
27f4: 68        -         pla
27f5: 8d 86 02  -         sta foreground_color
27f8: 4c 1a 28  -         jmp !no_key+
27fb: 0d        - memory: .byte RETURN
27fc: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
280c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2818: 0d 00     -         .byte RETURN, NULL
281a: 20 9f ff  -         jsr scnkey  // scan keyboard
281d: 20 e4 ff  -         jsr getin	// put result into A
2820: f0 f8     -         beq !no_key-
2822: a2 00     -         ldx #$00
2824: bd 33 28  -         lda msg,x
2827: f0 07     -         beq !done+
2829: 20 d2 ff  -         jsr kernal_chrout
282c: e8        -         inx
282d: 4c 24 28  -         jmp !loop-
2830: 4c 35 28  -         jmp !done+
2833: 0d 00     - newline:.byte RETURN, NULL
2835: a2 00     -         ldx #$00
2837: 8e f0 3c  -         stx TEST_NAME_COUNT
283a: 60        -         rts
283b: ee f0 3c  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
283e: ad 86 02  -         lda foreground_color
2841: 48        -         pha
2842: a9 0f     -         lda #color
2844: 8d 86 02  -         sta foreground_color
2847: a2 00     -         ldx #$00
2849: bd 5c 28  -         lda msg,x
284c: f0 07     -         beq !done+
284e: 20 d2 ff  -         jsr kernal_chrout
2851: e8        -         inx
2852: 4c 49 28  -         jmp !loop-
2855: 68        -         pla
2856: 8d 86 02  -         sta foreground_color
2859: 4c 6f 28  -         jmp !done+
285c: 20 20     - memory: .fill spacing, spacebar
285e: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
286b: 2e 2e 2e  -         .text "..."
286e: 00        -         .byte NULL
286f: 20 31 08  -         jsr SW16
2872: 15        -         .byte opcode(op, register)
2873: 0c 3d     -         .word address.getValue()
2875: 14        -         .byte opcode(op, register)
2876: 1c 3d     -         .word address.getValue()
2878: b0        -         .byte opcode($b0, register) }
2879: 55        -         .byte opcode($50, register) }
287a: 24        -         .byte opcode($20, register) }
287b: d5        -         .byte opcode($d0, register) }
287c: 04 fa     -         .byte $04, effective_address(ea,*) }
287e: 00        -         .byte $00 }
287f: ee ee 3c  -         inc TEST_COUNT
2882: ad 86 02  -         lda foreground_color
2885: 48        -         pha
2886: a9 0e     -         lda #color
2888: 8d 86 02  -         sta foreground_color
288b: a2 00     -         ldx #$00
288d: bd a0 28  -         lda msg,x
2890: f0 07     -         beq !done+
2892: 20 d2 ff  -         jsr kernal_chrout
2895: e8        -         inx
2896: 4c 8d 28  -         jmp !loop-
2899: 68        -         pla
289a: 8d 86 02  -         sta foreground_color
289d: 4c a6 28  -         jmp !done+
28a0: 20        - memory: .byte spacebar
28a1: 43 4c 52  -         .text description
28a4: 3a        -         .text ":"
28a5: 00        -         .byte NULL
28a6: a2 ff     -         ldx #$ff
28a8: e8        -         inx
28a9: e0 10     -         cpx #size
28ab: f0 0a     -         beq !success+
28ad: a9 00     -         lda #constant
28af: dd 0c 3d  -         cmp source,x
28b2: f0 f4     -         beq !loop-
28b4: 4c d8 28  -         jmp !failed+
28b7: ee ef 3c  -         inc TEST_PASS_COUNT
28ba: ad 86 02  -         lda foreground_color
28bd: 48        -         pha
28be: a9 05     -         lda #color
28c0: 8d 86 02  -         sta foreground_color
28c3: a2 00     -         ldx #$00
28c5: bd ea 3c  -         lda msg,x
28c8: f0 07     -         beq !done+
28ca: 20 d2 ff  -         jsr kernal_chrout
28cd: e8        -         inx
28ce: 4c c5 28  -         jmp !loop-
28d1: 68        -         pla
28d2: 8d 86 02  -         sta foreground_color
28d5: 4c f3 28  -         jmp !done+
28d8: ad 86 02  -         lda foreground_color
28db: 48        -         pha
28dc: a9 02     -         lda #color
28de: 8d 86 02  -         sta foreground_color
28e1: a2 00     -         ldx #$00
28e3: bd ec 3c  -         lda msg,x
28e6: f0 07     -         beq !done+
28e8: 20 d2 ff  -         jsr kernal_chrout
28eb: e8        -         inx
28ec: 4c e3 28  -         jmp !loop-
28ef: 68        -         pla
28f0: 8d 86 02  -         sta foreground_color
28f3: a2 00     -         ldx #$00
28f5: bd 04 29  -         lda msg,x
28f8: f0 07     -         beq !done+
28fa: 20 d2 ff  -         jsr kernal_chrout
28fd: e8        -         inx
28fe: 4c f5 28  -         jmp !loop-
2901: 4c 06 29  -         jmp !done+
2904: 0d 00     - memory: .byte RETURN, NULL
2906: ae f0 3c  -         ldx TEST_NAME_COUNT
2909: e0 15     -         cpx #TESTS_PER_PAGE
290b: d0 5d     -         bne !exit+
290d: ad 86 02  -         lda foreground_color
2910: 48        -         pha
2911: a9 01     -         lda #color
2913: 8d 86 02  -         sta foreground_color
2916: a2 00     -         ldx #$00
2918: bd 2b 29  -         lda msg,x
291b: f0 07     -         beq !done+
291d: 20 d2 ff  -         jsr kernal_chrout
2920: e8        -         inx
2921: 4c 18 29  -         jmp !loop-
2924: 68        -         pla
2925: 8d 86 02  -         sta foreground_color
2928: 4c 4a 29  -         jmp !no_key+
292b: 0d        - memory: .byte RETURN
292c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
293c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2948: 0d 00     -         .byte RETURN, NULL
294a: 20 9f ff  -         jsr scnkey  // scan keyboard
294d: 20 e4 ff  -         jsr getin	// put result into A
2950: f0 f8     -         beq !no_key-
2952: a2 00     -         ldx #$00
2954: bd 63 29  -         lda msg,x
2957: f0 07     -         beq !done+
2959: 20 d2 ff  -         jsr kernal_chrout
295c: e8        -         inx
295d: 4c 54 29  -         jmp !loop-
2960: 4c 65 29  -         jmp !done+
2963: 0d 00     - newline:.byte RETURN, NULL
2965: a2 00     -         ldx #$00
2967: 8e f0 3c  -         stx TEST_NAME_COUNT
296a: 60        -         rts
296b: ee f0 3c  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
296e: ad 86 02  -         lda foreground_color
2971: 48        -         pha
2972: a9 0f     -         lda #color
2974: 8d 86 02  -         sta foreground_color
2977: a2 00     -         ldx #$00
2979: bd 8c 29  -         lda msg,x
297c: f0 07     -         beq !done+
297e: 20 d2 ff  -         jsr kernal_chrout
2981: e8        -         inx
2982: 4c 79 29  -         jmp !loop-
2985: 68        -         pla
2986: 8d 86 02  -         sta foreground_color
2989: 4c 9f 29  -         jmp !done+
298c: 20 20     - memory: .fill spacing, spacebar
298e: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
299b: 2e 2e 2e  -         .text "..."
299e: 00        -         .byte NULL
299f: 20 31 08  -         jsr SW16
29a2: 15        -         .byte opcode(op, register)
29a3: 0a 00     -         .word address.getValue()
29a5: b0        -         .byte opcode($b0, register) }
29a6: b5        -         .byte opcode($b0, register) }
29a7: 05 07     -         .byte $05, effective_address(ea,*) }
29a9: 01 00     -         .byte $01, effective_address(ea,*) }
29ab: 10        -         .byte opcode(op, register)
29ac: dc fe     -         .word address.getValue()
29ae: 01 05     -         .byte $01, effective_address(ea,*) }
29b0: 10        -         .byte opcode(op, register)
29b1: 23 01     -         .word address.getValue()
29b3: 01 00     -         .byte $01, effective_address(ea,*) }
29b5: 00        -         .byte $00 }
29b6: ee ee 3c  -         inc TEST_COUNT
29b9: ad 86 02  -         lda foreground_color
29bc: 48        -         pha
29bd: a9 0e     -         lda #color
29bf: 8d 86 02  -         sta foreground_color
29c2: a2 00     -         ldx #$00
29c4: bd d7 29  -         lda msg,x
29c7: f0 07     -         beq !done+
29c9: 20 d2 ff  -         jsr kernal_chrout
29cc: e8        -         inx
29cd: 4c c4 29  -         jmp !loop-
29d0: 68        -         pla
29d1: 8d 86 02  -         sta foreground_color
29d4: 4c db 29  -         jmp !done+
29d7: 20        - memory: .byte spacebar
29d8: 32        -         .text description
29d9: 3a        -         .text ":"
29da: 00        -         .byte NULL
29db: a6 17     -         ldx rl(register.getValue())
29dd: a4 18     -         ldy rh(register.getValue())
29df: e0 23     -         cpx #<value
29e1: d0 25     -         bne !failed+
29e3: c0 01     -         cpy #>value
29e5: d0 21     -         bne !failed+
29e7: ee ef 3c  -         inc TEST_PASS_COUNT
29ea: ad 86 02  -         lda foreground_color
29ed: 48        -         pha
29ee: a9 05     -         lda #color
29f0: 8d 86 02  -         sta foreground_color
29f3: a2 00     -         ldx #$00
29f5: bd ea 3c  -         lda msg,x
29f8: f0 07     -         beq !done+
29fa: 20 d2 ff  -         jsr kernal_chrout
29fd: e8        -         inx
29fe: 4c f5 29  -         jmp !loop-
2a01: 68        -         pla
2a02: 8d 86 02  -         sta foreground_color
2a05: 4c 23 2a  -         jmp !done+
2a08: ad 86 02  -         lda foreground_color
2a0b: 48        -         pha
2a0c: a9 02     -         lda #color
2a0e: 8d 86 02  -         sta foreground_color
2a11: a2 00     -         ldx #$00
2a13: bd ec 3c  -         lda msg,x
2a16: f0 07     -         beq !done+
2a18: 20 d2 ff  -         jsr kernal_chrout
2a1b: e8        -         inx
2a1c: 4c 13 2a  -         jmp !loop-
2a1f: 68        -         pla
2a20: 8d 86 02  -         sta foreground_color
2a23: a2 00     -         ldx #$00
2a25: bd 34 2a  -         lda msg,x
2a28: f0 07     -         beq !done+
2a2a: 20 d2 ff  -         jsr kernal_chrout
2a2d: e8        -         inx
2a2e: 4c 25 2a  -         jmp !loop-
2a31: 4c 36 2a  -         jmp !done+
2a34: 0d 00     - memory: .byte RETURN, NULL
2a36: ae f0 3c  -         ldx TEST_NAME_COUNT
2a39: e0 15     -         cpx #TESTS_PER_PAGE
2a3b: d0 5d     -         bne !exit+
2a3d: ad 86 02  -         lda foreground_color
2a40: 48        -         pha
2a41: a9 01     -         lda #color
2a43: 8d 86 02  -         sta foreground_color
2a46: a2 00     -         ldx #$00
2a48: bd 5b 2a  -         lda msg,x
2a4b: f0 07     -         beq !done+
2a4d: 20 d2 ff  -         jsr kernal_chrout
2a50: e8        -         inx
2a51: 4c 48 2a  -         jmp !loop-
2a54: 68        -         pla
2a55: 8d 86 02  -         sta foreground_color
2a58: 4c 7a 2a  -         jmp !no_key+
2a5b: 0d        - memory: .byte RETURN
2a5c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2a6c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2a78: 0d 00     -         .byte RETURN, NULL
2a7a: 20 9f ff  -         jsr scnkey  // scan keyboard
2a7d: 20 e4 ff  -         jsr getin	// put result into A
2a80: f0 f8     -         beq !no_key-
2a82: a2 00     -         ldx #$00
2a84: bd 93 2a  -         lda msg,x
2a87: f0 07     -         beq !done+
2a89: 20 d2 ff  -         jsr kernal_chrout
2a8c: e8        -         inx
2a8d: 4c 84 2a  -         jmp !loop-
2a90: 4c 95 2a  -         jmp !done+
2a93: 0d 00     - newline:.byte RETURN, NULL
2a95: a2 00     -         ldx #$00
2a97: 8e f0 3c  -         stx TEST_NAME_COUNT
2a9a: 60        -         rts
2a9b: ee f0 3c  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
2a9e: ad 86 02  -         lda foreground_color
2aa1: 48        -         pha
2aa2: a9 0f     -         lda #color
2aa4: 8d 86 02  -         sta foreground_color
2aa7: a2 00     -         ldx #$00
2aa9: bd bc 2a  -         lda msg,x
2aac: f0 07     -         beq !done+
2aae: 20 d2 ff  -         jsr kernal_chrout
2ab1: e8        -         inx
2ab2: 4c a9 2a  -         jmp !loop-
2ab5: 68        -         pla
2ab6: 8d 86 02  -         sta foreground_color
2ab9: 4c cd 2a  -         jmp !done+
2abc: 20 20     - memory: .fill spacing, spacebar
2abe: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
2ac9: 2e 2e 2e  -         .text "..."
2acc: 00        -         .byte NULL
2acd: 20 31 08  -         jsr SW16
2ad0: b0        -         .byte opcode($b0, register) }
2ad1: 06 07     -         .byte $06, effective_address(ea,*) }
2ad3: 01 00     -         .byte $01, effective_address(ea,*) }
2ad5: 10        -         .byte opcode(op, register)
2ad6: dc fe     -         .word address.getValue()
2ad8: 01 05     -         .byte $01, effective_address(ea,*) }
2ada: 10        -         .byte opcode(op, register)
2adb: 23 01     -         .word address.getValue()
2add: 01 00     -         .byte $01, effective_address(ea,*) }
2adf: 00        -         .byte $00 }
2ae0: ee ee 3c  -         inc TEST_COUNT
2ae3: ad 86 02  -         lda foreground_color
2ae6: 48        -         pha
2ae7: a9 0e     -         lda #color
2ae9: 8d 86 02  -         sta foreground_color
2aec: a2 00     -         ldx #$00
2aee: bd 01 2b  -         lda msg,x
2af1: f0 07     -         beq !done+
2af3: 20 d2 ff  -         jsr kernal_chrout
2af6: e8        -         inx
2af7: 4c ee 2a  -         jmp !loop-
2afa: 68        -         pla
2afb: 8d 86 02  -         sta foreground_color
2afe: 4c 05 2b  -         jmp !done+
2b01: 20        - memory: .byte spacebar
2b02: 32        -         .text description
2b03: 3a        -         .text ":"
2b04: 00        -         .byte NULL
2b05: a6 17     -         ldx rl(register.getValue())
2b07: a4 18     -         ldy rh(register.getValue())
2b09: e0 23     -         cpx #<value
2b0b: d0 25     -         bne !failed+
2b0d: c0 01     -         cpy #>value
2b0f: d0 21     -         bne !failed+
2b11: ee ef 3c  -         inc TEST_PASS_COUNT
2b14: ad 86 02  -         lda foreground_color
2b17: 48        -         pha
2b18: a9 05     -         lda #color
2b1a: 8d 86 02  -         sta foreground_color
2b1d: a2 00     -         ldx #$00
2b1f: bd ea 3c  -         lda msg,x
2b22: f0 07     -         beq !done+
2b24: 20 d2 ff  -         jsr kernal_chrout
2b27: e8        -         inx
2b28: 4c 1f 2b  -         jmp !loop-
2b2b: 68        -         pla
2b2c: 8d 86 02  -         sta foreground_color
2b2f: 4c 4d 2b  -         jmp !done+
2b32: ad 86 02  -         lda foreground_color
2b35: 48        -         pha
2b36: a9 02     -         lda #color
2b38: 8d 86 02  -         sta foreground_color
2b3b: a2 00     -         ldx #$00
2b3d: bd ec 3c  -         lda msg,x
2b40: f0 07     -         beq !done+
2b42: 20 d2 ff  -         jsr kernal_chrout
2b45: e8        -         inx
2b46: 4c 3d 2b  -         jmp !loop-
2b49: 68        -         pla
2b4a: 8d 86 02  -         sta foreground_color
2b4d: a2 00     -         ldx #$00
2b4f: bd 5e 2b  -         lda msg,x
2b52: f0 07     -         beq !done+
2b54: 20 d2 ff  -         jsr kernal_chrout
2b57: e8        -         inx
2b58: 4c 4f 2b  -         jmp !loop-
2b5b: 4c 60 2b  -         jmp !done+
2b5e: 0d 00     - memory: .byte RETURN, NULL
2b60: ae f0 3c  -         ldx TEST_NAME_COUNT
2b63: e0 15     -         cpx #TESTS_PER_PAGE
2b65: d0 5d     -         bne !exit+
2b67: ad 86 02  -         lda foreground_color
2b6a: 48        -         pha
2b6b: a9 01     -         lda #color
2b6d: 8d 86 02  -         sta foreground_color
2b70: a2 00     -         ldx #$00
2b72: bd 85 2b  -         lda msg,x
2b75: f0 07     -         beq !done+
2b77: 20 d2 ff  -         jsr kernal_chrout
2b7a: e8        -         inx
2b7b: 4c 72 2b  -         jmp !loop-
2b7e: 68        -         pla
2b7f: 8d 86 02  -         sta foreground_color
2b82: 4c a4 2b  -         jmp !no_key+
2b85: 0d        - memory: .byte RETURN
2b86: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2b96: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2ba2: 0d 00     -         .byte RETURN, NULL
2ba4: 20 9f ff  -         jsr scnkey  // scan keyboard
2ba7: 20 e4 ff  -         jsr getin	// put result into A
2baa: f0 f8     -         beq !no_key-
2bac: a2 00     -         ldx #$00
2bae: bd bd 2b  -         lda msg,x
2bb1: f0 07     -         beq !done+
2bb3: 20 d2 ff  -         jsr kernal_chrout
2bb6: e8        -         inx
2bb7: 4c ae 2b  -         jmp !loop-
2bba: 4c bf 2b  -         jmp !done+
2bbd: 0d 00     - newline:.byte RETURN, NULL
2bbf: a2 00     -         ldx #$00
2bc1: 8e f0 3c  -         stx TEST_NAME_COUNT
2bc4: 60        -         rts
2bc5: ee f0 3c  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
2bc8: ad 86 02  -         lda foreground_color
2bcb: 48        -         pha
2bcc: a9 0f     -         lda #color
2bce: 8d 86 02  -         sta foreground_color
2bd1: a2 00     -         ldx #$00
2bd3: bd e6 2b  -         lda msg,x
2bd6: f0 07     -         beq !done+
2bd8: 20 d2 ff  -         jsr kernal_chrout
2bdb: e8        -         inx
2bdc: 4c d3 2b  -         jmp !loop-
2bdf: 68        -         pla
2be0: 8d 86 02  -         sta foreground_color
2be3: 4c f8 2b  -         jmp !done+
2be6: 20 20     - memory: .fill spacing, spacebar
2be8: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
2bf4: 2e 2e 2e  -         .text "..."
2bf7: 00        -         .byte NULL
2bf8: 20 31 08  -         jsr SW16
2bfb: 15        -         .byte opcode(op, register)
2bfc: 0a 00     -         .word address.getValue()
2bfe: b0        -         .byte opcode($b0, register) }
2bff: a5        -         .byte opcode($a0, register) }
2c00: 07 07     -         .byte $07, effective_address(ea,*) }
2c02: 01 00     -         .byte $01, effective_address(ea,*) }
2c04: 10        -         .byte opcode(op, register)
2c05: dc fe     -         .word address.getValue()
2c07: 01 05     -         .byte $01, effective_address(ea,*) }
2c09: 10        -         .byte opcode(op, register)
2c0a: 23 01     -         .word address.getValue()
2c0c: 01 00     -         .byte $01, effective_address(ea,*) }
2c0e: 00        -         .byte $00 }
2c0f: ee ee 3c  -         inc TEST_COUNT
2c12: ad 86 02  -         lda foreground_color
2c15: 48        -         pha
2c16: a9 0e     -         lda #color
2c18: 8d 86 02  -         sta foreground_color
2c1b: a2 00     -         ldx #$00
2c1d: bd 30 2c  -         lda msg,x
2c20: f0 07     -         beq !done+
2c22: 20 d2 ff  -         jsr kernal_chrout
2c25: e8        -         inx
2c26: 4c 1d 2c  -         jmp !loop-
2c29: 68        -         pla
2c2a: 8d 86 02  -         sta foreground_color
2c2d: 4c 34 2c  -         jmp !done+
2c30: 20        - memory: .byte spacebar
2c31: 32        -         .text description
2c32: 3a        -         .text ":"
2c33: 00        -         .byte NULL
2c34: a6 17     -         ldx rl(register.getValue())
2c36: a4 18     -         ldy rh(register.getValue())
2c38: e0 23     -         cpx #<value
2c3a: d0 25     -         bne !failed+
2c3c: c0 01     -         cpy #>value
2c3e: d0 21     -         bne !failed+
2c40: ee ef 3c  -         inc TEST_PASS_COUNT
2c43: ad 86 02  -         lda foreground_color
2c46: 48        -         pha
2c47: a9 05     -         lda #color
2c49: 8d 86 02  -         sta foreground_color
2c4c: a2 00     -         ldx #$00
2c4e: bd ea 3c  -         lda msg,x
2c51: f0 07     -         beq !done+
2c53: 20 d2 ff  -         jsr kernal_chrout
2c56: e8        -         inx
2c57: 4c 4e 2c  -         jmp !loop-
2c5a: 68        -         pla
2c5b: 8d 86 02  -         sta foreground_color
2c5e: 4c 7c 2c  -         jmp !done+
2c61: ad 86 02  -         lda foreground_color
2c64: 48        -         pha
2c65: a9 02     -         lda #color
2c67: 8d 86 02  -         sta foreground_color
2c6a: a2 00     -         ldx #$00
2c6c: bd ec 3c  -         lda msg,x
2c6f: f0 07     -         beq !done+
2c71: 20 d2 ff  -         jsr kernal_chrout
2c74: e8        -         inx
2c75: 4c 6c 2c  -         jmp !loop-
2c78: 68        -         pla
2c79: 8d 86 02  -         sta foreground_color
2c7c: a2 00     -         ldx #$00
2c7e: bd 8d 2c  -         lda msg,x
2c81: f0 07     -         beq !done+
2c83: 20 d2 ff  -         jsr kernal_chrout
2c86: e8        -         inx
2c87: 4c 7e 2c  -         jmp !loop-
2c8a: 4c 8f 2c  -         jmp !done+
2c8d: 0d 00     - memory: .byte RETURN, NULL
2c8f: ae f0 3c  -         ldx TEST_NAME_COUNT
2c92: e0 15     -         cpx #TESTS_PER_PAGE
2c94: d0 5d     -         bne !exit+
2c96: ad 86 02  -         lda foreground_color
2c99: 48        -         pha
2c9a: a9 01     -         lda #color
2c9c: 8d 86 02  -         sta foreground_color
2c9f: a2 00     -         ldx #$00
2ca1: bd b4 2c  -         lda msg,x
2ca4: f0 07     -         beq !done+
2ca6: 20 d2 ff  -         jsr kernal_chrout
2ca9: e8        -         inx
2caa: 4c a1 2c  -         jmp !loop-
2cad: 68        -         pla
2cae: 8d 86 02  -         sta foreground_color
2cb1: 4c d3 2c  -         jmp !no_key+
2cb4: 0d        - memory: .byte RETURN
2cb5: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2cc5: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2cd1: 0d 00     -         .byte RETURN, NULL
2cd3: 20 9f ff  -         jsr scnkey  // scan keyboard
2cd6: 20 e4 ff  -         jsr getin	// put result into A
2cd9: f0 f8     -         beq !no_key-
2cdb: a2 00     -         ldx #$00
2cdd: bd ec 2c  -         lda msg,x
2ce0: f0 07     -         beq !done+
2ce2: 20 d2 ff  -         jsr kernal_chrout
2ce5: e8        -         inx
2ce6: 4c dd 2c  -         jmp !loop-
2ce9: 4c ee 2c  -         jmp !done+
2cec: 0d 00     - newline:.byte RETURN, NULL
2cee: a2 00     -         ldx #$00
2cf0: 8e f0 3c  -         stx TEST_NAME_COUNT
2cf3: 60        -         rts
2cf4: ee f0 3c  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
2cf7: ad 86 02  -         lda foreground_color
2cfa: 48        -         pha
2cfb: a9 0f     -         lda #color
2cfd: 8d 86 02  -         sta foreground_color
2d00: a2 00     -         ldx #$00
2d02: bd 15 2d  -         lda msg,x
2d05: f0 07     -         beq !done+
2d07: 20 d2 ff  -         jsr kernal_chrout
2d0a: e8        -         inx
2d0b: 4c 02 2d  -         jmp !loop-
2d0e: 68        -         pla
2d0f: 8d 86 02  -         sta foreground_color
2d12: 4c 27 2d  -         jmp !done+
2d15: 20 20     - memory: .fill spacing, spacebar
2d17: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
2d23: 2e 2e 2e  -         .text "..."
2d26: 00        -         .byte NULL
2d27: 20 31 08  -         jsr SW16
2d2a: 15        -         .byte opcode(op, register)
2d2b: 01 00     -         .word address.getValue()
2d2d: b0        -         .byte opcode($b0, register) }
2d2e: b5        -         .byte opcode($b0, register) }
2d2f: 08 07     -         .byte $08, effective_address(ea,*) }
2d31: 01 00     -         .byte $01, effective_address(ea,*) }
2d33: 10        -         .byte opcode(op, register)
2d34: dc fe     -         .word address.getValue()
2d36: 01 05     -         .byte $01, effective_address(ea,*) }
2d38: 10        -         .byte opcode(op, register)
2d39: 23 01     -         .word address.getValue()
2d3b: 01 00     -         .byte $01, effective_address(ea,*) }
2d3d: 00        -         .byte $00 }
2d3e: ee ee 3c  -         inc TEST_COUNT
2d41: ad 86 02  -         lda foreground_color
2d44: 48        -         pha
2d45: a9 0e     -         lda #color
2d47: 8d 86 02  -         sta foreground_color
2d4a: a2 00     -         ldx #$00
2d4c: bd 5f 2d  -         lda msg,x
2d4f: f0 07     -         beq !done+
2d51: 20 d2 ff  -         jsr kernal_chrout
2d54: e8        -         inx
2d55: 4c 4c 2d  -         jmp !loop-
2d58: 68        -         pla
2d59: 8d 86 02  -         sta foreground_color
2d5c: 4c 63 2d  -         jmp !done+
2d5f: 20        - memory: .byte spacebar
2d60: 32        -         .text description
2d61: 3a        -         .text ":"
2d62: 00        -         .byte NULL
2d63: a6 17     -         ldx rl(register.getValue())
2d65: a4 18     -         ldy rh(register.getValue())
2d67: e0 23     -         cpx #<value
2d69: d0 25     -         bne !failed+
2d6b: c0 01     -         cpy #>value
2d6d: d0 21     -         bne !failed+
2d6f: ee ef 3c  -         inc TEST_PASS_COUNT
2d72: ad 86 02  -         lda foreground_color
2d75: 48        -         pha
2d76: a9 05     -         lda #color
2d78: 8d 86 02  -         sta foreground_color
2d7b: a2 00     -         ldx #$00
2d7d: bd ea 3c  -         lda msg,x
2d80: f0 07     -         beq !done+
2d82: 20 d2 ff  -         jsr kernal_chrout
2d85: e8        -         inx
2d86: 4c 7d 2d  -         jmp !loop-
2d89: 68        -         pla
2d8a: 8d 86 02  -         sta foreground_color
2d8d: 4c ab 2d  -         jmp !done+
2d90: ad 86 02  -         lda foreground_color
2d93: 48        -         pha
2d94: a9 02     -         lda #color
2d96: 8d 86 02  -         sta foreground_color
2d99: a2 00     -         ldx #$00
2d9b: bd ec 3c  -         lda msg,x
2d9e: f0 07     -         beq !done+
2da0: 20 d2 ff  -         jsr kernal_chrout
2da3: e8        -         inx
2da4: 4c 9b 2d  -         jmp !loop-
2da7: 68        -         pla
2da8: 8d 86 02  -         sta foreground_color
2dab: a2 00     -         ldx #$00
2dad: bd bc 2d  -         lda msg,x
2db0: f0 07     -         beq !done+
2db2: 20 d2 ff  -         jsr kernal_chrout
2db5: e8        -         inx
2db6: 4c ad 2d  -         jmp !loop-
2db9: 4c be 2d  -         jmp !done+
2dbc: 0d 00     - memory: .byte RETURN, NULL
2dbe: ae f0 3c  -         ldx TEST_NAME_COUNT
2dc1: e0 15     -         cpx #TESTS_PER_PAGE
2dc3: d0 5d     -         bne !exit+
2dc5: ad 86 02  -         lda foreground_color
2dc8: 48        -         pha
2dc9: a9 01     -         lda #color
2dcb: 8d 86 02  -         sta foreground_color
2dce: a2 00     -         ldx #$00
2dd0: bd e3 2d  -         lda msg,x
2dd3: f0 07     -         beq !done+
2dd5: 20 d2 ff  -         jsr kernal_chrout
2dd8: e8        -         inx
2dd9: 4c d0 2d  -         jmp !loop-
2ddc: 68        -         pla
2ddd: 8d 86 02  -         sta foreground_color
2de0: 4c 02 2e  -         jmp !no_key+
2de3: 0d        - memory: .byte RETURN
2de4: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2df4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2e00: 0d 00     -         .byte RETURN, NULL
2e02: 20 9f ff  -         jsr scnkey  // scan keyboard
2e05: 20 e4 ff  -         jsr getin	// put result into A
2e08: f0 f8     -         beq !no_key-
2e0a: a2 00     -         ldx #$00
2e0c: bd 1b 2e  -         lda msg,x
2e0f: f0 07     -         beq !done+
2e11: 20 d2 ff  -         jsr kernal_chrout
2e14: e8        -         inx
2e15: 4c 0c 2e  -         jmp !loop-
2e18: 4c 1d 2e  -         jmp !done+
2e1b: 0d 00     - newline:.byte RETURN, NULL
2e1d: a2 00     -         ldx #$00
2e1f: 8e f0 3c  -         stx TEST_NAME_COUNT
2e22: 60        -         rts
2e23: ee f0 3c  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
2e26: ad 86 02  -         lda foreground_color
2e29: 48        -         pha
2e2a: a9 0f     -         lda #color
2e2c: 8d 86 02  -         sta foreground_color
2e2f: a2 00     -         ldx #$00
2e31: bd 44 2e  -         lda msg,x
2e34: f0 07     -         beq !done+
2e36: 20 d2 ff  -         jsr kernal_chrout
2e39: e8        -         inx
2e3a: 4c 31 2e  -         jmp !loop-
2e3d: 68        -         pla
2e3e: 8d 86 02  -         sta foreground_color
2e41: 4c 57 2e  -         jmp !done+
2e44: 20 20     - memory: .fill spacing, spacebar
2e46: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
2e53: 2e 2e 2e  -         .text "..."
2e56: 00        -         .byte NULL
2e57: 20 31 08  -         jsr SW16
2e5a: 15        -         .byte opcode(op, register)
2e5b: 02 00     -         .word address.getValue()
2e5d: b0        -         .byte opcode($b0, register) }
2e5e: b5        -         .byte opcode($b0, register) }
2e5f: 09 07     -         .byte $09, effective_address(ea,*) }
2e61: 01 00     -         .byte $01, effective_address(ea,*) }
2e63: 10        -         .byte opcode(op, register)
2e64: dc fe     -         .word address.getValue()
2e66: 01 05     -         .byte $01, effective_address(ea,*) }
2e68: 10        -         .byte opcode(op, register)
2e69: 23 01     -         .word address.getValue()
2e6b: 01 00     -         .byte $01, effective_address(ea,*) }
2e6d: 00        -         .byte $00 }
2e6e: ee ee 3c  -         inc TEST_COUNT
2e71: ad 86 02  -         lda foreground_color
2e74: 48        -         pha
2e75: a9 0e     -         lda #color
2e77: 8d 86 02  -         sta foreground_color
2e7a: a2 00     -         ldx #$00
2e7c: bd 8f 2e  -         lda msg,x
2e7f: f0 07     -         beq !done+
2e81: 20 d2 ff  -         jsr kernal_chrout
2e84: e8        -         inx
2e85: 4c 7c 2e  -         jmp !loop-
2e88: 68        -         pla
2e89: 8d 86 02  -         sta foreground_color
2e8c: 4c 93 2e  -         jmp !done+
2e8f: 20        - memory: .byte spacebar
2e90: 32        -         .text description
2e91: 3a        -         .text ":"
2e92: 00        -         .byte NULL
2e93: a6 17     -         ldx rl(register.getValue())
2e95: a4 18     -         ldy rh(register.getValue())
2e97: e0 23     -         cpx #<value
2e99: d0 25     -         bne !failed+
2e9b: c0 01     -         cpy #>value
2e9d: d0 21     -         bne !failed+
2e9f: ee ef 3c  -         inc TEST_PASS_COUNT
2ea2: ad 86 02  -         lda foreground_color
2ea5: 48        -         pha
2ea6: a9 05     -         lda #color
2ea8: 8d 86 02  -         sta foreground_color
2eab: a2 00     -         ldx #$00
2ead: bd ea 3c  -         lda msg,x
2eb0: f0 07     -         beq !done+
2eb2: 20 d2 ff  -         jsr kernal_chrout
2eb5: e8        -         inx
2eb6: 4c ad 2e  -         jmp !loop-
2eb9: 68        -         pla
2eba: 8d 86 02  -         sta foreground_color
2ebd: 4c db 2e  -         jmp !done+
2ec0: ad 86 02  -         lda foreground_color
2ec3: 48        -         pha
2ec4: a9 02     -         lda #color
2ec6: 8d 86 02  -         sta foreground_color
2ec9: a2 00     -         ldx #$00
2ecb: bd ec 3c  -         lda msg,x
2ece: f0 07     -         beq !done+
2ed0: 20 d2 ff  -         jsr kernal_chrout
2ed3: e8        -         inx
2ed4: 4c cb 2e  -         jmp !loop-
2ed7: 68        -         pla
2ed8: 8d 86 02  -         sta foreground_color
2edb: a2 00     -         ldx #$00
2edd: bd ec 2e  -         lda msg,x
2ee0: f0 07     -         beq !done+
2ee2: 20 d2 ff  -         jsr kernal_chrout
2ee5: e8        -         inx
2ee6: 4c dd 2e  -         jmp !loop-
2ee9: 4c ee 2e  -         jmp !done+
2eec: 0d 00     - memory: .byte RETURN, NULL
2eee: ae f0 3c  -         ldx TEST_NAME_COUNT
2ef1: e0 15     -         cpx #TESTS_PER_PAGE
2ef3: d0 5d     -         bne !exit+
2ef5: ad 86 02  -         lda foreground_color
2ef8: 48        -         pha
2ef9: a9 01     -         lda #color
2efb: 8d 86 02  -         sta foreground_color
2efe: a2 00     -         ldx #$00
2f00: bd 13 2f  -         lda msg,x
2f03: f0 07     -         beq !done+
2f05: 20 d2 ff  -         jsr kernal_chrout
2f08: e8        -         inx
2f09: 4c 00 2f  -         jmp !loop-
2f0c: 68        -         pla
2f0d: 8d 86 02  -         sta foreground_color
2f10: 4c 32 2f  -         jmp !no_key+
2f13: 0d        - memory: .byte RETURN
2f14: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2f24: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2f30: 0d 00     -         .byte RETURN, NULL
2f32: 20 9f ff  -         jsr scnkey  // scan keyboard
2f35: 20 e4 ff  -         jsr getin	// put result into A
2f38: f0 f8     -         beq !no_key-
2f3a: a2 00     -         ldx #$00
2f3c: bd 4b 2f  -         lda msg,x
2f3f: f0 07     -         beq !done+
2f41: 20 d2 ff  -         jsr kernal_chrout
2f44: e8        -         inx
2f45: 4c 3c 2f  -         jmp !loop-
2f48: 4c 4d 2f  -         jmp !done+
2f4b: 0d 00     - newline:.byte RETURN, NULL
2f4d: a2 00     -         ldx #$00
2f4f: 8e f0 3c  -         stx TEST_NAME_COUNT
2f52: 60        -         rts
2f53: ee f0 3c  - BREAK_TEST:inc TEST_NAME_COUNT
2f56: ad 86 02  -         lda foreground_color
2f59: 48        -         pha
2f5a: a9 0f     -         lda #color
2f5c: 8d 86 02  -         sta foreground_color
2f5f: a2 00     -         ldx #$00
2f61: bd 74 2f  -         lda msg,x
2f64: f0 07     -         beq !done+
2f66: 20 d2 ff  -         jsr kernal_chrout
2f69: e8        -         inx
2f6a: 4c 61 2f  -         jmp !loop-
2f6d: 68        -         pla
2f6e: 8d 86 02  -         sta foreground_color
2f71: 4c 7f 2f  -         jmp !done+
2f74: 20 20     - memory: .fill spacing, spacebar
2f76: 42 52 45 41 4b                                   -         .text name
2f7b: 2e 2e 2e  -         .text "..."
2f7e: 00        -         .byte NULL
2f7f: a9 35     -         lda #<handler
2f81: 8d 16 03  -         sta address
2f84: a9 0a     -         lda #>handler
2f86: 8d 17 03  -         sta address+1
2f89: 20 31 08  -         jsr SW16
2f8c: 10        -         .byte opcode(op, register)
2f8d: ed fe     -         .word address.getValue()
2f8f: 0a        -         .byte $0a }
2f90: 0d        -         .byte $0d
2f91: 30        -         .byte >(address.getValue()-1)
2f92: 7c        -         .byte <(address.getValue()-1)
2f93: 10        -         .byte opcode(op, register)
2f94: 23 01     -         .word address.getValue()
2f96: 0a        -         .byte $0a }
2f97: 00        -         .byte $00 }
2f98: ee ee 3c  -         inc TEST_COUNT
2f9b: ad 86 02  -         lda foreground_color
2f9e: 48        -         pha
2f9f: a9 0e     -         lda #color
2fa1: 8d 86 02  -         sta foreground_color
2fa4: a2 00     -         ldx #$00
2fa6: bd b9 2f  -         lda msg,x
2fa9: f0 07     -         beq !done+
2fab: 20 d2 ff  -         jsr kernal_chrout
2fae: e8        -         inx
2faf: 4c a6 2f  -         jmp !loop-
2fb2: 68        -         pla
2fb3: 8d 86 02  -         sta foreground_color
2fb6: 4c bd 2f  -         jmp !done+
2fb9: 20        - memory: .byte spacebar
2fba: 32        -         .text description
2fbb: 3a        -         .text ":"
2fbc: 00        -         .byte NULL
2fbd: a6 17     -         ldx rl(register.getValue())
2fbf: a4 18     -         ldy rh(register.getValue())
2fc1: e0 23     -         cpx #<value
2fc3: d0 25     -         bne !failed+
2fc5: c0 01     -         cpy #>value
2fc7: d0 21     -         bne !failed+
2fc9: ee ef 3c  -         inc TEST_PASS_COUNT
2fcc: ad 86 02  -         lda foreground_color
2fcf: 48        -         pha
2fd0: a9 05     -         lda #color
2fd2: 8d 86 02  -         sta foreground_color
2fd5: a2 00     -         ldx #$00
2fd7: bd ea 3c  -         lda msg,x
2fda: f0 07     -         beq !done+
2fdc: 20 d2 ff  -         jsr kernal_chrout
2fdf: e8        -         inx
2fe0: 4c d7 2f  -         jmp !loop-
2fe3: 68        -         pla
2fe4: 8d 86 02  -         sta foreground_color
2fe7: 4c 05 30  -         jmp !done+
2fea: ad 86 02  -         lda foreground_color
2fed: 48        -         pha
2fee: a9 02     -         lda #color
2ff0: 8d 86 02  -         sta foreground_color
2ff3: a2 00     -         ldx #$00
2ff5: bd ec 3c  -         lda msg,x
2ff8: f0 07     -         beq !done+
2ffa: 20 d2 ff  -         jsr kernal_chrout
2ffd: e8        -         inx
2ffe: 4c f5 2f  -         jmp !loop-
3001: 68        -         pla
3002: 8d 86 02  -         sta foreground_color
3005: a2 00     -         ldx #$00
3007: bd 16 30  -         lda msg,x
300a: f0 07     -         beq !done+
300c: 20 d2 ff  -         jsr kernal_chrout
300f: e8        -         inx
3010: 4c 07 30  -         jmp !loop-
3013: 4c 18 30  -         jmp !done+
3016: 0d 00     - memory: .byte RETURN, NULL
3018: ae f0 3c  -         ldx TEST_NAME_COUNT
301b: e0 15     -         cpx #TESTS_PER_PAGE
301d: d0 5d     -         bne !exit+
301f: ad 86 02  -         lda foreground_color
3022: 48        -         pha
3023: a9 01     -         lda #color
3025: 8d 86 02  -         sta foreground_color
3028: a2 00     -         ldx #$00
302a: bd 3d 30  -         lda msg,x
302d: f0 07     -         beq !done+
302f: 20 d2 ff  -         jsr kernal_chrout
3032: e8        -         inx
3033: 4c 2a 30  -         jmp !loop-
3036: 68        -         pla
3037: 8d 86 02  -         sta foreground_color
303a: 4c 5c 30  -         jmp !no_key+
303d: 0d        - memory: .byte RETURN
303e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
304e: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
305a: 0d 00     -         .byte RETURN, NULL
305c: 20 9f ff  -         jsr scnkey  // scan keyboard
305f: 20 e4 ff  -         jsr getin	// put result into A
3062: f0 f8     -         beq !no_key-
3064: a2 00     -         ldx #$00
3066: bd 75 30  -         lda msg,x
3069: f0 07     -         beq !done+
306b: 20 d2 ff  -         jsr kernal_chrout
306e: e8        -         inx
306f: 4c 66 30  -         jmp !loop-
3072: 4c 77 30  -         jmp !done+
3075: 0d 00     - newline:.byte RETURN, NULL
3077: a2 00     -         ldx #$00
3079: 8e f0 3c  -         stx TEST_NAME_COUNT
307c: 60        -         rts
307d: ee ee 3c  -         inc TEST_COUNT
3080: ad 86 02  -         lda foreground_color
3083: 48        -         pha
3084: a9 0e     -         lda #color
3086: 8d 86 02  -         sta foreground_color
3089: a2 00     -         ldx #$00
308b: bd 9e 30  -         lda msg,x
308e: f0 07     -         beq !done+
3090: 20 d2 ff  -         jsr kernal_chrout
3093: e8        -         inx
3094: 4c 8b 30  -         jmp !loop-
3097: 68        -         pla
3098: 8d 86 02  -         sta foreground_color
309b: 4c a2 30  -         jmp !done+
309e: 20        - memory: .byte spacebar
309f: 31        -         .text description
30a0: 3a        -         .text ":"
30a1: 00        -         .byte NULL
30a2: a6 17     -         ldx rl(register.getValue())
30a4: a4 18     -         ldy rh(register.getValue())
30a6: e0 ed     -         cpx #<value
30a8: d0 25     -         bne !failed+
30aa: c0 fe     -         cpy #>value
30ac: d0 21     -         bne !failed+
30ae: ee ef 3c  -         inc TEST_PASS_COUNT
30b1: ad 86 02  -         lda foreground_color
30b4: 48        -         pha
30b5: a9 05     -         lda #color
30b7: 8d 86 02  -         sta foreground_color
30ba: a2 00     -         ldx #$00
30bc: bd ea 3c  -         lda msg,x
30bf: f0 07     -         beq !done+
30c1: 20 d2 ff  -         jsr kernal_chrout
30c4: e8        -         inx
30c5: 4c bc 30  -         jmp !loop-
30c8: 68        -         pla
30c9: 8d 86 02  -         sta foreground_color
30cc: 4c ea 30  -         jmp !done+
30cf: ad 86 02  -         lda foreground_color
30d2: 48        -         pha
30d3: a9 02     -         lda #color
30d5: 8d 86 02  -         sta foreground_color
30d8: a2 00     -         ldx #$00
30da: bd ec 3c  -         lda msg,x
30dd: f0 07     -         beq !done+
30df: 20 d2 ff  -         jsr kernal_chrout
30e2: e8        -         inx
30e3: 4c da 30  -         jmp !loop-
30e6: 68        -         pla
30e7: 8d 86 02  -         sta foreground_color
30ea: 60        -         rts
30eb: ee f0 3c  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
30ee: ad 86 02  -         lda foreground_color
30f1: 48        -         pha
30f2: a9 0f     -         lda #color
30f4: 8d 86 02  -         sta foreground_color
30f7: a2 00     -         ldx #$00
30f9: bd 0c 31  -         lda msg,x
30fc: f0 07     -         beq !done+
30fe: 20 d2 ff  -         jsr kernal_chrout
3101: e8        -         inx
3102: 4c f9 30  -         jmp !loop-
3105: 68        -         pla
3106: 8d 86 02  -         sta foreground_color
3109: 4c 1b 31  -         jmp !done+
310c: 20 20     - memory: .fill spacing, spacebar
310e: 49 4e 54 20 42 52 45 41 4b                       -         .text name
3117: 2e 2e 2e  -         .text "..."
311a: 00        -         .byte NULL
311b: a9 35     -         lda #<handler
311d: 8d 16 03  -         sta address
3120: a9 0a     -         lda #>handler
3122: 8d 17 03  -         sta address+1
3125: 20 31 08  -         jsr SW16
3128: 10        -         .byte opcode(op, register)
3129: ed fe     -         .word address.getValue()
312b: 0a        -         .byte $0a }
312c: 0d        -         .byte $0d
312d: 31        -         .byte >(address.getValue()-1)
312e: ae        -         .byte <(address.getValue()-1)
312f: 10        -         .byte opcode(op, register)
3130: 23 01     -         .word address.getValue()
3132: 0a        -         .byte $0a }
3133: 0d        -         .byte $0d
3134: 32        -         .byte >(address.getValue()-1)
3135: 1c        -         .byte <(address.getValue()-1)
3136: 00        -         .byte $00 }
3137: a2 00     -         ldx #$00
3139: bd 48 31  -         lda msg,x
313c: f0 07     -         beq !done+
313e: 20 d2 ff  -         jsr kernal_chrout
3141: e8        -         inx
3142: 4c 39 31  -         jmp !loop-
3145: 4c 4a 31  -         jmp !done+
3148: 0d 00     - memory: .byte RETURN, NULL
314a: ae f0 3c  -         ldx TEST_NAME_COUNT
314d: e0 15     -         cpx #TESTS_PER_PAGE
314f: d0 5d     -         bne !exit+
3151: ad 86 02  -         lda foreground_color
3154: 48        -         pha
3155: a9 01     -         lda #color
3157: 8d 86 02  -         sta foreground_color
315a: a2 00     -         ldx #$00
315c: bd 6f 31  -         lda msg,x
315f: f0 07     -         beq !done+
3161: 20 d2 ff  -         jsr kernal_chrout
3164: e8        -         inx
3165: 4c 5c 31  -         jmp !loop-
3168: 68        -         pla
3169: 8d 86 02  -         sta foreground_color
316c: 4c 8e 31  -         jmp !no_key+
316f: 0d        - memory: .byte RETURN
3170: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3180: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
318c: 0d 00     -         .byte RETURN, NULL
318e: 20 9f ff  -         jsr scnkey  // scan keyboard
3191: 20 e4 ff  -         jsr getin	// put result into A
3194: f0 f8     -         beq !no_key-
3196: a2 00     -         ldx #$00
3198: bd a7 31  -         lda msg,x
319b: f0 07     -         beq !done+
319d: 20 d2 ff  -         jsr kernal_chrout
31a0: e8        -         inx
31a1: 4c 98 31  -         jmp !loop-
31a4: 4c a9 31  -         jmp !done+
31a7: 0d 00     - newline:.byte RETURN, NULL
31a9: a2 00     -         ldx #$00
31ab: 8e f0 3c  -         stx TEST_NAME_COUNT
31ae: 60        -         rts
31af: ee ee 3c  -         inc TEST_COUNT
31b2: ad 86 02  -         lda foreground_color
31b5: 48        -         pha
31b6: a9 0e     -         lda #color
31b8: 8d 86 02  -         sta foreground_color
31bb: a2 00     -         ldx #$00
31bd: bd d0 31  -         lda msg,x
31c0: f0 07     -         beq !done+
31c2: 20 d2 ff  -         jsr kernal_chrout
31c5: e8        -         inx
31c6: 4c bd 31  -         jmp !loop-
31c9: 68        -         pla
31ca: 8d 86 02  -         sta foreground_color
31cd: 4c d4 31  -         jmp !done+
31d0: 20        - memory: .byte spacebar
31d1: 31        -         .text description
31d2: 3a        -         .text ":"
31d3: 00        -         .byte NULL
31d4: a6 17     -         ldx rl(register.getValue())
31d6: a4 18     -         ldy rh(register.getValue())
31d8: e0 ed     -         cpx #<value
31da: d0 25     -         bne !failed+
31dc: c0 fe     -         cpy #>value
31de: d0 21     -         bne !failed+
31e0: ee ef 3c  -         inc TEST_PASS_COUNT
31e3: ad 86 02  -         lda foreground_color
31e6: 48        -         pha
31e7: a9 05     -         lda #color
31e9: 8d 86 02  -         sta foreground_color
31ec: a2 00     -         ldx #$00
31ee: bd ea 3c  -         lda msg,x
31f1: f0 07     -         beq !done+
31f3: 20 d2 ff  -         jsr kernal_chrout
31f6: e8        -         inx
31f7: 4c ee 31  -         jmp !loop-
31fa: 68        -         pla
31fb: 8d 86 02  -         sta foreground_color
31fe: 4c 1c 32  -         jmp !done+
3201: ad 86 02  -         lda foreground_color
3204: 48        -         pha
3205: a9 02     -         lda #color
3207: 8d 86 02  -         sta foreground_color
320a: a2 00     -         ldx #$00
320c: bd ec 3c  -         lda msg,x
320f: f0 07     -         beq !done+
3211: 20 d2 ff  -         jsr kernal_chrout
3214: e8        -         inx
3215: 4c 0c 32  -         jmp !loop-
3218: 68        -         pla
3219: 8d 86 02  -         sta foreground_color
321c: 60        -         rts
321d: ee ee 3c  -         inc TEST_COUNT
3220: ad 86 02  -         lda foreground_color
3223: 48        -         pha
3224: a9 0e     -         lda #color
3226: 8d 86 02  -         sta foreground_color
3229: a2 00     -         ldx #$00
322b: bd 3e 32  -         lda msg,x
322e: f0 07     -         beq !done+
3230: 20 d2 ff  -         jsr kernal_chrout
3233: e8        -         inx
3234: 4c 2b 32  -         jmp !loop-
3237: 68        -         pla
3238: 8d 86 02  -         sta foreground_color
323b: 4c 42 32  -         jmp !done+
323e: 20        - memory: .byte spacebar
323f: 32        -         .text description
3240: 3a        -         .text ":"
3241: 00        -         .byte NULL
3242: a6 17     -         ldx rl(register.getValue())
3244: a4 18     -         ldy rh(register.getValue())
3246: e0 23     -         cpx #<value
3248: d0 25     -         bne !failed+
324a: c0 01     -         cpy #>value
324c: d0 21     -         bne !failed+
324e: ee ef 3c  -         inc TEST_PASS_COUNT
3251: ad 86 02  -         lda foreground_color
3254: 48        -         pha
3255: a9 05     -         lda #color
3257: 8d 86 02  -         sta foreground_color
325a: a2 00     -         ldx #$00
325c: bd ea 3c  -         lda msg,x
325f: f0 07     -         beq !done+
3261: 20 d2 ff  -         jsr kernal_chrout
3264: e8        -         inx
3265: 4c 5c 32  -         jmp !loop-
3268: 68        -         pla
3269: 8d 86 02  -         sta foreground_color
326c: 4c 8a 32  -         jmp !done+
326f: ad 86 02  -         lda foreground_color
3272: 48        -         pha
3273: a9 02     -         lda #color
3275: 8d 86 02  -         sta foreground_color
3278: a2 00     -         ldx #$00
327a: bd ec 3c  -         lda msg,x
327d: f0 07     -         beq !done+
327f: 20 d2 ff  -         jsr kernal_chrout
3282: e8        -         inx
3283: 4c 7a 32  -         jmp !loop-
3286: 68        -         pla
3287: 8d 86 02  -         sta foreground_color
328a: 60        -         rts
328b: ee f0 3c  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
328e: ad 86 02  -         lda foreground_color
3291: 48        -         pha
3292: a9 0f     -         lda #color
3294: 8d 86 02  -         sta foreground_color
3297: a2 00     -         ldx #$00
3299: bd ac 32  -         lda msg,x
329c: f0 07     -         beq !done+
329e: 20 d2 ff  -         jsr kernal_chrout
32a1: e8        -         inx
32a2: 4c 99 32  -         jmp !loop-
32a5: 68        -         pla
32a6: 8d 86 02  -         sta foreground_color
32a9: 4c bf 32  -         jmp !done+
32ac: 20 20     - memory: .fill spacing, spacebar
32ae: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
32bb: 2e 2e 2e  -         .text "..."
32be: 00        -         .byte NULL
32bf: 20 31 08  -         jsr SW16
32c2: 15        -         .byte opcode(op, register)
32c3: 0c 3d     -         .word address.getValue()
32c5: 14        -         .byte opcode(op, register)
32c6: 1c 3d     -         .word address.getValue()
32c8: 16        -         .byte opcode(op, register)
32c9: 1c 3d     -         .word address.getValue()
32cb: 0c 04     -         .byte $0c, effective_address(ea,*) }
32cd: 00        -         .byte $00 }
32ce: 4c d8 32  -         jmp !done+
32d1: 45        -         .byte opcode($40, register) }
32d2: 56        -         .byte opcode($50, register) }
32d3: 24        -         .byte opcode($20, register) }
32d4: d5        -         .byte opcode($d0, register) }
32d5: 04 fa     -         .byte $04, effective_address(ea,*) }
32d7: 0b        -         .byte $0b }
32d8: ee ee 3c  -         inc TEST_COUNT
32db: ad 86 02  -         lda foreground_color
32de: 48        -         pha
32df: a9 0e     -         lda #color
32e1: 8d 86 02  -         sta foreground_color
32e4: a2 00     -         ldx #$00
32e6: bd f9 32  -         lda msg,x
32e9: f0 07     -         beq !done+
32eb: 20 d2 ff  -         jsr kernal_chrout
32ee: e8        -         inx
32ef: 4c e6 32  -         jmp !loop-
32f2: 68        -         pla
32f3: 8d 86 02  -         sta foreground_color
32f6: 4c ff 32  -         jmp !done+
32f9: 20        - memory: .byte spacebar
32fa: 4d 45 4d  -         .text description
32fd: 3a        -         .text ":"
32fe: 00        -         .byte NULL
32ff: a2 ff     -         ldx #$ff
3301: e8        -         inx
3302: e0 10     -         cpx #size
3304: f0 0b     -         beq !success+
3306: bd 0c 3d  -         lda source,x
3309: dd 1c 3d  -         cmp dest,x
330c: f0 f3     -         beq !loop-
330e: 4c 32 33  -         jmp !failed+
3311: ee ef 3c  -         inc TEST_PASS_COUNT
3314: ad 86 02  -         lda foreground_color
3317: 48        -         pha
3318: a9 05     -         lda #color
331a: 8d 86 02  -         sta foreground_color
331d: a2 00     -         ldx #$00
331f: bd ea 3c  -         lda msg,x
3322: f0 07     -         beq !done+
3324: 20 d2 ff  -         jsr kernal_chrout
3327: e8        -         inx
3328: 4c 1f 33  -         jmp !loop-
332b: 68        -         pla
332c: 8d 86 02  -         sta foreground_color
332f: 4c 4d 33  -         jmp !done+
3332: ad 86 02  -         lda foreground_color
3335: 48        -         pha
3336: a9 02     -         lda #color
3338: 8d 86 02  -         sta foreground_color
333b: a2 00     -         ldx #$00
333d: bd ec 3c  -         lda msg,x
3340: f0 07     -         beq !done+
3342: 20 d2 ff  -         jsr kernal_chrout
3345: e8        -         inx
3346: 4c 3d 33  -         jmp !loop-
3349: 68        -         pla
334a: 8d 86 02  -         sta foreground_color
334d: a2 00     -         ldx #$00
334f: bd 5e 33  -         lda msg,x
3352: f0 07     -         beq !done+
3354: 20 d2 ff  -         jsr kernal_chrout
3357: e8        -         inx
3358: 4c 4f 33  -         jmp !loop-
335b: 4c 60 33  -         jmp !done+
335e: 0d 00     - memory: .byte RETURN, NULL
3360: ae f0 3c  -         ldx TEST_NAME_COUNT
3363: e0 15     -         cpx #TESTS_PER_PAGE
3365: d0 5d     -         bne !exit+
3367: ad 86 02  -         lda foreground_color
336a: 48        -         pha
336b: a9 01     -         lda #color
336d: 8d 86 02  -         sta foreground_color
3370: a2 00     -         ldx #$00
3372: bd 85 33  -         lda msg,x
3375: f0 07     -         beq !done+
3377: 20 d2 ff  -         jsr kernal_chrout
337a: e8        -         inx
337b: 4c 72 33  -         jmp !loop-
337e: 68        -         pla
337f: 8d 86 02  -         sta foreground_color
3382: 4c a4 33  -         jmp !no_key+
3385: 0d        - memory: .byte RETURN
3386: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3396: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
33a2: 0d 00     -         .byte RETURN, NULL
33a4: 20 9f ff  -         jsr scnkey  // scan keyboard
33a7: 20 e4 ff  -         jsr getin	// put result into A
33aa: f0 f8     -         beq !no_key-
33ac: a2 00     -         ldx #$00
33ae: bd bd 33  -         lda msg,x
33b1: f0 07     -         beq !done+
33b3: 20 d2 ff  -         jsr kernal_chrout
33b6: e8        -         inx
33b7: 4c ae 33  -         jmp !loop-
33ba: 4c bf 33  -         jmp !done+
33bd: 0d 00     - newline:.byte RETURN, NULL
33bf: a2 00     -         ldx #$00
33c1: 8e f0 3c  -         stx TEST_NAME_COUNT
33c4: 60        -         rts
33c5: ee f0 3c  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
33c8: ad 86 02  -         lda foreground_color
33cb: 48        -         pha
33cc: a9 0f     -         lda #color
33ce: 8d 86 02  -         sta foreground_color
33d1: a2 00     -         ldx #$00
33d3: bd e6 33  -         lda msg,x
33d6: f0 07     -         beq !done+
33d8: 20 d2 ff  -         jsr kernal_chrout
33db: e8        -         inx
33dc: 4c d3 33  -         jmp !loop-
33df: 68        -         pla
33e0: 8d 86 02  -         sta foreground_color
33e3: 4c fb 33  -         jmp !done+
33e6: 20 20     - memory: .fill spacing, spacebar
33e8: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
33f7: 2e 2e 2e  -         .text "..."
33fa: 00        -         .byte NULL
33fb: 20 31 08  -         jsr SW16
33fe: 10        -         .byte opcode(op, register)
33ff: 34 12     -         .word address.getValue()
3401: 0c 04     -         .byte $0c, effective_address(ea,*) }
3403: 00        -         .byte $00 }
3404: 4c 0b 34  -         jmp !done+
3407: 10        -         .byte opcode(op, register)
3408: 78 56     -         .word address.getValue()
340a: 0b        -         .byte $0b }
340b: ee ee 3c  -         inc TEST_COUNT
340e: ad 86 02  -         lda foreground_color
3411: 48        -         pha
3412: a9 0e     -         lda #color
3414: 8d 86 02  -         sta foreground_color
3417: a2 00     -         ldx #$00
3419: bd 2c 34  -         lda msg,x
341c: f0 07     -         beq !done+
341e: 20 d2 ff  -         jsr kernal_chrout
3421: e8        -         inx
3422: 4c 19 34  -         jmp !loop-
3425: 68        -         pla
3426: 8d 86 02  -         sta foreground_color
3429: 4c 32 34  -         jmp !done+
342c: 20        - memory: .byte spacebar
342d: 53 55 42  -         .text description
3430: 3a        -         .text ":"
3431: 00        -         .byte NULL
3432: a6 17     -         ldx rl(register.getValue())
3434: a4 18     -         ldy rh(register.getValue())
3436: e0 78     -         cpx #<value
3438: d0 25     -         bne !failed+
343a: c0 56     -         cpy #>value
343c: d0 21     -         bne !failed+
343e: ee ef 3c  -         inc TEST_PASS_COUNT
3441: ad 86 02  -         lda foreground_color
3444: 48        -         pha
3445: a9 05     -         lda #color
3447: 8d 86 02  -         sta foreground_color
344a: a2 00     -         ldx #$00
344c: bd ea 3c  -         lda msg,x
344f: f0 07     -         beq !done+
3451: 20 d2 ff  -         jsr kernal_chrout
3454: e8        -         inx
3455: 4c 4c 34  -         jmp !loop-
3458: 68        -         pla
3459: 8d 86 02  -         sta foreground_color
345c: 4c 7a 34  -         jmp !done+
345f: ad 86 02  -         lda foreground_color
3462: 48        -         pha
3463: a9 02     -         lda #color
3465: 8d 86 02  -         sta foreground_color
3468: a2 00     -         ldx #$00
346a: bd ec 3c  -         lda msg,x
346d: f0 07     -         beq !done+
346f: 20 d2 ff  -         jsr kernal_chrout
3472: e8        -         inx
3473: 4c 6a 34  -         jmp !loop-
3476: 68        -         pla
3477: 8d 86 02  -         sta foreground_color
347a: a2 00     -         ldx #$00
347c: bd 8b 34  -         lda msg,x
347f: f0 07     -         beq !done+
3481: 20 d2 ff  -         jsr kernal_chrout
3484: e8        -         inx
3485: 4c 7c 34  -         jmp !loop-
3488: 4c 8d 34  -         jmp !done+
348b: 0d 00     - memory: .byte RETURN, NULL
348d: ae f0 3c  -         ldx TEST_NAME_COUNT
3490: e0 15     -         cpx #TESTS_PER_PAGE
3492: d0 5d     -         bne !exit+
3494: ad 86 02  -         lda foreground_color
3497: 48        -         pha
3498: a9 01     -         lda #color
349a: 8d 86 02  -         sta foreground_color
349d: a2 00     -         ldx #$00
349f: bd b2 34  -         lda msg,x
34a2: f0 07     -         beq !done+
34a4: 20 d2 ff  -         jsr kernal_chrout
34a7: e8        -         inx
34a8: 4c 9f 34  -         jmp !loop-
34ab: 68        -         pla
34ac: 8d 86 02  -         sta foreground_color
34af: 4c d1 34  -         jmp !no_key+
34b2: 0d        - memory: .byte RETURN
34b3: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
34c3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
34cf: 0d 00     -         .byte RETURN, NULL
34d1: 20 9f ff  -         jsr scnkey  // scan keyboard
34d4: 20 e4 ff  -         jsr getin	// put result into A
34d7: f0 f8     -         beq !no_key-
34d9: a2 00     -         ldx #$00
34db: bd ea 34  -         lda msg,x
34de: f0 07     -         beq !done+
34e0: 20 d2 ff  -         jsr kernal_chrout
34e3: e8        -         inx
34e4: 4c db 34  -         jmp !loop-
34e7: 4c ec 34  -         jmp !done+
34ea: 0d 00     - newline:.byte RETURN, NULL
34ec: a2 00     -         ldx #$00
34ee: 8e f0 3c  -         stx TEST_NAME_COUNT
34f1: 60        -         rts
34f2: ee f0 3c  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
34f5: ad 86 02  -         lda foreground_color
34f8: 48        -         pha
34f9: a9 0f     -         lda #color
34fb: 8d 86 02  -         sta foreground_color
34fe: a2 00     -         ldx #$00
3500: bd 13 35  -         lda msg,x
3503: f0 07     -         beq !done+
3505: 20 d2 ff  -         jsr kernal_chrout
3508: e8        -         inx
3509: 4c 00 35  -         jmp !loop-
350c: 68        -         pla
350d: 8d 86 02  -         sta foreground_color
3510: 4c 26 35  -         jmp !done+
3513: 20 20     - memory: .fill spacing, spacebar
3515: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
3522: 2e 2e 2e  -         .text "..."
3525: 00        -         .byte NULL
3526: 20 31 08  -         jsr SW16
3529: 15        -         .byte opcode(op, register)
352a: 00 00     -         .word address.getValue()
352c: 10        -         .byte opcode(op, register)
352d: 17 36     -         .word address.getValue()
352f: 3f        -         .byte opcode($30, register) }
3530: 00        -         .byte $00 }
3531: ee ee 3c  -         inc TEST_COUNT
3534: ad 86 02  -         lda foreground_color
3537: 48        -         pha
3538: a9 0e     -         lda #color
353a: 8d 86 02  -         sta foreground_color
353d: a2 00     -         ldx #$00
353f: bd 52 35  -         lda msg,x
3542: f0 07     -         beq !done+
3544: 20 d2 ff  -         jsr kernal_chrout
3547: e8        -         inx
3548: 4c 3f 35  -         jmp !loop-
354b: 68        -         pla
354c: 8d 86 02  -         sta foreground_color
354f: 4c 58 35  -         jmp !done+
3552: 20        - memory: .byte spacebar
3553: 53 45 54  -         .text description
3556: 3a        -         .text ":"
3557: 00        -         .byte NULL
3558: a6 21     -         ldx rl(register.getValue())
355a: a4 22     -         ldy rh(register.getValue())
355c: e0 34     -         cpx #<value
355e: d0 25     -         bne !failed+
3560: c0 12     -         cpy #>value
3562: d0 21     -         bne !failed+
3564: ee ef 3c  -         inc TEST_PASS_COUNT
3567: ad 86 02  -         lda foreground_color
356a: 48        -         pha
356b: a9 05     -         lda #color
356d: 8d 86 02  -         sta foreground_color
3570: a2 00     -         ldx #$00
3572: bd ea 3c  -         lda msg,x
3575: f0 07     -         beq !done+
3577: 20 d2 ff  -         jsr kernal_chrout
357a: e8        -         inx
357b: 4c 72 35  -         jmp !loop-
357e: 68        -         pla
357f: 8d 86 02  -         sta foreground_color
3582: 4c a0 35  -         jmp !done+
3585: ad 86 02  -         lda foreground_color
3588: 48        -         pha
3589: a9 02     -         lda #color
358b: 8d 86 02  -         sta foreground_color
358e: a2 00     -         ldx #$00
3590: bd ec 3c  -         lda msg,x
3593: f0 07     -         beq !done+
3595: 20 d2 ff  -         jsr kernal_chrout
3598: e8        -         inx
3599: 4c 90 35  -         jmp !loop-
359c: 68        -         pla
359d: 8d 86 02  -         sta foreground_color
35a0: a2 00     -         ldx #$00
35a2: bd b1 35  -         lda msg,x
35a5: f0 07     -         beq !done+
35a7: 20 d2 ff  -         jsr kernal_chrout
35aa: e8        -         inx
35ab: 4c a2 35  -         jmp !loop-
35ae: 4c b3 35  -         jmp !done+
35b1: 0d 00     - memory: .byte RETURN, NULL
35b3: ae f0 3c  -         ldx TEST_NAME_COUNT
35b6: e0 15     -         cpx #TESTS_PER_PAGE
35b8: d0 5d     -         bne !exit+
35ba: ad 86 02  -         lda foreground_color
35bd: 48        -         pha
35be: a9 01     -         lda #color
35c0: 8d 86 02  -         sta foreground_color
35c3: a2 00     -         ldx #$00
35c5: bd d8 35  -         lda msg,x
35c8: f0 07     -         beq !done+
35ca: 20 d2 ff  -         jsr kernal_chrout
35cd: e8        -         inx
35ce: 4c c5 35  -         jmp !loop-
35d1: 68        -         pla
35d2: 8d 86 02  -         sta foreground_color
35d5: 4c f7 35  -         jmp !no_key+
35d8: 0d        - memory: .byte RETURN
35d9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
35e9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
35f5: 0d 00     -         .byte RETURN, NULL
35f7: 20 9f ff  -         jsr scnkey  // scan keyboard
35fa: 20 e4 ff  -         jsr getin	// put result into A
35fd: f0 f8     -         beq !no_key-
35ff: a2 00     -         ldx #$00
3601: bd 10 36  -         lda msg,x
3604: f0 07     -         beq !done+
3606: 20 d2 ff  -         jsr kernal_chrout
3609: e8        -         inx
360a: 4c 01 36  -         jmp !loop-
360d: 4c 12 36  -         jmp !done+
3610: 0d 00     - newline:.byte RETURN, NULL
3612: a2 00     -         ldx #$00
3614: 8e f0 3c  -         stx TEST_NAME_COUNT
3617: 60        -         rts
3618: 15        -         .byte opcode(op, register)
3619: 34 12     -         .word address.getValue()
361b: 10        -         .byte opcode(op, register)
361c: 2f 35     -         .word address.getValue()
361e: 3f        -         .byte opcode($30, register) }
361f: ee f0 3c  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
3622: ad 86 02  -         lda foreground_color
3625: 48        -         pha
3626: a9 0f     -         lda #color
3628: 8d 86 02  -         sta foreground_color
362b: a2 00     -         ldx #$00
362d: bd 40 36  -         lda msg,x
3630: f0 07     -         beq !done+
3632: 20 d2 ff  -         jsr kernal_chrout
3635: e8        -         inx
3636: 4c 2d 36  -         jmp !loop-
3639: 68        -         pla
363a: 8d 86 02  -         sta foreground_color
363d: 4c 52 36  -         jmp !done+
3640: 20 20     - memory: .fill spacing, spacebar
3642: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
364e: 2e 2e 2e  -         .text "..."
3651: 00        -         .byte NULL
3652: 20 31 08  -         jsr SW16
3655: 15        -         .byte opcode(op, register)
3656: 21 43     -         .word address.getValue()
3658: 0d        -         .byte $0d
3659: 37        -         .byte >(address.getValue()-1)
365a: 4c        -         .byte <(address.getValue()-1)
365b: 15        -         .byte opcode(op, register)
365c: 34 12     -         .word address.getValue()
365e: 0d        -         .byte $0d
365f: 37        -         .byte >(address.getValue()-1)
3660: be        -         .byte <(address.getValue()-1)
3661: 15        -         .byte opcode(op, register)
3662: 21 43     -         .word address.getValue()
3664: 00        -         .byte $00 }
3665: ee ee 3c  -         inc TEST_COUNT
3668: ad 86 02  -         lda foreground_color
366b: 48        -         pha
366c: a9 0e     -         lda #color
366e: 8d 86 02  -         sta foreground_color
3671: a2 00     -         ldx #$00
3673: bd 86 36  -         lda msg,x
3676: f0 07     -         beq !done+
3678: 20 d2 ff  -         jsr kernal_chrout
367b: e8        -         inx
367c: 4c 73 36  -         jmp !loop-
367f: 68        -         pla
3680: 8d 86 02  -         sta foreground_color
3683: 4c 8d 36  -         jmp !done+
3686: 20        - memory: .byte spacebar
3687: 53 41 4d 45                                      -         .text description
368b: 3a        -         .text ":"
368c: 00        -         .byte NULL
368d: a6 21     -         ldx rl(register.getValue())
368f: a4 22     -         ldy rh(register.getValue())
3691: e0 21     -         cpx #<value
3693: d0 25     -         bne !failed+
3695: c0 43     -         cpy #>value
3697: d0 21     -         bne !failed+
3699: ee ef 3c  -         inc TEST_PASS_COUNT
369c: ad 86 02  -         lda foreground_color
369f: 48        -         pha
36a0: a9 05     -         lda #color
36a2: 8d 86 02  -         sta foreground_color
36a5: a2 00     -         ldx #$00
36a7: bd ea 3c  -         lda msg,x
36aa: f0 07     -         beq !done+
36ac: 20 d2 ff  -         jsr kernal_chrout
36af: e8        -         inx
36b0: 4c a7 36  -         jmp !loop-
36b3: 68        -         pla
36b4: 8d 86 02  -         sta foreground_color
36b7: 4c d5 36  -         jmp !done+
36ba: ad 86 02  -         lda foreground_color
36bd: 48        -         pha
36be: a9 02     -         lda #color
36c0: 8d 86 02  -         sta foreground_color
36c3: a2 00     -         ldx #$00
36c5: bd ec 3c  -         lda msg,x
36c8: f0 07     -         beq !done+
36ca: 20 d2 ff  -         jsr kernal_chrout
36cd: e8        -         inx
36ce: 4c c5 36  -         jmp !loop-
36d1: 68        -         pla
36d2: 8d 86 02  -         sta foreground_color
36d5: a2 00     -         ldx #$00
36d7: bd e6 36  -         lda msg,x
36da: f0 07     -         beq !done+
36dc: 20 d2 ff  -         jsr kernal_chrout
36df: e8        -         inx
36e0: 4c d7 36  -         jmp !loop-
36e3: 4c e8 36  -         jmp !done+
36e6: 0d 00     - memory: .byte RETURN, NULL
36e8: ae f0 3c  -         ldx TEST_NAME_COUNT
36eb: e0 15     -         cpx #TESTS_PER_PAGE
36ed: d0 5d     -         bne !exit+
36ef: ad 86 02  -         lda foreground_color
36f2: 48        -         pha
36f3: a9 01     -         lda #color
36f5: 8d 86 02  -         sta foreground_color
36f8: a2 00     -         ldx #$00
36fa: bd 0d 37  -         lda msg,x
36fd: f0 07     -         beq !done+
36ff: 20 d2 ff  -         jsr kernal_chrout
3702: e8        -         inx
3703: 4c fa 36  -         jmp !loop-
3706: 68        -         pla
3707: 8d 86 02  -         sta foreground_color
370a: 4c 2c 37  -         jmp !no_key+
370d: 0d        - memory: .byte RETURN
370e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
371e: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
372a: 0d 00     -         .byte RETURN, NULL
372c: 20 9f ff  -         jsr scnkey  // scan keyboard
372f: 20 e4 ff  -         jsr getin	// put result into A
3732: f0 f8     -         beq !no_key-
3734: a2 00     -         ldx #$00
3736: bd 45 37  -         lda msg,x
3739: f0 07     -         beq !done+
373b: 20 d2 ff  -         jsr kernal_chrout
373e: e8        -         inx
373f: 4c 36 37  -         jmp !loop-
3742: 4c 47 37  -         jmp !done+
3745: 0d 00     - newline:.byte RETURN, NULL
3747: a2 00     -         ldx #$00
3749: 8e f0 3c  -         stx TEST_NAME_COUNT
374c: 60        -         rts
374d: ee ee 3c  -         inc TEST_COUNT
3750: ad 86 02  -         lda foreground_color
3753: 48        -         pha
3754: a9 0e     -         lda #color
3756: 8d 86 02  -         sta foreground_color
3759: a2 00     -         ldx #$00
375b: bd 6e 37  -         lda msg,x
375e: f0 07     -         beq !done+
3760: 20 d2 ff  -         jsr kernal_chrout
3763: e8        -         inx
3764: 4c 5b 37  -         jmp !loop-
3767: 68        -         pla
3768: 8d 86 02  -         sta foreground_color
376b: 4c 76 37  -         jmp !done+
376e: 20        - memory: .byte spacebar
376f: 56 41 4c 55 45                                   -         .text description
3774: 3a        -         .text ":"
3775: 00        -         .byte NULL
3776: a6 21     -         ldx rl(register.getValue())
3778: a4 22     -         ldy rh(register.getValue())
377a: e0 21     -         cpx #<value
377c: d0 25     -         bne !failed+
377e: c0 43     -         cpy #>value
3780: d0 21     -         bne !failed+
3782: ee ef 3c  -         inc TEST_PASS_COUNT
3785: ad 86 02  -         lda foreground_color
3788: 48        -         pha
3789: a9 05     -         lda #color
378b: 8d 86 02  -         sta foreground_color
378e: a2 00     -         ldx #$00
3790: bd ea 3c  -         lda msg,x
3793: f0 07     -         beq !done+
3795: 20 d2 ff  -         jsr kernal_chrout
3798: e8        -         inx
3799: 4c 90 37  -         jmp !loop-
379c: 68        -         pla
379d: 8d 86 02  -         sta foreground_color
37a0: 4c be 37  -         jmp !done+
37a3: ad 86 02  -         lda foreground_color
37a6: 48        -         pha
37a7: a9 02     -         lda #color
37a9: 8d 86 02  -         sta foreground_color
37ac: a2 00     -         ldx #$00
37ae: bd ec 3c  -         lda msg,x
37b1: f0 07     -         beq !done+
37b3: 20 d2 ff  -         jsr kernal_chrout
37b6: e8        -         inx
37b7: 4c ae 37  -         jmp !loop-
37ba: 68        -         pla
37bb: 8d 86 02  -         sta foreground_color
37be: 60        -         rts
37bf: a9 fe     -         lda #>VALUE_3
37c1: 85 22     -         sta rh(REGISTER)
37c3: a9 ed     -         lda #<VALUE_3
37c5: 85 21     -         sta rl(REGISTER)
37c7: a6 21     -         ldx rl(register.getValue())
37c9: a4 22     -         ldy rh(register.getValue())
37cb: ee ee 3c  -         inc TEST_COUNT
37ce: ad 86 02  -         lda foreground_color
37d1: 48        -         pha
37d2: a9 0e     -         lda #color
37d4: 8d 86 02  -         sta foreground_color
37d7: a2 00     -         ldx #$00
37d9: bd ec 37  -         lda msg,x
37dc: f0 07     -         beq !done+
37de: 20 d2 ff  -         jsr kernal_chrout
37e1: e8        -         inx
37e2: 4c d9 37  -         jmp !loop-
37e5: 68        -         pla
37e6: 8d 86 02  -         sta foreground_color
37e9: 4c f3 37  -         jmp !done+
37ec: 20        - memory: .byte spacebar
37ed: 36 35 30 32                                      -         .text description
37f1: 3a        -         .text ":"
37f2: 00        -         .byte NULL
37f3: a6 21     -         ldx rl(register.getValue())
37f5: a4 22     -         ldy rh(register.getValue())
37f7: e0 ed     -         cpx #<value
37f9: d0 25     -         bne !failed+
37fb: c0 fe     -         cpy #>value
37fd: d0 21     -         bne !failed+
37ff: ee ef 3c  -         inc TEST_PASS_COUNT
3802: ad 86 02  -         lda foreground_color
3805: 48        -         pha
3806: a9 05     -         lda #color
3808: 8d 86 02  -         sta foreground_color
380b: a2 00     -         ldx #$00
380d: bd ea 3c  -         lda msg,x
3810: f0 07     -         beq !done+
3812: 20 d2 ff  -         jsr kernal_chrout
3815: e8        -         inx
3816: 4c 0d 38  -         jmp !loop-
3819: 68        -         pla
381a: 8d 86 02  -         sta foreground_color
381d: 4c 3b 38  -         jmp !done+
3820: ad 86 02  -         lda foreground_color
3823: 48        -         pha
3824: a9 02     -         lda #color
3826: 8d 86 02  -         sta foreground_color
3829: a2 00     -         ldx #$00
382b: bd ec 3c  -         lda msg,x
382e: f0 07     -         beq !done+
3830: 20 d2 ff  -         jsr kernal_chrout
3833: e8        -         inx
3834: 4c 2b 38  -         jmp !loop-
3837: 68        -         pla
3838: 8d 86 02  -         sta foreground_color
383b: 60        -         rts
383c: ee f0 3c  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
383f: ad 86 02  -         lda foreground_color
3842: 48        -         pha
3843: a9 0f     -         lda #color
3845: 8d 86 02  -         sta foreground_color
3848: a2 00     -         ldx #$00
384a: bd 5d 38  -         lda msg,x
384d: f0 07     -         beq !done+
384f: 20 d2 ff  -         jsr kernal_chrout
3852: e8        -         inx
3853: 4c 4a 38  -         jmp !loop-
3856: 68        -         pla
3857: 8d 86 02  -         sta foreground_color
385a: 4c 6f 38  -         jmp !done+
385d: 20 20     - memory: .fill spacing, spacebar
385f: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
386b: 2e 2e 2e  -         .text "..."
386e: 00        -         .byte NULL
386f: 20 31 08  -         jsr SW16
3872: 0f        -         .byte $0f
3873: 06 3d     -         .word address.getValue()
3875: 21        -         .byte rl(register.getValue())
3876: 00        -         .byte $00 }
3877: ee ee 3c  -         inc TEST_COUNT
387a: ad 86 02  -         lda foreground_color
387d: 48        -         pha
387e: a9 0e     -         lda #color
3880: 8d 86 02  -         sta foreground_color
3883: a2 00     -         ldx #$00
3885: bd 98 38  -         lda msg,x
3888: f0 07     -         beq !done+
388a: 20 d2 ff  -         jsr kernal_chrout
388d: e8        -         inx
388e: 4c 85 38  -         jmp !loop-
3891: 68        -         pla
3892: 8d 86 02  -         sta foreground_color
3895: 4c a3 38  -         jmp !done+
3898: 20        - memory: .byte spacebar
3899: 54 45 53 54 20 4d 45 4d                          -         .text description
38a1: 3a        -         .text ":"
38a2: 00        -         .byte NULL
38a3: a6 21     -         ldx rl(register.getValue())
38a5: a4 22     -         ldy rh(register.getValue())
38a7: cc 06 3d  -         cpy address
38aa: d0 26     -         bne !failed+
38ac: ec 07 3d  -         cpx address+1
38af: d0 21     -         bne !failed+
38b1: ee ef 3c  -         inc TEST_PASS_COUNT
38b4: ad 86 02  -         lda foreground_color
38b7: 48        -         pha
38b8: a9 05     -         lda #color
38ba: 8d 86 02  -         sta foreground_color
38bd: a2 00     -         ldx #$00
38bf: bd ea 3c  -         lda msg,x
38c2: f0 07     -         beq !done+
38c4: 20 d2 ff  -         jsr kernal_chrout
38c7: e8        -         inx
38c8: 4c bf 38  -         jmp !loop-
38cb: 68        -         pla
38cc: 8d 86 02  -         sta foreground_color
38cf: 4c ed 38  -         jmp !done+
38d2: ad 86 02  -         lda foreground_color
38d5: 48        -         pha
38d6: a9 02     -         lda #color
38d8: 8d 86 02  -         sta foreground_color
38db: a2 00     -         ldx #$00
38dd: bd ec 3c  -         lda msg,x
38e0: f0 07     -         beq !done+
38e2: 20 d2 ff  -         jsr kernal_chrout
38e5: e8        -         inx
38e6: 4c dd 38  -         jmp !loop-
38e9: 68        -         pla
38ea: 8d 86 02  -         sta foreground_color
38ed: a2 00     -         ldx #$00
38ef: bd fe 38  -         lda msg,x
38f2: f0 07     -         beq !done+
38f4: 20 d2 ff  -         jsr kernal_chrout
38f7: e8        -         inx
38f8: 4c ef 38  -         jmp !loop-
38fb: 4c 00 39  -         jmp !done+
38fe: 0d 00     - memory: .byte RETURN, NULL
3900: ae f0 3c  -         ldx TEST_NAME_COUNT
3903: e0 15     -         cpx #TESTS_PER_PAGE
3905: d0 5d     -         bne !exit+
3907: ad 86 02  -         lda foreground_color
390a: 48        -         pha
390b: a9 01     -         lda #color
390d: 8d 86 02  -         sta foreground_color
3910: a2 00     -         ldx #$00
3912: bd 25 39  -         lda msg,x
3915: f0 07     -         beq !done+
3917: 20 d2 ff  -         jsr kernal_chrout
391a: e8        -         inx
391b: 4c 12 39  -         jmp !loop-
391e: 68        -         pla
391f: 8d 86 02  -         sta foreground_color
3922: 4c 44 39  -         jmp !no_key+
3925: 0d        - memory: .byte RETURN
3926: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3936: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3942: 0d 00     -         .byte RETURN, NULL
3944: 20 9f ff  -         jsr scnkey  // scan keyboard
3947: 20 e4 ff  -         jsr getin	// put result into A
394a: f0 f8     -         beq !no_key-
394c: a2 00     -         ldx #$00
394e: bd 5d 39  -         lda msg,x
3951: f0 07     -         beq !done+
3953: 20 d2 ff  -         jsr kernal_chrout
3956: e8        -         inx
3957: 4c 4e 39  -         jmp !loop-
395a: 4c 5f 39  -         jmp !done+
395d: 0d 00     - newline:.byte RETURN, NULL
395f: a2 00     -         ldx #$00
3961: 8e f0 3c  -         stx TEST_NAME_COUNT
3964: 60        -         rts
3965: ee f0 3c  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
3968: ad 86 02  -         lda foreground_color
396b: 48        -         pha
396c: a9 0f     -         lda #color
396e: 8d 86 02  -         sta foreground_color
3971: a2 00     -         ldx #$00
3973: bd 86 39  -         lda msg,x
3976: f0 07     -         beq !done+
3978: 20 d2 ff  -         jsr kernal_chrout
397b: e8        -         inx
397c: 4c 73 39  -         jmp !loop-
397f: 68        -         pla
3980: 8d 86 02  -         sta foreground_color
3983: 4c 96 39  -         jmp !done+
3986: 20 20     - memory: .fill spacing, spacebar
3988: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
3992: 2e 2e 2e  -         .text "..."
3995: 00        -         .byte NULL
3996: 20 31 08  -         jsr SW16
3999: 0e        -         .byte $0e
399a: 06 3d     -         .word address.getValue()
399c: 21        -         .byte rl(register.getValue())
399d: 00        -         .byte $00 }
399e: ee ee 3c  -         inc TEST_COUNT
39a1: ad 86 02  -         lda foreground_color
39a4: 48        -         pha
39a5: a9 0e     -         lda #color
39a7: 8d 86 02  -         sta foreground_color
39aa: a2 00     -         ldx #$00
39ac: bd bf 39  -         lda msg,x
39af: f0 07     -         beq !done+
39b1: 20 d2 ff  -         jsr kernal_chrout
39b4: e8        -         inx
39b5: 4c ac 39  -         jmp !loop-
39b8: 68        -         pla
39b9: 8d 86 02  -         sta foreground_color
39bc: 4c ca 39  -         jmp !done+
39bf: 20        - memory: .byte spacebar
39c0: 54 45 53 54 20 4d 45 4d                          -         .text description
39c8: 3a        -         .text ":"
39c9: 00        -         .byte NULL
39ca: a6 21     -         ldx rl(register.getValue())
39cc: a4 22     -         ldy rh(register.getValue())
39ce: ec 06 3d  -         cpx address
39d1: d0 26     -         bne !failed+
39d3: cc 07 3d  -         cpy address+1
39d6: d0 21     -         bne !failed+
39d8: ee ef 3c  -         inc TEST_PASS_COUNT
39db: ad 86 02  -         lda foreground_color
39de: 48        -         pha
39df: a9 05     -         lda #color
39e1: 8d 86 02  -         sta foreground_color
39e4: a2 00     -         ldx #$00
39e6: bd ea 3c  -         lda msg,x
39e9: f0 07     -         beq !done+
39eb: 20 d2 ff  -         jsr kernal_chrout
39ee: e8        -         inx
39ef: 4c e6 39  -         jmp !loop-
39f2: 68        -         pla
39f3: 8d 86 02  -         sta foreground_color
39f6: 4c 14 3a  -         jmp !done+
39f9: ad 86 02  -         lda foreground_color
39fc: 48        -         pha
39fd: a9 02     -         lda #color
39ff: 8d 86 02  -         sta foreground_color
3a02: a2 00     -         ldx #$00
3a04: bd ec 3c  -         lda msg,x
3a07: f0 07     -         beq !done+
3a09: 20 d2 ff  -         jsr kernal_chrout
3a0c: e8        -         inx
3a0d: 4c 04 3a  -         jmp !loop-
3a10: 68        -         pla
3a11: 8d 86 02  -         sta foreground_color
3a14: a2 00     -         ldx #$00
3a16: bd 25 3a  -         lda msg,x
3a19: f0 07     -         beq !done+
3a1b: 20 d2 ff  -         jsr kernal_chrout
3a1e: e8        -         inx
3a1f: 4c 16 3a  -         jmp !loop-
3a22: 4c 27 3a  -         jmp !done+
3a25: 0d 00     - memory: .byte RETURN, NULL
3a27: ae f0 3c  -         ldx TEST_NAME_COUNT
3a2a: e0 15     -         cpx #TESTS_PER_PAGE
3a2c: d0 5d     -         bne !exit+
3a2e: ad 86 02  -         lda foreground_color
3a31: 48        -         pha
3a32: a9 01     -         lda #color
3a34: 8d 86 02  -         sta foreground_color
3a37: a2 00     -         ldx #$00
3a39: bd 4c 3a  -         lda msg,x
3a3c: f0 07     -         beq !done+
3a3e: 20 d2 ff  -         jsr kernal_chrout
3a41: e8        -         inx
3a42: 4c 39 3a  -         jmp !loop-
3a45: 68        -         pla
3a46: 8d 86 02  -         sta foreground_color
3a49: 4c 6b 3a  -         jmp !no_key+
3a4c: 0d        - memory: .byte RETURN
3a4d: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3a5d: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3a69: 0d 00     -         .byte RETURN, NULL
3a6b: 20 9f ff  -         jsr scnkey  // scan keyboard
3a6e: 20 e4 ff  -         jsr getin	// put result into A
3a71: f0 f8     -         beq !no_key-
3a73: a2 00     -         ldx #$00
3a75: bd 84 3a  -         lda msg,x
3a78: f0 07     -         beq !done+
3a7a: 20 d2 ff  -         jsr kernal_chrout
3a7d: e8        -         inx
3a7e: 4c 75 3a  -         jmp !loop-
3a81: 4c 86 3a  -         jmp !done+
3a84: 0d 00     - newline:.byte RETURN, NULL
3a86: a2 00     -         ldx #$00
3a88: 8e f0 3c  -         stx TEST_NAME_COUNT
3a8b: 60        -         rts
3a8c: a9 00     - TestRun:lda #color
3a8e: 8d 20 d0  -         sta border_color
3a91: a9 00     -         lda #color
3a93: 8d 21 d0  -         sta background_color
3a96: a9 01     -         lda #color
3a98: 8d 86 02  -         sta foreground_color
3a9b: a2 00     -         ldx #color
3a9d: 8e 21 d0  -         stx background_color
3aa0: a9 20     -         lda #spacebar
3aa2: a2 00     -         ldx #$00
3aa4: 9d 00 04  -         sta screen,x
3aa7: 9d 00 05  -         sta screen+$100,x
3aaa: 9d 00 06  -         sta screen+$200,x
3aad: 9d 00 07  -         sta screen+$300,x
3ab0: e8        -         inx
3ab1: d0 f1     -         bne !loop-
3ab3: a9 00     -         lda #row
3ab5: 85 d6     -         sta cursor_row
3ab7: a9 00     -         lda #column
3ab9: 85 d3     -         sta cursor_col
3abb: a2 00     -         ldx #$00
3abd: bd cc 3a  -         lda msg,x
3ac0: f0 07     -         beq !done+
3ac2: 20 d2 ff  -         jsr kernal_chrout
3ac5: e8        -         inx
3ac6: 4c bd 3a  -         jmp !loop-
3ac9: 4c ce 3a  -         jmp !done+
3acc: 0d 00     - newline:.byte RETURN, NULL
3ace: a2 00     -         ldx #$00
3ad0: bd f1 3c  -         lda msg,x
3ad3: f0 07     -         beq !done+
3ad5: 20 d2 ff  -         jsr kernal_chrout
3ad8: e8        -         inx
3ad9: 4c d0 3a  -         jmp !loop-
3adc: a9 0c     -         lda #color
3ade: 8d 86 02  -         sta foreground_color
3ae1: a9 00     -         lda #$00
3ae3: 8d ee 3c  -         sta TEST_COUNT
3ae6: 8d ef 3c  -         sta TEST_PASS_COUNT
3ae9: 8d f0 3c  -         sta TEST_NAME_COUNT
3aec: 20 ab 0a  -         jsr SET_TEST
3aef: 20 c5 0b  -         jsr LOAD_TEST
3af2: 20 df 0c  -         jsr STORE_TEST
3af5: 20 fd 0d  -         jsr LOAD_INDIRECT_TEST
3af8: 20 8c 0f  -         jsr STORE_INDIRECT_TEST
3afb: 20 98 11  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
3afe: 20 32 13  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
3b01: 20 3d 15  -         jsr POP_INDIRECT_TEST
3b04: 20 4c 19  -         jsr STORE_POP_INDIRECT_TEST
3b07: 20 7b 1a  -         jsr ADD_TEST
3b0a: 20 0f 1c  -         jsr SUBTRACT_TEST
3b0d: 20 a5 1d  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
3b10: 20 28 20  -         jsr COMPARE_TEST
3b13: 20 53 21  -         jsr INCREMENT_TEST
3b16: 20 73 22  -         jsr DECREMENT_TEST
3b19: 20 97 23  -         jsr RETURN_TO_6502_MODE_TEST
3b1c: 20 aa 24  -         jsr BRANCH_ALWAYS_TEST
3b1f: 20 d3 25  -         jsr BRANCH_IF_NO_CARRY_TEST	
3b22: 20 07 27  -         jsr BRANCH_IF_CARRY_SET_TEST
3b25: 20 3b 28  -         jsr BRANCH_IF_PLUS_TEST
3b28: 20 6b 29  -         jsr BRANCH_IF_MINUS_TEST
3b2b: 20 9b 2a  -         jsr BRANCH_IF_ZERO_TEST	
3b2e: 20 c5 2b  -         jsr BRANCH_IF_NONZERO_TEST
3b31: 20 f4 2c  -         jsr BRANCH_IF_MINUS_ONE_TEST
3b34: 20 23 2e  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
3b37: 20 53 2f  -         jsr BREAK_TEST
3b3a: 20 8b 32  -         jsr BRANCH_TO_SUBROUTINE_TEST
3b3d: 20 c5 33  -         jsr RETURN_FROM_SUBROUTINE_TEST
3b40: 20 f2 34  -         jsr ABSOLUTE_JUMP_TEST
3b43: 20 1f 36  -         jsr EXTERNAL_JSR_TEST
3b46: 20 3c 38  -         jsr SET_INDIRECT_TEST
3b49: 20 65 39  -         jsr SET_MEMORY_TEST
3b4c: 20 eb 30  -         jsr INTERRUPT_BREAK_TEST
3b4f: ad 86 02  -         lda foreground_color
3b52: 48        -         pha
3b53: a9 01     -         lda #color
3b55: 8d 86 02  -         sta foreground_color
3b58: a2 00     -         ldx #$00
3b5a: bd d1 3c  -         lda msg,x
3b5d: f0 07     -         beq !done+
3b5f: 20 d2 ff  -         jsr kernal_chrout
3b62: e8        -         inx
3b63: 4c 5a 3b  -         jmp !loop-
3b66: 68        -         pla
3b67: 8d 86 02  -         sta foreground_color
3b6a: ad ef 3c  -         lda value
3b6d: c9 64     -         cmp #three_digit
3b6f: 90 5a     -         bcc !twoDigit+
3b71: ad ef 3c  -         lda value
3b74: c9 64     -         cmp #reference
3b76: 90 09     -         bcc !done+
3b78: a0 00     -         ldy #$00		// counter
3b7a: c8        -         iny				// count references's
3b7b: e9 64     -         sbc #reference
3b7d: c9 64     -         cmp #reference
3b7f: b0 f9     -         bcs !loop-		// still larger than reference
3b81: 98        -         tya
3b82: 48        -         pha
3b83: 09 30     -         ora #$30
3b85: 20 d2 ff  -         jsr kernal_chrout
3b88: 68        -         pla
3b89: a8        -         tay
3b8a: ad ef 3c  -         lda value
3b8d: 38        -         sec
3b8e: e9 64     -         sbc #three_digit
3b90: 88        -         dey
3b91: d0 fa     -         bne !subby-
3b93: 85 fe     -         sta zp
3b95: a5 fe     -         lda value
3b97: c9 0a     -         cmp #two_digit
3b99: 90 28     -         bcc !oneDigit+
3b9b: a5 fe     -         lda value
3b9d: c9 0a     -         cmp #reference
3b9f: 90 09     -         bcc !done+
3ba1: a0 00     -         ldy #$00		// counter
3ba3: c8        -         iny				// count references's
3ba4: e9 0a     -         sbc #reference
3ba6: c9 0a     -         cmp #reference
3ba8: b0 f9     -         bcs !loop-		// still larger than reference
3baa: 98        -         tya
3bab: 48        -         pha
3bac: 09 30     -         ora #$30
3bae: 20 d2 ff  -         jsr kernal_chrout
3bb1: 68        -         pla
3bb2: a8        -         tay
3bb3: a5 fe     -         lda value
3bb5: 38        -         sec
3bb6: e9 0a     -         sbc #two_digit
3bb8: 88        -         dey
3bb9: d0 fa     -         bne !subby-
3bbb: 09 30     -         ora #$30
3bbd: 20 d2 ff  -         jsr kernal_chrout
3bc0: 4c c8 3b  -         jmp !done+
3bc3: 09 30     -         ora #$30
3bc5: 20 d2 ff  -         jsr kernal_chrout
3bc8: 4c 01 3c  -         jmp !done+
3bcb: ad ef 3c  -         lda value
3bce: c9 0a     -         cmp #two_digit
3bd0: 90 2a     -         bcc !oneDigit+
3bd2: ad ef 3c  -         lda value
3bd5: c9 0a     -         cmp #reference
3bd7: 90 09     -         bcc !done+
3bd9: a0 00     -         ldy #$00		// counter
3bdb: c8        -         iny				// count references's
3bdc: e9 0a     -         sbc #reference
3bde: c9 0a     -         cmp #reference
3be0: b0 f9     -         bcs !loop-		// still larger than reference
3be2: 98        -         tya
3be3: 48        -         pha
3be4: 09 30     -         ora #$30
3be6: 20 d2 ff  -         jsr kernal_chrout
3be9: 68        -         pla
3bea: a8        -         tay
3beb: ad ef 3c  -         lda value
3bee: 38        -         sec
3bef: e9 0a     -         sbc #two_digit
3bf1: 88        -         dey
3bf2: d0 fa     -         bne !subby-
3bf4: 09 30     -         ora #$30
3bf6: 20 d2 ff  -         jsr kernal_chrout
3bf9: 4c 01 3c  -         jmp !done+
3bfc: 09 30     -         ora #$30
3bfe: 20 d2 ff  -         jsr kernal_chrout
3c01: ad 86 02  -         lda foreground_color
3c04: 48        -         pha
3c05: a9 01     -         lda #color
3c07: 8d 86 02  -         sta foreground_color
3c0a: a2 00     -         ldx #$00
3c0c: bd e3 3c  -         lda msg,x
3c0f: f0 07     -         beq !done+
3c11: 20 d2 ff  -         jsr kernal_chrout
3c14: e8        -         inx
3c15: 4c 0c 3c  -         jmp !loop-
3c18: 68        -         pla
3c19: 8d 86 02  -         sta foreground_color
3c1c: ad ee 3c  -         lda value
3c1f: c9 64     -         cmp #three_digit
3c21: 90 5a     -         bcc !twoDigit+
3c23: ad ee 3c  -         lda value
3c26: c9 64     -         cmp #reference
3c28: 90 09     -         bcc !done+
3c2a: a0 00     -         ldy #$00		// counter
3c2c: c8        -         iny				// count references's
3c2d: e9 64     -         sbc #reference
3c2f: c9 64     -         cmp #reference
3c31: b0 f9     -         bcs !loop-		// still larger than reference
3c33: 98        -         tya
3c34: 48        -         pha
3c35: 09 30     -         ora #$30
3c37: 20 d2 ff  -         jsr kernal_chrout
3c3a: 68        -         pla
3c3b: a8        -         tay
3c3c: ad ee 3c  -         lda value
3c3f: 38        -         sec
3c40: e9 64     -         sbc #three_digit
3c42: 88        -         dey
3c43: d0 fa     -         bne !subby-
3c45: 85 fe     -         sta zp
3c47: a5 fe     -         lda value
3c49: c9 0a     -         cmp #two_digit
3c4b: 90 28     -         bcc !oneDigit+
3c4d: a5 fe     -         lda value
3c4f: c9 0a     -         cmp #reference
3c51: 90 09     -         bcc !done+
3c53: a0 00     -         ldy #$00		// counter
3c55: c8        -         iny				// count references's
3c56: e9 0a     -         sbc #reference
3c58: c9 0a     -         cmp #reference
3c5a: b0 f9     -         bcs !loop-		// still larger than reference
3c5c: 98        -         tya
3c5d: 48        -         pha
3c5e: 09 30     -         ora #$30
3c60: 20 d2 ff  -         jsr kernal_chrout
3c63: 68        -         pla
3c64: a8        -         tay
3c65: a5 fe     -         lda value
3c67: 38        -         sec
3c68: e9 0a     -         sbc #two_digit
3c6a: 88        -         dey
3c6b: d0 fa     -         bne !subby-
3c6d: 09 30     -         ora #$30
3c6f: 20 d2 ff  -         jsr kernal_chrout
3c72: 4c 7a 3c  -         jmp !done+
3c75: 09 30     -         ora #$30
3c77: 20 d2 ff  -         jsr kernal_chrout
3c7a: 4c b3 3c  -         jmp !done+
3c7d: ad ee 3c  -         lda value
3c80: c9 0a     -         cmp #two_digit
3c82: 90 2a     -         bcc !oneDigit+
3c84: ad ee 3c  -         lda value
3c87: c9 0a     -         cmp #reference
3c89: 90 09     -         bcc !done+
3c8b: a0 00     -         ldy #$00		// counter
3c8d: c8        -         iny				// count references's
3c8e: e9 0a     -         sbc #reference
3c90: c9 0a     -         cmp #reference
3c92: b0 f9     -         bcs !loop-		// still larger than reference
3c94: 98        -         tya
3c95: 48        -         pha
3c96: 09 30     -         ora #$30
3c98: 20 d2 ff  -         jsr kernal_chrout
3c9b: 68        -         pla
3c9c: a8        -         tay
3c9d: ad ee 3c  -         lda value
3ca0: 38        -         sec
3ca1: e9 0a     -         sbc #two_digit
3ca3: 88        -         dey
3ca4: d0 fa     -         bne !subby-
3ca6: 09 30     -         ora #$30
3ca8: 20 d2 ff  -         jsr kernal_chrout
3cab: 4c b3 3c  -         jmp !done+
3cae: 09 30     -         ora #$30
3cb0: 20 d2 ff  -         jsr kernal_chrout
3cb3: ad 86 02  -         lda foreground_color
3cb6: 48        -         pha
3cb7: a9 01     -         lda #color
3cb9: 8d 86 02  -         sta foreground_color
3cbc: a2 00     -         ldx #$00
3cbe: bd e7 3c  -         lda msg,x
3cc1: f0 07     -         beq !done+
3cc3: 20 d2 ff  -         jsr kernal_chrout
3cc6: e8        -         inx
3cc7: 4c be 3c  -         jmp !loop-
3cca: 68        -         pla
3ccb: 8d 86 02  -         sta foreground_color
3cce: 4c e9 3c  -         jmp !done+
3cd1: 0d        - memory: .byte RETURN
3cd2: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
3ce2: 00        -         .byte NULL
3ce3: 20 2f 20  - memory_2:.text " / "
3ce6: 00        -         .byte NULL
3ce7: 0d 00     - memory_3:.byte RETURN, NULL
3ce9: 60        -         rts

[TestData]
3cea: 73 00     -         .byte $73, $00
3cec: 76 00     -         .byte $76, $00
3cee: 00        -         .byte $00
3cef: 00        -         .byte $00
3cf0: 00        -         .byte $00
3cf1: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  -         .text "SWEET16 TEST RUNNER"
3d01: 4e 45 52                                        
3d04: 0d 00     -         .byte RETURN, NULL
3d06: 12 34     -         .byte $12,$34
3d08: 56 78     -         .byte $56,$78
3d0a: 9a bc     -         .byte $9a,$bc
3d0c: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  -         .fill TMS_SIZE, i
3d1c: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  -         .fill TMS_SIZE, $ff
3d2c: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill STACK_SIZE, 0
****************************** Segment: Bootstrap ******************************
[Bootstrap]
3d3c: a9 11     - Bootstrap:lda #length
3d3e: a2 5b     -         ldx #<fname
3d40: a0 3d     -         ldy #>fname
3d42: 20 bd ff  -         jsr $ffbd     // call setnam
3d45: a9 01     -         lda #$01
3d47: a6 ba     -         ldx $ba       // last used device number
3d49: d0 02     -         bne !skip+
3d4b: a2 08     -         ldx #$08      // default to device 8
3d4d: a0 01     -         ldy #$01      // not $01 means: load to address stored in file
3d4f: 20 ba ff  -         jsr $ffba     // call setlfs
3d52: a9 00     -         lda #$00      // $00 means: load to memory (not verify)
3d54: 20 d5 ff  -         jsr $ffd5     // call load
3d57: b0 01     -         bcs !error+    // if carry set, a load error has happened
3d59: 60        -         rts
3d5a: 60        - Error:  rts
3d5b: 2d 2d 2d 20 20 20 20 4c 49 42 20 20 20 20 2d 2d  - fname:  .text filename
3d6b: 2d                                              
3d6c: e8        -         inx 
3d6d: 8e 21 d0  -         stx $d021
3d70: 4c 3c 3d  -         jmp !-
3d73: 60        -         rts
************************** Segment: Sweet16JumpTable ***************************
[Sweet16JumpTable]
088a: 00        - OPTBL:  .byte <SET-1          // 1X
088b: f7        - BRTBL:  .byte  <RTN-1          // 0
088c: 03        -         .byte  <LD-1           // 2X
088d: 8b        -         .byte  <BR-1           // 1
088e: 13        -         .byte  <ST-1           // 3X
088f: 8c        -         .byte  <BNC-1          // 2
0890: 2b        -         .byte  <LDAT-1         // 4X
0891: 9d        -         .byte  <BC-1           // 3
0892: 1c        -         .byte  <STAT-1         // 5X
0893: a0        -         .byte  <BP-1           // 4
0894: 35        -         .byte  <LDDAT-1        // 6X
0895: a7        -         .byte  <BM-1           // 5
0896: 3f        -         .byte  <STDAT-1        // 7X
0897: ae        -         .byte  <BZ-1           // 6
0898: e7        -         .byte  <POP-1          // 8X
0899: b7        -         .byte  <BNZ-1          // 7
089a: 49        -         .byte  <STPAT-1        // 9X
089b: c0        -         .byte  <BM1-1          // 8
089c: 73        -         .byte  <ADD-1          // AX
089d: cb        -         .byte  <BNM1-1         // 9
089e: 5c        -         .byte  <SUB-1          // BX
089f: 0c        -         .byte  <BK-1           // A
08a0: eb        -         .byte  <POPD-1         // CX
08a1: d6        -         .byte  <RS-1           // B
08a2: 5e        -         .byte  <CPR-1          // DX
08a3: 81        -         .byte  <BS-1           // C
08a4: 24        -         .byte  <INR-1          // EX
08a5: 10        -         .byte  <XJSR-1         // D
08a6: 53        -         .byte  <DCR-1          // FX
08a7: 0d        -         .byte  <SETM-1         // E
08a8: d5        -         .byte  <NUL-1          // UNUSED
08a9: f4        -         .byte  <SETI-1         // F
***************************** Segment: Sweet16Page *****************************
[Sweet16Page]
0900: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
0901: 4c 76 08  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
0904: b5 17     - LD:     lda  R0L,X
0906: 85 17     -         sta  R0L
0908: b5 18     -         lda  R0H,X          // MOVE RX TO R0
090a: 85 18     -         sta  R0H
090c: 60        -         rts
090d: 00        - BK:     brk
090e: 4c 78 0a  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
0911: 4c 8a 0a  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
0914: a5 17     - ST:     lda  R0L
0916: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
0918: a5 18     -         lda  R0H
091a: 95 18     -         sta  R0H,X
091c: 60        -         rts
091d: a5 17     - STAT:   lda  R0L	
091f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
0921: a0 00     -         ldy  #$00
0923: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
0925: f6 17     - INR:    inc  R0L,X
0927: d0 02     -         bne  INR2           // INCR RX
0929: f6 18     -         inc  R0H,X	
092b: 60        - INR2:   rts
092c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
092e: 85 17     -         sta  R0L            // TO R0
0930: a0 00     -         ldy  #$00
0932: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
0934: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
0936: 20 2c 09  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
0939: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
093b: 85 18     -         sta  R0H
093d: 4c 25 09  -         jmp  INR            // INCR RX
0940: 20 1d 09  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
0943: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
0945: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
0947: 4c 25 09  -         jmp  INR            // INCR RX AND RETURN
094a: 20 54 09  - STPAT:  jsr  DCR            // DECR RX
094d: a5 17     -         lda  R0L
094f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
0951: 4c 04 0a  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
0954: b5 17     - DCR:    lda  R0L,X
0956: d0 02     -         bne  DCR2           // DECR RX
0958: d6 18     -         dec  R0H,X
095a: d6 17     - DCR2:   dec  R0L,X
095c: 60        -         rts
095d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
095f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
0960: a5 17     -         lda  R0L
0962: f5 17     -         sbc  R0L,X
0964: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
0967: a5 18     -         lda  R0H
0969: f5 18     -         sbc  R0H,X
096b: 99 18 00  - SUB2:   sta  R0H,Y
096e: 98        -         tya                 // LAST RESULT REG*2
096f: 69 00     -         adc  #$00           // CARRY TO LSB
0971: 85 34     -         sta  R14H
0973: 60        -         rts
0974: a5 17     - ADD:    lda  R0L
0976: 75 17     -         adc  R0L,X
0978: 85 17     -         sta  R0L            // R0+RX TO R0
097a: a5 18     -         lda  R0H
097c: 75 18     -         adc  R0H,X
097e: a0 00     -         ldy  #$00           // R0 FOR RESULT
0980: f0 e9     -         beq  SUB2           // FINISH ADD
0982: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
0984: 20 1f 09  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
0987: a5 36     -         lda  R15H
0989: 20 1f 09  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
098c: 18        - BR:     clc
098d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
098f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
0991: 10 01     -         bpl  BR2
0993: 88        -         dey
0994: 65 35     - BR2:    adc  R15L           // ADD TO PC
0996: 85 35     -         sta  R15L
0998: 98        -         tya
0999: 65 36     -         adc  R15H
099b: 85 36     -         sta  R15H
099d: 60        - BNC2:   rts
099e: b0 ec     - BC:     bcs  BR
09a0: 60        -         rts
09a1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
09a2: aa        -         tax                 // TO X REG FOR INDEXING
09a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
09a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
09a7: 60        -         rts
09a8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
09a9: aa        -         tax
09aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
09ac: 30 e1     -         bmi  BR1
09ae: 60        -         rts
09af: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
09b0: aa        -         tax
09b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
09b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09b5: f0 d8     -         beq  BR1            // BRANCH IF SO
09b7: 60        -         rts
09b8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
09b9: aa        -         tax
09ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
09bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
09be: d0 cf     -         bne  BR1            // BRANCH IF SO
09c0: 60        -         rts	
09c1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
09c2: aa        -         tax
09c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
09c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
09c7: 49 ff     -         eor  #$FF
09c9: f0 c4     -         beq  BR1            // BRANCH IF SO
09cb: 60        -         rts
09cc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
09cd: aa        -         tax
09ce: b5 17     -         lda  R0L,X
09d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
09d2: 49 ff     -         eor  #$FF
09d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
09d6: 60        - NUL:    rts
09d7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
09d9: 20 54 09  -         jsr  DCR            // DECR STACK POINTER
09dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
09de: 85 36     -         sta  R15H
09e0: 20 54 09  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
09e3: a1 17     -         lda  (R0L,X)
09e5: 85 35     -         sta  R15L
09e7: 60        -         rts
09e8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
09ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
09ec: 20 54 09  - POPD:   jsr  DCR            // DECR RX
09ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
09f1: a8        -         tay                 // SAVE IN Y REG	
09f2: 4c fb 09  -         jmp POP2
09f5: 4c 66 0a  - SETI:   jmp SETI_OUTOFPAGE
09f8: 4c 09 0a  - RTN:    jmp  RTNZ
09fb: 20 54 09  - POP2:   jsr  DCR            // DECR RX
09fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
0a00: 85 17     -         sta  R0L            // TO R0
0a02: 84 18     -         sty  R0H
0a04: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
0a06: 84 34     -         sty  R14H
0a08: 60        -         rts
0a09: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
0a0a: 68        -         pla
0a0b: ad aa 0a  -         lda SW16_SAVE_RESTORE
0a0e: f0 03     -         beq RESTORED
0a10: 20 26 0a  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
0a13: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
0a16: 8d a6 0a  - SAVE:   sta ACCUMULATOR
0a19: 8e a7 0a  -         stx XREG
0a1c: 8c a8 0a  -         sty YREG
0a1f: 08        -         php
0a20: 68        -         pla
0a21: 8d a9 0a  -         sta STATUS
0a24: d8        -         cld
0a25: 60        -         rts
0a26: ad a9 0a  - RESTORE:lda STATUS
0a29: 48        -         pha
0a2a: ad a6 0a  -         lda ACCUMULATOR
0a2d: ae a7 0a  -         ldx XREG
0a30: ac a8 0a  -         ldy YREG
0a33: 28        -         plp
0a34: 60        -         rts
0a35: 68        - BREAK_HANDLER:pla		// Y
0a36: a8        -         tay		// restore Y
0a37: 68        -         pla		// X
0a38: aa        -         tax		// restore X
0a39: 68        -         pla		// restore A
0a3a: 85 37     -         sta RL(ZP)
0a3c: 28        -         plp		// restore Status Flags
0a3d: 68        -         pla		// PCL discard - not useful
0a3e: 68        -         pla		// PCH discard - not useful
0a3f: a5 37     -         lda RL(ZP)
0a41: 4c 4d 08  -         jmp SW16D
0a44: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
0a46: 85 37     -         sta RL(ZP)
0a48: e6 35     -         inc R15L
0a4a: d0 02     -         bne !incremented+ 		// inc PC
0a4c: e6 36     -         inc R15H
0a4e: b1 35     -         lda (R15L),Y       		// dest addr low
0a50: 85 38     -         sta RH(ZP)
0a52: e6 35     -         inc R15L
0a54: d0 02     -         bne !incremented+ 		// inc PC
0a56: e6 36     -         inc R15H
0a58: b1 35     -         lda (R15L),Y       		// dest register
0a5a: e6 35     -         inc R15L
0a5c: d0 02     -         bne !incremented+ 		// inc PC
0a5e: e6 36     -         inc R15H
0a60: a8        -         tay
0a61: e6 37     -         inc RL(ZP)
0a63: a2 37     -         ldx #RL(ZP)
0a65: 60        -         rts
************************** Segment: Sweet16OutOfPage ***************************
[Sweet16OutOfPage]
0a66: 20 44 0a  - SETI_OUTOFPAGE:jsr SETIM_COMMON
0a69: a1 00     -         lda ($00,X)
0a6b: 99 00 00  -         sta $00,Y				// low order
0a6e: c6 37     -         dec RL(ZP)
0a70: a1 00     -         lda ($00,X)
0a72: 99 01 00  -         sta $01,Y				// high order
0a75: 4c 4d 08  -         jmp SW16D				// back to SWEET16
0a78: 20 44 0a  - SETM_OUTOFPAGE:jsr SETIM_COMMON
0a7b: a1 00     -         lda ($00,X)
0a7d: 99 01 00  -         sta $01,Y				// high order
0a80: c6 37     -         dec RL(ZP)
0a82: a1 00     -         lda ($00,X)
0a84: 99 00 00  -         sta $00,Y				// low order
0a87: 4c 4d 08  -         jmp SW16D				// back to SWEET16
0a8a: a9 0a     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
0a8c: 48        -         pha						// using rts as jmps here
0a8d: a9 a2     -         lda #<((!returned+)-1)
0a8f: 48        -         pha
0a90: b1 35     -         lda (R15L),Y       		// high order byte
0a92: 48        -         pha
0a93: e6 35     -         inc R15L
0a95: d0 02     -         bne !incremented+ 		// inc PC
0a97: e6 36     -         inc R15H
0a99: b1 35     -         lda (R15L),Y       		// low order byte
0a9b: 48        -         pha
0a9c: e6 35     -         inc R15L
0a9e: d0 02     -         bne !incremented+ 		// inc PC
0aa0: e6 36     -         inc R15H
0aa2: 60        -         rts				   		// this performs jump from stack
0aa3: 4c 4d 08  -         jmp SW16D				// back to SWEET16
***************************** Segment: Sweet16Data *****************************
[Sweet16Data]
0aa6: 00        - ACCUMULATOR:.byte 0
0aa7: 00        - XREG:   .byte 0
0aa8: 00        - YREG:   .byte 0
0aa9: 00        - STATUS: .byte 0
0aaa: 00        - SW16_SAVE_RESTORE:.byte 0
****************************** Segment: TestData *******************************
[TestData]
3cea: 73 00     - TEST_SUCCESS:.byte $73, $00
3cec: 76 00     - TEST_FAILURE:.byte $76, $00
3cee: 00        - TEST_COUNT:.byte $00
3cef: 00        - TEST_PASS_COUNT:.byte $00
3cf0: 00        - TEST_NAME_COUNT:.byte $00
3cf1: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  - TEST_TITLE:.text "SWEET16 TEST RUNNER"
3d01: 4e 45 52                                        
3d04: 0d 00     -         .byte RETURN, NULL
3d06: 12 34     - TEST_MEMORY:.byte $12,$34
3d08: 56 78     - TEST_MEMORY_2:.byte $56,$78
3d0a: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
3d0c: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
3d1c: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
3d2c: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
