******************************* Segment: Default *******************************
******************************** Segment: Main *********************************
[Basic]
0801: 0b 08     -         
0803: 0a 00     -         
0805: 9e        -         
0806: 32 30 36 32                                      -         
080a: 00        -         
080b: 00 00     - upstartEnd:

[Main]
080e: a9 00     - Main:   lda #BLACK
0810: 8d 20 d0  -         sta $d020
0813: 8d 21 d0  -         sta $d021
0816: a9 93     -         lda #147
0818: 20 d2 ff  -         jsr kernal_chrout
081b: 20 7f 08  -         jsr showProgress
081e: 4c 1b 08  -         jmp !-
0821: 20 65 08  -         jsr init
0824: 20 33 08  -         jsr install_update_isr
0827: 20 27 08  -         jsr *
082a: 20 0c 09  -         jsr loadAll
082d: 20 2d 08  -         jsr *
0830: 20 00 0b  -         jsr ready
0833: 78        - install_update_isr:sei
0834: a9 01     -         lda #$01    // Set Interrupt Request Mask
0836: 8d 1a d0  -         sta $d01a   // IRQ by Rasterbeam
0839: ad 14 03  -         lda $314			// save previous vector
083c: ae 15 03  -         ldx $315
083f: 8d 16 0b  -         sta oldIrq
0842: 8e 17 0b  -         stx oldIrq + 1
0845: a9 76     -         lda #<irq			// install our IRQ
0847: a2 08     -         ldx #>irq
0849: 8d 14 03  -         sta $314
084c: 8e 15 03  -         stx $315
084f: 58        -         cli
0850: 60        -         rts
0851: 78        - uninstall_update_isr:sei 
0852: a9 00     -         lda #$00    // Unset Interrupt Request Mask
0854: 8d 1a d0  -         sta $d01a   // IRQ by Rasterbeam
0857: ad 16 0b  -         lda oldIrq
085a: ae 17 0b  -         ldx oldIrq + 1
085d: 8d 14 03  -         sta $314
0860: 8e 15 03  -         stx $315
0863: 58        -         cli
0864: 60        -         rts
0865: 78        - init:   sei 
0866: a0 7f     -         ldy #$7f    // $7f = %01111111
0868: 8c 0d dc  -         sty $dc0d   // Turn off CIAs Timer interrupts
086b: 8c 0d dd  -         sty $dd0d   // Turn off CIAs Timer interrupts
086e: ad 0d dc  -         lda $dc0d   // cancel all CIA-IRQs in queue/unprocessed
0871: ad 0d dd  -         lda $dd0d   // cancel all CIA-IRQs in queue/unprocessed
0874: 58        -         cli
0875: 60        -         rts
0876: ce 19 d0  - irq:    dec $d019				// ack interrrupt
0879: 20 7f 08  -         jsr showProgress
087c: 6c 16 0b  -         jmp (oldIrq)		// back to previous IRQ
087f: e6 50     - showProgress:inc timerAddress
0881: a9 80     -         lda #updateMask
0883: 24 50     -         bit timerAddress
0885: d0 03     -         bne !callSub+
0887: 4c 91 08  -         jmp !+
088a: 20 92 08  -         jsr subroutine
088d: a9 ff     -         lda #$ff			// reset
088f: 85 50     -         sta timerAddress
0891: 60        -         rts
0892: e6 51     - showProgressNext:inc timerAddress
0894: a9 04     -         lda #updateMask
0896: 24 51     -         bit timerAddress
0898: d0 03     -         bne !callSub+
089a: 4c a4 08  -         jmp !+
089d: 20 bb 08  -         jsr subroutine
08a0: a9 ff     -         lda #$ff			// reset
08a2: 85 51     -         sta timerAddress
08a4: 60        -         rts
08a5: a6 d1     - storeCursor:ldx $d1
08a7: 8e 20 0b  -         stx cursorWordAddress
08aa: a6 d2     -         ldx $d2
08ac: 8e 21 0b  -         stx cursorWordAddress + 1
08af: 60        -         rts
08b0: ae 20 0b  - restoreCursor:ldx cursorWordAddress
08b3: 86 d1     -         stx $d1
08b5: ae 21 0b  -         ldx cursorWordAddress + 1
08b8: 86 d2     -         stx $d2
08ba: 60        -         rts
08bb: ee 18 0b  - showActualProgress:inc timerAddress
08be: a9 09     -         lda #updateMask
08c0: 2c 18 0b  -         bit timerAddress
08c3: d0 03     -         bne !callSub+
08c5: 4c d0 08  -         jmp !+
08c8: 20 e6 08  -         jsr subroutine
08cb: a9 ff     -         lda #$ff			// reset
08cd: 8d 18 0b  -         sta timerAddress
08d0: ee 19 0b  -         inc timerAddress
08d3: a9 01     -         lda #updateMask
08d5: 2c 19 0b  -         bit timerAddress
08d8: d0 03     -         bne !callSub+
08da: 4c e5 08  -         jmp !+
08dd: 20 ec 08  -         jsr subroutine
08e0: a9 ff     -         lda #$ff			// reset
08e2: 8d 19 0b  -         sta timerAddress
08e5: 60        -         rts
08e6: a9 2e     - showDot:lda #$2e			// .
08e8: 20 d2 ff  -         jsr kernal_chrout
08eb: 60        -         rts
08ec: 20 a5 08  - showWhirl:jsr storeCursor
08ef: ee 1f 0b  -         inc whirlIndex
08f2: ad 1f 0b  -         lda whirlIndex
08f5: cd 1a 0b  -         cmp whirlLength
08f8: 90 05     -         bcc !next+
08fa: a9 00     -         lda #$00
08fc: 8d 1f 0b  -         sta whirlIndex
08ff: ae 1f 0b  -         ldx whirlIndex
0902: bd 1b 0b  -         lda whirl,x
0905: 20 d2 ff  -         jsr kernal_chrout
0908: 20 b0 08  -         jsr restoreCursor
090b: 60        -         rts
090c: a9 00     - loadAll:lda #color
090e: 8d 20 d0  -         sta border_color
0911: a9 00     -         lda #color
0913: 8d 21 d0  -         sta background_color
0916: 20 44 e5  -         jsr $e544
0919: a2 00     -         ldx #$00
091b: bd 2a 09  -         lda msg,x
091e: f0 07     -         beq !done+
0920: 20 d2 ff  -         jsr kernal_chrout
0923: e8        -         inx
0924: 4c 1b 09  -         jmp !loop-
0927: 4c 33 09  -         jmp !done+
092a: 53 57 45 45 54 31 36                             -         .text msg
0931: 0d 00     -         .byte RETURN, NULL
0933: a2 00     -         ldx #$00
0935: bd 44 09  -         lda msg,x
0938: f0 07     -         beq !done+
093a: 20 d2 ff  -         jsr kernal_chrout
093d: e8        -         inx
093e: 4c 35 09  -         jmp !loop-
0941: 4c 46 09  -         jmp !done+
0944: 0d 00     -         .byte RETURN, NULL
0946: a2 00     -         ldx #$00
0948: bd 57 09  -         lda msg,x
094b: f0 07     -         beq !done+
094d: 20 d2 ff  -         jsr kernal_chrout
0950: e8        -         inx
0951: 4c 48 09  -         jmp !loop-
0954: 4c 69 09  -         jmp !done+
0957: 43 48 45 43 4b 49 4e 47 20 46 4f 52 20 4c 49 42  -         .text msg
0967: 20                                              
0968: 00        -         .byte NULL
0969: ad 00 10  -         lda baseAddr
096c: c9 fe     -         cmp #(>MagicPatch) // opposite to normal so reads natural in memory inspection
096e: d0 0c     -         bne !nope+
0970: ad 01 10  -         lda baseAddr+1
0973: c9 ed     -         cmp #(<MagicPatch)
0975: d0 05     -         bne !nope+
0977: a9 01     -         lda #$01
0979: 4c 7e 09  -         jmp !done+
097c: a9 00     -         lda #$00
097e: f0 6d     -         beq !alreadyLoaded+
0980: a2 00     -         ldx #$00
0982: bd 91 09  -         lda msg,x
0985: f0 07     -         beq !done+
0987: 20 d2 ff  -         jsr kernal_chrout
098a: e8        -         inx
098b: 4c 82 09  -         jmp !loop-
098e: 4c 99 09  -         jmp !done+
0991: 4c 4f 41 44 49 4e 47                             -         .text msg
0998: 00        -         .byte NULL
0999: 20 33 08  -         jsr install_update_isr
099c: a9 10     -         lda #length
099e: a2 08     -         ldx #<filenameAddr
09a0: a0 0a     -         ldy #>filenameAddr
09a2: 20 24 0b  -         jsr KernalLoad
09a5: e0 00     -         cpx #$00
09a7: f0 26     -         beq !done+
09a9: 48        -         pha
09aa: a2 00     -         ldx #$00
09ac: bd bb 09  -         lda msg,x
09af: f0 07     -         beq !done+
09b1: 20 d2 ff  -         jsr kernal_chrout
09b4: e8        -         inx
09b5: 4c ac 09  -         jmp !loop-
09b8: 4c c8 09  -         jmp !done+
09bb: 4c 0f 01 04 20 45 12 12 0f 12 3a 20              -         .text msg
09c7: 00        -         .byte NULL
09c8: 68        -         pla
09c9: 20 d2 ff  -         jsr kernal_chrout
09cc: 4c cc 09  -         jmp *
09cf: 20 51 08  -         jsr uninstall_update_isr
09d2: a2 00     -         ldx #$00
09d4: bd e3 09  -         lda msg,x
09d7: f0 07     -         beq !done+
09d9: 20 d2 ff  -         jsr kernal_chrout
09dc: e8        -         inx
09dd: 4c d4 09  -         jmp !loop-
09e0: 4c ea 09  -         jmp !done+
09e3: 20 44 4f 4e 45                                   -         .text msg
09e8: 0d 00     -         .byte RETURN, NULL
09ea: 4c 18 0a  -         jmp !done+
09ed: a2 00     -         ldx #$00
09ef: bd fe 09  -         lda msg,x
09f2: f0 07     -         beq !done+
09f4: 20 d2 ff  -         jsr kernal_chrout
09f7: e8        -         inx
09f8: 4c ef 09  -         jmp !loop-
09fb: 4c 05 0a  -         jmp !done+
09fe: 46 4f 55 4e 44                                   -         .text msg
0a03: 0d 00     -         .byte RETURN, NULL
0a05: 4c 18 0a  -         jmp !done+
0a08: 2d 2d 2d 20 20 20 20 4c 49 42 20 20 20 2d 2d 2d  -         .text filename
0a18: a2 00     -         ldx #$00
0a1a: bd 29 0a  -         lda msg,x
0a1d: f0 07     -         beq !done+
0a1f: 20 d2 ff  -         jsr kernal_chrout
0a22: e8        -         inx
0a23: 4c 1a 0a  -         jmp !loop-
0a26: 4c 3d 0a  -         jmp !done+
0a29: 43 48 45 43 4b 49 4e 47 20 46 4f 52 20 54 45 53  -         .text msg
0a39: 54 53 20                                        
0a3c: 00        -         .byte NULL
0a3d: ad 00 20  -         lda baseAddr
0a40: c9 fe     -         cmp #(>MagicPatch) // opposite to normal so reads natural in memory inspection
0a42: d0 0c     -         bne !nope+
0a44: ad 01 20  -         lda baseAddr+1
0a47: c9 ed     -         cmp #(<MagicPatch)
0a49: d0 05     -         bne !nope+
0a4b: a9 01     -         lda #$01
0a4d: 4c 52 0a  -         jmp !done+
0a50: a9 00     -         lda #$00
0a52: f0 6d     -         beq !alreadyLoaded+
0a54: a2 00     -         ldx #$00
0a56: bd 65 0a  -         lda msg,x
0a59: f0 07     -         beq !done+
0a5b: 20 d2 ff  -         jsr kernal_chrout
0a5e: e8        -         inx
0a5f: 4c 56 0a  -         jmp !loop-
0a62: 4c 6d 0a  -         jmp !done+
0a65: 4c 4f 41 44 49 4e 47                             -         .text msg
0a6c: 00        -         .byte NULL
0a6d: 20 33 08  -         jsr install_update_isr
0a70: a9 10     -         lda #length
0a72: a2 dc     -         ldx #<filenameAddr
0a74: a0 0a     -         ldy #>filenameAddr
0a76: 20 24 0b  -         jsr KernalLoad
0a79: e0 00     -         cpx #$00
0a7b: f0 26     -         beq !done+
0a7d: 48        -         pha
0a7e: a2 00     -         ldx #$00
0a80: bd 8f 0a  -         lda msg,x
0a83: f0 07     -         beq !done+
0a85: 20 d2 ff  -         jsr kernal_chrout
0a88: e8        -         inx
0a89: 4c 80 0a  -         jmp !loop-
0a8c: 4c 9c 0a  -         jmp !done+
0a8f: 4c 0f 01 04 20 45 12 12 0f 12 3a 20              -         .text msg
0a9b: 00        -         .byte NULL
0a9c: 68        -         pla
0a9d: 20 d2 ff  -         jsr kernal_chrout
0aa0: 4c a0 0a  -         jmp *
0aa3: 20 51 08  -         jsr uninstall_update_isr
0aa6: a2 00     -         ldx #$00
0aa8: bd b7 0a  -         lda msg,x
0aab: f0 07     -         beq !done+
0aad: 20 d2 ff  -         jsr kernal_chrout
0ab0: e8        -         inx
0ab1: 4c a8 0a  -         jmp !loop-
0ab4: 4c be 0a  -         jmp !done+
0ab7: 20 44 4f 4e 45                                   -         .text msg
0abc: 0d 00     -         .byte RETURN, NULL
0abe: 4c ec 0a  -         jmp !done+
0ac1: a2 00     -         ldx #$00
0ac3: bd d2 0a  -         lda msg,x
0ac6: f0 07     -         beq !done+
0ac8: 20 d2 ff  -         jsr kernal_chrout
0acb: e8        -         inx
0acc: 4c c3 0a  -         jmp !loop-
0acf: 4c d9 0a  -         jmp !done+
0ad2: 46 4f 55 4e 44                                   -         .text msg
0ad7: 0d 00     -         .byte RETURN, NULL
0ad9: 4c ec 0a  -         jmp !done+
0adc: 2d 2d 2d 20 20 20 54 45 53 54 53 20 20 2d 2d 2d  -         .text filename
0aec: a2 00     -         ldx #$00
0aee: bd fd 0a  -         lda msg,x
0af1: f0 07     -         beq !done+
0af3: 20 d2 ff  -         jsr kernal_chrout
0af6: e8        -         inx
0af7: 4c ee 0a  -         jmp !loop-
0afa: 4c ff 0a  -         jmp !done+
0afd: 0d 00     -         .byte RETURN, NULL
0aff: 60        -         rts
0b00: 20 e1 4f  - ready:  jsr TestRun
0b03: 20 0a 0b  -         jsr Anykey
0b06: 4c 13 0b  -         jmp Reset
0b09: 60        -         rts
0b0a: 20 9f ff  - Anykey: jsr scnkey  // scan keyboard
0b0d: 20 e4 ff  -         jsr getin	// put result into A
0b10: f0 f8     -         beq !-	
0b12: 60        -         rts
0b13: 6c fc ff  - Reset:  jmp ($FFFC)		// kernal reset vector
0b16: 00 00     - oldIrq: .byte 00, 00		// buffer for previous vector
0b18: ff        - counterDot:.byte $FF
0b19: ff        - counterWhirl:.byte $FF
0b1a: 04        - whirlLength:.byte $04
0b1b: 2d cd dd ce                                      - whirl:  .byte $2d, $cd, $dd, $ce
0b1f: ff        - whirlIndex:.byte $ff
0b20: 00        - safeX:  .byte $00
0b21: 00        - safeY:  .byte $00
******************************** Segment: Util *********************************
[UtilData]
0b22: 0d 00     -         .byte RETURN, NULL
0b24: 20 bd ff  -         jsr $ffbd     // call setnam
0b27: a9 01     -         lda #$01
0b29: a6 ba     -         ldx $ba       // last used device number
0b2b: d0 02     -         bne !skip+
0b2d: a2 08     -         ldx #$08      // default to device 8
0b2f: a0 01     -         ldy #$01       // not $01 means: load to address stored in file
0b31: 20 ba ff  -         jsr $ffba      // call setlfs
0b34: a9 00     -         lda #$00       // $00 means: load to memory (not verify)
0b36: 20 d5 ff  -         jsr $ffd5      // call load
0b39: b0 03     -         bcs !error+    // if carry set, a load error has happened
0b3b: 4c 44 0b  -         jmp !done+
0b3e: 4c 3e 0b  -         jmp *
0b41: a2 01     -         ldx #1
0b43: 60        -         rts
0b44: a2 00     -         ldx #0         // clear error flag in case set
0b46: 60        -         rts
0b47: 60        -         rts
**************************** Segment: Sweet16Patch *****************************
[Sweet16Patch]
1000: fe ed     - sweet16_patch:.byte >MagicPatch, <MagicPatch
******************************* Segment: Sweet16 *******************************
[Sweet16]
1000: a9 00     - SW16_NONE:lda #$00
1002: 8d aa 12  -         sta SW16_SAVE_RESTORE
1005: 4c 0d 10  -         jmp SW160
1008: a9 01     - SW16:   lda #$01
100a: 8d aa 12  -         sta SW16_SAVE_RESTORE
100d: f0 03     - SW160:  beq SW16A
100f: 20 16 12  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
1012: 68        - SW16A:  pla
1013: 85 35     -         sta R15L            // INIT SWEET16 PC
1015: 68        -         pla                 // FROM RETURN
1016: 85 36     -         sta R15H	        // ADDRESS
1018: 20 1e 10  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
101b: 4c 18 10  -         jmp  SW16B          // ONE SWEET16 INSTR.
101e: e6 35     - SW16C:  inc  R15L
1020: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
1022: e6 36     -         inc  R15H
1024: a9 11     - SW16D:  lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
1026: 48        -         pha                 // PUSH ON STACK FOR RTS
1027: a0 00     -         ldy  #$00
1029: b1 35     -         lda  (R15L),Y       // FETCH INSTR
102b: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
102d: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
102e: aa        -         tax                 // TO X REG FOR INDEXING
102f: 4a        -         lsr
1030: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
1032: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
1034: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
1036: 4a        -         lsr
1037: 4a        -         lsr                 // OPCODE*2 TO LSB'S
1038: 4a        -         lsr
1039: a8        -         tay                 // TO Y REG FOR INDEXING
103a: b9 5f 10  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
103d: 48        -         pha                 // ONTO STACK
103e: 60        -         rts                 // GOTO REG-OP ROUTINE
103f: e6 35     - TOBR:   inc  R15L
1041: d0 02     -         bne  TOBR2          // INCR PC
1043: e6 36     -         inc  R15H
1045: bd 62 10  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
1048: 48        -         pha                 // ONTO STACK FOR NON-REG OP
1049: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
104b: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
104c: 60        -         rts                 // GOTO NON-REG OP ROUTINE
104d: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
104f: 95 18     -         sta  R0H,X
1051: 88        -         dey
1052: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
1054: 95 17     -         sta  R0L,X
1056: 98        -         tya                 // Y REG CONTAINS 1
1057: 38        -         sec
1058: 65 35     -         adc  R15L           // ADD 2 TO PC
105a: 85 35     -         sta  R15L
105c: 90 02     -         bcc  SET2
105e: e6 36     -         inc  R15H
1060: 60        - SET2:   rts

[Sweet16JumpTable]
1061: 00        -         .byte <SET-1          // 1X
1062: f7        -         .byte  <RTN-1          // 0
1063: 03        -         .byte  <LD-1           // 2X
1064: 8b        -         .byte  <BR-1           // 1
1065: 13        -         .byte  <ST-1           // 3X
1066: 8c        -         .byte  <BNC-1          // 2
1067: 2b        -         .byte  <LDAT-1         // 4X
1068: 9d        -         .byte  <BC-1           // 3
1069: 1c        -         .byte  <STAT-1         // 5X
106a: a0        -         .byte  <BP-1           // 4
106b: 35        -         .byte  <LDDAT-1        // 6X
106c: a7        -         .byte  <BM-1           // 5
106d: 3f        -         .byte  <STDAT-1        // 7X
106e: ae        -         .byte  <BZ-1           // 6
106f: e7        -         .byte  <POP-1          // 8X
1070: b7        -         .byte  <BNZ-1          // 7
1071: 49        -         .byte  <STPAT-1        // 9X
1072: c0        -         .byte  <BM1-1          // 8
1073: 73        -         .byte  <ADD-1          // AX
1074: cb        -         .byte  <BNM1-1         // 9
1075: 5c        -         .byte  <SUB-1          // BX
1076: 0c        -         .byte  <BK-1           // A
1077: eb        -         .byte  <POPD-1         // CX
1078: d6        -         .byte  <RS-1           // B
1079: 5e        -         .byte  <CPR-1          // DX
107a: 81        -         .byte  <BS-1           // C
107b: 24        -         .byte  <INR-1          // EX
107c: 10        -         .byte  <XJSR-1         // D
107d: 53        -         .byte  <DCR-1          // FX
107e: 0d        -         .byte  <SETM-1         // E
107f: d5        -         .byte  <NUL-1          // UNUSED
1080: f4        -         .byte  <SETI-1         // F

[Sweet16Page]
1100: ea        -         nop                // otherwise RTS "cleverness" not so clever
1101: 4c 4d 10  -         jmp SETZ           // ALWAYS TAKEN (moved out of page)
1104: b5 17     -         lda  R0L,X
1106: 85 17     -         sta  R0L
1108: b5 18     -         lda  R0H,X          // MOVE RX TO R0
110a: 85 18     -         sta  R0H
110c: 60        -         rts
110d: 00        -         brk
110e: 4c 78 12  -         jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
1111: 4c 8a 12  -         jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
1114: a5 17     -         lda  R0L
1116: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
1118: a5 18     -         lda  R0H
111a: 95 18     -         sta  R0H,X
111c: 60        -         rts
111d: a5 17     -         lda  R0L	
111f: 81 17     -         sta  (R0L,X)        // STORE BYTE INDIRECT
1121: a0 00     -         ldy  #$00
1123: 84 34     -         sty  R14H           // INDICATE R0 IS RESULT NEG
1125: f6 17     -         inc  R0L,X
1127: d0 02     -         bne  INR2           // INCR RX
1129: f6 18     -         inc  R0H,X	
112b: 60        -         rts
112c: a1 17     -         lda  (R0L,X)        // LOAD INDIRECT (RX)
112e: 85 17     -         sta  R0L            // TO R0
1130: a0 00     -         ldy  #$00
1132: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
1134: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
1136: 20 2c 11  -         jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
1139: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
113b: 85 18     -         sta  R0H
113d: 4c 25 11  -         jmp  INR            // INCR RX
1140: 20 1d 11  -         jsr  STAT           // STORE INDIRECT LOW ORDER
1143: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
1145: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
1147: 4c 25 11  -         jmp  INR            // INCR RX AND RETURN
114a: 20 54 11  -         jsr  DCR            // DECR RX
114d: a5 17     -         lda  R0L
114f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
1151: 4c 04 12  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
1154: b5 17     -         lda  R0L,X
1156: d0 02     -         bne  DCR2           // DECR RX
1158: d6 18     -         dec  R0H,X
115a: d6 17     -         dec  R0L,X
115c: 60        -         rts
115d: a0 00     -         ldy  #$00           // RESULT TO R0
115f: 38        -         sec                 // NOTE Y REG = 13*2 FOR CPR
1160: a5 17     -         lda  R0L
1162: f5 17     -         sbc  R0L,X
1164: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
1167: a5 18     -         lda  R0H
1169: f5 18     -         sbc  R0H,X
116b: 99 18 00  -         sta  R0H,Y
116e: 98        -         tya                 // LAST RESULT REG*2
116f: 69 00     -         adc  #$00           // CARRY TO LSB
1171: 85 34     -         sta  R14H
1173: 60        -         rts
1174: a5 17     -         lda  R0L
1176: 75 17     -         adc  R0L,X
1178: 85 17     -         sta  R0L            // R0+RX TO R0
117a: a5 18     -         lda  R0H
117c: 75 18     -         adc  R0H,X
117e: a0 00     -         ldy  #$00           // R0 FOR RESULT
1180: f0 e9     -         beq  SUB2           // FINISH ADD
1182: a5 35     -         lda  R15L           // NOTE X REG IS 12*2!
1184: 20 1f 11  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
1187: a5 36     -         lda  R15H
1189: 20 1f 11  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
118c: 18        -         clc
118d: b0 0e     -         bcs  BNC2           // NO CARRY TEST	
118f: b1 35     -         lda  (R15L),Y       // DISPLACEMENT BYTE
1191: 10 01     -         bpl  BR2
1193: 88        -         dey
1194: 65 35     -         adc  R15L           // ADD TO PC
1196: 85 35     -         sta  R15L
1198: 98        -         tya
1199: 65 36     -         adc  R15H
119b: 85 36     -         sta  R15H
119d: 60        -         rts
119e: b0 ec     -         bcs  BR
11a0: 60        -         rts
11a1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
11a2: aa        -         tax                 // TO X REG FOR INDEXING
11a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
11a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
11a7: 60        -         rts
11a8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
11a9: aa        -         tax
11aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
11ac: 30 e1     -         bmi  BR1
11ae: 60        -         rts
11af: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
11b0: aa        -         tax
11b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
11b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
11b5: f0 d8     -         beq  BR1            // BRANCH IF SO
11b7: 60        -         rts
11b8: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
11b9: aa        -         tax
11ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
11bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
11be: d0 cf     -         bne  BR1            // BRANCH IF SO
11c0: 60        -         rts	
11c1: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
11c2: aa        -         tax
11c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
11c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
11c7: 49 ff     -         eor  #$FF
11c9: f0 c4     -         beq  BR1            // BRANCH IF SO
11cb: 60        -         rts
11cc: 0a        -         asl                 // DOUBLE RESULT-REG INDEX
11cd: aa        -         tax
11ce: b5 17     -         lda  R0L,X
11d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
11d2: 49 ff     -         eor  #$FF
11d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
11d6: 60        -         rts
11d7: a2 18     -         ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
11d9: 20 54 11  -         jsr  DCR            // DECR STACK POINTER
11dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
11de: 85 36     -         sta  R15H
11e0: 20 54 11  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
11e3: a1 17     -         lda  (R0L,X)
11e5: 85 35     -         sta  R15L
11e7: 60        -         rts
11e8: a0 00     -         ldy  #$00           // HIGH ORDER BYTE = 0
11ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
11ec: 20 54 11  -         jsr  DCR            // DECR RX
11ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
11f1: a8        -         tay                 // SAVE IN Y REG	
11f2: 4c fb 11  -         jmp POP2
11f5: 4c 66 12  -         jmp SETI_OUTOFPAGE
11f8: 4c 09 12  -         jmp  RTNZ
11fb: 20 54 11  -         jsr  DCR            // DECR RX
11fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
1200: 85 17     -         sta  R0L            // TO R0
1202: 84 18     -         sty  R0H
1204: a0 00     -         ldy  #$00           // INDICATE R0 AS LAST RESULT REG
1206: 84 34     -         sty  R14H
1208: 60        -         rts
1209: 68        -         pla                 // POP RETURN ADDRESS
120a: 68        -         pla
120b: ad aa 12  -         lda SW16_SAVE_RESTORE
120e: f0 03     -         beq RESTORED
1210: 20 26 12  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
1213: 6c 35 00  -         jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
1216: 8d a6 12  -         sta ACCUMULATOR
1219: 8e a7 12  -         stx XREG
121c: 8c a8 12  -         sty YREG
121f: 08        -         php
1220: 68        -         pla
1221: 8d a9 12  -         sta STATUS
1224: d8        -         cld
1225: 60        -         rts
1226: ad a9 12  -         lda STATUS
1229: 48        -         pha
122a: ad a6 12  -         lda ACCUMULATOR
122d: ae a7 12  -         ldx XREG
1230: ac a8 12  -         ldy YREG
1233: 28        -         plp
1234: 60        -         rts
1235: 68        -         pla		// Y
1236: a8        -         tay		// restore Y
1237: 68        -         pla		// X
1238: aa        -         tax		// restore X
1239: 68        -         pla		// restore A
123a: 85 37     -         sta RL(ZP)
123c: 28        -         plp		// restore Status Flags
123d: 68        -         pla		// PCL discard - not useful
123e: 68        -         pla		// PCH discard - not useful
123f: a5 37     -         lda RL(ZP)
1241: 4c 24 10  -         jmp SW16D
1244: b1 35     -         lda (R15L),Y       		// dest addr high
1246: 85 37     -         sta RL(ZP)
1248: e6 35     -         inc R15L
124a: d0 02     -         bne !incremented+ 		// inc PC
124c: e6 36     -         inc R15H
124e: b1 35     -         lda (R15L),Y       		// dest addr low
1250: 85 38     -         sta RH(ZP)
1252: e6 35     -         inc R15L
1254: d0 02     -         bne !incremented+ 		// inc PC
1256: e6 36     -         inc R15H
1258: b1 35     -         lda (R15L),Y       		// dest register
125a: e6 35     -         inc R15L
125c: d0 02     -         bne !incremented+ 		// inc PC
125e: e6 36     -         inc R15H
1260: a8        -         tay
1261: e6 37     -         inc RL(ZP)
1263: a2 37     -         ldx #RL(ZP)
1265: 60        -         rts

[Sweet16OutOfPage]
1266: 20 44 12  -         jsr SETIM_COMMON
1269: a1 00     -         lda ($00,X)
126b: 99 00 00  -         sta $00,Y				// low order
126e: c6 37     -         dec RL(ZP)
1270: a1 00     -         lda ($00,X)
1272: 99 01 00  -         sta $01,Y				// high order
1275: 4c 24 10  -         jmp SW16D				// back to SWEET16
1278: 20 44 12  -         jsr SETIM_COMMON
127b: a1 00     -         lda ($00,X)
127d: 99 01 00  -         sta $01,Y				// high order
1280: c6 37     -         dec RL(ZP)
1282: a1 00     -         lda ($00,X)
1284: 99 00 00  -         sta $00,Y				// low order
1287: 4c 24 10  -         jmp SW16D				// back to SWEET16
128a: a9 12     -         lda #>((!returned+)-1)	// so we know where to come back to as we're
128c: 48        -         pha						// using rts as jmps here
128d: a9 a2     -         lda #<((!returned+)-1)
128f: 48        -         pha
1290: b1 35     -         lda (R15L),Y       		// high order byte
1292: 48        -         pha
1293: e6 35     -         inc R15L
1295: d0 02     -         bne !incremented+ 		// inc PC
1297: e6 36     -         inc R15H
1299: b1 35     -         lda (R15L),Y       		// low order byte
129b: 48        -         pha
129c: e6 35     -         inc R15L
129e: d0 02     -         bne !incremented+ 		// inc PC
12a0: e6 36     -         inc R15H
12a2: 60        -         rts				   		// this performs jump from stack
12a3: 4c 24 10  -         jmp SW16D				// back to SWEET16

[Sweet16Data]
12a6: 00        -         .byte 0
12a7: 00        -         .byte 0
12a8: 00        -         .byte 0
12a9: 00        -         .byte 0
12aa: 00        -         .byte 0
***************************** Segment: TestsPatch ******************************
[TestsPatch]
2000: fe ed     - tests_patch:.byte >MagicPatch, <MagicPatch
******************************** Segment: Tests ********************************
[Tests]
2000: ee 45 52  - SET_TEST:inc TEST_NAME_COUNT
2003: ad 86 02  -         lda foreground_color
2006: 48        -         pha
2007: a9 0f     -         lda #color
2009: 8d 86 02  -         sta foreground_color
200c: a2 00     -         ldx #$00
200e: bd 21 20  -         lda msg,x
2011: f0 07     -         beq !done+
2013: 20 d2 ff  -         jsr kernal_chrout
2016: e8        -         inx
2017: 4c 0e 20  -         jmp !loop-
201a: 68        -         pla
201b: 8d 86 02  -         sta foreground_color
201e: 4c 2a 20  -         jmp !done+
2021: 20 20     - memory: .fill spacing, spacebar
2023: 53 45 54  -         .text name
2026: 2e 2e 2e  -         .text "..."
2029: 00        -         .byte NULL
202a: 20 08 10  -         jsr SW16
202d: 15        -         .byte opcode(op, register)
202e: 34 12     -         .word address.getValue()
2030: 00        -         .byte $00 }
2031: ee 43 52  -         inc TEST_COUNT
2034: ad 86 02  -         lda foreground_color
2037: 48        -         pha
2038: a9 0e     -         lda #color
203a: 8d 86 02  -         sta foreground_color
203d: a2 00     -         ldx #$00
203f: bd 52 20  -         lda msg,x
2042: f0 07     -         beq !done+
2044: 20 d2 ff  -         jsr kernal_chrout
2047: e8        -         inx
2048: 4c 3f 20  -         jmp !loop-
204b: 68        -         pla
204c: 8d 86 02  -         sta foreground_color
204f: 4c 5a 20  -         jmp !done+
2052: 20        - memory: .byte spacebar
2053: 56 41 4c 55 45                                   -         .text description
2058: 3a        -         .text ":"
2059: 00        -         .byte NULL
205a: a6 21     -         ldx rl(register.getValue())
205c: a4 22     -         ldy rh(register.getValue())
205e: e0 34     -         cpx #<value
2060: d0 25     -         bne !failed+
2062: c0 12     -         cpy #>value
2064: d0 21     -         bne !failed+
2066: ee 44 52  -         inc TEST_PASS_COUNT
2069: ad 86 02  -         lda foreground_color
206c: 48        -         pha
206d: a9 05     -         lda #color
206f: 8d 86 02  -         sta foreground_color
2072: a2 00     -         ldx #$00
2074: bd 3f 52  -         lda msg,x
2077: f0 07     -         beq !done+
2079: 20 d2 ff  -         jsr kernal_chrout
207c: e8        -         inx
207d: 4c 74 20  -         jmp !loop-
2080: 68        -         pla
2081: 8d 86 02  -         sta foreground_color
2084: 4c a2 20  -         jmp !done+
2087: ad 86 02  -         lda foreground_color
208a: 48        -         pha
208b: a9 02     -         lda #color
208d: 8d 86 02  -         sta foreground_color
2090: a2 00     -         ldx #$00
2092: bd 41 52  -         lda msg,x
2095: f0 07     -         beq !done+
2097: 20 d2 ff  -         jsr kernal_chrout
209a: e8        -         inx
209b: 4c 92 20  -         jmp !loop-
209e: 68        -         pla
209f: 8d 86 02  -         sta foreground_color
20a2: a2 00     -         ldx #$00
20a4: bd b3 20  -         lda msg,x
20a7: f0 07     -         beq !done+
20a9: 20 d2 ff  -         jsr kernal_chrout
20ac: e8        -         inx
20ad: 4c a4 20  -         jmp !loop-
20b0: 4c b5 20  -         jmp !done+
20b3: 0d 00     - memory: .byte RETURN, NULL
20b5: ae 45 52  -         ldx TEST_NAME_COUNT
20b8: e0 15     -         cpx #TESTS_PER_PAGE
20ba: d0 5d     -         bne !exit+
20bc: ad 86 02  -         lda foreground_color
20bf: 48        -         pha
20c0: a9 01     -         lda #color
20c2: 8d 86 02  -         sta foreground_color
20c5: a2 00     -         ldx #$00
20c7: bd da 20  -         lda msg,x
20ca: f0 07     -         beq !done+
20cc: 20 d2 ff  -         jsr kernal_chrout
20cf: e8        -         inx
20d0: 4c c7 20  -         jmp !loop-
20d3: 68        -         pla
20d4: 8d 86 02  -         sta foreground_color
20d7: 4c f9 20  -         jmp !no_key+
20da: 0d        - memory: .byte RETURN
20db: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
20eb: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
20f7: 0d 00     -         .byte RETURN, NULL
20f9: 20 9f ff  -         jsr scnkey  // scan keyboard
20fc: 20 e4 ff  -         jsr getin	// put result into A
20ff: f0 f8     -         beq !no_key-
2101: a2 00     -         ldx #$00
2103: bd 12 21  -         lda msg,x
2106: f0 07     -         beq !done+
2108: 20 d2 ff  -         jsr kernal_chrout
210b: e8        -         inx
210c: 4c 03 21  -         jmp !loop-
210f: 4c 14 21  -         jmp !done+
2112: 0d 00     - newline:.byte RETURN, NULL
2114: a2 00     -         ldx #$00
2116: 8e 45 52  -         stx TEST_NAME_COUNT
2119: 60        -         rts
211a: ee 45 52  - LOAD_TEST:inc TEST_NAME_COUNT
211d: ad 86 02  -         lda foreground_color
2120: 48        -         pha
2121: a9 0f     -         lda #color
2123: 8d 86 02  -         sta foreground_color
2126: a2 00     -         ldx #$00
2128: bd 3b 21  -         lda msg,x
212b: f0 07     -         beq !done+
212d: 20 d2 ff  -         jsr kernal_chrout
2130: e8        -         inx
2131: 4c 28 21  -         jmp !loop-
2134: 68        -         pla
2135: 8d 86 02  -         sta foreground_color
2138: 4c 45 21  -         jmp !done+
213b: 20 20     - memory: .fill spacing, spacebar
213d: 4c 4f 41 44                                      -         .text name
2141: 2e 2e 2e  -         .text "..."
2144: 00        -         .byte NULL
2145: 20 08 10  -         jsr SW16
2148: 15        -         .byte opcode(op, register)
2149: 21 43     -         .word address.getValue()
214b: 25        -         .byte opcode($20, register) }
214c: 00        -         .byte $00 }
214d: ee 43 52  -         inc TEST_COUNT
2150: ad 86 02  -         lda foreground_color
2153: 48        -         pha
2154: a9 0e     -         lda #color
2156: 8d 86 02  -         sta foreground_color
2159: a2 00     -         ldx #$00
215b: bd 6e 21  -         lda msg,x
215e: f0 07     -         beq !done+
2160: 20 d2 ff  -         jsr kernal_chrout
2163: e8        -         inx
2164: 4c 5b 21  -         jmp !loop-
2167: 68        -         pla
2168: 8d 86 02  -         sta foreground_color
216b: 4c 74 21  -         jmp !done+
216e: 20        - memory: .byte spacebar
216f: 41 43 43  -         .text description
2172: 3a        -         .text ":"
2173: 00        -         .byte NULL
2174: a6 17     -         ldx rl(register.getValue())
2176: a4 18     -         ldy rh(register.getValue())
2178: e0 21     -         cpx #<value
217a: d0 25     -         bne !failed+
217c: c0 43     -         cpy #>value
217e: d0 21     -         bne !failed+
2180: ee 44 52  -         inc TEST_PASS_COUNT
2183: ad 86 02  -         lda foreground_color
2186: 48        -         pha
2187: a9 05     -         lda #color
2189: 8d 86 02  -         sta foreground_color
218c: a2 00     -         ldx #$00
218e: bd 3f 52  -         lda msg,x
2191: f0 07     -         beq !done+
2193: 20 d2 ff  -         jsr kernal_chrout
2196: e8        -         inx
2197: 4c 8e 21  -         jmp !loop-
219a: 68        -         pla
219b: 8d 86 02  -         sta foreground_color
219e: 4c bc 21  -         jmp !done+
21a1: ad 86 02  -         lda foreground_color
21a4: 48        -         pha
21a5: a9 02     -         lda #color
21a7: 8d 86 02  -         sta foreground_color
21aa: a2 00     -         ldx #$00
21ac: bd 41 52  -         lda msg,x
21af: f0 07     -         beq !done+
21b1: 20 d2 ff  -         jsr kernal_chrout
21b4: e8        -         inx
21b5: 4c ac 21  -         jmp !loop-
21b8: 68        -         pla
21b9: 8d 86 02  -         sta foreground_color
21bc: a2 00     -         ldx #$00
21be: bd cd 21  -         lda msg,x
21c1: f0 07     -         beq !done+
21c3: 20 d2 ff  -         jsr kernal_chrout
21c6: e8        -         inx
21c7: 4c be 21  -         jmp !loop-
21ca: 4c cf 21  -         jmp !done+
21cd: 0d 00     - memory: .byte RETURN, NULL
21cf: ae 45 52  -         ldx TEST_NAME_COUNT
21d2: e0 15     -         cpx #TESTS_PER_PAGE
21d4: d0 5d     -         bne !exit+
21d6: ad 86 02  -         lda foreground_color
21d9: 48        -         pha
21da: a9 01     -         lda #color
21dc: 8d 86 02  -         sta foreground_color
21df: a2 00     -         ldx #$00
21e1: bd f4 21  -         lda msg,x
21e4: f0 07     -         beq !done+
21e6: 20 d2 ff  -         jsr kernal_chrout
21e9: e8        -         inx
21ea: 4c e1 21  -         jmp !loop-
21ed: 68        -         pla
21ee: 8d 86 02  -         sta foreground_color
21f1: 4c 13 22  -         jmp !no_key+
21f4: 0d        - memory: .byte RETURN
21f5: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2205: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2211: 0d 00     -         .byte RETURN, NULL
2213: 20 9f ff  -         jsr scnkey  // scan keyboard
2216: 20 e4 ff  -         jsr getin	// put result into A
2219: f0 f8     -         beq !no_key-
221b: a2 00     -         ldx #$00
221d: bd 2c 22  -         lda msg,x
2220: f0 07     -         beq !done+
2222: 20 d2 ff  -         jsr kernal_chrout
2225: e8        -         inx
2226: 4c 1d 22  -         jmp !loop-
2229: 4c 2e 22  -         jmp !done+
222c: 0d 00     - newline:.byte RETURN, NULL
222e: a2 00     -         ldx #$00
2230: 8e 45 52  -         stx TEST_NAME_COUNT
2233: 60        -         rts
2234: ee 45 52  - STORE_TEST:inc TEST_NAME_COUNT
2237: ad 86 02  -         lda foreground_color
223a: 48        -         pha
223b: a9 0f     -         lda #color
223d: 8d 86 02  -         sta foreground_color
2240: a2 00     -         ldx #$00
2242: bd 55 22  -         lda msg,x
2245: f0 07     -         beq !done+
2247: 20 d2 ff  -         jsr kernal_chrout
224a: e8        -         inx
224b: 4c 42 22  -         jmp !loop-
224e: 68        -         pla
224f: 8d 86 02  -         sta foreground_color
2252: 4c 60 22  -         jmp !done+
2255: 20 20     - memory: .fill spacing, spacebar
2257: 53 54 4f 52 45                                   -         .text name
225c: 2e 2e 2e  -         .text "..."
225f: 00        -         .byte NULL
2260: 20 08 10  -         jsr SW16
2263: 15        -         .byte opcode(op, register)
2264: 34 12     -         .word address.getValue()
2266: 25        -         .byte opcode($20, register) }
2267: 36        -         .byte opcode($30, register) }
2268: 00        -         .byte $00 }
2269: ee 43 52  -         inc TEST_COUNT
226c: ad 86 02  -         lda foreground_color
226f: 48        -         pha
2270: a9 0e     -         lda #color
2272: 8d 86 02  -         sta foreground_color
2275: a2 00     -         ldx #$00
2277: bd 8a 22  -         lda msg,x
227a: f0 07     -         beq !done+
227c: 20 d2 ff  -         jsr kernal_chrout
227f: e8        -         inx
2280: 4c 77 22  -         jmp !loop-
2283: 68        -         pla
2284: 8d 86 02  -         sta foreground_color
2287: 4c 92 22  -         jmp !done+
228a: 20        - memory: .byte spacebar
228b: 56 41 4c 55 45                                   -         .text description
2290: 3a        -         .text ":"
2291: 00        -         .byte NULL
2292: a6 23     -         ldx rl(register.getValue())
2294: a4 24     -         ldy rh(register.getValue())
2296: e0 34     -         cpx #<value
2298: d0 25     -         bne !failed+
229a: c0 12     -         cpy #>value
229c: d0 21     -         bne !failed+
229e: ee 44 52  -         inc TEST_PASS_COUNT
22a1: ad 86 02  -         lda foreground_color
22a4: 48        -         pha
22a5: a9 05     -         lda #color
22a7: 8d 86 02  -         sta foreground_color
22aa: a2 00     -         ldx #$00
22ac: bd 3f 52  -         lda msg,x
22af: f0 07     -         beq !done+
22b1: 20 d2 ff  -         jsr kernal_chrout
22b4: e8        -         inx
22b5: 4c ac 22  -         jmp !loop-
22b8: 68        -         pla
22b9: 8d 86 02  -         sta foreground_color
22bc: 4c da 22  -         jmp !done+
22bf: ad 86 02  -         lda foreground_color
22c2: 48        -         pha
22c3: a9 02     -         lda #color
22c5: 8d 86 02  -         sta foreground_color
22c8: a2 00     -         ldx #$00
22ca: bd 41 52  -         lda msg,x
22cd: f0 07     -         beq !done+
22cf: 20 d2 ff  -         jsr kernal_chrout
22d2: e8        -         inx
22d3: 4c ca 22  -         jmp !loop-
22d6: 68        -         pla
22d7: 8d 86 02  -         sta foreground_color
22da: a2 00     -         ldx #$00
22dc: bd eb 22  -         lda msg,x
22df: f0 07     -         beq !done+
22e1: 20 d2 ff  -         jsr kernal_chrout
22e4: e8        -         inx
22e5: 4c dc 22  -         jmp !loop-
22e8: 4c ed 22  -         jmp !done+
22eb: 0d 00     - memory: .byte RETURN, NULL
22ed: ae 45 52  -         ldx TEST_NAME_COUNT
22f0: e0 15     -         cpx #TESTS_PER_PAGE
22f2: d0 5d     -         bne !exit+
22f4: ad 86 02  -         lda foreground_color
22f7: 48        -         pha
22f8: a9 01     -         lda #color
22fa: 8d 86 02  -         sta foreground_color
22fd: a2 00     -         ldx #$00
22ff: bd 12 23  -         lda msg,x
2302: f0 07     -         beq !done+
2304: 20 d2 ff  -         jsr kernal_chrout
2307: e8        -         inx
2308: 4c ff 22  -         jmp !loop-
230b: 68        -         pla
230c: 8d 86 02  -         sta foreground_color
230f: 4c 31 23  -         jmp !no_key+
2312: 0d        - memory: .byte RETURN
2313: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2323: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
232f: 0d 00     -         .byte RETURN, NULL
2331: 20 9f ff  -         jsr scnkey  // scan keyboard
2334: 20 e4 ff  -         jsr getin	// put result into A
2337: f0 f8     -         beq !no_key-
2339: a2 00     -         ldx #$00
233b: bd 4a 23  -         lda msg,x
233e: f0 07     -         beq !done+
2340: 20 d2 ff  -         jsr kernal_chrout
2343: e8        -         inx
2344: 4c 3b 23  -         jmp !loop-
2347: 4c 4c 23  -         jmp !done+
234a: 0d 00     - newline:.byte RETURN, NULL
234c: a2 00     -         ldx #$00
234e: 8e 45 52  -         stx TEST_NAME_COUNT
2351: 60        -         rts
2352: ee 45 52  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
2355: ad 86 02  -         lda foreground_color
2358: 48        -         pha
2359: a9 0f     -         lda #color
235b: 8d 86 02  -         sta foreground_color
235e: a2 00     -         ldx #$00
2360: bd 73 23  -         lda msg,x
2363: f0 07     -         beq !done+
2365: 20 d2 ff  -         jsr kernal_chrout
2368: e8        -         inx
2369: 4c 60 23  -         jmp !loop-
236c: 68        -         pla
236d: 8d 86 02  -         sta foreground_color
2370: 4c 86 23  -         jmp !done+
2373: 20 20     - memory: .fill spacing, spacebar
2375: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
2382: 2e 2e 2e  -         .text "..."
2385: 00        -         .byte NULL
2386: 20 08 10  -         jsr SW16
2389: 15        -         .byte opcode(op, register)
238a: 5b 52     -         .word address.getValue()
238c: 45        -         .byte opcode($40, register) }
238d: 00        -         .byte $00 }
238e: ee 43 52  -         inc TEST_COUNT
2391: ad 86 02  -         lda foreground_color
2394: 48        -         pha
2395: a9 0e     -         lda #color
2397: 8d 86 02  -         sta foreground_color
239a: a2 00     -         ldx #$00
239c: bd af 23  -         lda msg,x
239f: f0 07     -         beq !done+
23a1: 20 d2 ff  -         jsr kernal_chrout
23a4: e8        -         inx
23a5: 4c 9c 23  -         jmp !loop-
23a8: 68        -         pla
23a9: 8d 86 02  -         sta foreground_color
23ac: 4c b5 23  -         jmp !done+
23af: 20        - memory: .byte spacebar
23b0: 41 43 43  -         .text description
23b3: 3a        -         .text ":"
23b4: 00        -         .byte NULL
23b5: a6 17     -         ldx rl(register.getValue())
23b7: a4 18     -         ldy rh(register.getValue())
23b9: ec 5b 52  -         cpx address
23bc: d0 21     -         bne !failed+
23be: ee 44 52  -         inc TEST_PASS_COUNT
23c1: ad 86 02  -         lda foreground_color
23c4: 48        -         pha
23c5: a9 05     -         lda #color
23c7: 8d 86 02  -         sta foreground_color
23ca: a2 00     -         ldx #$00
23cc: bd 3f 52  -         lda msg,x
23cf: f0 07     -         beq !done+
23d1: 20 d2 ff  -         jsr kernal_chrout
23d4: e8        -         inx
23d5: 4c cc 23  -         jmp !loop-
23d8: 68        -         pla
23d9: 8d 86 02  -         sta foreground_color
23dc: 4c fa 23  -         jmp !done+
23df: ad 86 02  -         lda foreground_color
23e2: 48        -         pha
23e3: a9 02     -         lda #color
23e5: 8d 86 02  -         sta foreground_color
23e8: a2 00     -         ldx #$00
23ea: bd 41 52  -         lda msg,x
23ed: f0 07     -         beq !done+
23ef: 20 d2 ff  -         jsr kernal_chrout
23f2: e8        -         inx
23f3: 4c ea 23  -         jmp !loop-
23f6: 68        -         pla
23f7: 8d 86 02  -         sta foreground_color
23fa: ee 43 52  -         inc TEST_COUNT
23fd: ad 86 02  -         lda foreground_color
2400: 48        -         pha
2401: a9 0e     -         lda #color
2403: 8d 86 02  -         sta foreground_color
2406: a2 00     -         ldx #$00
2408: bd 1b 24  -         lda msg,x
240b: f0 07     -         beq !done+
240d: 20 d2 ff  -         jsr kernal_chrout
2410: e8        -         inx
2411: 4c 08 24  -         jmp !loop-
2414: 68        -         pla
2415: 8d 86 02  -         sta foreground_color
2418: 4c 21 24  -         jmp !done+
241b: 20        - memory: .byte spacebar
241c: 52 45 47  -         .text description
241f: 3a        -         .text ":"
2420: 00        -         .byte NULL
2421: a6 21     -         ldx rl(register.getValue())
2423: a4 22     -         ldy rh(register.getValue())
2425: e0 5c     -         cpx #<value
2427: d0 25     -         bne !failed+
2429: c0 52     -         cpy #>value
242b: d0 21     -         bne !failed+
242d: ee 44 52  -         inc TEST_PASS_COUNT
2430: ad 86 02  -         lda foreground_color
2433: 48        -         pha
2434: a9 05     -         lda #color
2436: 8d 86 02  -         sta foreground_color
2439: a2 00     -         ldx #$00
243b: bd 3f 52  -         lda msg,x
243e: f0 07     -         beq !done+
2440: 20 d2 ff  -         jsr kernal_chrout
2443: e8        -         inx
2444: 4c 3b 24  -         jmp !loop-
2447: 68        -         pla
2448: 8d 86 02  -         sta foreground_color
244b: 4c 69 24  -         jmp !done+
244e: ad 86 02  -         lda foreground_color
2451: 48        -         pha
2452: a9 02     -         lda #color
2454: 8d 86 02  -         sta foreground_color
2457: a2 00     -         ldx #$00
2459: bd 41 52  -         lda msg,x
245c: f0 07     -         beq !done+
245e: 20 d2 ff  -         jsr kernal_chrout
2461: e8        -         inx
2462: 4c 59 24  -         jmp !loop-
2465: 68        -         pla
2466: 8d 86 02  -         sta foreground_color
2469: a2 00     -         ldx #$00
246b: bd 7a 24  -         lda msg,x
246e: f0 07     -         beq !done+
2470: 20 d2 ff  -         jsr kernal_chrout
2473: e8        -         inx
2474: 4c 6b 24  -         jmp !loop-
2477: 4c 7c 24  -         jmp !done+
247a: 0d 00     - memory: .byte RETURN, NULL
247c: ae 45 52  -         ldx TEST_NAME_COUNT
247f: e0 15     -         cpx #TESTS_PER_PAGE
2481: d0 5d     -         bne !exit+
2483: ad 86 02  -         lda foreground_color
2486: 48        -         pha
2487: a9 01     -         lda #color
2489: 8d 86 02  -         sta foreground_color
248c: a2 00     -         ldx #$00
248e: bd a1 24  -         lda msg,x
2491: f0 07     -         beq !done+
2493: 20 d2 ff  -         jsr kernal_chrout
2496: e8        -         inx
2497: 4c 8e 24  -         jmp !loop-
249a: 68        -         pla
249b: 8d 86 02  -         sta foreground_color
249e: 4c c0 24  -         jmp !no_key+
24a1: 0d        - memory: .byte RETURN
24a2: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
24b2: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
24be: 0d 00     -         .byte RETURN, NULL
24c0: 20 9f ff  -         jsr scnkey  // scan keyboard
24c3: 20 e4 ff  -         jsr getin	// put result into A
24c6: f0 f8     -         beq !no_key-
24c8: a2 00     -         ldx #$00
24ca: bd d9 24  -         lda msg,x
24cd: f0 07     -         beq !done+
24cf: 20 d2 ff  -         jsr kernal_chrout
24d2: e8        -         inx
24d3: 4c ca 24  -         jmp !loop-
24d6: 4c db 24  -         jmp !done+
24d9: 0d 00     - newline:.byte RETURN, NULL
24db: a2 00     -         ldx #$00
24dd: 8e 45 52  -         stx TEST_NAME_COUNT
24e0: 60        -         rts
24e1: ee 45 52  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
24e4: ad 86 02  -         lda foreground_color
24e7: 48        -         pha
24e8: a9 0f     -         lda #color
24ea: 8d 86 02  -         sta foreground_color
24ed: a2 00     -         ldx #$00
24ef: bd 02 25  -         lda msg,x
24f2: f0 07     -         beq !done+
24f4: 20 d2 ff  -         jsr kernal_chrout
24f7: e8        -         inx
24f8: 4c ef 24  -         jmp !loop-
24fb: 68        -         pla
24fc: 8d 86 02  -         sta foreground_color
24ff: 4c 16 25  -         jmp !done+
2502: 20 20     - memory: .fill spacing, spacebar
2504: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
2512: 2e 2e 2e  -         .text "..."
2515: 00        -         .byte NULL
2516: 20 08 10  -         jsr SW16
2519: 15        -         .byte opcode(op, register)
251a: 5b 52     -         .word address.getValue()
251c: 16        -         .byte opcode(op, register)
251d: 5d 52     -         .word address.getValue()
251f: 45        -         .byte opcode($40, register) }
2520: 56        -         .byte opcode($50, register) }
2521: 00        -         .byte $00 }
2522: ee 43 52  -         inc TEST_COUNT
2525: ad 86 02  -         lda foreground_color
2528: 48        -         pha
2529: a9 0e     -         lda #color
252b: 8d 86 02  -         sta foreground_color
252e: a2 00     -         ldx #$00
2530: bd 43 25  -         lda msg,x
2533: f0 07     -         beq !done+
2535: 20 d2 ff  -         jsr kernal_chrout
2538: e8        -         inx
2539: 4c 30 25  -         jmp !loop-
253c: 68        -         pla
253d: 8d 86 02  -         sta foreground_color
2540: 4c 49 25  -         jmp !done+
2543: 20        - memory: .byte spacebar
2544: 4d 45 4d  -         .text description
2547: 3a        -         .text ":"
2548: 00        -         .byte NULL
2549: a2 ff     -         ldx #$ff
254b: e8        -         inx
254c: e0 01     -         cpx #size
254e: f0 0b     -         beq !success+
2550: bd 5b 52  -         lda source,x
2553: dd 5d 52  -         cmp dest,x
2556: f0 f3     -         beq !loop-
2558: 4c 7c 25  -         jmp !failed+
255b: ee 44 52  -         inc TEST_PASS_COUNT
255e: ad 86 02  -         lda foreground_color
2561: 48        -         pha
2562: a9 05     -         lda #color
2564: 8d 86 02  -         sta foreground_color
2567: a2 00     -         ldx #$00
2569: bd 3f 52  -         lda msg,x
256c: f0 07     -         beq !done+
256e: 20 d2 ff  -         jsr kernal_chrout
2571: e8        -         inx
2572: 4c 69 25  -         jmp !loop-
2575: 68        -         pla
2576: 8d 86 02  -         sta foreground_color
2579: 4c 97 25  -         jmp !done+
257c: ad 86 02  -         lda foreground_color
257f: 48        -         pha
2580: a9 02     -         lda #color
2582: 8d 86 02  -         sta foreground_color
2585: a2 00     -         ldx #$00
2587: bd 41 52  -         lda msg,x
258a: f0 07     -         beq !done+
258c: 20 d2 ff  -         jsr kernal_chrout
258f: e8        -         inx
2590: 4c 87 25  -         jmp !loop-
2593: 68        -         pla
2594: 8d 86 02  -         sta foreground_color
2597: ee 43 52  -         inc TEST_COUNT
259a: ad 86 02  -         lda foreground_color
259d: 48        -         pha
259e: a9 0e     -         lda #color
25a0: 8d 86 02  -         sta foreground_color
25a3: a2 00     -         ldx #$00
25a5: bd b8 25  -         lda msg,x
25a8: f0 07     -         beq !done+
25aa: 20 d2 ff  -         jsr kernal_chrout
25ad: e8        -         inx
25ae: 4c a5 25  -         jmp !loop-
25b1: 68        -         pla
25b2: 8d 86 02  -         sta foreground_color
25b5: 4c be 25  -         jmp !done+
25b8: 20        - memory: .byte spacebar
25b9: 53 52 43  -         .text description
25bc: 3a        -         .text ":"
25bd: 00        -         .byte NULL
25be: a6 21     -         ldx rl(register.getValue())
25c0: a4 22     -         ldy rh(register.getValue())
25c2: e0 5c     -         cpx #<value
25c4: d0 25     -         bne !failed+
25c6: c0 52     -         cpy #>value
25c8: d0 21     -         bne !failed+
25ca: ee 44 52  -         inc TEST_PASS_COUNT
25cd: ad 86 02  -         lda foreground_color
25d0: 48        -         pha
25d1: a9 05     -         lda #color
25d3: 8d 86 02  -         sta foreground_color
25d6: a2 00     -         ldx #$00
25d8: bd 3f 52  -         lda msg,x
25db: f0 07     -         beq !done+
25dd: 20 d2 ff  -         jsr kernal_chrout
25e0: e8        -         inx
25e1: 4c d8 25  -         jmp !loop-
25e4: 68        -         pla
25e5: 8d 86 02  -         sta foreground_color
25e8: 4c 06 26  -         jmp !done+
25eb: ad 86 02  -         lda foreground_color
25ee: 48        -         pha
25ef: a9 02     -         lda #color
25f1: 8d 86 02  -         sta foreground_color
25f4: a2 00     -         ldx #$00
25f6: bd 41 52  -         lda msg,x
25f9: f0 07     -         beq !done+
25fb: 20 d2 ff  -         jsr kernal_chrout
25fe: e8        -         inx
25ff: 4c f6 25  -         jmp !loop-
2602: 68        -         pla
2603: 8d 86 02  -         sta foreground_color
2606: ee 43 52  -         inc TEST_COUNT
2609: ad 86 02  -         lda foreground_color
260c: 48        -         pha
260d: a9 0e     -         lda #color
260f: 8d 86 02  -         sta foreground_color
2612: a2 00     -         ldx #$00
2614: bd 27 26  -         lda msg,x
2617: f0 07     -         beq !done+
2619: 20 d2 ff  -         jsr kernal_chrout
261c: e8        -         inx
261d: 4c 14 26  -         jmp !loop-
2620: 68        -         pla
2621: 8d 86 02  -         sta foreground_color
2624: 4c 2d 26  -         jmp !done+
2627: 20        - memory: .byte spacebar
2628: 44 53 54  -         .text description
262b: 3a        -         .text ":"
262c: 00        -         .byte NULL
262d: a6 23     -         ldx rl(register.getValue())
262f: a4 24     -         ldy rh(register.getValue())
2631: e0 5e     -         cpx #<value
2633: d0 25     -         bne !failed+
2635: c0 52     -         cpy #>value
2637: d0 21     -         bne !failed+
2639: ee 44 52  -         inc TEST_PASS_COUNT
263c: ad 86 02  -         lda foreground_color
263f: 48        -         pha
2640: a9 05     -         lda #color
2642: 8d 86 02  -         sta foreground_color
2645: a2 00     -         ldx #$00
2647: bd 3f 52  -         lda msg,x
264a: f0 07     -         beq !done+
264c: 20 d2 ff  -         jsr kernal_chrout
264f: e8        -         inx
2650: 4c 47 26  -         jmp !loop-
2653: 68        -         pla
2654: 8d 86 02  -         sta foreground_color
2657: 4c 75 26  -         jmp !done+
265a: ad 86 02  -         lda foreground_color
265d: 48        -         pha
265e: a9 02     -         lda #color
2660: 8d 86 02  -         sta foreground_color
2663: a2 00     -         ldx #$00
2665: bd 41 52  -         lda msg,x
2668: f0 07     -         beq !done+
266a: 20 d2 ff  -         jsr kernal_chrout
266d: e8        -         inx
266e: 4c 65 26  -         jmp !loop-
2671: 68        -         pla
2672: 8d 86 02  -         sta foreground_color
2675: a2 00     -         ldx #$00
2677: bd 86 26  -         lda msg,x
267a: f0 07     -         beq !done+
267c: 20 d2 ff  -         jsr kernal_chrout
267f: e8        -         inx
2680: 4c 77 26  -         jmp !loop-
2683: 4c 88 26  -         jmp !done+
2686: 0d 00     - memory: .byte RETURN, NULL
2688: ae 45 52  -         ldx TEST_NAME_COUNT
268b: e0 15     -         cpx #TESTS_PER_PAGE
268d: d0 5d     -         bne !exit+
268f: ad 86 02  -         lda foreground_color
2692: 48        -         pha
2693: a9 01     -         lda #color
2695: 8d 86 02  -         sta foreground_color
2698: a2 00     -         ldx #$00
269a: bd ad 26  -         lda msg,x
269d: f0 07     -         beq !done+
269f: 20 d2 ff  -         jsr kernal_chrout
26a2: e8        -         inx
26a3: 4c 9a 26  -         jmp !loop-
26a6: 68        -         pla
26a7: 8d 86 02  -         sta foreground_color
26aa: 4c cc 26  -         jmp !no_key+
26ad: 0d        - memory: .byte RETURN
26ae: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
26be: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
26ca: 0d 00     -         .byte RETURN, NULL
26cc: 20 9f ff  -         jsr scnkey  // scan keyboard
26cf: 20 e4 ff  -         jsr getin	// put result into A
26d2: f0 f8     -         beq !no_key-
26d4: a2 00     -         ldx #$00
26d6: bd e5 26  -         lda msg,x
26d9: f0 07     -         beq !done+
26db: 20 d2 ff  -         jsr kernal_chrout
26de: e8        -         inx
26df: 4c d6 26  -         jmp !loop-
26e2: 4c e7 26  -         jmp !done+
26e5: 0d 00     - newline:.byte RETURN, NULL
26e7: a2 00     -         ldx #$00
26e9: 8e 45 52  -         stx TEST_NAME_COUNT
26ec: 60        -         rts
26ed: ee 45 52  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
26f0: ad 86 02  -         lda foreground_color
26f3: 48        -         pha
26f4: a9 0f     -         lda #color
26f6: 8d 86 02  -         sta foreground_color
26f9: a2 00     -         ldx #$00
26fb: bd 0e 27  -         lda msg,x
26fe: f0 07     -         beq !done+
2700: 20 d2 ff  -         jsr kernal_chrout
2703: e8        -         inx
2704: 4c fb 26  -         jmp !loop-
2707: 68        -         pla
2708: 8d 86 02  -         sta foreground_color
270b: 4c 28 27  -         jmp !done+
270e: 20 20     - memory: .fill spacing, spacebar
2710: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
2720: 52 45 43 54                                     
2724: 2e 2e 2e  -         .text "..."
2727: 00        -         .byte NULL
2728: 20 08 10  -         jsr SW16
272b: 15        -         .byte opcode(op, register)
272c: 5b 52     -         .word address.getValue()
272e: 65        -         .byte opcode($60, register) }
272f: 00        -         .byte $00 }
2730: ee 43 52  -         inc TEST_COUNT
2733: ad 86 02  -         lda foreground_color
2736: 48        -         pha
2737: a9 0e     -         lda #color
2739: 8d 86 02  -         sta foreground_color
273c: a2 00     -         ldx #$00
273e: bd 51 27  -         lda msg,x
2741: f0 07     -         beq !done+
2743: 20 d2 ff  -         jsr kernal_chrout
2746: e8        -         inx
2747: 4c 3e 27  -         jmp !loop-
274a: 68        -         pla
274b: 8d 86 02  -         sta foreground_color
274e: 4c 57 27  -         jmp !done+
2751: 20        - memory: .byte spacebar
2752: 41 43 43  -         .text description
2755: 3a        -         .text ":"
2756: 00        -         .byte NULL
2757: a6 17     -         ldx rl(register.getValue())
2759: a4 18     -         ldy rh(register.getValue())
275b: ec 5b 52  -         cpx address
275e: d0 26     -         bne !failed+
2760: cc 5c 52  -         cpy address+1
2763: d0 21     -         bne !failed+
2765: ee 44 52  -         inc TEST_PASS_COUNT
2768: ad 86 02  -         lda foreground_color
276b: 48        -         pha
276c: a9 05     -         lda #color
276e: 8d 86 02  -         sta foreground_color
2771: a2 00     -         ldx #$00
2773: bd 3f 52  -         lda msg,x
2776: f0 07     -         beq !done+
2778: 20 d2 ff  -         jsr kernal_chrout
277b: e8        -         inx
277c: 4c 73 27  -         jmp !loop-
277f: 68        -         pla
2780: 8d 86 02  -         sta foreground_color
2783: 4c a1 27  -         jmp !done+
2786: ad 86 02  -         lda foreground_color
2789: 48        -         pha
278a: a9 02     -         lda #color
278c: 8d 86 02  -         sta foreground_color
278f: a2 00     -         ldx #$00
2791: bd 41 52  -         lda msg,x
2794: f0 07     -         beq !done+
2796: 20 d2 ff  -         jsr kernal_chrout
2799: e8        -         inx
279a: 4c 91 27  -         jmp !loop-
279d: 68        -         pla
279e: 8d 86 02  -         sta foreground_color
27a1: ee 43 52  -         inc TEST_COUNT
27a4: ad 86 02  -         lda foreground_color
27a7: 48        -         pha
27a8: a9 0e     -         lda #color
27aa: 8d 86 02  -         sta foreground_color
27ad: a2 00     -         ldx #$00
27af: bd c2 27  -         lda msg,x
27b2: f0 07     -         beq !done+
27b4: 20 d2 ff  -         jsr kernal_chrout
27b7: e8        -         inx
27b8: 4c af 27  -         jmp !loop-
27bb: 68        -         pla
27bc: 8d 86 02  -         sta foreground_color
27bf: 4c c7 27  -         jmp !done+
27c2: 20        - memory: .byte spacebar
27c3: 2b 32     -         .text description
27c5: 3a        -         .text ":"
27c6: 00        -         .byte NULL
27c7: a6 21     -         ldx rl(register.getValue())
27c9: a4 22     -         ldy rh(register.getValue())
27cb: e0 5d     -         cpx #<value
27cd: d0 25     -         bne !failed+
27cf: c0 52     -         cpy #>value
27d1: d0 21     -         bne !failed+
27d3: ee 44 52  -         inc TEST_PASS_COUNT
27d6: ad 86 02  -         lda foreground_color
27d9: 48        -         pha
27da: a9 05     -         lda #color
27dc: 8d 86 02  -         sta foreground_color
27df: a2 00     -         ldx #$00
27e1: bd 3f 52  -         lda msg,x
27e4: f0 07     -         beq !done+
27e6: 20 d2 ff  -         jsr kernal_chrout
27e9: e8        -         inx
27ea: 4c e1 27  -         jmp !loop-
27ed: 68        -         pla
27ee: 8d 86 02  -         sta foreground_color
27f1: 4c 0f 28  -         jmp !done+
27f4: ad 86 02  -         lda foreground_color
27f7: 48        -         pha
27f8: a9 02     -         lda #color
27fa: 8d 86 02  -         sta foreground_color
27fd: a2 00     -         ldx #$00
27ff: bd 41 52  -         lda msg,x
2802: f0 07     -         beq !done+
2804: 20 d2 ff  -         jsr kernal_chrout
2807: e8        -         inx
2808: 4c ff 27  -         jmp !loop-
280b: 68        -         pla
280c: 8d 86 02  -         sta foreground_color
280f: a2 00     -         ldx #$00
2811: bd 20 28  -         lda msg,x
2814: f0 07     -         beq !done+
2816: 20 d2 ff  -         jsr kernal_chrout
2819: e8        -         inx
281a: 4c 11 28  -         jmp !loop-
281d: 4c 22 28  -         jmp !done+
2820: 0d 00     - memory: .byte RETURN, NULL
2822: ae 45 52  -         ldx TEST_NAME_COUNT
2825: e0 15     -         cpx #TESTS_PER_PAGE
2827: d0 5d     -         bne !exit+
2829: ad 86 02  -         lda foreground_color
282c: 48        -         pha
282d: a9 01     -         lda #color
282f: 8d 86 02  -         sta foreground_color
2832: a2 00     -         ldx #$00
2834: bd 47 28  -         lda msg,x
2837: f0 07     -         beq !done+
2839: 20 d2 ff  -         jsr kernal_chrout
283c: e8        -         inx
283d: 4c 34 28  -         jmp !loop-
2840: 68        -         pla
2841: 8d 86 02  -         sta foreground_color
2844: 4c 66 28  -         jmp !no_key+
2847: 0d        - memory: .byte RETURN
2848: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2858: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2864: 0d 00     -         .byte RETURN, NULL
2866: 20 9f ff  -         jsr scnkey  // scan keyboard
2869: 20 e4 ff  -         jsr getin	// put result into A
286c: f0 f8     -         beq !no_key-
286e: a2 00     -         ldx #$00
2870: bd 7f 28  -         lda msg,x
2873: f0 07     -         beq !done+
2875: 20 d2 ff  -         jsr kernal_chrout
2878: e8        -         inx
2879: 4c 70 28  -         jmp !loop-
287c: 4c 81 28  -         jmp !done+
287f: 0d 00     - newline:.byte RETURN, NULL
2881: a2 00     -         ldx #$00
2883: 8e 45 52  -         stx TEST_NAME_COUNT
2886: 60        -         rts
2887: ee 45 52  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
288a: ad 86 02  -         lda foreground_color
288d: 48        -         pha
288e: a9 0f     -         lda #color
2890: 8d 86 02  -         sta foreground_color
2893: a2 00     -         ldx #$00
2895: bd a8 28  -         lda msg,x
2898: f0 07     -         beq !done+
289a: 20 d2 ff  -         jsr kernal_chrout
289d: e8        -         inx
289e: 4c 95 28  -         jmp !loop-
28a1: 68        -         pla
28a2: 8d 86 02  -         sta foreground_color
28a5: 4c bb 28  -         jmp !done+
28a8: 20 20     - memory: .fill spacing, spacebar
28aa: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
28b7: 2e 2e 2e  -         .text "..."
28ba: 00        -         .byte NULL
28bb: 20 08 10  -         jsr SW16
28be: 15        -         .byte opcode(op, register)
28bf: 5b 52     -         .word address.getValue()
28c1: 16        -         .byte opcode(op, register)
28c2: 5d 52     -         .word address.getValue()
28c4: 65        -         .byte opcode($60, register) }
28c5: 76        -         .byte opcode($70, register) }
28c6: 00        -         .byte $00 }
28c7: ee 43 52  -         inc TEST_COUNT
28ca: ad 86 02  -         lda foreground_color
28cd: 48        -         pha
28ce: a9 0e     -         lda #color
28d0: 8d 86 02  -         sta foreground_color
28d3: a2 00     -         ldx #$00
28d5: bd e8 28  -         lda msg,x
28d8: f0 07     -         beq !done+
28da: 20 d2 ff  -         jsr kernal_chrout
28dd: e8        -         inx
28de: 4c d5 28  -         jmp !loop-
28e1: 68        -         pla
28e2: 8d 86 02  -         sta foreground_color
28e5: 4c ee 28  -         jmp !done+
28e8: 20        - memory: .byte spacebar
28e9: 4d 45 4d  -         .text description
28ec: 3a        -         .text ":"
28ed: 00        -         .byte NULL
28ee: a2 ff     -         ldx #$ff
28f0: e8        -         inx
28f1: e0 02     -         cpx #size
28f3: f0 0b     -         beq !success+
28f5: bd 5b 52  -         lda source,x
28f8: dd 5d 52  -         cmp dest,x
28fb: f0 f3     -         beq !loop-
28fd: 4c 21 29  -         jmp !failed+
2900: ee 44 52  -         inc TEST_PASS_COUNT
2903: ad 86 02  -         lda foreground_color
2906: 48        -         pha
2907: a9 05     -         lda #color
2909: 8d 86 02  -         sta foreground_color
290c: a2 00     -         ldx #$00
290e: bd 3f 52  -         lda msg,x
2911: f0 07     -         beq !done+
2913: 20 d2 ff  -         jsr kernal_chrout
2916: e8        -         inx
2917: 4c 0e 29  -         jmp !loop-
291a: 68        -         pla
291b: 8d 86 02  -         sta foreground_color
291e: 4c 3c 29  -         jmp !done+
2921: ad 86 02  -         lda foreground_color
2924: 48        -         pha
2925: a9 02     -         lda #color
2927: 8d 86 02  -         sta foreground_color
292a: a2 00     -         ldx #$00
292c: bd 41 52  -         lda msg,x
292f: f0 07     -         beq !done+
2931: 20 d2 ff  -         jsr kernal_chrout
2934: e8        -         inx
2935: 4c 2c 29  -         jmp !loop-
2938: 68        -         pla
2939: 8d 86 02  -         sta foreground_color
293c: ee 43 52  -         inc TEST_COUNT
293f: ad 86 02  -         lda foreground_color
2942: 48        -         pha
2943: a9 0e     -         lda #color
2945: 8d 86 02  -         sta foreground_color
2948: a2 00     -         ldx #$00
294a: bd 5d 29  -         lda msg,x
294d: f0 07     -         beq !done+
294f: 20 d2 ff  -         jsr kernal_chrout
2952: e8        -         inx
2953: 4c 4a 29  -         jmp !loop-
2956: 68        -         pla
2957: 8d 86 02  -         sta foreground_color
295a: 4c 63 29  -         jmp !done+
295d: 20        - memory: .byte spacebar
295e: 53 2b 32  -         .text description
2961: 3a        -         .text ":"
2962: 00        -         .byte NULL
2963: a6 21     -         ldx rl(register.getValue())
2965: a4 22     -         ldy rh(register.getValue())
2967: e0 5d     -         cpx #<value
2969: d0 25     -         bne !failed+
296b: c0 52     -         cpy #>value
296d: d0 21     -         bne !failed+
296f: ee 44 52  -         inc TEST_PASS_COUNT
2972: ad 86 02  -         lda foreground_color
2975: 48        -         pha
2976: a9 05     -         lda #color
2978: 8d 86 02  -         sta foreground_color
297b: a2 00     -         ldx #$00
297d: bd 3f 52  -         lda msg,x
2980: f0 07     -         beq !done+
2982: 20 d2 ff  -         jsr kernal_chrout
2985: e8        -         inx
2986: 4c 7d 29  -         jmp !loop-
2989: 68        -         pla
298a: 8d 86 02  -         sta foreground_color
298d: 4c ab 29  -         jmp !done+
2990: ad 86 02  -         lda foreground_color
2993: 48        -         pha
2994: a9 02     -         lda #color
2996: 8d 86 02  -         sta foreground_color
2999: a2 00     -         ldx #$00
299b: bd 41 52  -         lda msg,x
299e: f0 07     -         beq !done+
29a0: 20 d2 ff  -         jsr kernal_chrout
29a3: e8        -         inx
29a4: 4c 9b 29  -         jmp !loop-
29a7: 68        -         pla
29a8: 8d 86 02  -         sta foreground_color
29ab: ee 43 52  -         inc TEST_COUNT
29ae: ad 86 02  -         lda foreground_color
29b1: 48        -         pha
29b2: a9 0e     -         lda #color
29b4: 8d 86 02  -         sta foreground_color
29b7: a2 00     -         ldx #$00
29b9: bd cc 29  -         lda msg,x
29bc: f0 07     -         beq !done+
29be: 20 d2 ff  -         jsr kernal_chrout
29c1: e8        -         inx
29c2: 4c b9 29  -         jmp !loop-
29c5: 68        -         pla
29c6: 8d 86 02  -         sta foreground_color
29c9: 4c d2 29  -         jmp !done+
29cc: 20        - memory: .byte spacebar
29cd: 44 2b 32  -         .text description
29d0: 3a        -         .text ":"
29d1: 00        -         .byte NULL
29d2: a6 23     -         ldx rl(register.getValue())
29d4: a4 24     -         ldy rh(register.getValue())
29d6: e0 5f     -         cpx #<value
29d8: d0 25     -         bne !failed+
29da: c0 52     -         cpy #>value
29dc: d0 21     -         bne !failed+
29de: ee 44 52  -         inc TEST_PASS_COUNT
29e1: ad 86 02  -         lda foreground_color
29e4: 48        -         pha
29e5: a9 05     -         lda #color
29e7: 8d 86 02  -         sta foreground_color
29ea: a2 00     -         ldx #$00
29ec: bd 3f 52  -         lda msg,x
29ef: f0 07     -         beq !done+
29f1: 20 d2 ff  -         jsr kernal_chrout
29f4: e8        -         inx
29f5: 4c ec 29  -         jmp !loop-
29f8: 68        -         pla
29f9: 8d 86 02  -         sta foreground_color
29fc: 4c 1a 2a  -         jmp !done+
29ff: ad 86 02  -         lda foreground_color
2a02: 48        -         pha
2a03: a9 02     -         lda #color
2a05: 8d 86 02  -         sta foreground_color
2a08: a2 00     -         ldx #$00
2a0a: bd 41 52  -         lda msg,x
2a0d: f0 07     -         beq !done+
2a0f: 20 d2 ff  -         jsr kernal_chrout
2a12: e8        -         inx
2a13: 4c 0a 2a  -         jmp !loop-
2a16: 68        -         pla
2a17: 8d 86 02  -         sta foreground_color
2a1a: a2 00     -         ldx #$00
2a1c: bd 2b 2a  -         lda msg,x
2a1f: f0 07     -         beq !done+
2a21: 20 d2 ff  -         jsr kernal_chrout
2a24: e8        -         inx
2a25: 4c 1c 2a  -         jmp !loop-
2a28: 4c 2d 2a  -         jmp !done+
2a2b: 0d 00     - memory: .byte RETURN, NULL
2a2d: ae 45 52  -         ldx TEST_NAME_COUNT
2a30: e0 15     -         cpx #TESTS_PER_PAGE
2a32: d0 5d     -         bne !exit+
2a34: ad 86 02  -         lda foreground_color
2a37: 48        -         pha
2a38: a9 01     -         lda #color
2a3a: 8d 86 02  -         sta foreground_color
2a3d: a2 00     -         ldx #$00
2a3f: bd 52 2a  -         lda msg,x
2a42: f0 07     -         beq !done+
2a44: 20 d2 ff  -         jsr kernal_chrout
2a47: e8        -         inx
2a48: 4c 3f 2a  -         jmp !loop-
2a4b: 68        -         pla
2a4c: 8d 86 02  -         sta foreground_color
2a4f: 4c 71 2a  -         jmp !no_key+
2a52: 0d        - memory: .byte RETURN
2a53: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2a63: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2a6f: 0d 00     -         .byte RETURN, NULL
2a71: 20 9f ff  -         jsr scnkey  // scan keyboard
2a74: 20 e4 ff  -         jsr getin	// put result into A
2a77: f0 f8     -         beq !no_key-
2a79: a2 00     -         ldx #$00
2a7b: bd 8a 2a  -         lda msg,x
2a7e: f0 07     -         beq !done+
2a80: 20 d2 ff  -         jsr kernal_chrout
2a83: e8        -         inx
2a84: 4c 7b 2a  -         jmp !loop-
2a87: 4c 8c 2a  -         jmp !done+
2a8a: 0d 00     - newline:.byte RETURN, NULL
2a8c: a2 00     -         ldx #$00
2a8e: 8e 45 52  -         stx TEST_NAME_COUNT
2a91: 60        -         rts
2a92: ee 45 52  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
2a95: ad 86 02  -         lda foreground_color
2a98: 48        -         pha
2a99: a9 0f     -         lda #color
2a9b: 8d 86 02  -         sta foreground_color
2a9e: a2 00     -         ldx #$00
2aa0: bd b3 2a  -         lda msg,x
2aa3: f0 07     -         beq !done+
2aa5: 20 d2 ff  -         jsr kernal_chrout
2aa8: e8        -         inx
2aa9: 4c a0 2a  -         jmp !loop-
2aac: 68        -         pla
2aad: 8d 86 02  -         sta foreground_color
2ab0: 4c c7 2a  -         jmp !done+
2ab3: 20 20     - memory: .fill spacing, spacebar
2ab5: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
2ac3: 2e 2e 2e  -         .text "..."
2ac6: 00        -         .byte NULL
2ac7: 20 08 10  -         jsr SW16
2aca: 15        -         .byte opcode(op, register)
2acb: 81 52     -         .word address.getValue()
2acd: 10        -         .byte opcode(op, register)
2ace: 04 00     -         .word address.getValue()
2ad0: 55        -         .byte opcode($50, register) }
2ad1: 0d        -         .byte $0d
2ad2: 2b        -         .byte >(address.getValue()-1)
2ad3: 66        -         .byte <(address.getValue()-1)
2ad4: 10        -         .byte opcode(op, register)
2ad5: 05 00     -         .word address.getValue()
2ad7: 55        -         .byte opcode($50, register) }
2ad8: 0d        -         .byte $0d
2ad9: 2b        -         .byte >(address.getValue()-1)
2ada: d1        -         .byte <(address.getValue()-1)
2adb: 10        -         .byte opcode(op, register)
2adc: 06 00     -         .word address.getValue()
2ade: 55        -         .byte opcode($50, register) }
2adf: 0d        -         .byte $0d
2ae0: 2c        -         .byte >(address.getValue()-1)
2ae1: 3c        -         .byte <(address.getValue()-1)
2ae2: 85        -         .byte opcode($80, register) }
2ae3: 0d        -         .byte $0d
2ae4: 2c        -         .byte >(address.getValue()-1)
2ae5: a7        -         .byte <(address.getValue()-1)
2ae6: 85        -         .byte opcode($80, register) }
2ae7: 0d        -         .byte $0d
2ae8: 2d        -         .byte >(address.getValue()-1)
2ae9: c2        -         .byte <(address.getValue()-1)
2aea: 85        -         .byte opcode($80, register) }
2aeb: 0d        -         .byte $0d
2aec: 2e        -         .byte >(address.getValue()-1)
2aed: 31        -         .byte <(address.getValue()-1)
2aee: 00        -         .byte $00 }
2aef: a2 00     -         ldx #$00
2af1: bd 00 2b  -         lda msg,x
2af4: f0 07     -         beq !done+
2af6: 20 d2 ff  -         jsr kernal_chrout
2af9: e8        -         inx
2afa: 4c f1 2a  -         jmp !loop-
2afd: 4c 02 2b  -         jmp !done+
2b00: 0d 00     - memory: .byte RETURN, NULL
2b02: ae 45 52  -         ldx TEST_NAME_COUNT
2b05: e0 15     -         cpx #TESTS_PER_PAGE
2b07: d0 5d     -         bne !exit+
2b09: ad 86 02  -         lda foreground_color
2b0c: 48        -         pha
2b0d: a9 01     -         lda #color
2b0f: 8d 86 02  -         sta foreground_color
2b12: a2 00     -         ldx #$00
2b14: bd 27 2b  -         lda msg,x
2b17: f0 07     -         beq !done+
2b19: 20 d2 ff  -         jsr kernal_chrout
2b1c: e8        -         inx
2b1d: 4c 14 2b  -         jmp !loop-
2b20: 68        -         pla
2b21: 8d 86 02  -         sta foreground_color
2b24: 4c 46 2b  -         jmp !no_key+
2b27: 0d        - memory: .byte RETURN
2b28: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2b38: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2b44: 0d 00     -         .byte RETURN, NULL
2b46: 20 9f ff  -         jsr scnkey  // scan keyboard
2b49: 20 e4 ff  -         jsr getin	// put result into A
2b4c: f0 f8     -         beq !no_key-
2b4e: a2 00     -         ldx #$00
2b50: bd 5f 2b  -         lda msg,x
2b53: f0 07     -         beq !done+
2b55: 20 d2 ff  -         jsr kernal_chrout
2b58: e8        -         inx
2b59: 4c 50 2b  -         jmp !loop-
2b5c: 4c 61 2b  -         jmp !done+
2b5f: 0d 00     - newline:.byte RETURN, NULL
2b61: a2 00     -         ldx #$00
2b63: 8e 45 52  -         stx TEST_NAME_COUNT
2b66: 60        -         rts
2b67: ee 43 52  -         inc TEST_COUNT
2b6a: ad 86 02  -         lda foreground_color
2b6d: 48        -         pha
2b6e: a9 0e     -         lda #color
2b70: 8d 86 02  -         sta foreground_color
2b73: a2 00     -         ldx #$00
2b75: bd 88 2b  -         lda msg,x
2b78: f0 07     -         beq !done+
2b7a: 20 d2 ff  -         jsr kernal_chrout
2b7d: e8        -         inx
2b7e: 4c 75 2b  -         jmp !loop-
2b81: 68        -         pla
2b82: 8d 86 02  -         sta foreground_color
2b85: 4c 8c 2b  -         jmp !done+
2b88: 20        - memory: .byte spacebar
2b89: 31        -         .text description
2b8a: 3a        -         .text ":"
2b8b: 00        -         .byte NULL
2b8c: a6 17     -         ldx rl(register.getValue())
2b8e: a4 18     -         ldy rh(register.getValue())
2b90: ec 81 52  -         cpx address
2b93: d0 21     -         bne !failed+
2b95: ee 44 52  -         inc TEST_PASS_COUNT
2b98: ad 86 02  -         lda foreground_color
2b9b: 48        -         pha
2b9c: a9 05     -         lda #color
2b9e: 8d 86 02  -         sta foreground_color
2ba1: a2 00     -         ldx #$00
2ba3: bd 3f 52  -         lda msg,x
2ba6: f0 07     -         beq !done+
2ba8: 20 d2 ff  -         jsr kernal_chrout
2bab: e8        -         inx
2bac: 4c a3 2b  -         jmp !loop-
2baf: 68        -         pla
2bb0: 8d 86 02  -         sta foreground_color
2bb3: 4c d1 2b  -         jmp !done+
2bb6: ad 86 02  -         lda foreground_color
2bb9: 48        -         pha
2bba: a9 02     -         lda #color
2bbc: 8d 86 02  -         sta foreground_color
2bbf: a2 00     -         ldx #$00
2bc1: bd 41 52  -         lda msg,x
2bc4: f0 07     -         beq !done+
2bc6: 20 d2 ff  -         jsr kernal_chrout
2bc9: e8        -         inx
2bca: 4c c1 2b  -         jmp !loop-
2bcd: 68        -         pla
2bce: 8d 86 02  -         sta foreground_color
2bd1: 60        -         rts
2bd2: ee 43 52  -         inc TEST_COUNT
2bd5: ad 86 02  -         lda foreground_color
2bd8: 48        -         pha
2bd9: a9 0e     -         lda #color
2bdb: 8d 86 02  -         sta foreground_color
2bde: a2 00     -         ldx #$00
2be0: bd f3 2b  -         lda msg,x
2be3: f0 07     -         beq !done+
2be5: 20 d2 ff  -         jsr kernal_chrout
2be8: e8        -         inx
2be9: 4c e0 2b  -         jmp !loop-
2bec: 68        -         pla
2bed: 8d 86 02  -         sta foreground_color
2bf0: 4c f7 2b  -         jmp !done+
2bf3: 20        - memory: .byte spacebar
2bf4: 32        -         .text description
2bf5: 3a        -         .text ":"
2bf6: 00        -         .byte NULL
2bf7: a6 17     -         ldx rl(register.getValue())
2bf9: a4 18     -         ldy rh(register.getValue())
2bfb: ec 82 52  -         cpx address
2bfe: d0 21     -         bne !failed+
2c00: ee 44 52  -         inc TEST_PASS_COUNT
2c03: ad 86 02  -         lda foreground_color
2c06: 48        -         pha
2c07: a9 05     -         lda #color
2c09: 8d 86 02  -         sta foreground_color
2c0c: a2 00     -         ldx #$00
2c0e: bd 3f 52  -         lda msg,x
2c11: f0 07     -         beq !done+
2c13: 20 d2 ff  -         jsr kernal_chrout
2c16: e8        -         inx
2c17: 4c 0e 2c  -         jmp !loop-
2c1a: 68        -         pla
2c1b: 8d 86 02  -         sta foreground_color
2c1e: 4c 3c 2c  -         jmp !done+
2c21: ad 86 02  -         lda foreground_color
2c24: 48        -         pha
2c25: a9 02     -         lda #color
2c27: 8d 86 02  -         sta foreground_color
2c2a: a2 00     -         ldx #$00
2c2c: bd 41 52  -         lda msg,x
2c2f: f0 07     -         beq !done+
2c31: 20 d2 ff  -         jsr kernal_chrout
2c34: e8        -         inx
2c35: 4c 2c 2c  -         jmp !loop-
2c38: 68        -         pla
2c39: 8d 86 02  -         sta foreground_color
2c3c: 60        -         rts
2c3d: ee 43 52  -         inc TEST_COUNT
2c40: ad 86 02  -         lda foreground_color
2c43: 48        -         pha
2c44: a9 0e     -         lda #color
2c46: 8d 86 02  -         sta foreground_color
2c49: a2 00     -         ldx #$00
2c4b: bd 5e 2c  -         lda msg,x
2c4e: f0 07     -         beq !done+
2c50: 20 d2 ff  -         jsr kernal_chrout
2c53: e8        -         inx
2c54: 4c 4b 2c  -         jmp !loop-
2c57: 68        -         pla
2c58: 8d 86 02  -         sta foreground_color
2c5b: 4c 62 2c  -         jmp !done+
2c5e: 20        - memory: .byte spacebar
2c5f: 33        -         .text description
2c60: 3a        -         .text ":"
2c61: 00        -         .byte NULL
2c62: a6 17     -         ldx rl(register.getValue())
2c64: a4 18     -         ldy rh(register.getValue())
2c66: ec 83 52  -         cpx address
2c69: d0 21     -         bne !failed+
2c6b: ee 44 52  -         inc TEST_PASS_COUNT
2c6e: ad 86 02  -         lda foreground_color
2c71: 48        -         pha
2c72: a9 05     -         lda #color
2c74: 8d 86 02  -         sta foreground_color
2c77: a2 00     -         ldx #$00
2c79: bd 3f 52  -         lda msg,x
2c7c: f0 07     -         beq !done+
2c7e: 20 d2 ff  -         jsr kernal_chrout
2c81: e8        -         inx
2c82: 4c 79 2c  -         jmp !loop-
2c85: 68        -         pla
2c86: 8d 86 02  -         sta foreground_color
2c89: 4c a7 2c  -         jmp !done+
2c8c: ad 86 02  -         lda foreground_color
2c8f: 48        -         pha
2c90: a9 02     -         lda #color
2c92: 8d 86 02  -         sta foreground_color
2c95: a2 00     -         ldx #$00
2c97: bd 41 52  -         lda msg,x
2c9a: f0 07     -         beq !done+
2c9c: 20 d2 ff  -         jsr kernal_chrout
2c9f: e8        -         inx
2ca0: 4c 97 2c  -         jmp !loop-
2ca3: 68        -         pla
2ca4: 8d 86 02  -         sta foreground_color
2ca7: 60        -         rts
2ca8: a2 00     -         ldx #$00
2caa: bd b9 2c  -         lda msg,x
2cad: f0 07     -         beq !done+
2caf: 20 d2 ff  -         jsr kernal_chrout
2cb2: e8        -         inx
2cb3: 4c aa 2c  -         jmp !loop-
2cb6: 4c bb 2c  -         jmp !done+
2cb9: 0d 00     - memory: .byte RETURN, NULL
2cbb: ae 45 52  -         ldx TEST_NAME_COUNT
2cbe: e0 15     -         cpx #TESTS_PER_PAGE
2cc0: d0 5d     -         bne !exit+
2cc2: ad 86 02  -         lda foreground_color
2cc5: 48        -         pha
2cc6: a9 01     -         lda #color
2cc8: 8d 86 02  -         sta foreground_color
2ccb: a2 00     -         ldx #$00
2ccd: bd e0 2c  -         lda msg,x
2cd0: f0 07     -         beq !done+
2cd2: 20 d2 ff  -         jsr kernal_chrout
2cd5: e8        -         inx
2cd6: 4c cd 2c  -         jmp !loop-
2cd9: 68        -         pla
2cda: 8d 86 02  -         sta foreground_color
2cdd: 4c ff 2c  -         jmp !no_key+
2ce0: 0d        - memory: .byte RETURN
2ce1: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2cf1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2cfd: 0d 00     -         .byte RETURN, NULL
2cff: 20 9f ff  -         jsr scnkey  // scan keyboard
2d02: 20 e4 ff  -         jsr getin	// put result into A
2d05: f0 f8     -         beq !no_key-
2d07: a2 00     -         ldx #$00
2d09: bd 18 2d  -         lda msg,x
2d0c: f0 07     -         beq !done+
2d0e: 20 d2 ff  -         jsr kernal_chrout
2d11: e8        -         inx
2d12: 4c 09 2d  -         jmp !loop-
2d15: 4c 1a 2d  -         jmp !done+
2d18: 0d 00     - newline:.byte RETURN, NULL
2d1a: a2 00     -         ldx #$00
2d1c: 8e 45 52  -         stx TEST_NAME_COUNT
2d1f: ee 45 52  -         inc TEST_NAME_COUNT
2d22: ad 86 02  -         lda foreground_color
2d25: 48        -         pha
2d26: a9 0f     -         lda #color
2d28: 8d 86 02  -         sta foreground_color
2d2b: a2 00     -         ldx #$00
2d2d: bd 40 2d  -         lda msg,x
2d30: f0 07     -         beq !done+
2d32: 20 d2 ff  -         jsr kernal_chrout
2d35: e8        -         inx
2d36: 4c 2d 2d  -         jmp !loop-
2d39: 68        -         pla
2d3a: 8d 86 02  -         sta foreground_color
2d3d: 4c 54 2d  -         jmp !done+
2d40: 20 20     - memory: .fill spacing, spacebar
2d42: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
2d50: 2e 2e 2e  -         .text "..."
2d53: 00        -         .byte NULL
2d54: ee 43 52  -         inc TEST_COUNT
2d57: ad 86 02  -         lda foreground_color
2d5a: 48        -         pha
2d5b: a9 0e     -         lda #color
2d5d: 8d 86 02  -         sta foreground_color
2d60: a2 00     -         ldx #$00
2d62: bd 75 2d  -         lda msg,x
2d65: f0 07     -         beq !done+
2d67: 20 d2 ff  -         jsr kernal_chrout
2d6a: e8        -         inx
2d6b: 4c 62 2d  -         jmp !loop-
2d6e: 68        -         pla
2d6f: 8d 86 02  -         sta foreground_color
2d72: 4c 7a 2d  -         jmp !done+
2d75: 20        - memory: .byte spacebar
2d76: 50 33     -         .text description
2d78: 3a        -         .text ":"
2d79: 00        -         .byte NULL
2d7a: a6 17     -         ldx rl(register.getValue())
2d7c: a4 18     -         ldy rh(register.getValue())
2d7e: e0 06     -         cpx #<value
2d80: d0 25     -         bne !failed+
2d82: c0 00     -         cpy #>value
2d84: d0 21     -         bne !failed+
2d86: ee 44 52  -         inc TEST_PASS_COUNT
2d89: ad 86 02  -         lda foreground_color
2d8c: 48        -         pha
2d8d: a9 05     -         lda #color
2d8f: 8d 86 02  -         sta foreground_color
2d92: a2 00     -         ldx #$00
2d94: bd 3f 52  -         lda msg,x
2d97: f0 07     -         beq !done+
2d99: 20 d2 ff  -         jsr kernal_chrout
2d9c: e8        -         inx
2d9d: 4c 94 2d  -         jmp !loop-
2da0: 68        -         pla
2da1: 8d 86 02  -         sta foreground_color
2da4: 4c c2 2d  -         jmp !done+
2da7: ad 86 02  -         lda foreground_color
2daa: 48        -         pha
2dab: a9 02     -         lda #color
2dad: 8d 86 02  -         sta foreground_color
2db0: a2 00     -         ldx #$00
2db2: bd 41 52  -         lda msg,x
2db5: f0 07     -         beq !done+
2db7: 20 d2 ff  -         jsr kernal_chrout
2dba: e8        -         inx
2dbb: 4c b2 2d  -         jmp !loop-
2dbe: 68        -         pla
2dbf: 8d 86 02  -         sta foreground_color
2dc2: 60        -         rts
2dc3: ee 43 52  -         inc TEST_COUNT
2dc6: ad 86 02  -         lda foreground_color
2dc9: 48        -         pha
2dca: a9 0e     -         lda #color
2dcc: 8d 86 02  -         sta foreground_color
2dcf: a2 00     -         ldx #$00
2dd1: bd e4 2d  -         lda msg,x
2dd4: f0 07     -         beq !done+
2dd6: 20 d2 ff  -         jsr kernal_chrout
2dd9: e8        -         inx
2dda: 4c d1 2d  -         jmp !loop-
2ddd: 68        -         pla
2dde: 8d 86 02  -         sta foreground_color
2de1: 4c e9 2d  -         jmp !done+
2de4: 20        - memory: .byte spacebar
2de5: 50 32     -         .text description
2de7: 3a        -         .text ":"
2de8: 00        -         .byte NULL
2de9: a6 17     -         ldx rl(register.getValue())
2deb: a4 18     -         ldy rh(register.getValue())
2ded: e0 05     -         cpx #<value
2def: d0 25     -         bne !failed+
2df1: c0 00     -         cpy #>value
2df3: d0 21     -         bne !failed+
2df5: ee 44 52  -         inc TEST_PASS_COUNT
2df8: ad 86 02  -         lda foreground_color
2dfb: 48        -         pha
2dfc: a9 05     -         lda #color
2dfe: 8d 86 02  -         sta foreground_color
2e01: a2 00     -         ldx #$00
2e03: bd 3f 52  -         lda msg,x
2e06: f0 07     -         beq !done+
2e08: 20 d2 ff  -         jsr kernal_chrout
2e0b: e8        -         inx
2e0c: 4c 03 2e  -         jmp !loop-
2e0f: 68        -         pla
2e10: 8d 86 02  -         sta foreground_color
2e13: 4c 31 2e  -         jmp !done+
2e16: ad 86 02  -         lda foreground_color
2e19: 48        -         pha
2e1a: a9 02     -         lda #color
2e1c: 8d 86 02  -         sta foreground_color
2e1f: a2 00     -         ldx #$00
2e21: bd 41 52  -         lda msg,x
2e24: f0 07     -         beq !done+
2e26: 20 d2 ff  -         jsr kernal_chrout
2e29: e8        -         inx
2e2a: 4c 21 2e  -         jmp !loop-
2e2d: 68        -         pla
2e2e: 8d 86 02  -         sta foreground_color
2e31: 60        -         rts
2e32: ee 43 52  -         inc TEST_COUNT
2e35: ad 86 02  -         lda foreground_color
2e38: 48        -         pha
2e39: a9 0e     -         lda #color
2e3b: 8d 86 02  -         sta foreground_color
2e3e: a2 00     -         ldx #$00
2e40: bd 53 2e  -         lda msg,x
2e43: f0 07     -         beq !done+
2e45: 20 d2 ff  -         jsr kernal_chrout
2e48: e8        -         inx
2e49: 4c 40 2e  -         jmp !loop-
2e4c: 68        -         pla
2e4d: 8d 86 02  -         sta foreground_color
2e50: 4c 58 2e  -         jmp !done+
2e53: 20        - memory: .byte spacebar
2e54: 50 31     -         .text description
2e56: 3a        -         .text ":"
2e57: 00        -         .byte NULL
2e58: a6 17     -         ldx rl(register.getValue())
2e5a: a4 18     -         ldy rh(register.getValue())
2e5c: e0 04     -         cpx #<value
2e5e: d0 25     -         bne !failed+
2e60: c0 00     -         cpy #>value
2e62: d0 21     -         bne !failed+
2e64: ee 44 52  -         inc TEST_PASS_COUNT
2e67: ad 86 02  -         lda foreground_color
2e6a: 48        -         pha
2e6b: a9 05     -         lda #color
2e6d: 8d 86 02  -         sta foreground_color
2e70: a2 00     -         ldx #$00
2e72: bd 3f 52  -         lda msg,x
2e75: f0 07     -         beq !done+
2e77: 20 d2 ff  -         jsr kernal_chrout
2e7a: e8        -         inx
2e7b: 4c 72 2e  -         jmp !loop-
2e7e: 68        -         pla
2e7f: 8d 86 02  -         sta foreground_color
2e82: 4c a0 2e  -         jmp !done+
2e85: ad 86 02  -         lda foreground_color
2e88: 48        -         pha
2e89: a9 02     -         lda #color
2e8b: 8d 86 02  -         sta foreground_color
2e8e: a2 00     -         ldx #$00
2e90: bd 41 52  -         lda msg,x
2e93: f0 07     -         beq !done+
2e95: 20 d2 ff  -         jsr kernal_chrout
2e98: e8        -         inx
2e99: 4c 90 2e  -         jmp !loop-
2e9c: 68        -         pla
2e9d: 8d 86 02  -         sta foreground_color
2ea0: 60        -         rts
2ea1: ee 45 52  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
2ea4: ad 86 02  -         lda foreground_color
2ea7: 48        -         pha
2ea8: a9 0f     -         lda #color
2eaa: 8d 86 02  -         sta foreground_color
2ead: a2 00     -         ldx #$00
2eaf: bd c2 2e  -         lda msg,x
2eb2: f0 07     -         beq !done+
2eb4: 20 d2 ff  -         jsr kernal_chrout
2eb7: e8        -         inx
2eb8: 4c af 2e  -         jmp !loop-
2ebb: 68        -         pla
2ebc: 8d 86 02  -         sta foreground_color
2ebf: 4c d5 2e  -         jmp !done+
2ec2: 20 20     - memory: .fill spacing, spacebar
2ec4: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
2ed1: 2e 2e 2e  -         .text "..."
2ed4: 00        -         .byte NULL
2ed5: 20 08 10  -         jsr SW16
2ed8: 14        -         .byte opcode(op, register)
2ed9: 5d 52     -         .word address.getValue()
2edb: 15        -         .byte opcode(op, register)
2edc: 5f 52     -         .word address.getValue()
2ede: 84        -         .byte opcode($80, register) }
2edf: 95        -         .byte opcode($90, register) }
2ee0: 84        -         .byte opcode($80, register) }
2ee1: 95        -         .byte opcode($90, register) }
2ee2: 00        -         .byte $00 }
2ee3: ee 43 52  -         inc TEST_COUNT
2ee6: ad 86 02  -         lda foreground_color
2ee9: 48        -         pha
2eea: a9 0e     -         lda #color
2eec: 8d 86 02  -         sta foreground_color
2eef: a2 00     -         ldx #$00
2ef1: bd 04 2f  -         lda msg,x
2ef4: f0 07     -         beq !done+
2ef6: 20 d2 ff  -         jsr kernal_chrout
2ef9: e8        -         inx
2efa: 4c f1 2e  -         jmp !loop-
2efd: 68        -         pla
2efe: 8d 86 02  -         sta foreground_color
2f01: 4c 0a 2f  -         jmp !done+
2f04: 20        - memory: .byte spacebar
2f05: 4d 45 4d  -         .text description
2f08: 3a        -         .text ":"
2f09: 00        -         .byte NULL
2f0a: a2 ff     -         ldx #$ff
2f0c: e8        -         inx
2f0d: e0 02     -         cpx #size
2f0f: f0 0b     -         beq !success+
2f11: bd 5b 52  -         lda source,x
2f14: dd 5b 52  -         cmp dest,x
2f17: f0 f3     -         beq !loop-
2f19: 4c 3d 2f  -         jmp !failed+
2f1c: ee 44 52  -         inc TEST_PASS_COUNT
2f1f: ad 86 02  -         lda foreground_color
2f22: 48        -         pha
2f23: a9 05     -         lda #color
2f25: 8d 86 02  -         sta foreground_color
2f28: a2 00     -         ldx #$00
2f2a: bd 3f 52  -         lda msg,x
2f2d: f0 07     -         beq !done+
2f2f: 20 d2 ff  -         jsr kernal_chrout
2f32: e8        -         inx
2f33: 4c 2a 2f  -         jmp !loop-
2f36: 68        -         pla
2f37: 8d 86 02  -         sta foreground_color
2f3a: 4c 58 2f  -         jmp !done+
2f3d: ad 86 02  -         lda foreground_color
2f40: 48        -         pha
2f41: a9 02     -         lda #color
2f43: 8d 86 02  -         sta foreground_color
2f46: a2 00     -         ldx #$00
2f48: bd 41 52  -         lda msg,x
2f4b: f0 07     -         beq !done+
2f4d: 20 d2 ff  -         jsr kernal_chrout
2f50: e8        -         inx
2f51: 4c 48 2f  -         jmp !loop-
2f54: 68        -         pla
2f55: 8d 86 02  -         sta foreground_color
2f58: a2 00     -         ldx #$00
2f5a: bd 69 2f  -         lda msg,x
2f5d: f0 07     -         beq !done+
2f5f: 20 d2 ff  -         jsr kernal_chrout
2f62: e8        -         inx
2f63: 4c 5a 2f  -         jmp !loop-
2f66: 4c 6b 2f  -         jmp !done+
2f69: 0d 00     - memory: .byte RETURN, NULL
2f6b: ae 45 52  -         ldx TEST_NAME_COUNT
2f6e: e0 15     -         cpx #TESTS_PER_PAGE
2f70: d0 5d     -         bne !exit+
2f72: ad 86 02  -         lda foreground_color
2f75: 48        -         pha
2f76: a9 01     -         lda #color
2f78: 8d 86 02  -         sta foreground_color
2f7b: a2 00     -         ldx #$00
2f7d: bd 90 2f  -         lda msg,x
2f80: f0 07     -         beq !done+
2f82: 20 d2 ff  -         jsr kernal_chrout
2f85: e8        -         inx
2f86: 4c 7d 2f  -         jmp !loop-
2f89: 68        -         pla
2f8a: 8d 86 02  -         sta foreground_color
2f8d: 4c af 2f  -         jmp !no_key+
2f90: 0d        - memory: .byte RETURN
2f91: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2fa1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2fad: 0d 00     -         .byte RETURN, NULL
2faf: 20 9f ff  -         jsr scnkey  // scan keyboard
2fb2: 20 e4 ff  -         jsr getin	// put result into A
2fb5: f0 f8     -         beq !no_key-
2fb7: a2 00     -         ldx #$00
2fb9: bd c8 2f  -         lda msg,x
2fbc: f0 07     -         beq !done+
2fbe: 20 d2 ff  -         jsr kernal_chrout
2fc1: e8        -         inx
2fc2: 4c b9 2f  -         jmp !loop-
2fc5: 4c ca 2f  -         jmp !done+
2fc8: 0d 00     - newline:.byte RETURN, NULL
2fca: a2 00     -         ldx #$00
2fcc: 8e 45 52  -         stx TEST_NAME_COUNT
2fcf: 60        -         rts
2fd0: ee 45 52  - ADD_TEST:inc TEST_NAME_COUNT
2fd3: ad 86 02  -         lda foreground_color
2fd6: 48        -         pha
2fd7: a9 0f     -         lda #color
2fd9: 8d 86 02  -         sta foreground_color
2fdc: a2 00     -         ldx #$00
2fde: bd f1 2f  -         lda msg,x
2fe1: f0 07     -         beq !done+
2fe3: 20 d2 ff  -         jsr kernal_chrout
2fe6: e8        -         inx
2fe7: 4c de 2f  -         jmp !loop-
2fea: 68        -         pla
2feb: 8d 86 02  -         sta foreground_color
2fee: 4c ff 2f  -         jmp !done+
2ff1: 20 20     - memory: .fill spacing, spacebar
2ff3: 41 44 44 49 54 49 4f 4e                          -         .text name
2ffb: 2e 2e 2e  -         .text "..."
2ffe: 00        -         .byte NULL
2fff: 20 08 10  -         jsr SW16
3002: 10        -         .byte opcode(op, register)
3003: 34 76     -         .word address.getValue()
3005: 11        -         .byte opcode(op, register)
3006: 27 42     -         .word address.getValue()
3008: a1        -         .byte opcode($a0, register) }
3009: 0d        -         .byte $0d
300a: 30        -         .byte >(address.getValue()-1)
300b: f3        -         .byte <(address.getValue()-1)
300c: a0        -         .byte opcode($a0, register) }
300d: 00        -         .byte $00 }
300e: ee 43 52  -         inc TEST_COUNT
3011: ad 86 02  -         lda foreground_color
3014: 48        -         pha
3015: a9 0e     -         lda #color
3017: 8d 86 02  -         sta foreground_color
301a: a2 00     -         ldx #$00
301c: bd 2f 30  -         lda msg,x
301f: f0 07     -         beq !done+
3021: 20 d2 ff  -         jsr kernal_chrout
3024: e8        -         inx
3025: 4c 1c 30  -         jmp !loop-
3028: 68        -         pla
3029: 8d 86 02  -         sta foreground_color
302c: 4c 34 30  -         jmp !done+
302f: 20        - memory: .byte spacebar
3030: 58 32     -         .text description
3032: 3a        -         .text ":"
3033: 00        -         .byte NULL
3034: a6 17     -         ldx rl(register.getValue())
3036: a4 18     -         ldy rh(register.getValue())
3038: e0 b6     -         cpx #<value
303a: d0 25     -         bne !failed+
303c: c0 70     -         cpy #>value
303e: d0 21     -         bne !failed+
3040: ee 44 52  -         inc TEST_PASS_COUNT
3043: ad 86 02  -         lda foreground_color
3046: 48        -         pha
3047: a9 05     -         lda #color
3049: 8d 86 02  -         sta foreground_color
304c: a2 00     -         ldx #$00
304e: bd 3f 52  -         lda msg,x
3051: f0 07     -         beq !done+
3053: 20 d2 ff  -         jsr kernal_chrout
3056: e8        -         inx
3057: 4c 4e 30  -         jmp !loop-
305a: 68        -         pla
305b: 8d 86 02  -         sta foreground_color
305e: 4c 7c 30  -         jmp !done+
3061: ad 86 02  -         lda foreground_color
3064: 48        -         pha
3065: a9 02     -         lda #color
3067: 8d 86 02  -         sta foreground_color
306a: a2 00     -         ldx #$00
306c: bd 41 52  -         lda msg,x
306f: f0 07     -         beq !done+
3071: 20 d2 ff  -         jsr kernal_chrout
3074: e8        -         inx
3075: 4c 6c 30  -         jmp !loop-
3078: 68        -         pla
3079: 8d 86 02  -         sta foreground_color
307c: a2 00     -         ldx #$00
307e: bd 8d 30  -         lda msg,x
3081: f0 07     -         beq !done+
3083: 20 d2 ff  -         jsr kernal_chrout
3086: e8        -         inx
3087: 4c 7e 30  -         jmp !loop-
308a: 4c 8f 30  -         jmp !done+
308d: 0d 00     - memory: .byte RETURN, NULL
308f: ae 45 52  -         ldx TEST_NAME_COUNT
3092: e0 15     -         cpx #TESTS_PER_PAGE
3094: d0 5d     -         bne !exit+
3096: ad 86 02  -         lda foreground_color
3099: 48        -         pha
309a: a9 01     -         lda #color
309c: 8d 86 02  -         sta foreground_color
309f: a2 00     -         ldx #$00
30a1: bd b4 30  -         lda msg,x
30a4: f0 07     -         beq !done+
30a6: 20 d2 ff  -         jsr kernal_chrout
30a9: e8        -         inx
30aa: 4c a1 30  -         jmp !loop-
30ad: 68        -         pla
30ae: 8d 86 02  -         sta foreground_color
30b1: 4c d3 30  -         jmp !no_key+
30b4: 0d        - memory: .byte RETURN
30b5: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
30c5: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
30d1: 0d 00     -         .byte RETURN, NULL
30d3: 20 9f ff  -         jsr scnkey  // scan keyboard
30d6: 20 e4 ff  -         jsr getin	// put result into A
30d9: f0 f8     -         beq !no_key-
30db: a2 00     -         ldx #$00
30dd: bd ec 30  -         lda msg,x
30e0: f0 07     -         beq !done+
30e2: 20 d2 ff  -         jsr kernal_chrout
30e5: e8        -         inx
30e6: 4c dd 30  -         jmp !loop-
30e9: 4c ee 30  -         jmp !done+
30ec: 0d 00     - newline:.byte RETURN, NULL
30ee: a2 00     -         ldx #$00
30f0: 8e 45 52  -         stx TEST_NAME_COUNT
30f3: 60        -         rts
30f4: ee 43 52  -         inc TEST_COUNT
30f7: ad 86 02  -         lda foreground_color
30fa: 48        -         pha
30fb: a9 0e     -         lda #color
30fd: 8d 86 02  -         sta foreground_color
3100: a2 00     -         ldx #$00
3102: bd 15 31  -         lda msg,x
3105: f0 07     -         beq !done+
3107: 20 d2 ff  -         jsr kernal_chrout
310a: e8        -         inx
310b: 4c 02 31  -         jmp !loop-
310e: 68        -         pla
310f: 8d 86 02  -         sta foreground_color
3112: 4c 1b 31  -         jmp !done+
3115: 20        - memory: .byte spacebar
3116: 41 44 44  -         .text description
3119: 3a        -         .text ":"
311a: 00        -         .byte NULL
311b: a6 17     -         ldx rl(register.getValue())
311d: a4 18     -         ldy rh(register.getValue())
311f: e0 5b     -         cpx #<value
3121: d0 25     -         bne !failed+
3123: c0 b8     -         cpy #>value
3125: d0 21     -         bne !failed+
3127: ee 44 52  -         inc TEST_PASS_COUNT
312a: ad 86 02  -         lda foreground_color
312d: 48        -         pha
312e: a9 05     -         lda #color
3130: 8d 86 02  -         sta foreground_color
3133: a2 00     -         ldx #$00
3135: bd 3f 52  -         lda msg,x
3138: f0 07     -         beq !done+
313a: 20 d2 ff  -         jsr kernal_chrout
313d: e8        -         inx
313e: 4c 35 31  -         jmp !loop-
3141: 68        -         pla
3142: 8d 86 02  -         sta foreground_color
3145: 4c 63 31  -         jmp !done+
3148: ad 86 02  -         lda foreground_color
314b: 48        -         pha
314c: a9 02     -         lda #color
314e: 8d 86 02  -         sta foreground_color
3151: a2 00     -         ldx #$00
3153: bd 41 52  -         lda msg,x
3156: f0 07     -         beq !done+
3158: 20 d2 ff  -         jsr kernal_chrout
315b: e8        -         inx
315c: 4c 53 31  -         jmp !loop-
315f: 68        -         pla
3160: 8d 86 02  -         sta foreground_color
3163: 60        -         rts
3164: ee 45 52  - SUBTRACT_TEST:inc TEST_NAME_COUNT
3167: ad 86 02  -         lda foreground_color
316a: 48        -         pha
316b: a9 0f     -         lda #color
316d: 8d 86 02  -         sta foreground_color
3170: a2 00     -         ldx #$00
3172: bd 85 31  -         lda msg,x
3175: f0 07     -         beq !done+
3177: 20 d2 ff  -         jsr kernal_chrout
317a: e8        -         inx
317b: 4c 72 31  -         jmp !loop-
317e: 68        -         pla
317f: 8d 86 02  -         sta foreground_color
3182: 4c 96 31  -         jmp !done+
3185: 20 20     - memory: .fill spacing, spacebar
3187: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
3192: 2e 2e 2e  -         .text "..."
3195: 00        -         .byte NULL
3196: 20 08 10  -         jsr SW16
3199: 10        -         .byte opcode(op, register)
319a: 34 76     -         .word address.getValue()
319c: 11        -         .byte opcode(op, register)
319d: 27 42     -         .word address.getValue()
319f: b1        -         .byte opcode($b0, register) }
31a0: 0d        -         .byte $0d
31a1: 32        -         .byte >(address.getValue()-1)
31a2: 89        -         .byte <(address.getValue()-1)
31a3: b0        -         .byte opcode($b0, register) }
31a4: 00        -         .byte $00 }
31a5: ee 43 52  -         inc TEST_COUNT
31a8: ad 86 02  -         lda foreground_color
31ab: 48        -         pha
31ac: a9 0e     -         lda #color
31ae: 8d 86 02  -         sta foreground_color
31b1: a2 00     -         ldx #$00
31b3: bd c6 31  -         lda msg,x
31b6: f0 07     -         beq !done+
31b8: 20 d2 ff  -         jsr kernal_chrout
31bb: e8        -         inx
31bc: 4c b3 31  -         jmp !loop-
31bf: 68        -         pla
31c0: 8d 86 02  -         sta foreground_color
31c3: 4c ca 31  -         jmp !done+
31c6: 20        - memory: .byte spacebar
31c7: 30        -         .text description
31c8: 3a        -         .text ":"
31c9: 00        -         .byte NULL
31ca: a6 17     -         ldx rl(register.getValue())
31cc: a4 18     -         ldy rh(register.getValue())
31ce: e0 00     -         cpx #<value
31d0: d0 25     -         bne !failed+
31d2: c0 00     -         cpy #>value
31d4: d0 21     -         bne !failed+
31d6: ee 44 52  -         inc TEST_PASS_COUNT
31d9: ad 86 02  -         lda foreground_color
31dc: 48        -         pha
31dd: a9 05     -         lda #color
31df: 8d 86 02  -         sta foreground_color
31e2: a2 00     -         ldx #$00
31e4: bd 3f 52  -         lda msg,x
31e7: f0 07     -         beq !done+
31e9: 20 d2 ff  -         jsr kernal_chrout
31ec: e8        -         inx
31ed: 4c e4 31  -         jmp !loop-
31f0: 68        -         pla
31f1: 8d 86 02  -         sta foreground_color
31f4: 4c 12 32  -         jmp !done+
31f7: ad 86 02  -         lda foreground_color
31fa: 48        -         pha
31fb: a9 02     -         lda #color
31fd: 8d 86 02  -         sta foreground_color
3200: a2 00     -         ldx #$00
3202: bd 41 52  -         lda msg,x
3205: f0 07     -         beq !done+
3207: 20 d2 ff  -         jsr kernal_chrout
320a: e8        -         inx
320b: 4c 02 32  -         jmp !loop-
320e: 68        -         pla
320f: 8d 86 02  -         sta foreground_color
3212: a2 00     -         ldx #$00
3214: bd 23 32  -         lda msg,x
3217: f0 07     -         beq !done+
3219: 20 d2 ff  -         jsr kernal_chrout
321c: e8        -         inx
321d: 4c 14 32  -         jmp !loop-
3220: 4c 25 32  -         jmp !done+
3223: 0d 00     - memory: .byte RETURN, NULL
3225: ae 45 52  -         ldx TEST_NAME_COUNT
3228: e0 15     -         cpx #TESTS_PER_PAGE
322a: d0 5d     -         bne !exit+
322c: ad 86 02  -         lda foreground_color
322f: 48        -         pha
3230: a9 01     -         lda #color
3232: 8d 86 02  -         sta foreground_color
3235: a2 00     -         ldx #$00
3237: bd 4a 32  -         lda msg,x
323a: f0 07     -         beq !done+
323c: 20 d2 ff  -         jsr kernal_chrout
323f: e8        -         inx
3240: 4c 37 32  -         jmp !loop-
3243: 68        -         pla
3244: 8d 86 02  -         sta foreground_color
3247: 4c 69 32  -         jmp !no_key+
324a: 0d        - memory: .byte RETURN
324b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
325b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3267: 0d 00     -         .byte RETURN, NULL
3269: 20 9f ff  -         jsr scnkey  // scan keyboard
326c: 20 e4 ff  -         jsr getin	// put result into A
326f: f0 f8     -         beq !no_key-
3271: a2 00     -         ldx #$00
3273: bd 82 32  -         lda msg,x
3276: f0 07     -         beq !done+
3278: 20 d2 ff  -         jsr kernal_chrout
327b: e8        -         inx
327c: 4c 73 32  -         jmp !loop-
327f: 4c 84 32  -         jmp !done+
3282: 0d 00     - newline:.byte RETURN, NULL
3284: a2 00     -         ldx #$00
3286: 8e 45 52  -         stx TEST_NAME_COUNT
3289: 60        -         rts
328a: ee 43 52  -         inc TEST_COUNT
328d: ad 86 02  -         lda foreground_color
3290: 48        -         pha
3291: a9 0e     -         lda #color
3293: 8d 86 02  -         sta foreground_color
3296: a2 00     -         ldx #$00
3298: bd ab 32  -         lda msg,x
329b: f0 07     -         beq !done+
329d: 20 d2 ff  -         jsr kernal_chrout
32a0: e8        -         inx
32a1: 4c 98 32  -         jmp !loop-
32a4: 68        -         pla
32a5: 8d 86 02  -         sta foreground_color
32a8: 4c b1 32  -         jmp !done+
32ab: 20        - memory: .byte spacebar
32ac: 53 55 42  -         .text description
32af: 3a        -         .text ":"
32b0: 00        -         .byte NULL
32b1: a6 17     -         ldx rl(register.getValue())
32b3: a4 18     -         ldy rh(register.getValue())
32b5: e0 0d     -         cpx #<value
32b7: d0 25     -         bne !failed+
32b9: c0 34     -         cpy #>value
32bb: d0 21     -         bne !failed+
32bd: ee 44 52  -         inc TEST_PASS_COUNT
32c0: ad 86 02  -         lda foreground_color
32c3: 48        -         pha
32c4: a9 05     -         lda #color
32c6: 8d 86 02  -         sta foreground_color
32c9: a2 00     -         ldx #$00
32cb: bd 3f 52  -         lda msg,x
32ce: f0 07     -         beq !done+
32d0: 20 d2 ff  -         jsr kernal_chrout
32d3: e8        -         inx
32d4: 4c cb 32  -         jmp !loop-
32d7: 68        -         pla
32d8: 8d 86 02  -         sta foreground_color
32db: 4c f9 32  -         jmp !done+
32de: ad 86 02  -         lda foreground_color
32e1: 48        -         pha
32e2: a9 02     -         lda #color
32e4: 8d 86 02  -         sta foreground_color
32e7: a2 00     -         ldx #$00
32e9: bd 41 52  -         lda msg,x
32ec: f0 07     -         beq !done+
32ee: 20 d2 ff  -         jsr kernal_chrout
32f1: e8        -         inx
32f2: 4c e9 32  -         jmp !loop-
32f5: 68        -         pla
32f6: 8d 86 02  -         sta foreground_color
32f9: 60        -         rts	
32fa: ee 45 52  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
32fd: ad 86 02  -         lda foreground_color
3300: 48        -         pha
3301: a9 0f     -         lda #color
3303: 8d 86 02  -         sta foreground_color
3306: a2 00     -         ldx #$00
3308: bd 1b 33  -         lda msg,x
330b: f0 07     -         beq !done+
330d: 20 d2 ff  -         jsr kernal_chrout
3310: e8        -         inx
3311: 4c 08 33  -         jmp !loop-
3314: 68        -         pla
3315: 8d 86 02  -         sta foreground_color
3318: 4c 2e 33  -         jmp !done+
331b: 20 20     - memory: .fill spacing, spacebar
331d: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
332a: 2e 2e 2e  -         .text "..."
332d: 00        -         .byte NULL
332e: 20 08 10  -         jsr SW16
3331: 15        -         .byte opcode(op, register)
3332: 81 52     -         .word address.getValue()
3334: 10        -         .byte opcode(op, register)
3335: 5b 52     -         .word address.getValue()
3337: 75        -         .byte opcode($70, register) }
3338: 0d        -         .byte $0d
3339: 34        -         .byte >(address.getValue()-1)
333a: 2d        -         .byte <(address.getValue()-1)
333b: 10        -         .byte opcode(op, register)
333c: 5d 52     -         .word address.getValue()
333e: 75        -         .byte opcode($70, register) }
333f: 0d        -         .byte $0d
3340: 34        -         .byte >(address.getValue()-1)
3341: 9d        -         .byte <(address.getValue()-1)
3342: c5        -         .byte opcode($c0, register) }
3343: 0d        -         .byte $0d
3344: 35        -         .byte >(address.getValue()-1)
3345: 0d        -         .byte <(address.getValue()-1)
3346: c5        -         .byte opcode($c0, register) }
3347: 00        -         .byte $00 }
3348: ee 43 52  -         inc TEST_COUNT
334b: ad 86 02  -         lda foreground_color
334e: 48        -         pha
334f: a9 0e     -         lda #color
3351: 8d 86 02  -         sta foreground_color
3354: a2 00     -         ldx #$00
3356: bd 69 33  -         lda msg,x
3359: f0 07     -         beq !done+
335b: 20 d2 ff  -         jsr kernal_chrout
335e: e8        -         inx
335f: 4c 56 33  -         jmp !loop-
3362: 68        -         pla
3363: 8d 86 02  -         sta foreground_color
3366: 4c 6e 33  -         jmp !done+
3369: 20        - memory: .byte spacebar
336a: 50 31     -         .text description
336c: 3a        -         .text ":"
336d: 00        -         .byte NULL
336e: a6 17     -         ldx addr
3370: e0 5b     -         cpx #<value
3372: d0 27     -         bne !failed+
3374: a6 18     -         ldx addr+1
3376: e0 52     -         cpx #>value
3378: d0 21     -         bne !failed+
337a: ee 44 52  -         inc TEST_PASS_COUNT
337d: ad 86 02  -         lda foreground_color
3380: 48        -         pha
3381: a9 05     -         lda #color
3383: 8d 86 02  -         sta foreground_color
3386: a2 00     -         ldx #$00
3388: bd 3f 52  -         lda msg,x
338b: f0 07     -         beq !done+
338d: 20 d2 ff  -         jsr kernal_chrout
3390: e8        -         inx
3391: 4c 88 33  -         jmp !loop-
3394: 68        -         pla
3395: 8d 86 02  -         sta foreground_color
3398: 4c b6 33  -         jmp !done+
339b: ad 86 02  -         lda foreground_color
339e: 48        -         pha
339f: a9 02     -         lda #color
33a1: 8d 86 02  -         sta foreground_color
33a4: a2 00     -         ldx #$00
33a6: bd 41 52  -         lda msg,x
33a9: f0 07     -         beq !done+
33ab: 20 d2 ff  -         jsr kernal_chrout
33ae: e8        -         inx
33af: 4c a6 33  -         jmp !loop-
33b2: 68        -         pla
33b3: 8d 86 02  -         sta foreground_color
33b6: a2 00     -         ldx #$00
33b8: bd c7 33  -         lda msg,x
33bb: f0 07     -         beq !done+
33bd: 20 d2 ff  -         jsr kernal_chrout
33c0: e8        -         inx
33c1: 4c b8 33  -         jmp !loop-
33c4: 4c c9 33  -         jmp !done+
33c7: 0d 00     - memory: .byte RETURN, NULL
33c9: ae 45 52  -         ldx TEST_NAME_COUNT
33cc: e0 15     -         cpx #TESTS_PER_PAGE
33ce: d0 5d     -         bne !exit+
33d0: ad 86 02  -         lda foreground_color
33d3: 48        -         pha
33d4: a9 01     -         lda #color
33d6: 8d 86 02  -         sta foreground_color
33d9: a2 00     -         ldx #$00
33db: bd ee 33  -         lda msg,x
33de: f0 07     -         beq !done+
33e0: 20 d2 ff  -         jsr kernal_chrout
33e3: e8        -         inx
33e4: 4c db 33  -         jmp !loop-
33e7: 68        -         pla
33e8: 8d 86 02  -         sta foreground_color
33eb: 4c 0d 34  -         jmp !no_key+
33ee: 0d        - memory: .byte RETURN
33ef: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
33ff: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
340b: 0d 00     -         .byte RETURN, NULL
340d: 20 9f ff  -         jsr scnkey  // scan keyboard
3410: 20 e4 ff  -         jsr getin	// put result into A
3413: f0 f8     -         beq !no_key-
3415: a2 00     -         ldx #$00
3417: bd 26 34  -         lda msg,x
341a: f0 07     -         beq !done+
341c: 20 d2 ff  -         jsr kernal_chrout
341f: e8        -         inx
3420: 4c 17 34  -         jmp !loop-
3423: 4c 28 34  -         jmp !done+
3426: 0d 00     - newline:.byte RETURN, NULL
3428: a2 00     -         ldx #$00
342a: 8e 45 52  -         stx TEST_NAME_COUNT
342d: 60        -         rts
342e: ee 43 52  -         inc TEST_COUNT
3431: ad 86 02  -         lda foreground_color
3434: 48        -         pha
3435: a9 0e     -         lda #color
3437: 8d 86 02  -         sta foreground_color
343a: a2 00     -         ldx #$00
343c: bd 4f 34  -         lda msg,x
343f: f0 07     -         beq !done+
3441: 20 d2 ff  -         jsr kernal_chrout
3444: e8        -         inx
3445: 4c 3c 34  -         jmp !loop-
3448: 68        -         pla
3449: 8d 86 02  -         sta foreground_color
344c: 4c 53 34  -         jmp !done+
344f: 20        - memory: .byte spacebar
3450: 31        -         .text description
3451: 3a        -         .text ":"
3452: 00        -         .byte NULL
3453: ae 81 52  -         ldx addr
3456: e0 5b     -         cpx #<value
3458: d0 28     -         bne !failed+
345a: ae 82 52  -         ldx addr+1
345d: e0 52     -         cpx #>value
345f: d0 21     -         bne !failed+
3461: ee 44 52  -         inc TEST_PASS_COUNT
3464: ad 86 02  -         lda foreground_color
3467: 48        -         pha
3468: a9 05     -         lda #color
346a: 8d 86 02  -         sta foreground_color
346d: a2 00     -         ldx #$00
346f: bd 3f 52  -         lda msg,x
3472: f0 07     -         beq !done+
3474: 20 d2 ff  -         jsr kernal_chrout
3477: e8        -         inx
3478: 4c 6f 34  -         jmp !loop-
347b: 68        -         pla
347c: 8d 86 02  -         sta foreground_color
347f: 4c 9d 34  -         jmp !done+
3482: ad 86 02  -         lda foreground_color
3485: 48        -         pha
3486: a9 02     -         lda #color
3488: 8d 86 02  -         sta foreground_color
348b: a2 00     -         ldx #$00
348d: bd 41 52  -         lda msg,x
3490: f0 07     -         beq !done+
3492: 20 d2 ff  -         jsr kernal_chrout
3495: e8        -         inx
3496: 4c 8d 34  -         jmp !loop-
3499: 68        -         pla
349a: 8d 86 02  -         sta foreground_color
349d: 60        -         rts
349e: ee 43 52  -         inc TEST_COUNT
34a1: ad 86 02  -         lda foreground_color
34a4: 48        -         pha
34a5: a9 0e     -         lda #color
34a7: 8d 86 02  -         sta foreground_color
34aa: a2 00     -         ldx #$00
34ac: bd bf 34  -         lda msg,x
34af: f0 07     -         beq !done+
34b1: 20 d2 ff  -         jsr kernal_chrout
34b4: e8        -         inx
34b5: 4c ac 34  -         jmp !loop-
34b8: 68        -         pla
34b9: 8d 86 02  -         sta foreground_color
34bc: 4c c3 34  -         jmp !done+
34bf: 20        - memory: .byte spacebar
34c0: 32        -         .text description
34c1: 3a        -         .text ":"
34c2: 00        -         .byte NULL
34c3: ae 83 52  -         ldx addr
34c6: e0 5d     -         cpx #<value
34c8: d0 28     -         bne !failed+
34ca: ae 84 52  -         ldx addr+1
34cd: e0 52     -         cpx #>value
34cf: d0 21     -         bne !failed+
34d1: ee 44 52  -         inc TEST_PASS_COUNT
34d4: ad 86 02  -         lda foreground_color
34d7: 48        -         pha
34d8: a9 05     -         lda #color
34da: 8d 86 02  -         sta foreground_color
34dd: a2 00     -         ldx #$00
34df: bd 3f 52  -         lda msg,x
34e2: f0 07     -         beq !done+
34e4: 20 d2 ff  -         jsr kernal_chrout
34e7: e8        -         inx
34e8: 4c df 34  -         jmp !loop-
34eb: 68        -         pla
34ec: 8d 86 02  -         sta foreground_color
34ef: 4c 0d 35  -         jmp !done+
34f2: ad 86 02  -         lda foreground_color
34f5: 48        -         pha
34f6: a9 02     -         lda #color
34f8: 8d 86 02  -         sta foreground_color
34fb: a2 00     -         ldx #$00
34fd: bd 41 52  -         lda msg,x
3500: f0 07     -         beq !done+
3502: 20 d2 ff  -         jsr kernal_chrout
3505: e8        -         inx
3506: 4c fd 34  -         jmp !loop-
3509: 68        -         pla
350a: 8d 86 02  -         sta foreground_color
350d: 60        -         rts
350e: ee 43 52  -         inc TEST_COUNT
3511: ad 86 02  -         lda foreground_color
3514: 48        -         pha
3515: a9 0e     -         lda #color
3517: 8d 86 02  -         sta foreground_color
351a: a2 00     -         ldx #$00
351c: bd 2f 35  -         lda msg,x
351f: f0 07     -         beq !done+
3521: 20 d2 ff  -         jsr kernal_chrout
3524: e8        -         inx
3525: 4c 1c 35  -         jmp !loop-
3528: 68        -         pla
3529: 8d 86 02  -         sta foreground_color
352c: 4c 34 35  -         jmp !done+
352f: 20        - memory: .byte spacebar
3530: 50 32     -         .text description
3532: 3a        -         .text ":"
3533: 00        -         .byte NULL
3534: a6 17     -         ldx addr
3536: e0 5d     -         cpx #<value
3538: d0 27     -         bne !failed+
353a: a6 18     -         ldx addr+1
353c: e0 52     -         cpx #>value
353e: d0 21     -         bne !failed+
3540: ee 44 52  -         inc TEST_PASS_COUNT
3543: ad 86 02  -         lda foreground_color
3546: 48        -         pha
3547: a9 05     -         lda #color
3549: 8d 86 02  -         sta foreground_color
354c: a2 00     -         ldx #$00
354e: bd 3f 52  -         lda msg,x
3551: f0 07     -         beq !done+
3553: 20 d2 ff  -         jsr kernal_chrout
3556: e8        -         inx
3557: 4c 4e 35  -         jmp !loop-
355a: 68        -         pla
355b: 8d 86 02  -         sta foreground_color
355e: 4c 7c 35  -         jmp !done+
3561: ad 86 02  -         lda foreground_color
3564: 48        -         pha
3565: a9 02     -         lda #color
3567: 8d 86 02  -         sta foreground_color
356a: a2 00     -         ldx #$00
356c: bd 41 52  -         lda msg,x
356f: f0 07     -         beq !done+
3571: 20 d2 ff  -         jsr kernal_chrout
3574: e8        -         inx
3575: 4c 6c 35  -         jmp !loop-
3578: 68        -         pla
3579: 8d 86 02  -         sta foreground_color
357c: 60        -         rts
357d: ee 45 52  - COMPARE_TEST:inc TEST_NAME_COUNT
3580: ad 86 02  -         lda foreground_color
3583: 48        -         pha
3584: a9 0f     -         lda #color
3586: 8d 86 02  -         sta foreground_color
3589: a2 00     -         ldx #$00
358b: bd 9e 35  -         lda msg,x
358e: f0 07     -         beq !done+
3590: 20 d2 ff  -         jsr kernal_chrout
3593: e8        -         inx
3594: 4c 8b 35  -         jmp !loop-
3597: 68        -         pla
3598: 8d 86 02  -         sta foreground_color
359b: 4c ab 35  -         jmp !done+
359e: 20 20     - memory: .fill spacing, spacebar
35a0: 43 4f 4d 50 41 52 45                             -         .text name
35a7: 2e 2e 2e  -         .text "..."
35aa: 00        -         .byte NULL
35ab: 20 08 10  -         jsr SW16
35ae: 15        -         .byte opcode(op, register)
35af: 61 52     -         .word address.getValue()
35b1: 16        -         .byte opcode(op, register)
35b2: 71 52     -         .word address.getValue()
35b4: 14        -         .byte opcode(op, register)
35b5: 00 00     -         .word address.getValue()
35b7: e4        -         .byte opcode($e0, register) }
35b8: b0        -         .byte opcode($b0, register) }
35b9: 75        -         .byte opcode($70, register) }
35ba: 25        -         .byte opcode($20, register) }
35bb: d6        -         .byte opcode($d0, register) }
35bc: 02 f9     -         .byte $02, effective_address(ea,*) }
35be: 00        -         .byte $00 }
35bf: ee 43 52  -         inc TEST_COUNT
35c2: ad 86 02  -         lda foreground_color
35c5: 48        -         pha
35c6: a9 0e     -         lda #color
35c8: 8d 86 02  -         sta foreground_color
35cb: a2 00     -         ldx #$00
35cd: bd e0 35  -         lda msg,x
35d0: f0 07     -         beq !done+
35d2: 20 d2 ff  -         jsr kernal_chrout
35d5: e8        -         inx
35d6: 4c cd 35  -         jmp !loop-
35d9: 68        -         pla
35da: 8d 86 02  -         sta foreground_color
35dd: 4c e8 35  -         jmp !done+
35e0: 20        - memory: .byte spacebar
35e1: 43 4f 55 4e 54                                   -         .text description
35e6: 3a        -         .text ":"
35e7: 00        -         .byte NULL
35e8: a6 1f     -         ldx rl(register.getValue())
35ea: a4 20     -         ldy rh(register.getValue())
35ec: e0 08     -         cpx #<value
35ee: d0 25     -         bne !failed+
35f0: c0 00     -         cpy #>value
35f2: d0 21     -         bne !failed+
35f4: ee 44 52  -         inc TEST_PASS_COUNT
35f7: ad 86 02  -         lda foreground_color
35fa: 48        -         pha
35fb: a9 05     -         lda #color
35fd: 8d 86 02  -         sta foreground_color
3600: a2 00     -         ldx #$00
3602: bd 3f 52  -         lda msg,x
3605: f0 07     -         beq !done+
3607: 20 d2 ff  -         jsr kernal_chrout
360a: e8        -         inx
360b: 4c 02 36  -         jmp !loop-
360e: 68        -         pla
360f: 8d 86 02  -         sta foreground_color
3612: 4c 30 36  -         jmp !done+
3615: ad 86 02  -         lda foreground_color
3618: 48        -         pha
3619: a9 02     -         lda #color
361b: 8d 86 02  -         sta foreground_color
361e: a2 00     -         ldx #$00
3620: bd 41 52  -         lda msg,x
3623: f0 07     -         beq !done+
3625: 20 d2 ff  -         jsr kernal_chrout
3628: e8        -         inx
3629: 4c 20 36  -         jmp !loop-
362c: 68        -         pla
362d: 8d 86 02  -         sta foreground_color
3630: a2 00     -         ldx #$00
3632: bd 41 36  -         lda msg,x
3635: f0 07     -         beq !done+
3637: 20 d2 ff  -         jsr kernal_chrout
363a: e8        -         inx
363b: 4c 32 36  -         jmp !loop-
363e: 4c 43 36  -         jmp !done+
3641: 0d 00     - memory: .byte RETURN, NULL
3643: ae 45 52  -         ldx TEST_NAME_COUNT
3646: e0 15     -         cpx #TESTS_PER_PAGE
3648: d0 5d     -         bne !exit+
364a: ad 86 02  -         lda foreground_color
364d: 48        -         pha
364e: a9 01     -         lda #color
3650: 8d 86 02  -         sta foreground_color
3653: a2 00     -         ldx #$00
3655: bd 68 36  -         lda msg,x
3658: f0 07     -         beq !done+
365a: 20 d2 ff  -         jsr kernal_chrout
365d: e8        -         inx
365e: 4c 55 36  -         jmp !loop-
3661: 68        -         pla
3662: 8d 86 02  -         sta foreground_color
3665: 4c 87 36  -         jmp !no_key+
3668: 0d        - memory: .byte RETURN
3669: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3679: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3685: 0d 00     -         .byte RETURN, NULL
3687: 20 9f ff  -         jsr scnkey  // scan keyboard
368a: 20 e4 ff  -         jsr getin	// put result into A
368d: f0 f8     -         beq !no_key-
368f: a2 00     -         ldx #$00
3691: bd a0 36  -         lda msg,x
3694: f0 07     -         beq !done+
3696: 20 d2 ff  -         jsr kernal_chrout
3699: e8        -         inx
369a: 4c 91 36  -         jmp !loop-
369d: 4c a2 36  -         jmp !done+
36a0: 0d 00     - newline:.byte RETURN, NULL
36a2: a2 00     -         ldx #$00
36a4: 8e 45 52  -         stx TEST_NAME_COUNT
36a7: 60        -         rts	
36a8: ee 45 52  - INCREMENT_TEST:inc TEST_NAME_COUNT
36ab: ad 86 02  -         lda foreground_color
36ae: 48        -         pha
36af: a9 0f     -         lda #color
36b1: 8d 86 02  -         sta foreground_color
36b4: a2 00     -         ldx #$00
36b6: bd c9 36  -         lda msg,x
36b9: f0 07     -         beq !done+
36bb: 20 d2 ff  -         jsr kernal_chrout
36be: e8        -         inx
36bf: 4c b6 36  -         jmp !loop-
36c2: 68        -         pla
36c3: 8d 86 02  -         sta foreground_color
36c6: 4c d8 36  -         jmp !done+
36c9: 20 20     - memory: .fill spacing, spacebar
36cb: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
36d4: 2e 2e 2e  -         .text "..."
36d7: 00        -         .byte NULL
36d8: 20 08 10  -         jsr SW16
36db: 15        -         .byte opcode(op, register)
36dc: 5b 52     -         .word address.getValue()
36de: b0        -         .byte opcode($b0, register) }
36df: 55        -         .byte opcode($50, register) }
36e0: e5        -         .byte opcode($e0, register) }
36e1: 00        -         .byte $00 }
36e2: ee 43 52  -         inc TEST_COUNT
36e5: ad 86 02  -         lda foreground_color
36e8: 48        -         pha
36e9: a9 0e     -         lda #color
36eb: 8d 86 02  -         sta foreground_color
36ee: a2 00     -         ldx #$00
36f0: bd 03 37  -         lda msg,x
36f3: f0 07     -         beq !done+
36f5: 20 d2 ff  -         jsr kernal_chrout
36f8: e8        -         inx
36f9: 4c f0 36  -         jmp !loop-
36fc: 68        -         pla
36fd: 8d 86 02  -         sta foreground_color
3700: 4c 08 37  -         jmp !done+
3703: 20        - memory: .byte spacebar
3704: 2b 32     -         .text description
3706: 3a        -         .text ":"
3707: 00        -         .byte NULL
3708: a6 21     -         ldx rl(register.getValue())
370a: a4 22     -         ldy rh(register.getValue())
370c: e0 5d     -         cpx #<value
370e: d0 25     -         bne !failed+
3710: c0 52     -         cpy #>value
3712: d0 21     -         bne !failed+
3714: ee 44 52  -         inc TEST_PASS_COUNT
3717: ad 86 02  -         lda foreground_color
371a: 48        -         pha
371b: a9 05     -         lda #color
371d: 8d 86 02  -         sta foreground_color
3720: a2 00     -         ldx #$00
3722: bd 3f 52  -         lda msg,x
3725: f0 07     -         beq !done+
3727: 20 d2 ff  -         jsr kernal_chrout
372a: e8        -         inx
372b: 4c 22 37  -         jmp !loop-
372e: 68        -         pla
372f: 8d 86 02  -         sta foreground_color
3732: 4c 50 37  -         jmp !done+
3735: ad 86 02  -         lda foreground_color
3738: 48        -         pha
3739: a9 02     -         lda #color
373b: 8d 86 02  -         sta foreground_color
373e: a2 00     -         ldx #$00
3740: bd 41 52  -         lda msg,x
3743: f0 07     -         beq !done+
3745: 20 d2 ff  -         jsr kernal_chrout
3748: e8        -         inx
3749: 4c 40 37  -         jmp !loop-
374c: 68        -         pla
374d: 8d 86 02  -         sta foreground_color
3750: a2 00     -         ldx #$00
3752: bd 61 37  -         lda msg,x
3755: f0 07     -         beq !done+
3757: 20 d2 ff  -         jsr kernal_chrout
375a: e8        -         inx
375b: 4c 52 37  -         jmp !loop-
375e: 4c 63 37  -         jmp !done+
3761: 0d 00     - memory: .byte RETURN, NULL
3763: ae 45 52  -         ldx TEST_NAME_COUNT
3766: e0 15     -         cpx #TESTS_PER_PAGE
3768: d0 5d     -         bne !exit+
376a: ad 86 02  -         lda foreground_color
376d: 48        -         pha
376e: a9 01     -         lda #color
3770: 8d 86 02  -         sta foreground_color
3773: a2 00     -         ldx #$00
3775: bd 88 37  -         lda msg,x
3778: f0 07     -         beq !done+
377a: 20 d2 ff  -         jsr kernal_chrout
377d: e8        -         inx
377e: 4c 75 37  -         jmp !loop-
3781: 68        -         pla
3782: 8d 86 02  -         sta foreground_color
3785: 4c a7 37  -         jmp !no_key+
3788: 0d        - memory: .byte RETURN
3789: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3799: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
37a5: 0d 00     -         .byte RETURN, NULL
37a7: 20 9f ff  -         jsr scnkey  // scan keyboard
37aa: 20 e4 ff  -         jsr getin	// put result into A
37ad: f0 f8     -         beq !no_key-
37af: a2 00     -         ldx #$00
37b1: bd c0 37  -         lda msg,x
37b4: f0 07     -         beq !done+
37b6: 20 d2 ff  -         jsr kernal_chrout
37b9: e8        -         inx
37ba: 4c b1 37  -         jmp !loop-
37bd: 4c c2 37  -         jmp !done+
37c0: 0d 00     - newline:.byte RETURN, NULL
37c2: a2 00     -         ldx #$00
37c4: 8e 45 52  -         stx TEST_NAME_COUNT
37c7: 60        -         rts
37c8: ee 45 52  - DECREMENT_TEST:inc TEST_NAME_COUNT
37cb: ad 86 02  -         lda foreground_color
37ce: 48        -         pha
37cf: a9 0f     -         lda #color
37d1: 8d 86 02  -         sta foreground_color
37d4: a2 00     -         ldx #$00
37d6: bd e9 37  -         lda msg,x
37d9: f0 07     -         beq !done+
37db: 20 d2 ff  -         jsr kernal_chrout
37de: e8        -         inx
37df: 4c d6 37  -         jmp !loop-
37e2: 68        -         pla
37e3: 8d 86 02  -         sta foreground_color
37e6: 4c f8 37  -         jmp !done+
37e9: 20 20     - memory: .fill spacing, spacebar
37eb: 44 45 43 52 45 4d 45 4e 54                       -         .text name
37f4: 2e 2e 2e  -         .text "..."
37f7: 00        -         .byte NULL
37f8: 20 08 10  -         jsr SW16
37fb: 15        -         .byte opcode(op, register)
37fc: 61 52     -         .word address.getValue()
37fe: 14        -         .byte opcode(op, register)
37ff: 10 00     -         .word address.getValue()
3801: b0        -         .byte opcode($b0, register) }
3802: 55        -         .byte opcode($50, register) }
3803: f4        -         .byte opcode($f0, register) }
3804: 07 fc     -         .byte $07, effective_address(ea,*) }
3806: 00        -         .byte $00 }
3807: ee 43 52  -         inc TEST_COUNT
380a: ad 86 02  -         lda foreground_color
380d: 48        -         pha
380e: a9 0e     -         lda #color
3810: 8d 86 02  -         sta foreground_color
3813: a2 00     -         ldx #$00
3815: bd 28 38  -         lda msg,x
3818: f0 07     -         beq !done+
381a: 20 d2 ff  -         jsr kernal_chrout
381d: e8        -         inx
381e: 4c 15 38  -         jmp !loop-
3821: 68        -         pla
3822: 8d 86 02  -         sta foreground_color
3825: 4c 2c 38  -         jmp !done+
3828: 20        - memory: .byte spacebar
3829: 30        -         .text description
382a: 3a        -         .text ":"
382b: 00        -         .byte NULL
382c: a6 1f     -         ldx rl(register.getValue())
382e: a4 20     -         ldy rh(register.getValue())
3830: e0 00     -         cpx #<value
3832: d0 25     -         bne !failed+
3834: c0 00     -         cpy #>value
3836: d0 21     -         bne !failed+
3838: ee 44 52  -         inc TEST_PASS_COUNT
383b: ad 86 02  -         lda foreground_color
383e: 48        -         pha
383f: a9 05     -         lda #color
3841: 8d 86 02  -         sta foreground_color
3844: a2 00     -         ldx #$00
3846: bd 3f 52  -         lda msg,x
3849: f0 07     -         beq !done+
384b: 20 d2 ff  -         jsr kernal_chrout
384e: e8        -         inx
384f: 4c 46 38  -         jmp !loop-
3852: 68        -         pla
3853: 8d 86 02  -         sta foreground_color
3856: 4c 74 38  -         jmp !done+
3859: ad 86 02  -         lda foreground_color
385c: 48        -         pha
385d: a9 02     -         lda #color
385f: 8d 86 02  -         sta foreground_color
3862: a2 00     -         ldx #$00
3864: bd 41 52  -         lda msg,x
3867: f0 07     -         beq !done+
3869: 20 d2 ff  -         jsr kernal_chrout
386c: e8        -         inx
386d: 4c 64 38  -         jmp !loop-
3870: 68        -         pla
3871: 8d 86 02  -         sta foreground_color
3874: a2 00     -         ldx #$00
3876: bd 85 38  -         lda msg,x
3879: f0 07     -         beq !done+
387b: 20 d2 ff  -         jsr kernal_chrout
387e: e8        -         inx
387f: 4c 76 38  -         jmp !loop-
3882: 4c 87 38  -         jmp !done+
3885: 0d 00     - memory: .byte RETURN, NULL
3887: ae 45 52  -         ldx TEST_NAME_COUNT
388a: e0 15     -         cpx #TESTS_PER_PAGE
388c: d0 5d     -         bne !exit+
388e: ad 86 02  -         lda foreground_color
3891: 48        -         pha
3892: a9 01     -         lda #color
3894: 8d 86 02  -         sta foreground_color
3897: a2 00     -         ldx #$00
3899: bd ac 38  -         lda msg,x
389c: f0 07     -         beq !done+
389e: 20 d2 ff  -         jsr kernal_chrout
38a1: e8        -         inx
38a2: 4c 99 38  -         jmp !loop-
38a5: 68        -         pla
38a6: 8d 86 02  -         sta foreground_color
38a9: 4c cb 38  -         jmp !no_key+
38ac: 0d        - memory: .byte RETURN
38ad: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
38bd: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
38c9: 0d 00     -         .byte RETURN, NULL
38cb: 20 9f ff  -         jsr scnkey  // scan keyboard
38ce: 20 e4 ff  -         jsr getin	// put result into A
38d1: f0 f8     -         beq !no_key-
38d3: a2 00     -         ldx #$00
38d5: bd e4 38  -         lda msg,x
38d8: f0 07     -         beq !done+
38da: 20 d2 ff  -         jsr kernal_chrout
38dd: e8        -         inx
38de: 4c d5 38  -         jmp !loop-
38e1: 4c e6 38  -         jmp !done+
38e4: 0d 00     - newline:.byte RETURN, NULL
38e6: a2 00     -         ldx #$00
38e8: 8e 45 52  -         stx TEST_NAME_COUNT
38eb: 60        -         rts
38ec: ee 45 52  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
38ef: ad 86 02  -         lda foreground_color
38f2: 48        -         pha
38f3: a9 0f     -         lda #color
38f5: 8d 86 02  -         sta foreground_color
38f8: a2 00     -         ldx #$00
38fa: bd 0d 39  -         lda msg,x
38fd: f0 07     -         beq !done+
38ff: 20 d2 ff  -         jsr kernal_chrout
3902: e8        -         inx
3903: 4c fa 38  -         jmp !loop-
3906: 68        -         pla
3907: 8d 86 02  -         sta foreground_color
390a: 4c 1c 39  -         jmp !done+
390d: 20 20     - memory: .fill spacing, spacebar
390f: 36 35 30 32 20 4d 4f 44 45                       -         .text name
3918: 2e 2e 2e  -         .text "..."
391b: 00        -         .byte NULL
391c: 20 08 10  -         jsr SW16
391f: 00        -         .byte $00 }
3920: ee 43 52  -         inc TEST_COUNT
3923: ad 86 02  -         lda foreground_color
3926: 48        -         pha
3927: a9 0e     -         lda #color
3929: 8d 86 02  -         sta foreground_color
392c: a2 00     -         ldx #$00
392e: bd 41 39  -         lda msg,x
3931: f0 07     -         beq !done+
3933: 20 d2 ff  -         jsr kernal_chrout
3936: e8        -         inx
3937: 4c 2e 39  -         jmp !loop-
393a: 68        -         pla
393b: 8d 86 02  -         sta foreground_color
393e: 4c 47 39  -         jmp !done+
3941: 20        - memory: .byte spacebar
3942: 52 54 4e  -         .text description
3945: 3a        -         .text ":"
3946: 00        -         .byte NULL
3947: a2 01     -         ldx #value
3949: f0 21     -         beq !failed+
394b: ee 44 52  -         inc TEST_PASS_COUNT
394e: ad 86 02  -         lda foreground_color
3951: 48        -         pha
3952: a9 05     -         lda #color
3954: 8d 86 02  -         sta foreground_color
3957: a2 00     -         ldx #$00
3959: bd 3f 52  -         lda msg,x
395c: f0 07     -         beq !done+
395e: 20 d2 ff  -         jsr kernal_chrout
3961: e8        -         inx
3962: 4c 59 39  -         jmp !loop-
3965: 68        -         pla
3966: 8d 86 02  -         sta foreground_color
3969: 4c 87 39  -         jmp !done+
396c: ad 86 02  -         lda foreground_color
396f: 48        -         pha
3970: a9 02     -         lda #color
3972: 8d 86 02  -         sta foreground_color
3975: a2 00     -         ldx #$00
3977: bd 41 52  -         lda msg,x
397a: f0 07     -         beq !done+
397c: 20 d2 ff  -         jsr kernal_chrout
397f: e8        -         inx
3980: 4c 77 39  -         jmp !loop-
3983: 68        -         pla
3984: 8d 86 02  -         sta foreground_color
3987: a2 00     -         ldx #$00
3989: bd 98 39  -         lda msg,x
398c: f0 07     -         beq !done+
398e: 20 d2 ff  -         jsr kernal_chrout
3991: e8        -         inx
3992: 4c 89 39  -         jmp !loop-
3995: 4c 9a 39  -         jmp !done+
3998: 0d 00     - memory: .byte RETURN, NULL
399a: ae 45 52  -         ldx TEST_NAME_COUNT
399d: e0 15     -         cpx #TESTS_PER_PAGE
399f: d0 5d     -         bne !exit+
39a1: ad 86 02  -         lda foreground_color
39a4: 48        -         pha
39a5: a9 01     -         lda #color
39a7: 8d 86 02  -         sta foreground_color
39aa: a2 00     -         ldx #$00
39ac: bd bf 39  -         lda msg,x
39af: f0 07     -         beq !done+
39b1: 20 d2 ff  -         jsr kernal_chrout
39b4: e8        -         inx
39b5: 4c ac 39  -         jmp !loop-
39b8: 68        -         pla
39b9: 8d 86 02  -         sta foreground_color
39bc: 4c de 39  -         jmp !no_key+
39bf: 0d        - memory: .byte RETURN
39c0: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
39d0: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
39dc: 0d 00     -         .byte RETURN, NULL
39de: 20 9f ff  -         jsr scnkey  // scan keyboard
39e1: 20 e4 ff  -         jsr getin	// put result into A
39e4: f0 f8     -         beq !no_key-
39e6: a2 00     -         ldx #$00
39e8: bd f7 39  -         lda msg,x
39eb: f0 07     -         beq !done+
39ed: 20 d2 ff  -         jsr kernal_chrout
39f0: e8        -         inx
39f1: 4c e8 39  -         jmp !loop-
39f4: 4c f9 39  -         jmp !done+
39f7: 0d 00     - newline:.byte RETURN, NULL
39f9: a2 00     -         ldx #$00
39fb: 8e 45 52  -         stx TEST_NAME_COUNT
39fe: 60        -         rts
39ff: ee 45 52  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
3a02: ad 86 02  -         lda foreground_color
3a05: 48        -         pha
3a06: a9 0f     -         lda #color
3a08: 8d 86 02  -         sta foreground_color
3a0b: a2 00     -         ldx #$00
3a0d: bd 20 3a  -         lda msg,x
3a10: f0 07     -         beq !done+
3a12: 20 d2 ff  -         jsr kernal_chrout
3a15: e8        -         inx
3a16: 4c 0d 3a  -         jmp !loop-
3a19: 68        -         pla
3a1a: 8d 86 02  -         sta foreground_color
3a1d: 4c 33 3a  -         jmp !done+
3a20: 20 20     - memory: .fill spacing, spacebar
3a22: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
3a2f: 2e 2e 2e  -         .text "..."
3a32: 00        -         .byte NULL
3a33: 20 08 10  -         jsr SW16
3a36: 01 00     -         .byte $01, effective_address(ea,*) }
3a38: 10        -         .byte opcode(op, register)
3a39: dc fe     -         .word address.getValue()
3a3b: 01 05     -         .byte $01, effective_address(ea,*) }
3a3d: 10        -         .byte opcode(op, register)
3a3e: 23 01     -         .word address.getValue()
3a40: 01 00     -         .byte $01, effective_address(ea,*) }
3a42: 00        -         .byte $00 }
3a43: ee 43 52  -         inc TEST_COUNT
3a46: ad 86 02  -         lda foreground_color
3a49: 48        -         pha
3a4a: a9 0e     -         lda #color
3a4c: 8d 86 02  -         sta foreground_color
3a4f: a2 00     -         ldx #$00
3a51: bd 64 3a  -         lda msg,x
3a54: f0 07     -         beq !done+
3a56: 20 d2 ff  -         jsr kernal_chrout
3a59: e8        -         inx
3a5a: 4c 51 3a  -         jmp !loop-
3a5d: 68        -         pla
3a5e: 8d 86 02  -         sta foreground_color
3a61: 4c 68 3a  -         jmp !done+
3a64: 20        - memory: .byte spacebar
3a65: 31        -         .text description
3a66: 3a        -         .text ":"
3a67: 00        -         .byte NULL
3a68: a6 17     -         ldx rl(register.getValue())
3a6a: a4 18     -         ldy rh(register.getValue())
3a6c: e0 dc     -         cpx #<value
3a6e: d0 25     -         bne !failed+
3a70: c0 fe     -         cpy #>value
3a72: d0 21     -         bne !failed+
3a74: ee 44 52  -         inc TEST_PASS_COUNT
3a77: ad 86 02  -         lda foreground_color
3a7a: 48        -         pha
3a7b: a9 05     -         lda #color
3a7d: 8d 86 02  -         sta foreground_color
3a80: a2 00     -         ldx #$00
3a82: bd 3f 52  -         lda msg,x
3a85: f0 07     -         beq !done+
3a87: 20 d2 ff  -         jsr kernal_chrout
3a8a: e8        -         inx
3a8b: 4c 82 3a  -         jmp !loop-
3a8e: 68        -         pla
3a8f: 8d 86 02  -         sta foreground_color
3a92: 4c b0 3a  -         jmp !done+
3a95: ad 86 02  -         lda foreground_color
3a98: 48        -         pha
3a99: a9 02     -         lda #color
3a9b: 8d 86 02  -         sta foreground_color
3a9e: a2 00     -         ldx #$00
3aa0: bd 41 52  -         lda msg,x
3aa3: f0 07     -         beq !done+
3aa5: 20 d2 ff  -         jsr kernal_chrout
3aa8: e8        -         inx
3aa9: 4c a0 3a  -         jmp !loop-
3aac: 68        -         pla
3aad: 8d 86 02  -         sta foreground_color
3ab0: a2 00     -         ldx #$00
3ab2: bd c1 3a  -         lda msg,x
3ab5: f0 07     -         beq !done+
3ab7: 20 d2 ff  -         jsr kernal_chrout
3aba: e8        -         inx
3abb: 4c b2 3a  -         jmp !loop-
3abe: 4c c3 3a  -         jmp !done+
3ac1: 0d 00     - memory: .byte RETURN, NULL
3ac3: ae 45 52  -         ldx TEST_NAME_COUNT
3ac6: e0 15     -         cpx #TESTS_PER_PAGE
3ac8: d0 5d     -         bne !exit+
3aca: ad 86 02  -         lda foreground_color
3acd: 48        -         pha
3ace: a9 01     -         lda #color
3ad0: 8d 86 02  -         sta foreground_color
3ad3: a2 00     -         ldx #$00
3ad5: bd e8 3a  -         lda msg,x
3ad8: f0 07     -         beq !done+
3ada: 20 d2 ff  -         jsr kernal_chrout
3add: e8        -         inx
3ade: 4c d5 3a  -         jmp !loop-
3ae1: 68        -         pla
3ae2: 8d 86 02  -         sta foreground_color
3ae5: 4c 07 3b  -         jmp !no_key+
3ae8: 0d        - memory: .byte RETURN
3ae9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3af9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3b05: 0d 00     -         .byte RETURN, NULL
3b07: 20 9f ff  -         jsr scnkey  // scan keyboard
3b0a: 20 e4 ff  -         jsr getin	// put result into A
3b0d: f0 f8     -         beq !no_key-
3b0f: a2 00     -         ldx #$00
3b11: bd 20 3b  -         lda msg,x
3b14: f0 07     -         beq !done+
3b16: 20 d2 ff  -         jsr kernal_chrout
3b19: e8        -         inx
3b1a: 4c 11 3b  -         jmp !loop-
3b1d: 4c 22 3b  -         jmp !done+
3b20: 0d 00     - newline:.byte RETURN, NULL
3b22: a2 00     -         ldx #$00
3b24: 8e 45 52  -         stx TEST_NAME_COUNT
3b27: 60        -         rts
3b28: ee 45 52  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
3b2b: ad 86 02  -         lda foreground_color
3b2e: 48        -         pha
3b2f: a9 0f     -         lda #color
3b31: 8d 86 02  -         sta foreground_color
3b34: a2 00     -         ldx #$00
3b36: bd 49 3b  -         lda msg,x
3b39: f0 07     -         beq !done+
3b3b: 20 d2 ff  -         jsr kernal_chrout
3b3e: e8        -         inx
3b3f: 4c 36 3b  -         jmp !loop-
3b42: 68        -         pla
3b43: 8d 86 02  -         sta foreground_color
3b46: 4c 5e 3b  -         jmp !done+
3b49: 20 20     - memory: .fill spacing, spacebar
3b4b: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
3b5a: 2e 2e 2e  -         .text "..."
3b5d: 00        -         .byte NULL
3b5e: 20 08 10  -         jsr SW16
3b61: 15        -         .byte opcode(op, register)
3b62: 00 10     -         .word address.getValue()
3b64: 10        -         .byte opcode(op, register)
3b65: ff ff     -         .word address.getValue()
3b67: a5        -         .byte opcode($a0, register) }
3b68: 02 02     -         .byte $02, effective_address(ea,*) }
3b6a: 01 05     -         .byte $01, effective_address(ea,*) }
3b6c: 10        -         .byte opcode(op, register)
3b6d: dc fe     -         .word address.getValue()
3b6f: 01 05     -         .byte $01, effective_address(ea,*) }
3b71: 10        -         .byte opcode(op, register)
3b72: 23 01     -         .word address.getValue()
3b74: 01 00     -         .byte $01, effective_address(ea,*) }
3b76: 00        -         .byte $00 }
3b77: ee 43 52  -         inc TEST_COUNT
3b7a: ad 86 02  -         lda foreground_color
3b7d: 48        -         pha
3b7e: a9 0e     -         lda #color
3b80: 8d 86 02  -         sta foreground_color
3b83: a2 00     -         ldx #$00
3b85: bd 98 3b  -         lda msg,x
3b88: f0 07     -         beq !done+
3b8a: 20 d2 ff  -         jsr kernal_chrout
3b8d: e8        -         inx
3b8e: 4c 85 3b  -         jmp !loop-
3b91: 68        -         pla
3b92: 8d 86 02  -         sta foreground_color
3b95: 4c 9c 3b  -         jmp !done+
3b98: 20        - memory: .byte spacebar
3b99: 32        -         .text description
3b9a: 3a        -         .text ":"
3b9b: 00        -         .byte NULL
3b9c: a6 17     -         ldx rl(register.getValue())
3b9e: a4 18     -         ldy rh(register.getValue())
3ba0: e0 23     -         cpx #<value
3ba2: d0 25     -         bne !failed+
3ba4: c0 01     -         cpy #>value
3ba6: d0 21     -         bne !failed+
3ba8: ee 44 52  -         inc TEST_PASS_COUNT
3bab: ad 86 02  -         lda foreground_color
3bae: 48        -         pha
3baf: a9 05     -         lda #color
3bb1: 8d 86 02  -         sta foreground_color
3bb4: a2 00     -         ldx #$00
3bb6: bd 3f 52  -         lda msg,x
3bb9: f0 07     -         beq !done+
3bbb: 20 d2 ff  -         jsr kernal_chrout
3bbe: e8        -         inx
3bbf: 4c b6 3b  -         jmp !loop-
3bc2: 68        -         pla
3bc3: 8d 86 02  -         sta foreground_color
3bc6: 4c e4 3b  -         jmp !done+
3bc9: ad 86 02  -         lda foreground_color
3bcc: 48        -         pha
3bcd: a9 02     -         lda #color
3bcf: 8d 86 02  -         sta foreground_color
3bd2: a2 00     -         ldx #$00
3bd4: bd 41 52  -         lda msg,x
3bd7: f0 07     -         beq !done+
3bd9: 20 d2 ff  -         jsr kernal_chrout
3bdc: e8        -         inx
3bdd: 4c d4 3b  -         jmp !loop-
3be0: 68        -         pla
3be1: 8d 86 02  -         sta foreground_color
3be4: a2 00     -         ldx #$00
3be6: bd f5 3b  -         lda msg,x
3be9: f0 07     -         beq !done+
3beb: 20 d2 ff  -         jsr kernal_chrout
3bee: e8        -         inx
3bef: 4c e6 3b  -         jmp !loop-
3bf2: 4c f7 3b  -         jmp !done+
3bf5: 0d 00     - memory: .byte RETURN, NULL
3bf7: ae 45 52  -         ldx TEST_NAME_COUNT
3bfa: e0 15     -         cpx #TESTS_PER_PAGE
3bfc: d0 5d     -         bne !exit+
3bfe: ad 86 02  -         lda foreground_color
3c01: 48        -         pha
3c02: a9 01     -         lda #color
3c04: 8d 86 02  -         sta foreground_color
3c07: a2 00     -         ldx #$00
3c09: bd 1c 3c  -         lda msg,x
3c0c: f0 07     -         beq !done+
3c0e: 20 d2 ff  -         jsr kernal_chrout
3c11: e8        -         inx
3c12: 4c 09 3c  -         jmp !loop-
3c15: 68        -         pla
3c16: 8d 86 02  -         sta foreground_color
3c19: 4c 3b 3c  -         jmp !no_key+
3c1c: 0d        - memory: .byte RETURN
3c1d: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3c2d: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3c39: 0d 00     -         .byte RETURN, NULL
3c3b: 20 9f ff  -         jsr scnkey  // scan keyboard
3c3e: 20 e4 ff  -         jsr getin	// put result into A
3c41: f0 f8     -         beq !no_key-
3c43: a2 00     -         ldx #$00
3c45: bd 54 3c  -         lda msg,x
3c48: f0 07     -         beq !done+
3c4a: 20 d2 ff  -         jsr kernal_chrout
3c4d: e8        -         inx
3c4e: 4c 45 3c  -         jmp !loop-
3c51: 4c 56 3c  -         jmp !done+
3c54: 0d 00     - newline:.byte RETURN, NULL
3c56: a2 00     -         ldx #$00
3c58: 8e 45 52  -         stx TEST_NAME_COUNT
3c5b: 60        -         rts
3c5c: ee 45 52  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
3c5f: ad 86 02  -         lda foreground_color
3c62: 48        -         pha
3c63: a9 0f     -         lda #color
3c65: 8d 86 02  -         sta foreground_color
3c68: a2 00     -         ldx #$00
3c6a: bd 7d 3c  -         lda msg,x
3c6d: f0 07     -         beq !done+
3c6f: 20 d2 ff  -         jsr kernal_chrout
3c72: e8        -         inx
3c73: 4c 6a 3c  -         jmp !loop-
3c76: 68        -         pla
3c77: 8d 86 02  -         sta foreground_color
3c7a: 4c 92 3c  -         jmp !done+
3c7d: 20 20     - memory: .fill spacing, spacebar
3c7f: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
3c8e: 2e 2e 2e  -         .text "..."
3c91: 00        -         .byte NULL
3c92: 20 08 10  -         jsr SW16
3c95: 15        -         .byte opcode(op, register)
3c96: 00 10     -         .word address.getValue()
3c98: 10        -         .byte opcode(op, register)
3c99: ff ff     -         .word address.getValue()
3c9b: a5        -         .byte opcode($a0, register) }
3c9c: 03 02     -         .byte $03, effective_address(ea,*) }
3c9e: 01 05     -         .byte $01, effective_address(ea,*) }
3ca0: 10        -         .byte opcode(op, register)
3ca1: dc fe     -         .word address.getValue()
3ca3: 01 05     -         .byte $01, effective_address(ea,*) }
3ca5: 10        -         .byte opcode(op, register)
3ca6: 23 01     -         .word address.getValue()
3ca8: 01 00     -         .byte $01, effective_address(ea,*) }
3caa: 00        -         .byte $00 }
3cab: ee 43 52  -         inc TEST_COUNT
3cae: ad 86 02  -         lda foreground_color
3cb1: 48        -         pha
3cb2: a9 0e     -         lda #color
3cb4: 8d 86 02  -         sta foreground_color
3cb7: a2 00     -         ldx #$00
3cb9: bd cc 3c  -         lda msg,x
3cbc: f0 07     -         beq !done+
3cbe: 20 d2 ff  -         jsr kernal_chrout
3cc1: e8        -         inx
3cc2: 4c b9 3c  -         jmp !loop-
3cc5: 68        -         pla
3cc6: 8d 86 02  -         sta foreground_color
3cc9: 4c d0 3c  -         jmp !done+
3ccc: 20        - memory: .byte spacebar
3ccd: 31        -         .text description
3cce: 3a        -         .text ":"
3ccf: 00        -         .byte NULL
3cd0: a6 17     -         ldx rl(register.getValue())
3cd2: a4 18     -         ldy rh(register.getValue())
3cd4: e0 dc     -         cpx #<value
3cd6: d0 25     -         bne !failed+
3cd8: c0 fe     -         cpy #>value
3cda: d0 21     -         bne !failed+
3cdc: ee 44 52  -         inc TEST_PASS_COUNT
3cdf: ad 86 02  -         lda foreground_color
3ce2: 48        -         pha
3ce3: a9 05     -         lda #color
3ce5: 8d 86 02  -         sta foreground_color
3ce8: a2 00     -         ldx #$00
3cea: bd 3f 52  -         lda msg,x
3ced: f0 07     -         beq !done+
3cef: 20 d2 ff  -         jsr kernal_chrout
3cf2: e8        -         inx
3cf3: 4c ea 3c  -         jmp !loop-
3cf6: 68        -         pla
3cf7: 8d 86 02  -         sta foreground_color
3cfa: 4c 18 3d  -         jmp !done+
3cfd: ad 86 02  -         lda foreground_color
3d00: 48        -         pha
3d01: a9 02     -         lda #color
3d03: 8d 86 02  -         sta foreground_color
3d06: a2 00     -         ldx #$00
3d08: bd 41 52  -         lda msg,x
3d0b: f0 07     -         beq !done+
3d0d: 20 d2 ff  -         jsr kernal_chrout
3d10: e8        -         inx
3d11: 4c 08 3d  -         jmp !loop-
3d14: 68        -         pla
3d15: 8d 86 02  -         sta foreground_color
3d18: a2 00     -         ldx #$00
3d1a: bd 29 3d  -         lda msg,x
3d1d: f0 07     -         beq !done+
3d1f: 20 d2 ff  -         jsr kernal_chrout
3d22: e8        -         inx
3d23: 4c 1a 3d  -         jmp !loop-
3d26: 4c 2b 3d  -         jmp !done+
3d29: 0d 00     - memory: .byte RETURN, NULL
3d2b: ae 45 52  -         ldx TEST_NAME_COUNT
3d2e: e0 15     -         cpx #TESTS_PER_PAGE
3d30: d0 5d     -         bne !exit+
3d32: ad 86 02  -         lda foreground_color
3d35: 48        -         pha
3d36: a9 01     -         lda #color
3d38: 8d 86 02  -         sta foreground_color
3d3b: a2 00     -         ldx #$00
3d3d: bd 50 3d  -         lda msg,x
3d40: f0 07     -         beq !done+
3d42: 20 d2 ff  -         jsr kernal_chrout
3d45: e8        -         inx
3d46: 4c 3d 3d  -         jmp !loop-
3d49: 68        -         pla
3d4a: 8d 86 02  -         sta foreground_color
3d4d: 4c 6f 3d  -         jmp !no_key+
3d50: 0d        - memory: .byte RETURN
3d51: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3d61: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3d6d: 0d 00     -         .byte RETURN, NULL
3d6f: 20 9f ff  -         jsr scnkey  // scan keyboard
3d72: 20 e4 ff  -         jsr getin	// put result into A
3d75: f0 f8     -         beq !no_key-
3d77: a2 00     -         ldx #$00
3d79: bd 88 3d  -         lda msg,x
3d7c: f0 07     -         beq !done+
3d7e: 20 d2 ff  -         jsr kernal_chrout
3d81: e8        -         inx
3d82: 4c 79 3d  -         jmp !loop-
3d85: 4c 8a 3d  -         jmp !done+
3d88: 0d 00     - newline:.byte RETURN, NULL
3d8a: a2 00     -         ldx #$00
3d8c: 8e 45 52  -         stx TEST_NAME_COUNT
3d8f: 60        -         rts
3d90: ee 45 52  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
3d93: ad 86 02  -         lda foreground_color
3d96: 48        -         pha
3d97: a9 0f     -         lda #color
3d99: 8d 86 02  -         sta foreground_color
3d9c: a2 00     -         ldx #$00
3d9e: bd b1 3d  -         lda msg,x
3da1: f0 07     -         beq !done+
3da3: 20 d2 ff  -         jsr kernal_chrout
3da6: e8        -         inx
3da7: 4c 9e 3d  -         jmp !loop-
3daa: 68        -         pla
3dab: 8d 86 02  -         sta foreground_color
3dae: 4c c4 3d  -         jmp !done+
3db1: 20 20     - memory: .fill spacing, spacebar
3db3: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
3dc0: 2e 2e 2e  -         .text "..."
3dc3: 00        -         .byte NULL
3dc4: 20 08 10  -         jsr SW16
3dc7: 15        -         .byte opcode(op, register)
3dc8: 61 52     -         .word address.getValue()
3dca: 14        -         .byte opcode(op, register)
3dcb: 71 52     -         .word address.getValue()
3dcd: b0        -         .byte opcode($b0, register) }
3dce: 55        -         .byte opcode($50, register) }
3dcf: 24        -         .byte opcode($20, register) }
3dd0: d5        -         .byte opcode($d0, register) }
3dd1: 04 fa     -         .byte $04, effective_address(ea,*) }
3dd3: 00        -         .byte $00 }
3dd4: ee 43 52  -         inc TEST_COUNT
3dd7: ad 86 02  -         lda foreground_color
3dda: 48        -         pha
3ddb: a9 0e     -         lda #color
3ddd: 8d 86 02  -         sta foreground_color
3de0: a2 00     -         ldx #$00
3de2: bd f5 3d  -         lda msg,x
3de5: f0 07     -         beq !done+
3de7: 20 d2 ff  -         jsr kernal_chrout
3dea: e8        -         inx
3deb: 4c e2 3d  -         jmp !loop-
3dee: 68        -         pla
3def: 8d 86 02  -         sta foreground_color
3df2: 4c fb 3d  -         jmp !done+
3df5: 20        - memory: .byte spacebar
3df6: 43 4c 52  -         .text description
3df9: 3a        -         .text ":"
3dfa: 00        -         .byte NULL
3dfb: a2 ff     -         ldx #$ff
3dfd: e8        -         inx
3dfe: e0 10     -         cpx #size
3e00: f0 0a     -         beq !success+
3e02: a9 00     -         lda #constant
3e04: dd 61 52  -         cmp source,x
3e07: f0 f4     -         beq !loop-
3e09: 4c 2d 3e  -         jmp !failed+
3e0c: ee 44 52  -         inc TEST_PASS_COUNT
3e0f: ad 86 02  -         lda foreground_color
3e12: 48        -         pha
3e13: a9 05     -         lda #color
3e15: 8d 86 02  -         sta foreground_color
3e18: a2 00     -         ldx #$00
3e1a: bd 3f 52  -         lda msg,x
3e1d: f0 07     -         beq !done+
3e1f: 20 d2 ff  -         jsr kernal_chrout
3e22: e8        -         inx
3e23: 4c 1a 3e  -         jmp !loop-
3e26: 68        -         pla
3e27: 8d 86 02  -         sta foreground_color
3e2a: 4c 48 3e  -         jmp !done+
3e2d: ad 86 02  -         lda foreground_color
3e30: 48        -         pha
3e31: a9 02     -         lda #color
3e33: 8d 86 02  -         sta foreground_color
3e36: a2 00     -         ldx #$00
3e38: bd 41 52  -         lda msg,x
3e3b: f0 07     -         beq !done+
3e3d: 20 d2 ff  -         jsr kernal_chrout
3e40: e8        -         inx
3e41: 4c 38 3e  -         jmp !loop-
3e44: 68        -         pla
3e45: 8d 86 02  -         sta foreground_color
3e48: a2 00     -         ldx #$00
3e4a: bd 59 3e  -         lda msg,x
3e4d: f0 07     -         beq !done+
3e4f: 20 d2 ff  -         jsr kernal_chrout
3e52: e8        -         inx
3e53: 4c 4a 3e  -         jmp !loop-
3e56: 4c 5b 3e  -         jmp !done+
3e59: 0d 00     - memory: .byte RETURN, NULL
3e5b: ae 45 52  -         ldx TEST_NAME_COUNT
3e5e: e0 15     -         cpx #TESTS_PER_PAGE
3e60: d0 5d     -         bne !exit+
3e62: ad 86 02  -         lda foreground_color
3e65: 48        -         pha
3e66: a9 01     -         lda #color
3e68: 8d 86 02  -         sta foreground_color
3e6b: a2 00     -         ldx #$00
3e6d: bd 80 3e  -         lda msg,x
3e70: f0 07     -         beq !done+
3e72: 20 d2 ff  -         jsr kernal_chrout
3e75: e8        -         inx
3e76: 4c 6d 3e  -         jmp !loop-
3e79: 68        -         pla
3e7a: 8d 86 02  -         sta foreground_color
3e7d: 4c 9f 3e  -         jmp !no_key+
3e80: 0d        - memory: .byte RETURN
3e81: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3e91: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3e9d: 0d 00     -         .byte RETURN, NULL
3e9f: 20 9f ff  -         jsr scnkey  // scan keyboard
3ea2: 20 e4 ff  -         jsr getin	// put result into A
3ea5: f0 f8     -         beq !no_key-
3ea7: a2 00     -         ldx #$00
3ea9: bd b8 3e  -         lda msg,x
3eac: f0 07     -         beq !done+
3eae: 20 d2 ff  -         jsr kernal_chrout
3eb1: e8        -         inx
3eb2: 4c a9 3e  -         jmp !loop-
3eb5: 4c ba 3e  -         jmp !done+
3eb8: 0d 00     - newline:.byte RETURN, NULL
3eba: a2 00     -         ldx #$00
3ebc: 8e 45 52  -         stx TEST_NAME_COUNT
3ebf: 60        -         rts
3ec0: ee 45 52  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
3ec3: ad 86 02  -         lda foreground_color
3ec6: 48        -         pha
3ec7: a9 0f     -         lda #color
3ec9: 8d 86 02  -         sta foreground_color
3ecc: a2 00     -         ldx #$00
3ece: bd e1 3e  -         lda msg,x
3ed1: f0 07     -         beq !done+
3ed3: 20 d2 ff  -         jsr kernal_chrout
3ed6: e8        -         inx
3ed7: 4c ce 3e  -         jmp !loop-
3eda: 68        -         pla
3edb: 8d 86 02  -         sta foreground_color
3ede: 4c f4 3e  -         jmp !done+
3ee1: 20 20     - memory: .fill spacing, spacebar
3ee3: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
3ef0: 2e 2e 2e  -         .text "..."
3ef3: 00        -         .byte NULL
3ef4: 20 08 10  -         jsr SW16
3ef7: 15        -         .byte opcode(op, register)
3ef8: 0a 00     -         .word address.getValue()
3efa: b0        -         .byte opcode($b0, register) }
3efb: b5        -         .byte opcode($b0, register) }
3efc: 05 07     -         .byte $05, effective_address(ea,*) }
3efe: 01 00     -         .byte $01, effective_address(ea,*) }
3f00: 10        -         .byte opcode(op, register)
3f01: dc fe     -         .word address.getValue()
3f03: 01 05     -         .byte $01, effective_address(ea,*) }
3f05: 10        -         .byte opcode(op, register)
3f06: 23 01     -         .word address.getValue()
3f08: 01 00     -         .byte $01, effective_address(ea,*) }
3f0a: 00        -         .byte $00 }
3f0b: ee 43 52  -         inc TEST_COUNT
3f0e: ad 86 02  -         lda foreground_color
3f11: 48        -         pha
3f12: a9 0e     -         lda #color
3f14: 8d 86 02  -         sta foreground_color
3f17: a2 00     -         ldx #$00
3f19: bd 2c 3f  -         lda msg,x
3f1c: f0 07     -         beq !done+
3f1e: 20 d2 ff  -         jsr kernal_chrout
3f21: e8        -         inx
3f22: 4c 19 3f  -         jmp !loop-
3f25: 68        -         pla
3f26: 8d 86 02  -         sta foreground_color
3f29: 4c 30 3f  -         jmp !done+
3f2c: 20        - memory: .byte spacebar
3f2d: 32        -         .text description
3f2e: 3a        -         .text ":"
3f2f: 00        -         .byte NULL
3f30: a6 17     -         ldx rl(register.getValue())
3f32: a4 18     -         ldy rh(register.getValue())
3f34: e0 23     -         cpx #<value
3f36: d0 25     -         bne !failed+
3f38: c0 01     -         cpy #>value
3f3a: d0 21     -         bne !failed+
3f3c: ee 44 52  -         inc TEST_PASS_COUNT
3f3f: ad 86 02  -         lda foreground_color
3f42: 48        -         pha
3f43: a9 05     -         lda #color
3f45: 8d 86 02  -         sta foreground_color
3f48: a2 00     -         ldx #$00
3f4a: bd 3f 52  -         lda msg,x
3f4d: f0 07     -         beq !done+
3f4f: 20 d2 ff  -         jsr kernal_chrout
3f52: e8        -         inx
3f53: 4c 4a 3f  -         jmp !loop-
3f56: 68        -         pla
3f57: 8d 86 02  -         sta foreground_color
3f5a: 4c 78 3f  -         jmp !done+
3f5d: ad 86 02  -         lda foreground_color
3f60: 48        -         pha
3f61: a9 02     -         lda #color
3f63: 8d 86 02  -         sta foreground_color
3f66: a2 00     -         ldx #$00
3f68: bd 41 52  -         lda msg,x
3f6b: f0 07     -         beq !done+
3f6d: 20 d2 ff  -         jsr kernal_chrout
3f70: e8        -         inx
3f71: 4c 68 3f  -         jmp !loop-
3f74: 68        -         pla
3f75: 8d 86 02  -         sta foreground_color
3f78: a2 00     -         ldx #$00
3f7a: bd 89 3f  -         lda msg,x
3f7d: f0 07     -         beq !done+
3f7f: 20 d2 ff  -         jsr kernal_chrout
3f82: e8        -         inx
3f83: 4c 7a 3f  -         jmp !loop-
3f86: 4c 8b 3f  -         jmp !done+
3f89: 0d 00     - memory: .byte RETURN, NULL
3f8b: ae 45 52  -         ldx TEST_NAME_COUNT
3f8e: e0 15     -         cpx #TESTS_PER_PAGE
3f90: d0 5d     -         bne !exit+
3f92: ad 86 02  -         lda foreground_color
3f95: 48        -         pha
3f96: a9 01     -         lda #color
3f98: 8d 86 02  -         sta foreground_color
3f9b: a2 00     -         ldx #$00
3f9d: bd b0 3f  -         lda msg,x
3fa0: f0 07     -         beq !done+
3fa2: 20 d2 ff  -         jsr kernal_chrout
3fa5: e8        -         inx
3fa6: 4c 9d 3f  -         jmp !loop-
3fa9: 68        -         pla
3faa: 8d 86 02  -         sta foreground_color
3fad: 4c cf 3f  -         jmp !no_key+
3fb0: 0d        - memory: .byte RETURN
3fb1: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3fc1: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3fcd: 0d 00     -         .byte RETURN, NULL
3fcf: 20 9f ff  -         jsr scnkey  // scan keyboard
3fd2: 20 e4 ff  -         jsr getin	// put result into A
3fd5: f0 f8     -         beq !no_key-
3fd7: a2 00     -         ldx #$00
3fd9: bd e8 3f  -         lda msg,x
3fdc: f0 07     -         beq !done+
3fde: 20 d2 ff  -         jsr kernal_chrout
3fe1: e8        -         inx
3fe2: 4c d9 3f  -         jmp !loop-
3fe5: 4c ea 3f  -         jmp !done+
3fe8: 0d 00     - newline:.byte RETURN, NULL
3fea: a2 00     -         ldx #$00
3fec: 8e 45 52  -         stx TEST_NAME_COUNT
3fef: 60        -         rts
3ff0: ee 45 52  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
3ff3: ad 86 02  -         lda foreground_color
3ff6: 48        -         pha
3ff7: a9 0f     -         lda #color
3ff9: 8d 86 02  -         sta foreground_color
3ffc: a2 00     -         ldx #$00
3ffe: bd 11 40  -         lda msg,x
4001: f0 07     -         beq !done+
4003: 20 d2 ff  -         jsr kernal_chrout
4006: e8        -         inx
4007: 4c fe 3f  -         jmp !loop-
400a: 68        -         pla
400b: 8d 86 02  -         sta foreground_color
400e: 4c 22 40  -         jmp !done+
4011: 20 20     - memory: .fill spacing, spacebar
4013: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
401e: 2e 2e 2e  -         .text "..."
4021: 00        -         .byte NULL
4022: 20 08 10  -         jsr SW16
4025: b0        -         .byte opcode($b0, register) }
4026: 06 07     -         .byte $06, effective_address(ea,*) }
4028: 01 00     -         .byte $01, effective_address(ea,*) }
402a: 10        -         .byte opcode(op, register)
402b: dc fe     -         .word address.getValue()
402d: 01 05     -         .byte $01, effective_address(ea,*) }
402f: 10        -         .byte opcode(op, register)
4030: 23 01     -         .word address.getValue()
4032: 01 00     -         .byte $01, effective_address(ea,*) }
4034: 00        -         .byte $00 }
4035: ee 43 52  -         inc TEST_COUNT
4038: ad 86 02  -         lda foreground_color
403b: 48        -         pha
403c: a9 0e     -         lda #color
403e: 8d 86 02  -         sta foreground_color
4041: a2 00     -         ldx #$00
4043: bd 56 40  -         lda msg,x
4046: f0 07     -         beq !done+
4048: 20 d2 ff  -         jsr kernal_chrout
404b: e8        -         inx
404c: 4c 43 40  -         jmp !loop-
404f: 68        -         pla
4050: 8d 86 02  -         sta foreground_color
4053: 4c 5a 40  -         jmp !done+
4056: 20        - memory: .byte spacebar
4057: 32        -         .text description
4058: 3a        -         .text ":"
4059: 00        -         .byte NULL
405a: a6 17     -         ldx rl(register.getValue())
405c: a4 18     -         ldy rh(register.getValue())
405e: e0 23     -         cpx #<value
4060: d0 25     -         bne !failed+
4062: c0 01     -         cpy #>value
4064: d0 21     -         bne !failed+
4066: ee 44 52  -         inc TEST_PASS_COUNT
4069: ad 86 02  -         lda foreground_color
406c: 48        -         pha
406d: a9 05     -         lda #color
406f: 8d 86 02  -         sta foreground_color
4072: a2 00     -         ldx #$00
4074: bd 3f 52  -         lda msg,x
4077: f0 07     -         beq !done+
4079: 20 d2 ff  -         jsr kernal_chrout
407c: e8        -         inx
407d: 4c 74 40  -         jmp !loop-
4080: 68        -         pla
4081: 8d 86 02  -         sta foreground_color
4084: 4c a2 40  -         jmp !done+
4087: ad 86 02  -         lda foreground_color
408a: 48        -         pha
408b: a9 02     -         lda #color
408d: 8d 86 02  -         sta foreground_color
4090: a2 00     -         ldx #$00
4092: bd 41 52  -         lda msg,x
4095: f0 07     -         beq !done+
4097: 20 d2 ff  -         jsr kernal_chrout
409a: e8        -         inx
409b: 4c 92 40  -         jmp !loop-
409e: 68        -         pla
409f: 8d 86 02  -         sta foreground_color
40a2: a2 00     -         ldx #$00
40a4: bd b3 40  -         lda msg,x
40a7: f0 07     -         beq !done+
40a9: 20 d2 ff  -         jsr kernal_chrout
40ac: e8        -         inx
40ad: 4c a4 40  -         jmp !loop-
40b0: 4c b5 40  -         jmp !done+
40b3: 0d 00     - memory: .byte RETURN, NULL
40b5: ae 45 52  -         ldx TEST_NAME_COUNT
40b8: e0 15     -         cpx #TESTS_PER_PAGE
40ba: d0 5d     -         bne !exit+
40bc: ad 86 02  -         lda foreground_color
40bf: 48        -         pha
40c0: a9 01     -         lda #color
40c2: 8d 86 02  -         sta foreground_color
40c5: a2 00     -         ldx #$00
40c7: bd da 40  -         lda msg,x
40ca: f0 07     -         beq !done+
40cc: 20 d2 ff  -         jsr kernal_chrout
40cf: e8        -         inx
40d0: 4c c7 40  -         jmp !loop-
40d3: 68        -         pla
40d4: 8d 86 02  -         sta foreground_color
40d7: 4c f9 40  -         jmp !no_key+
40da: 0d        - memory: .byte RETURN
40db: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
40eb: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
40f7: 0d 00     -         .byte RETURN, NULL
40f9: 20 9f ff  -         jsr scnkey  // scan keyboard
40fc: 20 e4 ff  -         jsr getin	// put result into A
40ff: f0 f8     -         beq !no_key-
4101: a2 00     -         ldx #$00
4103: bd 12 41  -         lda msg,x
4106: f0 07     -         beq !done+
4108: 20 d2 ff  -         jsr kernal_chrout
410b: e8        -         inx
410c: 4c 03 41  -         jmp !loop-
410f: 4c 14 41  -         jmp !done+
4112: 0d 00     - newline:.byte RETURN, NULL
4114: a2 00     -         ldx #$00
4116: 8e 45 52  -         stx TEST_NAME_COUNT
4119: 60        -         rts
411a: ee 45 52  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
411d: ad 86 02  -         lda foreground_color
4120: 48        -         pha
4121: a9 0f     -         lda #color
4123: 8d 86 02  -         sta foreground_color
4126: a2 00     -         ldx #$00
4128: bd 3b 41  -         lda msg,x
412b: f0 07     -         beq !done+
412d: 20 d2 ff  -         jsr kernal_chrout
4130: e8        -         inx
4131: 4c 28 41  -         jmp !loop-
4134: 68        -         pla
4135: 8d 86 02  -         sta foreground_color
4138: 4c 4d 41  -         jmp !done+
413b: 20 20     - memory: .fill spacing, spacebar
413d: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
4149: 2e 2e 2e  -         .text "..."
414c: 00        -         .byte NULL
414d: 20 08 10  -         jsr SW16
4150: 15        -         .byte opcode(op, register)
4151: 0a 00     -         .word address.getValue()
4153: b0        -         .byte opcode($b0, register) }
4154: a5        -         .byte opcode($a0, register) }
4155: 07 07     -         .byte $07, effective_address(ea,*) }
4157: 01 00     -         .byte $01, effective_address(ea,*) }
4159: 10        -         .byte opcode(op, register)
415a: dc fe     -         .word address.getValue()
415c: 01 05     -         .byte $01, effective_address(ea,*) }
415e: 10        -         .byte opcode(op, register)
415f: 23 01     -         .word address.getValue()
4161: 01 00     -         .byte $01, effective_address(ea,*) }
4163: 00        -         .byte $00 }
4164: ee 43 52  -         inc TEST_COUNT
4167: ad 86 02  -         lda foreground_color
416a: 48        -         pha
416b: a9 0e     -         lda #color
416d: 8d 86 02  -         sta foreground_color
4170: a2 00     -         ldx #$00
4172: bd 85 41  -         lda msg,x
4175: f0 07     -         beq !done+
4177: 20 d2 ff  -         jsr kernal_chrout
417a: e8        -         inx
417b: 4c 72 41  -         jmp !loop-
417e: 68        -         pla
417f: 8d 86 02  -         sta foreground_color
4182: 4c 89 41  -         jmp !done+
4185: 20        - memory: .byte spacebar
4186: 32        -         .text description
4187: 3a        -         .text ":"
4188: 00        -         .byte NULL
4189: a6 17     -         ldx rl(register.getValue())
418b: a4 18     -         ldy rh(register.getValue())
418d: e0 23     -         cpx #<value
418f: d0 25     -         bne !failed+
4191: c0 01     -         cpy #>value
4193: d0 21     -         bne !failed+
4195: ee 44 52  -         inc TEST_PASS_COUNT
4198: ad 86 02  -         lda foreground_color
419b: 48        -         pha
419c: a9 05     -         lda #color
419e: 8d 86 02  -         sta foreground_color
41a1: a2 00     -         ldx #$00
41a3: bd 3f 52  -         lda msg,x
41a6: f0 07     -         beq !done+
41a8: 20 d2 ff  -         jsr kernal_chrout
41ab: e8        -         inx
41ac: 4c a3 41  -         jmp !loop-
41af: 68        -         pla
41b0: 8d 86 02  -         sta foreground_color
41b3: 4c d1 41  -         jmp !done+
41b6: ad 86 02  -         lda foreground_color
41b9: 48        -         pha
41ba: a9 02     -         lda #color
41bc: 8d 86 02  -         sta foreground_color
41bf: a2 00     -         ldx #$00
41c1: bd 41 52  -         lda msg,x
41c4: f0 07     -         beq !done+
41c6: 20 d2 ff  -         jsr kernal_chrout
41c9: e8        -         inx
41ca: 4c c1 41  -         jmp !loop-
41cd: 68        -         pla
41ce: 8d 86 02  -         sta foreground_color
41d1: a2 00     -         ldx #$00
41d3: bd e2 41  -         lda msg,x
41d6: f0 07     -         beq !done+
41d8: 20 d2 ff  -         jsr kernal_chrout
41db: e8        -         inx
41dc: 4c d3 41  -         jmp !loop-
41df: 4c e4 41  -         jmp !done+
41e2: 0d 00     - memory: .byte RETURN, NULL
41e4: ae 45 52  -         ldx TEST_NAME_COUNT
41e7: e0 15     -         cpx #TESTS_PER_PAGE
41e9: d0 5d     -         bne !exit+
41eb: ad 86 02  -         lda foreground_color
41ee: 48        -         pha
41ef: a9 01     -         lda #color
41f1: 8d 86 02  -         sta foreground_color
41f4: a2 00     -         ldx #$00
41f6: bd 09 42  -         lda msg,x
41f9: f0 07     -         beq !done+
41fb: 20 d2 ff  -         jsr kernal_chrout
41fe: e8        -         inx
41ff: 4c f6 41  -         jmp !loop-
4202: 68        -         pla
4203: 8d 86 02  -         sta foreground_color
4206: 4c 28 42  -         jmp !no_key+
4209: 0d        - memory: .byte RETURN
420a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
421a: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4226: 0d 00     -         .byte RETURN, NULL
4228: 20 9f ff  -         jsr scnkey  // scan keyboard
422b: 20 e4 ff  -         jsr getin	// put result into A
422e: f0 f8     -         beq !no_key-
4230: a2 00     -         ldx #$00
4232: bd 41 42  -         lda msg,x
4235: f0 07     -         beq !done+
4237: 20 d2 ff  -         jsr kernal_chrout
423a: e8        -         inx
423b: 4c 32 42  -         jmp !loop-
423e: 4c 43 42  -         jmp !done+
4241: 0d 00     - newline:.byte RETURN, NULL
4243: a2 00     -         ldx #$00
4245: 8e 45 52  -         stx TEST_NAME_COUNT
4248: 60        -         rts
4249: ee 45 52  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
424c: ad 86 02  -         lda foreground_color
424f: 48        -         pha
4250: a9 0f     -         lda #color
4252: 8d 86 02  -         sta foreground_color
4255: a2 00     -         ldx #$00
4257: bd 6a 42  -         lda msg,x
425a: f0 07     -         beq !done+
425c: 20 d2 ff  -         jsr kernal_chrout
425f: e8        -         inx
4260: 4c 57 42  -         jmp !loop-
4263: 68        -         pla
4264: 8d 86 02  -         sta foreground_color
4267: 4c 7c 42  -         jmp !done+
426a: 20 20     - memory: .fill spacing, spacebar
426c: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
4278: 2e 2e 2e  -         .text "..."
427b: 00        -         .byte NULL
427c: 20 08 10  -         jsr SW16
427f: 15        -         .byte opcode(op, register)
4280: 01 00     -         .word address.getValue()
4282: b0        -         .byte opcode($b0, register) }
4283: b5        -         .byte opcode($b0, register) }
4284: 08 07     -         .byte $08, effective_address(ea,*) }
4286: 01 00     -         .byte $01, effective_address(ea,*) }
4288: 10        -         .byte opcode(op, register)
4289: dc fe     -         .word address.getValue()
428b: 01 05     -         .byte $01, effective_address(ea,*) }
428d: 10        -         .byte opcode(op, register)
428e: 23 01     -         .word address.getValue()
4290: 01 00     -         .byte $01, effective_address(ea,*) }
4292: 00        -         .byte $00 }
4293: ee 43 52  -         inc TEST_COUNT
4296: ad 86 02  -         lda foreground_color
4299: 48        -         pha
429a: a9 0e     -         lda #color
429c: 8d 86 02  -         sta foreground_color
429f: a2 00     -         ldx #$00
42a1: bd b4 42  -         lda msg,x
42a4: f0 07     -         beq !done+
42a6: 20 d2 ff  -         jsr kernal_chrout
42a9: e8        -         inx
42aa: 4c a1 42  -         jmp !loop-
42ad: 68        -         pla
42ae: 8d 86 02  -         sta foreground_color
42b1: 4c b8 42  -         jmp !done+
42b4: 20        - memory: .byte spacebar
42b5: 32        -         .text description
42b6: 3a        -         .text ":"
42b7: 00        -         .byte NULL
42b8: a6 17     -         ldx rl(register.getValue())
42ba: a4 18     -         ldy rh(register.getValue())
42bc: e0 23     -         cpx #<value
42be: d0 25     -         bne !failed+
42c0: c0 01     -         cpy #>value
42c2: d0 21     -         bne !failed+
42c4: ee 44 52  -         inc TEST_PASS_COUNT
42c7: ad 86 02  -         lda foreground_color
42ca: 48        -         pha
42cb: a9 05     -         lda #color
42cd: 8d 86 02  -         sta foreground_color
42d0: a2 00     -         ldx #$00
42d2: bd 3f 52  -         lda msg,x
42d5: f0 07     -         beq !done+
42d7: 20 d2 ff  -         jsr kernal_chrout
42da: e8        -         inx
42db: 4c d2 42  -         jmp !loop-
42de: 68        -         pla
42df: 8d 86 02  -         sta foreground_color
42e2: 4c 00 43  -         jmp !done+
42e5: ad 86 02  -         lda foreground_color
42e8: 48        -         pha
42e9: a9 02     -         lda #color
42eb: 8d 86 02  -         sta foreground_color
42ee: a2 00     -         ldx #$00
42f0: bd 41 52  -         lda msg,x
42f3: f0 07     -         beq !done+
42f5: 20 d2 ff  -         jsr kernal_chrout
42f8: e8        -         inx
42f9: 4c f0 42  -         jmp !loop-
42fc: 68        -         pla
42fd: 8d 86 02  -         sta foreground_color
4300: a2 00     -         ldx #$00
4302: bd 11 43  -         lda msg,x
4305: f0 07     -         beq !done+
4307: 20 d2 ff  -         jsr kernal_chrout
430a: e8        -         inx
430b: 4c 02 43  -         jmp !loop-
430e: 4c 13 43  -         jmp !done+
4311: 0d 00     - memory: .byte RETURN, NULL
4313: ae 45 52  -         ldx TEST_NAME_COUNT
4316: e0 15     -         cpx #TESTS_PER_PAGE
4318: d0 5d     -         bne !exit+
431a: ad 86 02  -         lda foreground_color
431d: 48        -         pha
431e: a9 01     -         lda #color
4320: 8d 86 02  -         sta foreground_color
4323: a2 00     -         ldx #$00
4325: bd 38 43  -         lda msg,x
4328: f0 07     -         beq !done+
432a: 20 d2 ff  -         jsr kernal_chrout
432d: e8        -         inx
432e: 4c 25 43  -         jmp !loop-
4331: 68        -         pla
4332: 8d 86 02  -         sta foreground_color
4335: 4c 57 43  -         jmp !no_key+
4338: 0d        - memory: .byte RETURN
4339: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4349: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4355: 0d 00     -         .byte RETURN, NULL
4357: 20 9f ff  -         jsr scnkey  // scan keyboard
435a: 20 e4 ff  -         jsr getin	// put result into A
435d: f0 f8     -         beq !no_key-
435f: a2 00     -         ldx #$00
4361: bd 70 43  -         lda msg,x
4364: f0 07     -         beq !done+
4366: 20 d2 ff  -         jsr kernal_chrout
4369: e8        -         inx
436a: 4c 61 43  -         jmp !loop-
436d: 4c 72 43  -         jmp !done+
4370: 0d 00     - newline:.byte RETURN, NULL
4372: a2 00     -         ldx #$00
4374: 8e 45 52  -         stx TEST_NAME_COUNT
4377: 60        -         rts
4378: ee 45 52  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
437b: ad 86 02  -         lda foreground_color
437e: 48        -         pha
437f: a9 0f     -         lda #color
4381: 8d 86 02  -         sta foreground_color
4384: a2 00     -         ldx #$00
4386: bd 99 43  -         lda msg,x
4389: f0 07     -         beq !done+
438b: 20 d2 ff  -         jsr kernal_chrout
438e: e8        -         inx
438f: 4c 86 43  -         jmp !loop-
4392: 68        -         pla
4393: 8d 86 02  -         sta foreground_color
4396: 4c ac 43  -         jmp !done+
4399: 20 20     - memory: .fill spacing, spacebar
439b: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
43a8: 2e 2e 2e  -         .text "..."
43ab: 00        -         .byte NULL
43ac: 20 08 10  -         jsr SW16
43af: 15        -         .byte opcode(op, register)
43b0: 02 00     -         .word address.getValue()
43b2: b0        -         .byte opcode($b0, register) }
43b3: b5        -         .byte opcode($b0, register) }
43b4: 09 07     -         .byte $09, effective_address(ea,*) }
43b6: 01 00     -         .byte $01, effective_address(ea,*) }
43b8: 10        -         .byte opcode(op, register)
43b9: dc fe     -         .word address.getValue()
43bb: 01 05     -         .byte $01, effective_address(ea,*) }
43bd: 10        -         .byte opcode(op, register)
43be: 23 01     -         .word address.getValue()
43c0: 01 00     -         .byte $01, effective_address(ea,*) }
43c2: 00        -         .byte $00 }
43c3: ee 43 52  -         inc TEST_COUNT
43c6: ad 86 02  -         lda foreground_color
43c9: 48        -         pha
43ca: a9 0e     -         lda #color
43cc: 8d 86 02  -         sta foreground_color
43cf: a2 00     -         ldx #$00
43d1: bd e4 43  -         lda msg,x
43d4: f0 07     -         beq !done+
43d6: 20 d2 ff  -         jsr kernal_chrout
43d9: e8        -         inx
43da: 4c d1 43  -         jmp !loop-
43dd: 68        -         pla
43de: 8d 86 02  -         sta foreground_color
43e1: 4c e8 43  -         jmp !done+
43e4: 20        - memory: .byte spacebar
43e5: 32        -         .text description
43e6: 3a        -         .text ":"
43e7: 00        -         .byte NULL
43e8: a6 17     -         ldx rl(register.getValue())
43ea: a4 18     -         ldy rh(register.getValue())
43ec: e0 23     -         cpx #<value
43ee: d0 25     -         bne !failed+
43f0: c0 01     -         cpy #>value
43f2: d0 21     -         bne !failed+
43f4: ee 44 52  -         inc TEST_PASS_COUNT
43f7: ad 86 02  -         lda foreground_color
43fa: 48        -         pha
43fb: a9 05     -         lda #color
43fd: 8d 86 02  -         sta foreground_color
4400: a2 00     -         ldx #$00
4402: bd 3f 52  -         lda msg,x
4405: f0 07     -         beq !done+
4407: 20 d2 ff  -         jsr kernal_chrout
440a: e8        -         inx
440b: 4c 02 44  -         jmp !loop-
440e: 68        -         pla
440f: 8d 86 02  -         sta foreground_color
4412: 4c 30 44  -         jmp !done+
4415: ad 86 02  -         lda foreground_color
4418: 48        -         pha
4419: a9 02     -         lda #color
441b: 8d 86 02  -         sta foreground_color
441e: a2 00     -         ldx #$00
4420: bd 41 52  -         lda msg,x
4423: f0 07     -         beq !done+
4425: 20 d2 ff  -         jsr kernal_chrout
4428: e8        -         inx
4429: 4c 20 44  -         jmp !loop-
442c: 68        -         pla
442d: 8d 86 02  -         sta foreground_color
4430: a2 00     -         ldx #$00
4432: bd 41 44  -         lda msg,x
4435: f0 07     -         beq !done+
4437: 20 d2 ff  -         jsr kernal_chrout
443a: e8        -         inx
443b: 4c 32 44  -         jmp !loop-
443e: 4c 43 44  -         jmp !done+
4441: 0d 00     - memory: .byte RETURN, NULL
4443: ae 45 52  -         ldx TEST_NAME_COUNT
4446: e0 15     -         cpx #TESTS_PER_PAGE
4448: d0 5d     -         bne !exit+
444a: ad 86 02  -         lda foreground_color
444d: 48        -         pha
444e: a9 01     -         lda #color
4450: 8d 86 02  -         sta foreground_color
4453: a2 00     -         ldx #$00
4455: bd 68 44  -         lda msg,x
4458: f0 07     -         beq !done+
445a: 20 d2 ff  -         jsr kernal_chrout
445d: e8        -         inx
445e: 4c 55 44  -         jmp !loop-
4461: 68        -         pla
4462: 8d 86 02  -         sta foreground_color
4465: 4c 87 44  -         jmp !no_key+
4468: 0d        - memory: .byte RETURN
4469: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4479: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4485: 0d 00     -         .byte RETURN, NULL
4487: 20 9f ff  -         jsr scnkey  // scan keyboard
448a: 20 e4 ff  -         jsr getin	// put result into A
448d: f0 f8     -         beq !no_key-
448f: a2 00     -         ldx #$00
4491: bd a0 44  -         lda msg,x
4494: f0 07     -         beq !done+
4496: 20 d2 ff  -         jsr kernal_chrout
4499: e8        -         inx
449a: 4c 91 44  -         jmp !loop-
449d: 4c a2 44  -         jmp !done+
44a0: 0d 00     - newline:.byte RETURN, NULL
44a2: a2 00     -         ldx #$00
44a4: 8e 45 52  -         stx TEST_NAME_COUNT
44a7: 60        -         rts
44a8: ee 45 52  - BREAK_TEST:inc TEST_NAME_COUNT
44ab: ad 86 02  -         lda foreground_color
44ae: 48        -         pha
44af: a9 0f     -         lda #color
44b1: 8d 86 02  -         sta foreground_color
44b4: a2 00     -         ldx #$00
44b6: bd c9 44  -         lda msg,x
44b9: f0 07     -         beq !done+
44bb: 20 d2 ff  -         jsr kernal_chrout
44be: e8        -         inx
44bf: 4c b6 44  -         jmp !loop-
44c2: 68        -         pla
44c3: 8d 86 02  -         sta foreground_color
44c6: 4c d4 44  -         jmp !done+
44c9: 20 20     - memory: .fill spacing, spacebar
44cb: 42 52 45 41 4b                                   -         .text name
44d0: 2e 2e 2e  -         .text "..."
44d3: 00        -         .byte NULL
44d4: a9 35     -         lda #<handler
44d6: 8d 16 03  -         sta address
44d9: a9 12     -         lda #>handler
44db: 8d 17 03  -         sta address+1
44de: 20 08 10  -         jsr SW16
44e1: 10        -         .byte opcode(op, register)
44e2: ed fe     -         .word address.getValue()
44e4: 0a        -         .byte $0a }
44e5: 0d        -         .byte $0d
44e6: 45        -         .byte >(address.getValue()-1)
44e7: d1        -         .byte <(address.getValue()-1)
44e8: 10        -         .byte opcode(op, register)
44e9: 23 01     -         .word address.getValue()
44eb: 0a        -         .byte $0a }
44ec: 00        -         .byte $00 }
44ed: ee 43 52  -         inc TEST_COUNT
44f0: ad 86 02  -         lda foreground_color
44f3: 48        -         pha
44f4: a9 0e     -         lda #color
44f6: 8d 86 02  -         sta foreground_color
44f9: a2 00     -         ldx #$00
44fb: bd 0e 45  -         lda msg,x
44fe: f0 07     -         beq !done+
4500: 20 d2 ff  -         jsr kernal_chrout
4503: e8        -         inx
4504: 4c fb 44  -         jmp !loop-
4507: 68        -         pla
4508: 8d 86 02  -         sta foreground_color
450b: 4c 12 45  -         jmp !done+
450e: 20        - memory: .byte spacebar
450f: 32        -         .text description
4510: 3a        -         .text ":"
4511: 00        -         .byte NULL
4512: a6 17     -         ldx rl(register.getValue())
4514: a4 18     -         ldy rh(register.getValue())
4516: e0 23     -         cpx #<value
4518: d0 25     -         bne !failed+
451a: c0 01     -         cpy #>value
451c: d0 21     -         bne !failed+
451e: ee 44 52  -         inc TEST_PASS_COUNT
4521: ad 86 02  -         lda foreground_color
4524: 48        -         pha
4525: a9 05     -         lda #color
4527: 8d 86 02  -         sta foreground_color
452a: a2 00     -         ldx #$00
452c: bd 3f 52  -         lda msg,x
452f: f0 07     -         beq !done+
4531: 20 d2 ff  -         jsr kernal_chrout
4534: e8        -         inx
4535: 4c 2c 45  -         jmp !loop-
4538: 68        -         pla
4539: 8d 86 02  -         sta foreground_color
453c: 4c 5a 45  -         jmp !done+
453f: ad 86 02  -         lda foreground_color
4542: 48        -         pha
4543: a9 02     -         lda #color
4545: 8d 86 02  -         sta foreground_color
4548: a2 00     -         ldx #$00
454a: bd 41 52  -         lda msg,x
454d: f0 07     -         beq !done+
454f: 20 d2 ff  -         jsr kernal_chrout
4552: e8        -         inx
4553: 4c 4a 45  -         jmp !loop-
4556: 68        -         pla
4557: 8d 86 02  -         sta foreground_color
455a: a2 00     -         ldx #$00
455c: bd 6b 45  -         lda msg,x
455f: f0 07     -         beq !done+
4561: 20 d2 ff  -         jsr kernal_chrout
4564: e8        -         inx
4565: 4c 5c 45  -         jmp !loop-
4568: 4c 6d 45  -         jmp !done+
456b: 0d 00     - memory: .byte RETURN, NULL
456d: ae 45 52  -         ldx TEST_NAME_COUNT
4570: e0 15     -         cpx #TESTS_PER_PAGE
4572: d0 5d     -         bne !exit+
4574: ad 86 02  -         lda foreground_color
4577: 48        -         pha
4578: a9 01     -         lda #color
457a: 8d 86 02  -         sta foreground_color
457d: a2 00     -         ldx #$00
457f: bd 92 45  -         lda msg,x
4582: f0 07     -         beq !done+
4584: 20 d2 ff  -         jsr kernal_chrout
4587: e8        -         inx
4588: 4c 7f 45  -         jmp !loop-
458b: 68        -         pla
458c: 8d 86 02  -         sta foreground_color
458f: 4c b1 45  -         jmp !no_key+
4592: 0d        - memory: .byte RETURN
4593: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
45a3: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
45af: 0d 00     -         .byte RETURN, NULL
45b1: 20 9f ff  -         jsr scnkey  // scan keyboard
45b4: 20 e4 ff  -         jsr getin	// put result into A
45b7: f0 f8     -         beq !no_key-
45b9: a2 00     -         ldx #$00
45bb: bd ca 45  -         lda msg,x
45be: f0 07     -         beq !done+
45c0: 20 d2 ff  -         jsr kernal_chrout
45c3: e8        -         inx
45c4: 4c bb 45  -         jmp !loop-
45c7: 4c cc 45  -         jmp !done+
45ca: 0d 00     - newline:.byte RETURN, NULL
45cc: a2 00     -         ldx #$00
45ce: 8e 45 52  -         stx TEST_NAME_COUNT
45d1: 60        -         rts
45d2: ee 43 52  -         inc TEST_COUNT
45d5: ad 86 02  -         lda foreground_color
45d8: 48        -         pha
45d9: a9 0e     -         lda #color
45db: 8d 86 02  -         sta foreground_color
45de: a2 00     -         ldx #$00
45e0: bd f3 45  -         lda msg,x
45e3: f0 07     -         beq !done+
45e5: 20 d2 ff  -         jsr kernal_chrout
45e8: e8        -         inx
45e9: 4c e0 45  -         jmp !loop-
45ec: 68        -         pla
45ed: 8d 86 02  -         sta foreground_color
45f0: 4c f7 45  -         jmp !done+
45f3: 20        - memory: .byte spacebar
45f4: 31        -         .text description
45f5: 3a        -         .text ":"
45f6: 00        -         .byte NULL
45f7: a6 17     -         ldx rl(register.getValue())
45f9: a4 18     -         ldy rh(register.getValue())
45fb: e0 ed     -         cpx #<value
45fd: d0 25     -         bne !failed+
45ff: c0 fe     -         cpy #>value
4601: d0 21     -         bne !failed+
4603: ee 44 52  -         inc TEST_PASS_COUNT
4606: ad 86 02  -         lda foreground_color
4609: 48        -         pha
460a: a9 05     -         lda #color
460c: 8d 86 02  -         sta foreground_color
460f: a2 00     -         ldx #$00
4611: bd 3f 52  -         lda msg,x
4614: f0 07     -         beq !done+
4616: 20 d2 ff  -         jsr kernal_chrout
4619: e8        -         inx
461a: 4c 11 46  -         jmp !loop-
461d: 68        -         pla
461e: 8d 86 02  -         sta foreground_color
4621: 4c 3f 46  -         jmp !done+
4624: ad 86 02  -         lda foreground_color
4627: 48        -         pha
4628: a9 02     -         lda #color
462a: 8d 86 02  -         sta foreground_color
462d: a2 00     -         ldx #$00
462f: bd 41 52  -         lda msg,x
4632: f0 07     -         beq !done+
4634: 20 d2 ff  -         jsr kernal_chrout
4637: e8        -         inx
4638: 4c 2f 46  -         jmp !loop-
463b: 68        -         pla
463c: 8d 86 02  -         sta foreground_color
463f: 60        -         rts
4640: ee 45 52  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
4643: ad 86 02  -         lda foreground_color
4646: 48        -         pha
4647: a9 0f     -         lda #color
4649: 8d 86 02  -         sta foreground_color
464c: a2 00     -         ldx #$00
464e: bd 61 46  -         lda msg,x
4651: f0 07     -         beq !done+
4653: 20 d2 ff  -         jsr kernal_chrout
4656: e8        -         inx
4657: 4c 4e 46  -         jmp !loop-
465a: 68        -         pla
465b: 8d 86 02  -         sta foreground_color
465e: 4c 70 46  -         jmp !done+
4661: 20 20     - memory: .fill spacing, spacebar
4663: 49 4e 54 20 42 52 45 41 4b                       -         .text name
466c: 2e 2e 2e  -         .text "..."
466f: 00        -         .byte NULL
4670: a9 35     -         lda #<handler
4672: 8d 16 03  -         sta address
4675: a9 12     -         lda #>handler
4677: 8d 17 03  -         sta address+1
467a: 20 08 10  -         jsr SW16
467d: 10        -         .byte opcode(op, register)
467e: ed fe     -         .word address.getValue()
4680: 0a        -         .byte $0a }
4681: 0d        -         .byte $0d
4682: 47        -         .byte >(address.getValue()-1)
4683: 03        -         .byte <(address.getValue()-1)
4684: 10        -         .byte opcode(op, register)
4685: 23 01     -         .word address.getValue()
4687: 0a        -         .byte $0a }
4688: 0d        -         .byte $0d
4689: 47        -         .byte >(address.getValue()-1)
468a: 71        -         .byte <(address.getValue()-1)
468b: 00        -         .byte $00 }
468c: a2 00     -         ldx #$00
468e: bd 9d 46  -         lda msg,x
4691: f0 07     -         beq !done+
4693: 20 d2 ff  -         jsr kernal_chrout
4696: e8        -         inx
4697: 4c 8e 46  -         jmp !loop-
469a: 4c 9f 46  -         jmp !done+
469d: 0d 00     - memory: .byte RETURN, NULL
469f: ae 45 52  -         ldx TEST_NAME_COUNT
46a2: e0 15     -         cpx #TESTS_PER_PAGE
46a4: d0 5d     -         bne !exit+
46a6: ad 86 02  -         lda foreground_color
46a9: 48        -         pha
46aa: a9 01     -         lda #color
46ac: 8d 86 02  -         sta foreground_color
46af: a2 00     -         ldx #$00
46b1: bd c4 46  -         lda msg,x
46b4: f0 07     -         beq !done+
46b6: 20 d2 ff  -         jsr kernal_chrout
46b9: e8        -         inx
46ba: 4c b1 46  -         jmp !loop-
46bd: 68        -         pla
46be: 8d 86 02  -         sta foreground_color
46c1: 4c e3 46  -         jmp !no_key+
46c4: 0d        - memory: .byte RETURN
46c5: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
46d5: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
46e1: 0d 00     -         .byte RETURN, NULL
46e3: 20 9f ff  -         jsr scnkey  // scan keyboard
46e6: 20 e4 ff  -         jsr getin	// put result into A
46e9: f0 f8     -         beq !no_key-
46eb: a2 00     -         ldx #$00
46ed: bd fc 46  -         lda msg,x
46f0: f0 07     -         beq !done+
46f2: 20 d2 ff  -         jsr kernal_chrout
46f5: e8        -         inx
46f6: 4c ed 46  -         jmp !loop-
46f9: 4c fe 46  -         jmp !done+
46fc: 0d 00     - newline:.byte RETURN, NULL
46fe: a2 00     -         ldx #$00
4700: 8e 45 52  -         stx TEST_NAME_COUNT
4703: 60        -         rts
4704: ee 43 52  -         inc TEST_COUNT
4707: ad 86 02  -         lda foreground_color
470a: 48        -         pha
470b: a9 0e     -         lda #color
470d: 8d 86 02  -         sta foreground_color
4710: a2 00     -         ldx #$00
4712: bd 25 47  -         lda msg,x
4715: f0 07     -         beq !done+
4717: 20 d2 ff  -         jsr kernal_chrout
471a: e8        -         inx
471b: 4c 12 47  -         jmp !loop-
471e: 68        -         pla
471f: 8d 86 02  -         sta foreground_color
4722: 4c 29 47  -         jmp !done+
4725: 20        - memory: .byte spacebar
4726: 31        -         .text description
4727: 3a        -         .text ":"
4728: 00        -         .byte NULL
4729: a6 17     -         ldx rl(register.getValue())
472b: a4 18     -         ldy rh(register.getValue())
472d: e0 ed     -         cpx #<value
472f: d0 25     -         bne !failed+
4731: c0 fe     -         cpy #>value
4733: d0 21     -         bne !failed+
4735: ee 44 52  -         inc TEST_PASS_COUNT
4738: ad 86 02  -         lda foreground_color
473b: 48        -         pha
473c: a9 05     -         lda #color
473e: 8d 86 02  -         sta foreground_color
4741: a2 00     -         ldx #$00
4743: bd 3f 52  -         lda msg,x
4746: f0 07     -         beq !done+
4748: 20 d2 ff  -         jsr kernal_chrout
474b: e8        -         inx
474c: 4c 43 47  -         jmp !loop-
474f: 68        -         pla
4750: 8d 86 02  -         sta foreground_color
4753: 4c 71 47  -         jmp !done+
4756: ad 86 02  -         lda foreground_color
4759: 48        -         pha
475a: a9 02     -         lda #color
475c: 8d 86 02  -         sta foreground_color
475f: a2 00     -         ldx #$00
4761: bd 41 52  -         lda msg,x
4764: f0 07     -         beq !done+
4766: 20 d2 ff  -         jsr kernal_chrout
4769: e8        -         inx
476a: 4c 61 47  -         jmp !loop-
476d: 68        -         pla
476e: 8d 86 02  -         sta foreground_color
4771: 60        -         rts
4772: ee 43 52  -         inc TEST_COUNT
4775: ad 86 02  -         lda foreground_color
4778: 48        -         pha
4779: a9 0e     -         lda #color
477b: 8d 86 02  -         sta foreground_color
477e: a2 00     -         ldx #$00
4780: bd 93 47  -         lda msg,x
4783: f0 07     -         beq !done+
4785: 20 d2 ff  -         jsr kernal_chrout
4788: e8        -         inx
4789: 4c 80 47  -         jmp !loop-
478c: 68        -         pla
478d: 8d 86 02  -         sta foreground_color
4790: 4c 97 47  -         jmp !done+
4793: 20        - memory: .byte spacebar
4794: 32        -         .text description
4795: 3a        -         .text ":"
4796: 00        -         .byte NULL
4797: a6 17     -         ldx rl(register.getValue())
4799: a4 18     -         ldy rh(register.getValue())
479b: e0 23     -         cpx #<value
479d: d0 25     -         bne !failed+
479f: c0 01     -         cpy #>value
47a1: d0 21     -         bne !failed+
47a3: ee 44 52  -         inc TEST_PASS_COUNT
47a6: ad 86 02  -         lda foreground_color
47a9: 48        -         pha
47aa: a9 05     -         lda #color
47ac: 8d 86 02  -         sta foreground_color
47af: a2 00     -         ldx #$00
47b1: bd 3f 52  -         lda msg,x
47b4: f0 07     -         beq !done+
47b6: 20 d2 ff  -         jsr kernal_chrout
47b9: e8        -         inx
47ba: 4c b1 47  -         jmp !loop-
47bd: 68        -         pla
47be: 8d 86 02  -         sta foreground_color
47c1: 4c df 47  -         jmp !done+
47c4: ad 86 02  -         lda foreground_color
47c7: 48        -         pha
47c8: a9 02     -         lda #color
47ca: 8d 86 02  -         sta foreground_color
47cd: a2 00     -         ldx #$00
47cf: bd 41 52  -         lda msg,x
47d2: f0 07     -         beq !done+
47d4: 20 d2 ff  -         jsr kernal_chrout
47d7: e8        -         inx
47d8: 4c cf 47  -         jmp !loop-
47db: 68        -         pla
47dc: 8d 86 02  -         sta foreground_color
47df: 60        -         rts
47e0: ee 45 52  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
47e3: ad 86 02  -         lda foreground_color
47e6: 48        -         pha
47e7: a9 0f     -         lda #color
47e9: 8d 86 02  -         sta foreground_color
47ec: a2 00     -         ldx #$00
47ee: bd 01 48  -         lda msg,x
47f1: f0 07     -         beq !done+
47f3: 20 d2 ff  -         jsr kernal_chrout
47f6: e8        -         inx
47f7: 4c ee 47  -         jmp !loop-
47fa: 68        -         pla
47fb: 8d 86 02  -         sta foreground_color
47fe: 4c 14 48  -         jmp !done+
4801: 20 20     - memory: .fill spacing, spacebar
4803: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
4810: 2e 2e 2e  -         .text "..."
4813: 00        -         .byte NULL
4814: 20 08 10  -         jsr SW16
4817: 15        -         .byte opcode(op, register)
4818: 61 52     -         .word address.getValue()
481a: 14        -         .byte opcode(op, register)
481b: 71 52     -         .word address.getValue()
481d: 16        -         .byte opcode(op, register)
481e: 71 52     -         .word address.getValue()
4820: 0c 04     -         .byte $0c, effective_address(ea,*) }
4822: 00        -         .byte $00 }
4823: 4c 2d 48  -         jmp !done+
4826: 45        -         .byte opcode($40, register) }
4827: 56        -         .byte opcode($50, register) }
4828: 24        -         .byte opcode($20, register) }
4829: d5        -         .byte opcode($d0, register) }
482a: 04 fa     -         .byte $04, effective_address(ea,*) }
482c: 0b        -         .byte $0b }
482d: ee 43 52  -         inc TEST_COUNT
4830: ad 86 02  -         lda foreground_color
4833: 48        -         pha
4834: a9 0e     -         lda #color
4836: 8d 86 02  -         sta foreground_color
4839: a2 00     -         ldx #$00
483b: bd 4e 48  -         lda msg,x
483e: f0 07     -         beq !done+
4840: 20 d2 ff  -         jsr kernal_chrout
4843: e8        -         inx
4844: 4c 3b 48  -         jmp !loop-
4847: 68        -         pla
4848: 8d 86 02  -         sta foreground_color
484b: 4c 54 48  -         jmp !done+
484e: 20        - memory: .byte spacebar
484f: 4d 45 4d  -         .text description
4852: 3a        -         .text ":"
4853: 00        -         .byte NULL
4854: a2 ff     -         ldx #$ff
4856: e8        -         inx
4857: e0 10     -         cpx #size
4859: f0 0b     -         beq !success+
485b: bd 61 52  -         lda source,x
485e: dd 71 52  -         cmp dest,x
4861: f0 f3     -         beq !loop-
4863: 4c 87 48  -         jmp !failed+
4866: ee 44 52  -         inc TEST_PASS_COUNT
4869: ad 86 02  -         lda foreground_color
486c: 48        -         pha
486d: a9 05     -         lda #color
486f: 8d 86 02  -         sta foreground_color
4872: a2 00     -         ldx #$00
4874: bd 3f 52  -         lda msg,x
4877: f0 07     -         beq !done+
4879: 20 d2 ff  -         jsr kernal_chrout
487c: e8        -         inx
487d: 4c 74 48  -         jmp !loop-
4880: 68        -         pla
4881: 8d 86 02  -         sta foreground_color
4884: 4c a2 48  -         jmp !done+
4887: ad 86 02  -         lda foreground_color
488a: 48        -         pha
488b: a9 02     -         lda #color
488d: 8d 86 02  -         sta foreground_color
4890: a2 00     -         ldx #$00
4892: bd 41 52  -         lda msg,x
4895: f0 07     -         beq !done+
4897: 20 d2 ff  -         jsr kernal_chrout
489a: e8        -         inx
489b: 4c 92 48  -         jmp !loop-
489e: 68        -         pla
489f: 8d 86 02  -         sta foreground_color
48a2: a2 00     -         ldx #$00
48a4: bd b3 48  -         lda msg,x
48a7: f0 07     -         beq !done+
48a9: 20 d2 ff  -         jsr kernal_chrout
48ac: e8        -         inx
48ad: 4c a4 48  -         jmp !loop-
48b0: 4c b5 48  -         jmp !done+
48b3: 0d 00     - memory: .byte RETURN, NULL
48b5: ae 45 52  -         ldx TEST_NAME_COUNT
48b8: e0 15     -         cpx #TESTS_PER_PAGE
48ba: d0 5d     -         bne !exit+
48bc: ad 86 02  -         lda foreground_color
48bf: 48        -         pha
48c0: a9 01     -         lda #color
48c2: 8d 86 02  -         sta foreground_color
48c5: a2 00     -         ldx #$00
48c7: bd da 48  -         lda msg,x
48ca: f0 07     -         beq !done+
48cc: 20 d2 ff  -         jsr kernal_chrout
48cf: e8        -         inx
48d0: 4c c7 48  -         jmp !loop-
48d3: 68        -         pla
48d4: 8d 86 02  -         sta foreground_color
48d7: 4c f9 48  -         jmp !no_key+
48da: 0d        - memory: .byte RETURN
48db: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
48eb: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
48f7: 0d 00     -         .byte RETURN, NULL
48f9: 20 9f ff  -         jsr scnkey  // scan keyboard
48fc: 20 e4 ff  -         jsr getin	// put result into A
48ff: f0 f8     -         beq !no_key-
4901: a2 00     -         ldx #$00
4903: bd 12 49  -         lda msg,x
4906: f0 07     -         beq !done+
4908: 20 d2 ff  -         jsr kernal_chrout
490b: e8        -         inx
490c: 4c 03 49  -         jmp !loop-
490f: 4c 14 49  -         jmp !done+
4912: 0d 00     - newline:.byte RETURN, NULL
4914: a2 00     -         ldx #$00
4916: 8e 45 52  -         stx TEST_NAME_COUNT
4919: 60        -         rts
491a: ee 45 52  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
491d: ad 86 02  -         lda foreground_color
4920: 48        -         pha
4921: a9 0f     -         lda #color
4923: 8d 86 02  -         sta foreground_color
4926: a2 00     -         ldx #$00
4928: bd 3b 49  -         lda msg,x
492b: f0 07     -         beq !done+
492d: 20 d2 ff  -         jsr kernal_chrout
4930: e8        -         inx
4931: 4c 28 49  -         jmp !loop-
4934: 68        -         pla
4935: 8d 86 02  -         sta foreground_color
4938: 4c 50 49  -         jmp !done+
493b: 20 20     - memory: .fill spacing, spacebar
493d: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
494c: 2e 2e 2e  -         .text "..."
494f: 00        -         .byte NULL
4950: 20 08 10  -         jsr SW16
4953: 10        -         .byte opcode(op, register)
4954: 34 12     -         .word address.getValue()
4956: 0c 04     -         .byte $0c, effective_address(ea,*) }
4958: 00        -         .byte $00 }
4959: 4c 60 49  -         jmp !done+
495c: 10        -         .byte opcode(op, register)
495d: 78 56     -         .word address.getValue()
495f: 0b        -         .byte $0b }
4960: ee 43 52  -         inc TEST_COUNT
4963: ad 86 02  -         lda foreground_color
4966: 48        -         pha
4967: a9 0e     -         lda #color
4969: 8d 86 02  -         sta foreground_color
496c: a2 00     -         ldx #$00
496e: bd 81 49  -         lda msg,x
4971: f0 07     -         beq !done+
4973: 20 d2 ff  -         jsr kernal_chrout
4976: e8        -         inx
4977: 4c 6e 49  -         jmp !loop-
497a: 68        -         pla
497b: 8d 86 02  -         sta foreground_color
497e: 4c 87 49  -         jmp !done+
4981: 20        - memory: .byte spacebar
4982: 53 55 42  -         .text description
4985: 3a        -         .text ":"
4986: 00        -         .byte NULL
4987: a6 17     -         ldx rl(register.getValue())
4989: a4 18     -         ldy rh(register.getValue())
498b: e0 78     -         cpx #<value
498d: d0 25     -         bne !failed+
498f: c0 56     -         cpy #>value
4991: d0 21     -         bne !failed+
4993: ee 44 52  -         inc TEST_PASS_COUNT
4996: ad 86 02  -         lda foreground_color
4999: 48        -         pha
499a: a9 05     -         lda #color
499c: 8d 86 02  -         sta foreground_color
499f: a2 00     -         ldx #$00
49a1: bd 3f 52  -         lda msg,x
49a4: f0 07     -         beq !done+
49a6: 20 d2 ff  -         jsr kernal_chrout
49a9: e8        -         inx
49aa: 4c a1 49  -         jmp !loop-
49ad: 68        -         pla
49ae: 8d 86 02  -         sta foreground_color
49b1: 4c cf 49  -         jmp !done+
49b4: ad 86 02  -         lda foreground_color
49b7: 48        -         pha
49b8: a9 02     -         lda #color
49ba: 8d 86 02  -         sta foreground_color
49bd: a2 00     -         ldx #$00
49bf: bd 41 52  -         lda msg,x
49c2: f0 07     -         beq !done+
49c4: 20 d2 ff  -         jsr kernal_chrout
49c7: e8        -         inx
49c8: 4c bf 49  -         jmp !loop-
49cb: 68        -         pla
49cc: 8d 86 02  -         sta foreground_color
49cf: a2 00     -         ldx #$00
49d1: bd e0 49  -         lda msg,x
49d4: f0 07     -         beq !done+
49d6: 20 d2 ff  -         jsr kernal_chrout
49d9: e8        -         inx
49da: 4c d1 49  -         jmp !loop-
49dd: 4c e2 49  -         jmp !done+
49e0: 0d 00     - memory: .byte RETURN, NULL
49e2: ae 45 52  -         ldx TEST_NAME_COUNT
49e5: e0 15     -         cpx #TESTS_PER_PAGE
49e7: d0 5d     -         bne !exit+
49e9: ad 86 02  -         lda foreground_color
49ec: 48        -         pha
49ed: a9 01     -         lda #color
49ef: 8d 86 02  -         sta foreground_color
49f2: a2 00     -         ldx #$00
49f4: bd 07 4a  -         lda msg,x
49f7: f0 07     -         beq !done+
49f9: 20 d2 ff  -         jsr kernal_chrout
49fc: e8        -         inx
49fd: 4c f4 49  -         jmp !loop-
4a00: 68        -         pla
4a01: 8d 86 02  -         sta foreground_color
4a04: 4c 26 4a  -         jmp !no_key+
4a07: 0d        - memory: .byte RETURN
4a08: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4a18: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4a24: 0d 00     -         .byte RETURN, NULL
4a26: 20 9f ff  -         jsr scnkey  // scan keyboard
4a29: 20 e4 ff  -         jsr getin	// put result into A
4a2c: f0 f8     -         beq !no_key-
4a2e: a2 00     -         ldx #$00
4a30: bd 3f 4a  -         lda msg,x
4a33: f0 07     -         beq !done+
4a35: 20 d2 ff  -         jsr kernal_chrout
4a38: e8        -         inx
4a39: 4c 30 4a  -         jmp !loop-
4a3c: 4c 41 4a  -         jmp !done+
4a3f: 0d 00     - newline:.byte RETURN, NULL
4a41: a2 00     -         ldx #$00
4a43: 8e 45 52  -         stx TEST_NAME_COUNT
4a46: 60        -         rts
4a47: ee 45 52  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
4a4a: ad 86 02  -         lda foreground_color
4a4d: 48        -         pha
4a4e: a9 0f     -         lda #color
4a50: 8d 86 02  -         sta foreground_color
4a53: a2 00     -         ldx #$00
4a55: bd 68 4a  -         lda msg,x
4a58: f0 07     -         beq !done+
4a5a: 20 d2 ff  -         jsr kernal_chrout
4a5d: e8        -         inx
4a5e: 4c 55 4a  -         jmp !loop-
4a61: 68        -         pla
4a62: 8d 86 02  -         sta foreground_color
4a65: 4c 7b 4a  -         jmp !done+
4a68: 20 20     - memory: .fill spacing, spacebar
4a6a: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
4a77: 2e 2e 2e  -         .text "..."
4a7a: 00        -         .byte NULL
4a7b: 20 08 10  -         jsr SW16
4a7e: 15        -         .byte opcode(op, register)
4a7f: 00 00     -         .word address.getValue()
4a81: 10        -         .byte opcode(op, register)
4a82: 6c 4b     -         .word address.getValue()
4a84: 3f        -         .byte opcode($30, register) }
4a85: 00        -         .byte $00 }
4a86: ee 43 52  -         inc TEST_COUNT
4a89: ad 86 02  -         lda foreground_color
4a8c: 48        -         pha
4a8d: a9 0e     -         lda #color
4a8f: 8d 86 02  -         sta foreground_color
4a92: a2 00     -         ldx #$00
4a94: bd a7 4a  -         lda msg,x
4a97: f0 07     -         beq !done+
4a99: 20 d2 ff  -         jsr kernal_chrout
4a9c: e8        -         inx
4a9d: 4c 94 4a  -         jmp !loop-
4aa0: 68        -         pla
4aa1: 8d 86 02  -         sta foreground_color
4aa4: 4c ad 4a  -         jmp !done+
4aa7: 20        - memory: .byte spacebar
4aa8: 53 45 54  -         .text description
4aab: 3a        -         .text ":"
4aac: 00        -         .byte NULL
4aad: a6 21     -         ldx rl(register.getValue())
4aaf: a4 22     -         ldy rh(register.getValue())
4ab1: e0 34     -         cpx #<value
4ab3: d0 25     -         bne !failed+
4ab5: c0 12     -         cpy #>value
4ab7: d0 21     -         bne !failed+
4ab9: ee 44 52  -         inc TEST_PASS_COUNT
4abc: ad 86 02  -         lda foreground_color
4abf: 48        -         pha
4ac0: a9 05     -         lda #color
4ac2: 8d 86 02  -         sta foreground_color
4ac5: a2 00     -         ldx #$00
4ac7: bd 3f 52  -         lda msg,x
4aca: f0 07     -         beq !done+
4acc: 20 d2 ff  -         jsr kernal_chrout
4acf: e8        -         inx
4ad0: 4c c7 4a  -         jmp !loop-
4ad3: 68        -         pla
4ad4: 8d 86 02  -         sta foreground_color
4ad7: 4c f5 4a  -         jmp !done+
4ada: ad 86 02  -         lda foreground_color
4add: 48        -         pha
4ade: a9 02     -         lda #color
4ae0: 8d 86 02  -         sta foreground_color
4ae3: a2 00     -         ldx #$00
4ae5: bd 41 52  -         lda msg,x
4ae8: f0 07     -         beq !done+
4aea: 20 d2 ff  -         jsr kernal_chrout
4aed: e8        -         inx
4aee: 4c e5 4a  -         jmp !loop-
4af1: 68        -         pla
4af2: 8d 86 02  -         sta foreground_color
4af5: a2 00     -         ldx #$00
4af7: bd 06 4b  -         lda msg,x
4afa: f0 07     -         beq !done+
4afc: 20 d2 ff  -         jsr kernal_chrout
4aff: e8        -         inx
4b00: 4c f7 4a  -         jmp !loop-
4b03: 4c 08 4b  -         jmp !done+
4b06: 0d 00     - memory: .byte RETURN, NULL
4b08: ae 45 52  -         ldx TEST_NAME_COUNT
4b0b: e0 15     -         cpx #TESTS_PER_PAGE
4b0d: d0 5d     -         bne !exit+
4b0f: ad 86 02  -         lda foreground_color
4b12: 48        -         pha
4b13: a9 01     -         lda #color
4b15: 8d 86 02  -         sta foreground_color
4b18: a2 00     -         ldx #$00
4b1a: bd 2d 4b  -         lda msg,x
4b1d: f0 07     -         beq !done+
4b1f: 20 d2 ff  -         jsr kernal_chrout
4b22: e8        -         inx
4b23: 4c 1a 4b  -         jmp !loop-
4b26: 68        -         pla
4b27: 8d 86 02  -         sta foreground_color
4b2a: 4c 4c 4b  -         jmp !no_key+
4b2d: 0d        - memory: .byte RETURN
4b2e: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4b3e: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4b4a: 0d 00     -         .byte RETURN, NULL
4b4c: 20 9f ff  -         jsr scnkey  // scan keyboard
4b4f: 20 e4 ff  -         jsr getin	// put result into A
4b52: f0 f8     -         beq !no_key-
4b54: a2 00     -         ldx #$00
4b56: bd 65 4b  -         lda msg,x
4b59: f0 07     -         beq !done+
4b5b: 20 d2 ff  -         jsr kernal_chrout
4b5e: e8        -         inx
4b5f: 4c 56 4b  -         jmp !loop-
4b62: 4c 67 4b  -         jmp !done+
4b65: 0d 00     - newline:.byte RETURN, NULL
4b67: a2 00     -         ldx #$00
4b69: 8e 45 52  -         stx TEST_NAME_COUNT
4b6c: 60        -         rts
4b6d: 15        -         .byte opcode(op, register)
4b6e: 34 12     -         .word address.getValue()
4b70: 10        -         .byte opcode(op, register)
4b71: 84 4a     -         .word address.getValue()
4b73: 3f        -         .byte opcode($30, register) }
4b74: ee 45 52  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
4b77: ad 86 02  -         lda foreground_color
4b7a: 48        -         pha
4b7b: a9 0f     -         lda #color
4b7d: 8d 86 02  -         sta foreground_color
4b80: a2 00     -         ldx #$00
4b82: bd 95 4b  -         lda msg,x
4b85: f0 07     -         beq !done+
4b87: 20 d2 ff  -         jsr kernal_chrout
4b8a: e8        -         inx
4b8b: 4c 82 4b  -         jmp !loop-
4b8e: 68        -         pla
4b8f: 8d 86 02  -         sta foreground_color
4b92: 4c a7 4b  -         jmp !done+
4b95: 20 20     - memory: .fill spacing, spacebar
4b97: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
4ba3: 2e 2e 2e  -         .text "..."
4ba6: 00        -         .byte NULL
4ba7: 20 08 10  -         jsr SW16
4baa: 15        -         .byte opcode(op, register)
4bab: 21 43     -         .word address.getValue()
4bad: 0d        -         .byte $0d
4bae: 4c        -         .byte >(address.getValue()-1)
4baf: a1        -         .byte <(address.getValue()-1)
4bb0: 15        -         .byte opcode(op, register)
4bb1: 34 12     -         .word address.getValue()
4bb3: 0d        -         .byte $0d
4bb4: 4d        -         .byte >(address.getValue()-1)
4bb5: 13        -         .byte <(address.getValue()-1)
4bb6: 15        -         .byte opcode(op, register)
4bb7: 21 43     -         .word address.getValue()
4bb9: 00        -         .byte $00 }
4bba: ee 43 52  -         inc TEST_COUNT
4bbd: ad 86 02  -         lda foreground_color
4bc0: 48        -         pha
4bc1: a9 0e     -         lda #color
4bc3: 8d 86 02  -         sta foreground_color
4bc6: a2 00     -         ldx #$00
4bc8: bd db 4b  -         lda msg,x
4bcb: f0 07     -         beq !done+
4bcd: 20 d2 ff  -         jsr kernal_chrout
4bd0: e8        -         inx
4bd1: 4c c8 4b  -         jmp !loop-
4bd4: 68        -         pla
4bd5: 8d 86 02  -         sta foreground_color
4bd8: 4c e2 4b  -         jmp !done+
4bdb: 20        - memory: .byte spacebar
4bdc: 53 41 4d 45                                      -         .text description
4be0: 3a        -         .text ":"
4be1: 00        -         .byte NULL
4be2: a6 21     -         ldx rl(register.getValue())
4be4: a4 22     -         ldy rh(register.getValue())
4be6: e0 21     -         cpx #<value
4be8: d0 25     -         bne !failed+
4bea: c0 43     -         cpy #>value
4bec: d0 21     -         bne !failed+
4bee: ee 44 52  -         inc TEST_PASS_COUNT
4bf1: ad 86 02  -         lda foreground_color
4bf4: 48        -         pha
4bf5: a9 05     -         lda #color
4bf7: 8d 86 02  -         sta foreground_color
4bfa: a2 00     -         ldx #$00
4bfc: bd 3f 52  -         lda msg,x
4bff: f0 07     -         beq !done+
4c01: 20 d2 ff  -         jsr kernal_chrout
4c04: e8        -         inx
4c05: 4c fc 4b  -         jmp !loop-
4c08: 68        -         pla
4c09: 8d 86 02  -         sta foreground_color
4c0c: 4c 2a 4c  -         jmp !done+
4c0f: ad 86 02  -         lda foreground_color
4c12: 48        -         pha
4c13: a9 02     -         lda #color
4c15: 8d 86 02  -         sta foreground_color
4c18: a2 00     -         ldx #$00
4c1a: bd 41 52  -         lda msg,x
4c1d: f0 07     -         beq !done+
4c1f: 20 d2 ff  -         jsr kernal_chrout
4c22: e8        -         inx
4c23: 4c 1a 4c  -         jmp !loop-
4c26: 68        -         pla
4c27: 8d 86 02  -         sta foreground_color
4c2a: a2 00     -         ldx #$00
4c2c: bd 3b 4c  -         lda msg,x
4c2f: f0 07     -         beq !done+
4c31: 20 d2 ff  -         jsr kernal_chrout
4c34: e8        -         inx
4c35: 4c 2c 4c  -         jmp !loop-
4c38: 4c 3d 4c  -         jmp !done+
4c3b: 0d 00     - memory: .byte RETURN, NULL
4c3d: ae 45 52  -         ldx TEST_NAME_COUNT
4c40: e0 15     -         cpx #TESTS_PER_PAGE
4c42: d0 5d     -         bne !exit+
4c44: ad 86 02  -         lda foreground_color
4c47: 48        -         pha
4c48: a9 01     -         lda #color
4c4a: 8d 86 02  -         sta foreground_color
4c4d: a2 00     -         ldx #$00
4c4f: bd 62 4c  -         lda msg,x
4c52: f0 07     -         beq !done+
4c54: 20 d2 ff  -         jsr kernal_chrout
4c57: e8        -         inx
4c58: 4c 4f 4c  -         jmp !loop-
4c5b: 68        -         pla
4c5c: 8d 86 02  -         sta foreground_color
4c5f: 4c 81 4c  -         jmp !no_key+
4c62: 0d        - memory: .byte RETURN
4c63: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4c73: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4c7f: 0d 00     -         .byte RETURN, NULL
4c81: 20 9f ff  -         jsr scnkey  // scan keyboard
4c84: 20 e4 ff  -         jsr getin	// put result into A
4c87: f0 f8     -         beq !no_key-
4c89: a2 00     -         ldx #$00
4c8b: bd 9a 4c  -         lda msg,x
4c8e: f0 07     -         beq !done+
4c90: 20 d2 ff  -         jsr kernal_chrout
4c93: e8        -         inx
4c94: 4c 8b 4c  -         jmp !loop-
4c97: 4c 9c 4c  -         jmp !done+
4c9a: 0d 00     - newline:.byte RETURN, NULL
4c9c: a2 00     -         ldx #$00
4c9e: 8e 45 52  -         stx TEST_NAME_COUNT
4ca1: 60        -         rts
4ca2: ee 43 52  -         inc TEST_COUNT
4ca5: ad 86 02  -         lda foreground_color
4ca8: 48        -         pha
4ca9: a9 0e     -         lda #color
4cab: 8d 86 02  -         sta foreground_color
4cae: a2 00     -         ldx #$00
4cb0: bd c3 4c  -         lda msg,x
4cb3: f0 07     -         beq !done+
4cb5: 20 d2 ff  -         jsr kernal_chrout
4cb8: e8        -         inx
4cb9: 4c b0 4c  -         jmp !loop-
4cbc: 68        -         pla
4cbd: 8d 86 02  -         sta foreground_color
4cc0: 4c cb 4c  -         jmp !done+
4cc3: 20        - memory: .byte spacebar
4cc4: 56 41 4c 55 45                                   -         .text description
4cc9: 3a        -         .text ":"
4cca: 00        -         .byte NULL
4ccb: a6 21     -         ldx rl(register.getValue())
4ccd: a4 22     -         ldy rh(register.getValue())
4ccf: e0 21     -         cpx #<value
4cd1: d0 25     -         bne !failed+
4cd3: c0 43     -         cpy #>value
4cd5: d0 21     -         bne !failed+
4cd7: ee 44 52  -         inc TEST_PASS_COUNT
4cda: ad 86 02  -         lda foreground_color
4cdd: 48        -         pha
4cde: a9 05     -         lda #color
4ce0: 8d 86 02  -         sta foreground_color
4ce3: a2 00     -         ldx #$00
4ce5: bd 3f 52  -         lda msg,x
4ce8: f0 07     -         beq !done+
4cea: 20 d2 ff  -         jsr kernal_chrout
4ced: e8        -         inx
4cee: 4c e5 4c  -         jmp !loop-
4cf1: 68        -         pla
4cf2: 8d 86 02  -         sta foreground_color
4cf5: 4c 13 4d  -         jmp !done+
4cf8: ad 86 02  -         lda foreground_color
4cfb: 48        -         pha
4cfc: a9 02     -         lda #color
4cfe: 8d 86 02  -         sta foreground_color
4d01: a2 00     -         ldx #$00
4d03: bd 41 52  -         lda msg,x
4d06: f0 07     -         beq !done+
4d08: 20 d2 ff  -         jsr kernal_chrout
4d0b: e8        -         inx
4d0c: 4c 03 4d  -         jmp !loop-
4d0f: 68        -         pla
4d10: 8d 86 02  -         sta foreground_color
4d13: 60        -         rts
4d14: a9 fe     -         lda #>VALUE_3
4d16: 85 22     -         sta rh(REGISTER)
4d18: a9 ed     -         lda #<VALUE_3
4d1a: 85 21     -         sta rl(REGISTER)
4d1c: a6 21     -         ldx rl(register.getValue())
4d1e: a4 22     -         ldy rh(register.getValue())
4d20: ee 43 52  -         inc TEST_COUNT
4d23: ad 86 02  -         lda foreground_color
4d26: 48        -         pha
4d27: a9 0e     -         lda #color
4d29: 8d 86 02  -         sta foreground_color
4d2c: a2 00     -         ldx #$00
4d2e: bd 41 4d  -         lda msg,x
4d31: f0 07     -         beq !done+
4d33: 20 d2 ff  -         jsr kernal_chrout
4d36: e8        -         inx
4d37: 4c 2e 4d  -         jmp !loop-
4d3a: 68        -         pla
4d3b: 8d 86 02  -         sta foreground_color
4d3e: 4c 48 4d  -         jmp !done+
4d41: 20        - memory: .byte spacebar
4d42: 36 35 30 32                                      -         .text description
4d46: 3a        -         .text ":"
4d47: 00        -         .byte NULL
4d48: a6 21     -         ldx rl(register.getValue())
4d4a: a4 22     -         ldy rh(register.getValue())
4d4c: e0 ed     -         cpx #<value
4d4e: d0 25     -         bne !failed+
4d50: c0 fe     -         cpy #>value
4d52: d0 21     -         bne !failed+
4d54: ee 44 52  -         inc TEST_PASS_COUNT
4d57: ad 86 02  -         lda foreground_color
4d5a: 48        -         pha
4d5b: a9 05     -         lda #color
4d5d: 8d 86 02  -         sta foreground_color
4d60: a2 00     -         ldx #$00
4d62: bd 3f 52  -         lda msg,x
4d65: f0 07     -         beq !done+
4d67: 20 d2 ff  -         jsr kernal_chrout
4d6a: e8        -         inx
4d6b: 4c 62 4d  -         jmp !loop-
4d6e: 68        -         pla
4d6f: 8d 86 02  -         sta foreground_color
4d72: 4c 90 4d  -         jmp !done+
4d75: ad 86 02  -         lda foreground_color
4d78: 48        -         pha
4d79: a9 02     -         lda #color
4d7b: 8d 86 02  -         sta foreground_color
4d7e: a2 00     -         ldx #$00
4d80: bd 41 52  -         lda msg,x
4d83: f0 07     -         beq !done+
4d85: 20 d2 ff  -         jsr kernal_chrout
4d88: e8        -         inx
4d89: 4c 80 4d  -         jmp !loop-
4d8c: 68        -         pla
4d8d: 8d 86 02  -         sta foreground_color
4d90: 60        -         rts
4d91: ee 45 52  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
4d94: ad 86 02  -         lda foreground_color
4d97: 48        -         pha
4d98: a9 0f     -         lda #color
4d9a: 8d 86 02  -         sta foreground_color
4d9d: a2 00     -         ldx #$00
4d9f: bd b2 4d  -         lda msg,x
4da2: f0 07     -         beq !done+
4da4: 20 d2 ff  -         jsr kernal_chrout
4da7: e8        -         inx
4da8: 4c 9f 4d  -         jmp !loop-
4dab: 68        -         pla
4dac: 8d 86 02  -         sta foreground_color
4daf: 4c c4 4d  -         jmp !done+
4db2: 20 20     - memory: .fill spacing, spacebar
4db4: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
4dc0: 2e 2e 2e  -         .text "..."
4dc3: 00        -         .byte NULL
4dc4: 20 08 10  -         jsr SW16
4dc7: 0f        -         .byte $0f
4dc8: 5b 52     -         .word address.getValue()
4dca: 21        -         .byte rl(register.getValue())
4dcb: 00        -         .byte $00 }
4dcc: ee 43 52  -         inc TEST_COUNT
4dcf: ad 86 02  -         lda foreground_color
4dd2: 48        -         pha
4dd3: a9 0e     -         lda #color
4dd5: 8d 86 02  -         sta foreground_color
4dd8: a2 00     -         ldx #$00
4dda: bd ed 4d  -         lda msg,x
4ddd: f0 07     -         beq !done+
4ddf: 20 d2 ff  -         jsr kernal_chrout
4de2: e8        -         inx
4de3: 4c da 4d  -         jmp !loop-
4de6: 68        -         pla
4de7: 8d 86 02  -         sta foreground_color
4dea: 4c f8 4d  -         jmp !done+
4ded: 20        - memory: .byte spacebar
4dee: 54 45 53 54 20 4d 45 4d                          -         .text description
4df6: 3a        -         .text ":"
4df7: 00        -         .byte NULL
4df8: a6 21     -         ldx rl(register.getValue())
4dfa: a4 22     -         ldy rh(register.getValue())
4dfc: cc 5b 52  -         cpy address
4dff: d0 26     -         bne !failed+
4e01: ec 5c 52  -         cpx address+1
4e04: d0 21     -         bne !failed+
4e06: ee 44 52  -         inc TEST_PASS_COUNT
4e09: ad 86 02  -         lda foreground_color
4e0c: 48        -         pha
4e0d: a9 05     -         lda #color
4e0f: 8d 86 02  -         sta foreground_color
4e12: a2 00     -         ldx #$00
4e14: bd 3f 52  -         lda msg,x
4e17: f0 07     -         beq !done+
4e19: 20 d2 ff  -         jsr kernal_chrout
4e1c: e8        -         inx
4e1d: 4c 14 4e  -         jmp !loop-
4e20: 68        -         pla
4e21: 8d 86 02  -         sta foreground_color
4e24: 4c 42 4e  -         jmp !done+
4e27: ad 86 02  -         lda foreground_color
4e2a: 48        -         pha
4e2b: a9 02     -         lda #color
4e2d: 8d 86 02  -         sta foreground_color
4e30: a2 00     -         ldx #$00
4e32: bd 41 52  -         lda msg,x
4e35: f0 07     -         beq !done+
4e37: 20 d2 ff  -         jsr kernal_chrout
4e3a: e8        -         inx
4e3b: 4c 32 4e  -         jmp !loop-
4e3e: 68        -         pla
4e3f: 8d 86 02  -         sta foreground_color
4e42: a2 00     -         ldx #$00
4e44: bd 53 4e  -         lda msg,x
4e47: f0 07     -         beq !done+
4e49: 20 d2 ff  -         jsr kernal_chrout
4e4c: e8        -         inx
4e4d: 4c 44 4e  -         jmp !loop-
4e50: 4c 55 4e  -         jmp !done+
4e53: 0d 00     - memory: .byte RETURN, NULL
4e55: ae 45 52  -         ldx TEST_NAME_COUNT
4e58: e0 15     -         cpx #TESTS_PER_PAGE
4e5a: d0 5d     -         bne !exit+
4e5c: ad 86 02  -         lda foreground_color
4e5f: 48        -         pha
4e60: a9 01     -         lda #color
4e62: 8d 86 02  -         sta foreground_color
4e65: a2 00     -         ldx #$00
4e67: bd 7a 4e  -         lda msg,x
4e6a: f0 07     -         beq !done+
4e6c: 20 d2 ff  -         jsr kernal_chrout
4e6f: e8        -         inx
4e70: 4c 67 4e  -         jmp !loop-
4e73: 68        -         pla
4e74: 8d 86 02  -         sta foreground_color
4e77: 4c 99 4e  -         jmp !no_key+
4e7a: 0d        - memory: .byte RETURN
4e7b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4e8b: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4e97: 0d 00     -         .byte RETURN, NULL
4e99: 20 9f ff  -         jsr scnkey  // scan keyboard
4e9c: 20 e4 ff  -         jsr getin	// put result into A
4e9f: f0 f8     -         beq !no_key-
4ea1: a2 00     -         ldx #$00
4ea3: bd b2 4e  -         lda msg,x
4ea6: f0 07     -         beq !done+
4ea8: 20 d2 ff  -         jsr kernal_chrout
4eab: e8        -         inx
4eac: 4c a3 4e  -         jmp !loop-
4eaf: 4c b4 4e  -         jmp !done+
4eb2: 0d 00     - newline:.byte RETURN, NULL
4eb4: a2 00     -         ldx #$00
4eb6: 8e 45 52  -         stx TEST_NAME_COUNT
4eb9: 60        -         rts
4eba: ee 45 52  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
4ebd: ad 86 02  -         lda foreground_color
4ec0: 48        -         pha
4ec1: a9 0f     -         lda #color
4ec3: 8d 86 02  -         sta foreground_color
4ec6: a2 00     -         ldx #$00
4ec8: bd db 4e  -         lda msg,x
4ecb: f0 07     -         beq !done+
4ecd: 20 d2 ff  -         jsr kernal_chrout
4ed0: e8        -         inx
4ed1: 4c c8 4e  -         jmp !loop-
4ed4: 68        -         pla
4ed5: 8d 86 02  -         sta foreground_color
4ed8: 4c eb 4e  -         jmp !done+
4edb: 20 20     - memory: .fill spacing, spacebar
4edd: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
4ee7: 2e 2e 2e  -         .text "..."
4eea: 00        -         .byte NULL
4eeb: 20 08 10  -         jsr SW16
4eee: 0e        -         .byte $0e
4eef: 5b 52     -         .word address.getValue()
4ef1: 21        -         .byte rl(register.getValue())
4ef2: 00        -         .byte $00 }
4ef3: ee 43 52  -         inc TEST_COUNT
4ef6: ad 86 02  -         lda foreground_color
4ef9: 48        -         pha
4efa: a9 0e     -         lda #color
4efc: 8d 86 02  -         sta foreground_color
4eff: a2 00     -         ldx #$00
4f01: bd 14 4f  -         lda msg,x
4f04: f0 07     -         beq !done+
4f06: 20 d2 ff  -         jsr kernal_chrout
4f09: e8        -         inx
4f0a: 4c 01 4f  -         jmp !loop-
4f0d: 68        -         pla
4f0e: 8d 86 02  -         sta foreground_color
4f11: 4c 1f 4f  -         jmp !done+
4f14: 20        - memory: .byte spacebar
4f15: 54 45 53 54 20 4d 45 4d                          -         .text description
4f1d: 3a        -         .text ":"
4f1e: 00        -         .byte NULL
4f1f: a6 21     -         ldx rl(register.getValue())
4f21: a4 22     -         ldy rh(register.getValue())
4f23: ec 5b 52  -         cpx address
4f26: d0 26     -         bne !failed+
4f28: cc 5c 52  -         cpy address+1
4f2b: d0 21     -         bne !failed+
4f2d: ee 44 52  -         inc TEST_PASS_COUNT
4f30: ad 86 02  -         lda foreground_color
4f33: 48        -         pha
4f34: a9 05     -         lda #color
4f36: 8d 86 02  -         sta foreground_color
4f39: a2 00     -         ldx #$00
4f3b: bd 3f 52  -         lda msg,x
4f3e: f0 07     -         beq !done+
4f40: 20 d2 ff  -         jsr kernal_chrout
4f43: e8        -         inx
4f44: 4c 3b 4f  -         jmp !loop-
4f47: 68        -         pla
4f48: 8d 86 02  -         sta foreground_color
4f4b: 4c 69 4f  -         jmp !done+
4f4e: ad 86 02  -         lda foreground_color
4f51: 48        -         pha
4f52: a9 02     -         lda #color
4f54: 8d 86 02  -         sta foreground_color
4f57: a2 00     -         ldx #$00
4f59: bd 41 52  -         lda msg,x
4f5c: f0 07     -         beq !done+
4f5e: 20 d2 ff  -         jsr kernal_chrout
4f61: e8        -         inx
4f62: 4c 59 4f  -         jmp !loop-
4f65: 68        -         pla
4f66: 8d 86 02  -         sta foreground_color
4f69: a2 00     -         ldx #$00
4f6b: bd 7a 4f  -         lda msg,x
4f6e: f0 07     -         beq !done+
4f70: 20 d2 ff  -         jsr kernal_chrout
4f73: e8        -         inx
4f74: 4c 6b 4f  -         jmp !loop-
4f77: 4c 7c 4f  -         jmp !done+
4f7a: 0d 00     - memory: .byte RETURN, NULL
4f7c: ae 45 52  -         ldx TEST_NAME_COUNT
4f7f: e0 15     -         cpx #TESTS_PER_PAGE
4f81: d0 5d     -         bne !exit+
4f83: ad 86 02  -         lda foreground_color
4f86: 48        -         pha
4f87: a9 01     -         lda #color
4f89: 8d 86 02  -         sta foreground_color
4f8c: a2 00     -         ldx #$00
4f8e: bd a1 4f  -         lda msg,x
4f91: f0 07     -         beq !done+
4f93: 20 d2 ff  -         jsr kernal_chrout
4f96: e8        -         inx
4f97: 4c 8e 4f  -         jmp !loop-
4f9a: 68        -         pla
4f9b: 8d 86 02  -         sta foreground_color
4f9e: 4c c0 4f  -         jmp !no_key+
4fa1: 0d        - memory: .byte RETURN
4fa2: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4fb2: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4fbe: 0d 00     -         .byte RETURN, NULL
4fc0: 20 9f ff  -         jsr scnkey  // scan keyboard
4fc3: 20 e4 ff  -         jsr getin	// put result into A
4fc6: f0 f8     -         beq !no_key-
4fc8: a2 00     -         ldx #$00
4fca: bd d9 4f  -         lda msg,x
4fcd: f0 07     -         beq !done+
4fcf: 20 d2 ff  -         jsr kernal_chrout
4fd2: e8        -         inx
4fd3: 4c ca 4f  -         jmp !loop-
4fd6: 4c db 4f  -         jmp !done+
4fd9: 0d 00     - newline:.byte RETURN, NULL
4fdb: a2 00     -         ldx #$00
4fdd: 8e 45 52  -         stx TEST_NAME_COUNT
4fe0: 60        -         rts
4fe1: a9 00     - TestRun:lda #color
4fe3: 8d 20 d0  -         sta border_color
4fe6: a9 00     -         lda #color
4fe8: 8d 21 d0  -         sta background_color
4feb: a9 01     -         lda #color
4fed: 8d 86 02  -         sta foreground_color
4ff0: a2 00     -         ldx #color
4ff2: 8e 21 d0  -         stx background_color
4ff5: a9 20     -         lda #spacebar
4ff7: a2 00     -         ldx #$00
4ff9: 9d 00 04  -         sta screen,x
4ffc: 9d 00 05  -         sta screen+$100,x
4fff: 9d 00 06  -         sta screen+$200,x
5002: 9d 00 07  -         sta screen+$300,x
5005: e8        -         inx
5006: d0 f1     -         bne !loop-
5008: a9 00     -         lda #row
500a: 85 d6     -         sta cursor_row
500c: a9 00     -         lda #column
500e: 85 d3     -         sta cursor_col
5010: a2 00     -         ldx #$00
5012: bd 21 50  -         lda msg,x
5015: f0 07     -         beq !done+
5017: 20 d2 ff  -         jsr kernal_chrout
501a: e8        -         inx
501b: 4c 12 50  -         jmp !loop-
501e: 4c 23 50  -         jmp !done+
5021: 0d 00     - newline:.byte RETURN, NULL
5023: a2 00     -         ldx #$00
5025: bd 46 52  -         lda msg,x
5028: f0 07     -         beq !done+
502a: 20 d2 ff  -         jsr kernal_chrout
502d: e8        -         inx
502e: 4c 25 50  -         jmp !loop-
5031: a9 0c     -         lda #color
5033: 8d 86 02  -         sta foreground_color
5036: a9 00     -         lda #$00
5038: 8d 43 52  -         sta TEST_COUNT
503b: 8d 44 52  -         sta TEST_PASS_COUNT
503e: 8d 45 52  -         sta TEST_NAME_COUNT
5041: 20 00 20  -         jsr SET_TEST
5044: 20 1a 21  -         jsr LOAD_TEST
5047: 20 34 22  -         jsr STORE_TEST
504a: 20 52 23  -         jsr LOAD_INDIRECT_TEST
504d: 20 e1 24  -         jsr STORE_INDIRECT_TEST
5050: 20 ed 26  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
5053: 20 87 28  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
5056: 20 92 2a  -         jsr POP_INDIRECT_TEST
5059: 20 a1 2e  -         jsr STORE_POP_INDIRECT_TEST
505c: 20 d0 2f  -         jsr ADD_TEST
505f: 20 64 31  -         jsr SUBTRACT_TEST
5062: 20 fa 32  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
5065: 20 7d 35  -         jsr COMPARE_TEST
5068: 20 a8 36  -         jsr INCREMENT_TEST
506b: 20 c8 37  -         jsr DECREMENT_TEST
506e: 20 ec 38  -         jsr RETURN_TO_6502_MODE_TEST
5071: 20 ff 39  -         jsr BRANCH_ALWAYS_TEST
5074: 20 28 3b  -         jsr BRANCH_IF_NO_CARRY_TEST	
5077: 20 5c 3c  -         jsr BRANCH_IF_CARRY_SET_TEST
507a: 20 90 3d  -         jsr BRANCH_IF_PLUS_TEST
507d: 20 c0 3e  -         jsr BRANCH_IF_MINUS_TEST
5080: 20 f0 3f  -         jsr BRANCH_IF_ZERO_TEST	
5083: 20 1a 41  -         jsr BRANCH_IF_NONZERO_TEST
5086: 20 49 42  -         jsr BRANCH_IF_MINUS_ONE_TEST
5089: 20 78 43  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
508c: 20 a8 44  -         jsr BREAK_TEST
508f: 20 e0 47  -         jsr BRANCH_TO_SUBROUTINE_TEST
5092: 20 1a 49  -         jsr RETURN_FROM_SUBROUTINE_TEST
5095: 20 47 4a  -         jsr ABSOLUTE_JUMP_TEST
5098: 20 74 4b  -         jsr EXTERNAL_JSR_TEST
509b: 20 91 4d  -         jsr SET_INDIRECT_TEST
509e: 20 ba 4e  -         jsr SET_MEMORY_TEST
50a1: 20 40 46  -         jsr INTERRUPT_BREAK_TEST
50a4: ad 86 02  -         lda foreground_color
50a7: 48        -         pha
50a8: a9 01     -         lda #color
50aa: 8d 86 02  -         sta foreground_color
50ad: a2 00     -         ldx #$00
50af: bd 26 52  -         lda msg,x
50b2: f0 07     -         beq !done+
50b4: 20 d2 ff  -         jsr kernal_chrout
50b7: e8        -         inx
50b8: 4c af 50  -         jmp !loop-
50bb: 68        -         pla
50bc: 8d 86 02  -         sta foreground_color
50bf: ad 44 52  -         lda value
50c2: c9 64     -         cmp #three_digit
50c4: 90 5a     -         bcc !twoDigit+
50c6: ad 44 52  -         lda value
50c9: c9 64     -         cmp #reference
50cb: 90 09     -         bcc !done+
50cd: a0 00     -         ldy #$00		// counter
50cf: c8        -         iny				// count references's
50d0: e9 64     -         sbc #reference
50d2: c9 64     -         cmp #reference
50d4: b0 f9     -         bcs !loop-		// still larger than reference
50d6: 98        -         tya
50d7: 48        -         pha
50d8: 09 30     -         ora #$30
50da: 20 d2 ff  -         jsr kernal_chrout
50dd: 68        -         pla
50de: a8        -         tay
50df: ad 44 52  -         lda value
50e2: 38        -         sec
50e3: e9 64     -         sbc #three_digit
50e5: 88        -         dey
50e6: d0 fa     -         bne !subby-
50e8: 85 fe     -         sta zp
50ea: a5 fe     -         lda value
50ec: c9 0a     -         cmp #two_digit
50ee: 90 28     -         bcc !oneDigit+
50f0: a5 fe     -         lda value
50f2: c9 0a     -         cmp #reference
50f4: 90 09     -         bcc !done+
50f6: a0 00     -         ldy #$00		// counter
50f8: c8        -         iny				// count references's
50f9: e9 0a     -         sbc #reference
50fb: c9 0a     -         cmp #reference
50fd: b0 f9     -         bcs !loop-		// still larger than reference
50ff: 98        -         tya
5100: 48        -         pha
5101: 09 30     -         ora #$30
5103: 20 d2 ff  -         jsr kernal_chrout
5106: 68        -         pla
5107: a8        -         tay
5108: a5 fe     -         lda value
510a: 38        -         sec
510b: e9 0a     -         sbc #two_digit
510d: 88        -         dey
510e: d0 fa     -         bne !subby-
5110: 09 30     -         ora #$30
5112: 20 d2 ff  -         jsr kernal_chrout
5115: 4c 1d 51  -         jmp !done+
5118: 09 30     -         ora #$30
511a: 20 d2 ff  -         jsr kernal_chrout
511d: 4c 56 51  -         jmp !done+
5120: ad 44 52  -         lda value
5123: c9 0a     -         cmp #two_digit
5125: 90 2a     -         bcc !oneDigit+
5127: ad 44 52  -         lda value
512a: c9 0a     -         cmp #reference
512c: 90 09     -         bcc !done+
512e: a0 00     -         ldy #$00		// counter
5130: c8        -         iny				// count references's
5131: e9 0a     -         sbc #reference
5133: c9 0a     -         cmp #reference
5135: b0 f9     -         bcs !loop-		// still larger than reference
5137: 98        -         tya
5138: 48        -         pha
5139: 09 30     -         ora #$30
513b: 20 d2 ff  -         jsr kernal_chrout
513e: 68        -         pla
513f: a8        -         tay
5140: ad 44 52  -         lda value
5143: 38        -         sec
5144: e9 0a     -         sbc #two_digit
5146: 88        -         dey
5147: d0 fa     -         bne !subby-
5149: 09 30     -         ora #$30
514b: 20 d2 ff  -         jsr kernal_chrout
514e: 4c 56 51  -         jmp !done+
5151: 09 30     -         ora #$30
5153: 20 d2 ff  -         jsr kernal_chrout
5156: ad 86 02  -         lda foreground_color
5159: 48        -         pha
515a: a9 01     -         lda #color
515c: 8d 86 02  -         sta foreground_color
515f: a2 00     -         ldx #$00
5161: bd 38 52  -         lda msg,x
5164: f0 07     -         beq !done+
5166: 20 d2 ff  -         jsr kernal_chrout
5169: e8        -         inx
516a: 4c 61 51  -         jmp !loop-
516d: 68        -         pla
516e: 8d 86 02  -         sta foreground_color
5171: ad 43 52  -         lda value
5174: c9 64     -         cmp #three_digit
5176: 90 5a     -         bcc !twoDigit+
5178: ad 43 52  -         lda value
517b: c9 64     -         cmp #reference
517d: 90 09     -         bcc !done+
517f: a0 00     -         ldy #$00		// counter
5181: c8        -         iny				// count references's
5182: e9 64     -         sbc #reference
5184: c9 64     -         cmp #reference
5186: b0 f9     -         bcs !loop-		// still larger than reference
5188: 98        -         tya
5189: 48        -         pha
518a: 09 30     -         ora #$30
518c: 20 d2 ff  -         jsr kernal_chrout
518f: 68        -         pla
5190: a8        -         tay
5191: ad 43 52  -         lda value
5194: 38        -         sec
5195: e9 64     -         sbc #three_digit
5197: 88        -         dey
5198: d0 fa     -         bne !subby-
519a: 85 fe     -         sta zp
519c: a5 fe     -         lda value
519e: c9 0a     -         cmp #two_digit
51a0: 90 28     -         bcc !oneDigit+
51a2: a5 fe     -         lda value
51a4: c9 0a     -         cmp #reference
51a6: 90 09     -         bcc !done+
51a8: a0 00     -         ldy #$00		// counter
51aa: c8        -         iny				// count references's
51ab: e9 0a     -         sbc #reference
51ad: c9 0a     -         cmp #reference
51af: b0 f9     -         bcs !loop-		// still larger than reference
51b1: 98        -         tya
51b2: 48        -         pha
51b3: 09 30     -         ora #$30
51b5: 20 d2 ff  -         jsr kernal_chrout
51b8: 68        -         pla
51b9: a8        -         tay
51ba: a5 fe     -         lda value
51bc: 38        -         sec
51bd: e9 0a     -         sbc #two_digit
51bf: 88        -         dey
51c0: d0 fa     -         bne !subby-
51c2: 09 30     -         ora #$30
51c4: 20 d2 ff  -         jsr kernal_chrout
51c7: 4c cf 51  -         jmp !done+
51ca: 09 30     -         ora #$30
51cc: 20 d2 ff  -         jsr kernal_chrout
51cf: 4c 08 52  -         jmp !done+
51d2: ad 43 52  -         lda value
51d5: c9 0a     -         cmp #two_digit
51d7: 90 2a     -         bcc !oneDigit+
51d9: ad 43 52  -         lda value
51dc: c9 0a     -         cmp #reference
51de: 90 09     -         bcc !done+
51e0: a0 00     -         ldy #$00		// counter
51e2: c8        -         iny				// count references's
51e3: e9 0a     -         sbc #reference
51e5: c9 0a     -         cmp #reference
51e7: b0 f9     -         bcs !loop-		// still larger than reference
51e9: 98        -         tya
51ea: 48        -         pha
51eb: 09 30     -         ora #$30
51ed: 20 d2 ff  -         jsr kernal_chrout
51f0: 68        -         pla
51f1: a8        -         tay
51f2: ad 43 52  -         lda value
51f5: 38        -         sec
51f6: e9 0a     -         sbc #two_digit
51f8: 88        -         dey
51f9: d0 fa     -         bne !subby-
51fb: 09 30     -         ora #$30
51fd: 20 d2 ff  -         jsr kernal_chrout
5200: 4c 08 52  -         jmp !done+
5203: 09 30     -         ora #$30
5205: 20 d2 ff  -         jsr kernal_chrout
5208: ad 86 02  -         lda foreground_color
520b: 48        -         pha
520c: a9 01     -         lda #color
520e: 8d 86 02  -         sta foreground_color
5211: a2 00     -         ldx #$00
5213: bd 3c 52  -         lda msg,x
5216: f0 07     -         beq !done+
5218: 20 d2 ff  -         jsr kernal_chrout
521b: e8        -         inx
521c: 4c 13 52  -         jmp !loop-
521f: 68        -         pla
5220: 8d 86 02  -         sta foreground_color
5223: 4c 3e 52  -         jmp !done+
5226: 0d        - memory: .byte RETURN
5227: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
5237: 00        -         .byte NULL
5238: 20 2f 20  - memory_2:.text " / "
523b: 00        -         .byte NULL
523c: 0d 00     - memory_3:.byte RETURN, NULL
523e: 60        -         rts

[TestData]
523f: 73 00     -         .byte $73, $00
5241: 76 00     -         .byte $76, $00
5243: 00        -         .byte $00
5244: 00        -         .byte $00
5245: 00        -         .byte $00
5246: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  -         .text "SWEET16 TEST RUNNER"
5256: 4e 45 52                                        
5259: 0d 00     -         .byte RETURN, NULL
525b: 12 34     -         .byte $12,$34
525d: 56 78     -         .byte $56,$78
525f: 9a bc     -         .byte $9a,$bc
5261: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  -         .fill TMS_SIZE, i
5271: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  -         .fill TMS_SIZE, $ff
5281: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .fill STACK_SIZE, 0
****************************** Segment: UtilData *******************************
[UtilData]
0b22: 0d 00     - Newline:.byte RETURN, NULL
0b24: 20 bd ff  - KernalLoad:jsr $ffbd     // call setnam
0b27: a9 01     -         lda #$01
0b29: a6 ba     -         ldx $ba       // last used device number
0b2b: d0 02     -         bne !skip+
0b2d: a2 08     -         ldx #$08      // default to device 8
0b2f: a0 01     -         ldy #$01       // not $01 means: load to address stored in file
0b31: 20 ba ff  -         jsr $ffba      // call setlfs
0b34: a9 00     -         lda #$00       // $00 means: load to memory (not verify)
0b36: 20 d5 ff  -         jsr $ffd5      // call load
0b39: b0 03     -         bcs !error+    // if carry set, a load error has happened
0b3b: 4c 44 0b  -         jmp !done+
0b3e: 4c 3e 0b  -         jmp *
0b41: a2 01     -         ldx #1
0b43: 60        -         rts
0b44: a2 00     -         ldx #0         // clear error flag in case set
0b46: 60        -         rts
0b47: 60        -         rts
************************** Segment: Sweet16JumpTable ***************************
[Sweet16JumpTable]
1061: 00        - OPTBL:  .byte <SET-1          // 1X
1062: f7        - BRTBL:  .byte  <RTN-1          // 0
1063: 03        -         .byte  <LD-1           // 2X
1064: 8b        -         .byte  <BR-1           // 1
1065: 13        -         .byte  <ST-1           // 3X
1066: 8c        -         .byte  <BNC-1          // 2
1067: 2b        -         .byte  <LDAT-1         // 4X
1068: 9d        -         .byte  <BC-1           // 3
1069: 1c        -         .byte  <STAT-1         // 5X
106a: a0        -         .byte  <BP-1           // 4
106b: 35        -         .byte  <LDDAT-1        // 6X
106c: a7        -         .byte  <BM-1           // 5
106d: 3f        -         .byte  <STDAT-1        // 7X
106e: ae        -         .byte  <BZ-1           // 6
106f: e7        -         .byte  <POP-1          // 8X
1070: b7        -         .byte  <BNZ-1          // 7
1071: 49        -         .byte  <STPAT-1        // 9X
1072: c0        -         .byte  <BM1-1          // 8
1073: 73        -         .byte  <ADD-1          // AX
1074: cb        -         .byte  <BNM1-1         // 9
1075: 5c        -         .byte  <SUB-1          // BX
1076: 0c        -         .byte  <BK-1           // A
1077: eb        -         .byte  <POPD-1         // CX
1078: d6        -         .byte  <RS-1           // B
1079: 5e        -         .byte  <CPR-1          // DX
107a: 81        -         .byte  <BS-1           // C
107b: 24        -         .byte  <INR-1          // EX
107c: 10        -         .byte  <XJSR-1         // D
107d: 53        -         .byte  <DCR-1          // FX
107e: 0d        -         .byte  <SETM-1         // E
107f: d5        -         .byte  <NUL-1          // UNUSED
1080: f4        -         .byte  <SETI-1         // F
***************************** Segment: Sweet16Page *****************************
[Sweet16Page]
1100: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
1101: 4c 4d 10  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
1104: b5 17     - LD:     lda  R0L,X
1106: 85 17     -         sta  R0L
1108: b5 18     -         lda  R0H,X          // MOVE RX TO R0
110a: 85 18     -         sta  R0H
110c: 60        -         rts
110d: 00        - BK:     brk
110e: 4c 78 12  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
1111: 4c 8a 12  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
1114: a5 17     - ST:     lda  R0L
1116: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
1118: a5 18     -         lda  R0H
111a: 95 18     -         sta  R0H,X
111c: 60        -         rts
111d: a5 17     - STAT:   lda  R0L	
111f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
1121: a0 00     -         ldy  #$00
1123: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
1125: f6 17     - INR:    inc  R0L,X
1127: d0 02     -         bne  INR2           // INCR RX
1129: f6 18     -         inc  R0H,X	
112b: 60        - INR2:   rts
112c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
112e: 85 17     -         sta  R0L            // TO R0
1130: a0 00     -         ldy  #$00
1132: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
1134: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
1136: 20 2c 11  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
1139: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
113b: 85 18     -         sta  R0H
113d: 4c 25 11  -         jmp  INR            // INCR RX
1140: 20 1d 11  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
1143: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
1145: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
1147: 4c 25 11  -         jmp  INR            // INCR RX AND RETURN
114a: 20 54 11  - STPAT:  jsr  DCR            // DECR RX
114d: a5 17     -         lda  R0L
114f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
1151: 4c 04 12  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
1154: b5 17     - DCR:    lda  R0L,X
1156: d0 02     -         bne  DCR2           // DECR RX
1158: d6 18     -         dec  R0H,X
115a: d6 17     - DCR2:   dec  R0L,X
115c: 60        -         rts
115d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
115f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
1160: a5 17     -         lda  R0L
1162: f5 17     -         sbc  R0L,X
1164: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
1167: a5 18     -         lda  R0H
1169: f5 18     -         sbc  R0H,X
116b: 99 18 00  - SUB2:   sta  R0H,Y
116e: 98        -         tya                 // LAST RESULT REG*2
116f: 69 00     -         adc  #$00           // CARRY TO LSB
1171: 85 34     -         sta  R14H
1173: 60        -         rts
1174: a5 17     - ADD:    lda  R0L
1176: 75 17     -         adc  R0L,X
1178: 85 17     -         sta  R0L            // R0+RX TO R0
117a: a5 18     -         lda  R0H
117c: 75 18     -         adc  R0H,X
117e: a0 00     -         ldy  #$00           // R0 FOR RESULT
1180: f0 e9     -         beq  SUB2           // FINISH ADD
1182: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
1184: 20 1f 11  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
1187: a5 36     -         lda  R15H
1189: 20 1f 11  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
118c: 18        - BR:     clc
118d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
118f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
1191: 10 01     -         bpl  BR2
1193: 88        -         dey
1194: 65 35     - BR2:    adc  R15L           // ADD TO PC
1196: 85 35     -         sta  R15L
1198: 98        -         tya
1199: 65 36     -         adc  R15H
119b: 85 36     -         sta  R15H
119d: 60        - BNC2:   rts
119e: b0 ec     - BC:     bcs  BR
11a0: 60        -         rts
11a1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
11a2: aa        -         tax                 // TO X REG FOR INDEXING
11a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
11a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
11a7: 60        -         rts
11a8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
11a9: aa        -         tax
11aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
11ac: 30 e1     -         bmi  BR1
11ae: 60        -         rts
11af: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
11b0: aa        -         tax
11b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
11b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
11b5: f0 d8     -         beq  BR1            // BRANCH IF SO
11b7: 60        -         rts
11b8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
11b9: aa        -         tax
11ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
11bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
11be: d0 cf     -         bne  BR1            // BRANCH IF SO
11c0: 60        -         rts	
11c1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
11c2: aa        -         tax
11c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
11c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
11c7: 49 ff     -         eor  #$FF
11c9: f0 c4     -         beq  BR1            // BRANCH IF SO
11cb: 60        -         rts
11cc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
11cd: aa        -         tax
11ce: b5 17     -         lda  R0L,X
11d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
11d2: 49 ff     -         eor  #$FF
11d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
11d6: 60        - NUL:    rts
11d7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
11d9: 20 54 11  -         jsr  DCR            // DECR STACK POINTER
11dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
11de: 85 36     -         sta  R15H
11e0: 20 54 11  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
11e3: a1 17     -         lda  (R0L,X)
11e5: 85 35     -         sta  R15L
11e7: 60        -         rts
11e8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
11ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
11ec: 20 54 11  - POPD:   jsr  DCR            // DECR RX
11ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
11f1: a8        -         tay                 // SAVE IN Y REG	
11f2: 4c fb 11  -         jmp POP2
11f5: 4c 66 12  - SETI:   jmp SETI_OUTOFPAGE
11f8: 4c 09 12  - RTN:    jmp  RTNZ
11fb: 20 54 11  - POP2:   jsr  DCR            // DECR RX
11fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
1200: 85 17     -         sta  R0L            // TO R0
1202: 84 18     -         sty  R0H
1204: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
1206: 84 34     -         sty  R14H
1208: 60        -         rts
1209: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
120a: 68        -         pla
120b: ad aa 12  -         lda SW16_SAVE_RESTORE
120e: f0 03     -         beq RESTORED
1210: 20 26 12  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
1213: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
1216: 8d a6 12  - SAVE:   sta ACCUMULATOR
1219: 8e a7 12  -         stx XREG
121c: 8c a8 12  -         sty YREG
121f: 08        -         php
1220: 68        -         pla
1221: 8d a9 12  -         sta STATUS
1224: d8        -         cld
1225: 60        -         rts
1226: ad a9 12  - RESTORE:lda STATUS
1229: 48        -         pha
122a: ad a6 12  -         lda ACCUMULATOR
122d: ae a7 12  -         ldx XREG
1230: ac a8 12  -         ldy YREG
1233: 28        -         plp
1234: 60        -         rts
1235: 68        - BREAK_HANDLER:pla		// Y
1236: a8        -         tay		// restore Y
1237: 68        -         pla		// X
1238: aa        -         tax		// restore X
1239: 68        -         pla		// restore A
123a: 85 37     -         sta RL(ZP)
123c: 28        -         plp		// restore Status Flags
123d: 68        -         pla		// PCL discard - not useful
123e: 68        -         pla		// PCH discard - not useful
123f: a5 37     -         lda RL(ZP)
1241: 4c 24 10  -         jmp SW16D
1244: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
1246: 85 37     -         sta RL(ZP)
1248: e6 35     -         inc R15L
124a: d0 02     -         bne !incremented+ 		// inc PC
124c: e6 36     -         inc R15H
124e: b1 35     -         lda (R15L),Y       		// dest addr low
1250: 85 38     -         sta RH(ZP)
1252: e6 35     -         inc R15L
1254: d0 02     -         bne !incremented+ 		// inc PC
1256: e6 36     -         inc R15H
1258: b1 35     -         lda (R15L),Y       		// dest register
125a: e6 35     -         inc R15L
125c: d0 02     -         bne !incremented+ 		// inc PC
125e: e6 36     -         inc R15H
1260: a8        -         tay
1261: e6 37     -         inc RL(ZP)
1263: a2 37     -         ldx #RL(ZP)
1265: 60        -         rts
************************** Segment: Sweet16OutOfPage ***************************
[Sweet16OutOfPage]
1266: 20 44 12  - SETI_OUTOFPAGE:jsr SETIM_COMMON
1269: a1 00     -         lda ($00,X)
126b: 99 00 00  -         sta $00,Y				// low order
126e: c6 37     -         dec RL(ZP)
1270: a1 00     -         lda ($00,X)
1272: 99 01 00  -         sta $01,Y				// high order
1275: 4c 24 10  -         jmp SW16D				// back to SWEET16
1278: 20 44 12  - SETM_OUTOFPAGE:jsr SETIM_COMMON
127b: a1 00     -         lda ($00,X)
127d: 99 01 00  -         sta $01,Y				// high order
1280: c6 37     -         dec RL(ZP)
1282: a1 00     -         lda ($00,X)
1284: 99 00 00  -         sta $00,Y				// low order
1287: 4c 24 10  -         jmp SW16D				// back to SWEET16
128a: a9 12     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
128c: 48        -         pha						// using rts as jmps here
128d: a9 a2     -         lda #<((!returned+)-1)
128f: 48        -         pha
1290: b1 35     -         lda (R15L),Y       		// high order byte
1292: 48        -         pha
1293: e6 35     -         inc R15L
1295: d0 02     -         bne !incremented+ 		// inc PC
1297: e6 36     -         inc R15H
1299: b1 35     -         lda (R15L),Y       		// low order byte
129b: 48        -         pha
129c: e6 35     -         inc R15L
129e: d0 02     -         bne !incremented+ 		// inc PC
12a0: e6 36     -         inc R15H
12a2: 60        -         rts				   		// this performs jump from stack
12a3: 4c 24 10  -         jmp SW16D				// back to SWEET16
***************************** Segment: Sweet16Data *****************************
[Sweet16Data]
12a6: 00        - ACCUMULATOR:.byte 0
12a7: 00        - XREG:   .byte 0
12a8: 00        - YREG:   .byte 0
12a9: 00        - STATUS: .byte 0
12aa: 00        - SW16_SAVE_RESTORE:.byte 0
****************************** Segment: TestData *******************************
[TestData]
523f: 73 00     - TEST_SUCCESS:.byte $73, $00
5241: 76 00     - TEST_FAILURE:.byte $76, $00
5243: 00        - TEST_COUNT:.byte $00
5244: 00        - TEST_PASS_COUNT:.byte $00
5245: 00        - TEST_NAME_COUNT:.byte $00
5246: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  - TEST_TITLE:.text "SWEET16 TEST RUNNER"
5256: 4e 45 52                                        
5259: 0d 00     -         .byte RETURN, NULL
525b: 12 34     - TEST_MEMORY:.byte $12,$34
525d: 56 78     - TEST_MEMORY_2:.byte $56,$78
525f: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
5261: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
5271: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
5281: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
