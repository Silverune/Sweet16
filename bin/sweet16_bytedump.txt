******************************* Segment: Default *******************************
[Basic]
0801: 0b 08     -         
0803: 0a 00     -         
0805: 9e        -         
0806: 32 30 36 34                                      -         
080a: 00        -         
080b: 00 00     - upstartEnd:

[Program]
0810: a9 00     - Program:lda #color
0812: 8d 20 d0  -         sta border_color
0815: a9 00     -         lda #color
0817: 8d 21 d0  -         sta background_color
081a: a9 01     -         lda #color
081c: 8d 86 02  -         sta foreground_color
081f: a2 00     -         ldx #color
0821: 8e 21 d0  -         stx background_color
0824: a9 20     -         lda #spacebar
0826: a2 00     -         ldx #$00
0828: 9d 00 04  -         sta screen,x
082b: 9d 00 05  -         sta screen+$100,x
082e: 9d 00 06  -         sta screen+$200,x
0831: 9d 00 07  -         sta screen+$300,x
0834: e8        -         inx
0835: d0 f1     -         bne !loop-
0837: a9 00     -         lda #row
0839: 85 d6     -         sta cursor_row
083b: a9 00     -         lda #column
083d: 85 d3     -         sta cursor_col
083f: a2 00     -         ldx #$00
0841: bd 50 08  -         lda msg,x
0844: f0 07     -         beq !done+
0846: 20 d2 ff  -         jsr kernal_chrout
0849: e8        -         inx
084a: 4c 41 08  -         jmp !loop-
084d: 4c 52 08  -         jmp !done+
0850: 0d 00     - newline:.byte RETURN, NULL
0852: a2 00     -         ldx #$00
0854: bd ae 22  -         lda msg,x
0857: f0 07     -         beq !done+
0859: 20 d2 ff  -         jsr kernal_chrout
085c: e8        -         inx
085d: 4c 54 08  -         jmp !loop-
0860: a9 0c     -         lda #color
0862: 8d 86 02  -         sta foreground_color
0865: a9 00     -         lda #$00
0867: 8d ab 22  -         sta TEST_COUNT
086a: 8d ac 22  -         sta TEST_PASS_COUNT
086d: 8d ad 22  -         sta TEST_NAME_COUNT
0870: 20 f9 22  -         jsr SET_TEST
0873: 20 13 24  -         jsr LOAD_TEST
0876: 20 2d 25  -         jsr STORE_TEST
0879: 20 4b 26  -         jsr LOAD_INDIRECT_TEST
087c: 20 da 27  -         jsr STORE_INDIRECT_TEST
087f: 20 e6 29  -         jsr LOAD_DOUBLE_BYTE_INDIRECT_TEST
0882: 20 80 2b  -         jsr STORE_DOUBLE_BYTE_INDIRECT_TEST
0885: 20 8b 2d  -         jsr POP_INDIRECT_TEST
0888: 20 9a 31  -         jsr STORE_POP_INDIRECT_TEST
088b: 20 c9 32  -         jsr ADD_TEST
088e: 20 5d 34  -         jsr SUBTRACT_TEST
0891: 20 f3 35  -         jsr POP_DOUBLE_BYTE_INDIRECT_TEST
0894: 20 76 38  -         jsr COMPARE_TEST
0897: 20 a1 39  -         jsr INCREMENT_TEST
089a: 20 c1 3a  -         jsr DECREMENT_TEST
089d: 20 e5 3b  -         jsr RETURN_TO_6502_MODE_TEST
08a0: 20 f8 3c  -         jsr BRANCH_ALWAYS_TEST
08a3: 20 21 3e  -         jsr BRANCH_IF_NO_CARRY_TEST	
08a6: 20 55 3f  -         jsr BRANCH_IF_CARRY_SET_TEST
08a9: 20 89 40  -         jsr BRANCH_IF_PLUS_TEST
08ac: 20 b9 41  -         jsr BRANCH_IF_MINUS_TEST
08af: 20 e9 42  -         jsr BRANCH_IF_ZERO_TEST	
08b2: 20 13 44  -         jsr BRANCH_IF_NONZERO_TEST
08b5: 20 42 45  -         jsr BRANCH_IF_MINUS_ONE_TEST
08b8: 20 71 46  -         jsr BRANCH_IF_NOT_MINUS_ONE_TEST
08bb: 20 a1 47  -         jsr BREAK_TEST
08be: 20 d9 4a  -         jsr BRANCH_TO_SUBROUTINE_TEST
08c1: 20 13 4c  -         jsr RETURN_FROM_SUBROUTINE_TEST
08c4: 20 40 4d  -         jsr ABSOLUTE_JUMP_TEST
08c7: 20 6d 4e  -         jsr EXTERNAL_JSR_TEST
08ca: 20 8a 50  -         jsr SET_INDIRECT_TEST
08cd: 20 b3 51  -         jsr SET_MEMORY_TEST
08d0: 20 39 49  -         jsr INTERRUPT_BREAK_TEST
08d3: ad 86 02  -         lda foreground_color
08d6: 48        -         pha
08d7: a9 01     -         lda #color
08d9: 8d 86 02  -         sta foreground_color
08dc: a2 00     -         ldx #$00
08de: bd 55 0a  -         lda msg,x
08e1: f0 07     -         beq !done+
08e3: 20 d2 ff  -         jsr kernal_chrout
08e6: e8        -         inx
08e7: 4c de 08  -         jmp !loop-
08ea: 68        -         pla
08eb: 8d 86 02  -         sta foreground_color
08ee: ad ac 22  -         lda value
08f1: c9 64     -         cmp #three_digit
08f3: 90 5a     -         bcc !twoDigit+
08f5: ad ac 22  -         lda value
08f8: c9 64     -         cmp #reference
08fa: 90 09     -         bcc !done+
08fc: a0 00     -         ldy #$00		// counter
08fe: c8        -         iny				// count references's
08ff: e9 64     -         sbc #reference
0901: c9 64     -         cmp #reference
0903: b0 f9     -         bcs !loop-		// still larger than reference
0905: 98        -         tya
0906: 48        -         pha
0907: 09 30     -         ora #$30
0909: 20 d2 ff  -         jsr kernal_chrout
090c: 68        -         pla
090d: a8        -         tay
090e: ad ac 22  -         lda value
0911: 38        -         sec
0912: e9 64     -         sbc #three_digit
0914: 88        -         dey
0915: d0 fa     -         bne !subby-
0917: 85 fe     -         sta zp
0919: a5 fe     -         lda value
091b: c9 0a     -         cmp #two_digit
091d: 90 28     -         bcc !oneDigit+
091f: a5 fe     -         lda value
0921: c9 0a     -         cmp #reference
0923: 90 09     -         bcc !done+
0925: a0 00     -         ldy #$00		// counter
0927: c8        -         iny				// count references's
0928: e9 0a     -         sbc #reference
092a: c9 0a     -         cmp #reference
092c: b0 f9     -         bcs !loop-		// still larger than reference
092e: 98        -         tya
092f: 48        -         pha
0930: 09 30     -         ora #$30
0932: 20 d2 ff  -         jsr kernal_chrout
0935: 68        -         pla
0936: a8        -         tay
0937: a5 fe     -         lda value
0939: 38        -         sec
093a: e9 0a     -         sbc #two_digit
093c: 88        -         dey
093d: d0 fa     -         bne !subby-
093f: 09 30     -         ora #$30
0941: 20 d2 ff  -         jsr kernal_chrout
0944: 4c 4c 09  -         jmp !done+
0947: 09 30     -         ora #$30
0949: 20 d2 ff  -         jsr kernal_chrout
094c: 4c 85 09  -         jmp !done+
094f: ad ac 22  -         lda value
0952: c9 0a     -         cmp #two_digit
0954: 90 2a     -         bcc !oneDigit+
0956: ad ac 22  -         lda value
0959: c9 0a     -         cmp #reference
095b: 90 09     -         bcc !done+
095d: a0 00     -         ldy #$00		// counter
095f: c8        -         iny				// count references's
0960: e9 0a     -         sbc #reference
0962: c9 0a     -         cmp #reference
0964: b0 f9     -         bcs !loop-		// still larger than reference
0966: 98        -         tya
0967: 48        -         pha
0968: 09 30     -         ora #$30
096a: 20 d2 ff  -         jsr kernal_chrout
096d: 68        -         pla
096e: a8        -         tay
096f: ad ac 22  -         lda value
0972: 38        -         sec
0973: e9 0a     -         sbc #two_digit
0975: 88        -         dey
0976: d0 fa     -         bne !subby-
0978: 09 30     -         ora #$30
097a: 20 d2 ff  -         jsr kernal_chrout
097d: 4c 85 09  -         jmp !done+
0980: 09 30     -         ora #$30
0982: 20 d2 ff  -         jsr kernal_chrout
0985: ad 86 02  -         lda foreground_color
0988: 48        -         pha
0989: a9 01     -         lda #color
098b: 8d 86 02  -         sta foreground_color
098e: a2 00     -         ldx #$00
0990: bd 67 0a  -         lda msg,x
0993: f0 07     -         beq !done+
0995: 20 d2 ff  -         jsr kernal_chrout
0998: e8        -         inx
0999: 4c 90 09  -         jmp !loop-
099c: 68        -         pla
099d: 8d 86 02  -         sta foreground_color
09a0: ad ab 22  -         lda value
09a3: c9 64     -         cmp #three_digit
09a5: 90 5a     -         bcc !twoDigit+
09a7: ad ab 22  -         lda value
09aa: c9 64     -         cmp #reference
09ac: 90 09     -         bcc !done+
09ae: a0 00     -         ldy #$00		// counter
09b0: c8        -         iny				// count references's
09b1: e9 64     -         sbc #reference
09b3: c9 64     -         cmp #reference
09b5: b0 f9     -         bcs !loop-		// still larger than reference
09b7: 98        -         tya
09b8: 48        -         pha
09b9: 09 30     -         ora #$30
09bb: 20 d2 ff  -         jsr kernal_chrout
09be: 68        -         pla
09bf: a8        -         tay
09c0: ad ab 22  -         lda value
09c3: 38        -         sec
09c4: e9 64     -         sbc #three_digit
09c6: 88        -         dey
09c7: d0 fa     -         bne !subby-
09c9: 85 fe     -         sta zp
09cb: a5 fe     -         lda value
09cd: c9 0a     -         cmp #two_digit
09cf: 90 28     -         bcc !oneDigit+
09d1: a5 fe     -         lda value
09d3: c9 0a     -         cmp #reference
09d5: 90 09     -         bcc !done+
09d7: a0 00     -         ldy #$00		// counter
09d9: c8        -         iny				// count references's
09da: e9 0a     -         sbc #reference
09dc: c9 0a     -         cmp #reference
09de: b0 f9     -         bcs !loop-		// still larger than reference
09e0: 98        -         tya
09e1: 48        -         pha
09e2: 09 30     -         ora #$30
09e4: 20 d2 ff  -         jsr kernal_chrout
09e7: 68        -         pla
09e8: a8        -         tay
09e9: a5 fe     -         lda value
09eb: 38        -         sec
09ec: e9 0a     -         sbc #two_digit
09ee: 88        -         dey
09ef: d0 fa     -         bne !subby-
09f1: 09 30     -         ora #$30
09f3: 20 d2 ff  -         jsr kernal_chrout
09f6: 4c fe 09  -         jmp !done+
09f9: 09 30     -         ora #$30
09fb: 20 d2 ff  -         jsr kernal_chrout
09fe: 4c 37 0a  -         jmp !done+
0a01: ad ab 22  -         lda value
0a04: c9 0a     -         cmp #two_digit
0a06: 90 2a     -         bcc !oneDigit+
0a08: ad ab 22  -         lda value
0a0b: c9 0a     -         cmp #reference
0a0d: 90 09     -         bcc !done+
0a0f: a0 00     -         ldy #$00		// counter
0a11: c8        -         iny				// count references's
0a12: e9 0a     -         sbc #reference
0a14: c9 0a     -         cmp #reference
0a16: b0 f9     -         bcs !loop-		// still larger than reference
0a18: 98        -         tya
0a19: 48        -         pha
0a1a: 09 30     -         ora #$30
0a1c: 20 d2 ff  -         jsr kernal_chrout
0a1f: 68        -         pla
0a20: a8        -         tay
0a21: ad ab 22  -         lda value
0a24: 38        -         sec
0a25: e9 0a     -         sbc #two_digit
0a27: 88        -         dey
0a28: d0 fa     -         bne !subby-
0a2a: 09 30     -         ora #$30
0a2c: 20 d2 ff  -         jsr kernal_chrout
0a2f: 4c 37 0a  -         jmp !done+
0a32: 09 30     -         ora #$30
0a34: 20 d2 ff  -         jsr kernal_chrout
0a37: ad 86 02  -         lda foreground_color
0a3a: 48        -         pha
0a3b: a9 01     -         lda #color
0a3d: 8d 86 02  -         sta foreground_color
0a40: a2 00     -         ldx #$00
0a42: bd 6b 0a  -         lda msg,x
0a45: f0 07     -         beq !done+
0a47: 20 d2 ff  -         jsr kernal_chrout
0a4a: e8        -         inx
0a4b: 4c 42 0a  -         jmp !loop-
0a4e: 68        -         pla
0a4f: 8d 86 02  -         sta foreground_color
0a52: 4c 6d 0a  -         jmp !done+
0a55: 0d        - memory: .byte RETURN
0a56: 54 45 53 54 53 20 43 4f 4d 50 4c 45 54 45 3a 20  -         .text "TESTS COMPLETE: "
0a66: 00        -         .byte NULL
0a67: 20 2f 20  - memory_2:.text " / "
0a6a: 00        -         .byte NULL
0a6b: 0d 00     - memory_3:.byte RETURN, NULL
0a6d: 60        -         rts

[Default]
2000: 73 00     - TEST_SUCCESS:.byte $73, $00
2002: 76 00     - TEST_FAILURE:.byte $76, $00
2004: a9 00     - SW16_NONE:lda #$00
2006: 8d aa 22  -         sta SW16_SAVE_RESTORE
2009: 4c 11 20  -         jmp SW160
200c: a9 01     - SW16:   lda #$01
200e: 8d aa 22  -         sta SW16_SAVE_RESTORE
2011: f0 03     - SW160:  beq SW16A
2013: 20 16 22  -         jsr SAVE            // PRESERVE 6502 REG CONTENTS
2016: 68        - SW16A:  pla
2017: 85 35     -         sta R15L            // INIT SWEET16 PC
2019: 68        -         pla                 // FROM RETURN
201a: 85 36     -         sta R15H	        // ADDRESS
201c: 20 22 20  - SW16B:  jsr  SW16C          // INTERPRET and EXECUTE
201f: 4c 1c 20  -         jmp  SW16B          // ONE SWEET16 INSTR.
2022: e6 35     - SW16C:  inc  R15L
2024: d0 02     -         bne  SW16D          // INCR SWEET16 PC FOR FETCH
2026: e6 36     -         inc  R15H
2028: a9 21     - SW16D:  lda  #>SET          // COMMON HIGH BYTE FOR ALL ROUTINES
202a: 48        -         pha                 // PUSH ON STACK FOR RTS
202b: a0 00     -         ldy  #$00
202d: b1 35     -         lda  (R15L),Y       // FETCH INSTR
202f: 29 0f     -         and  #$0F           // MASK REG SPECIFICATION
2031: 0a        -         asl                 // DOUBLE FOR TWO BYTE REGISTERS
2032: aa        -         tax                 // TO X REG FOR INDEXING
2033: 4a        -         lsr
2034: 51 35     -         eor  (R15L),Y       // NOW HAVE OPCODE
2036: f0 0b     -         beq  TOBR           // IF ZERO THEN NON-REG OP
2038: 86 34     -         stx  R14H           // INDICATE "PRIOR RESULT REG"
203a: 4a        -         lsr
203b: 4a        -         lsr                 // OPCODE*2 TO LSB'S
203c: 4a        -         lsr
203d: a8        -         tay                 // TO Y REG FOR INDEXING
203e: b9 63 20  -         lda  OPTBL-2,Y      // LOW ORDER ADR BYTE
2041: 48        -         pha                 // ONTO STACK
2042: 60        -         rts                 // GOTO REG-OP ROUTINE
2043: e6 35     - TOBR:   inc  R15L
2045: d0 02     -         bne  TOBR2          // INCR PC
2047: e6 36     -         inc  R15H
2049: bd 66 20  - TOBR2:  lda  BRTBL,X        // LOW ORDER ADR BYTE
204c: 48        -         pha                 // ONTO STACK FOR NON-REG OP
204d: a5 34     -         lda  R14H           // "PRIOR RESULT REG" INDEX
204f: 4a        -         lsr                 // PREPARE CARRY FOR BC, BNC.
2050: 60        -         rts                 // GOTO NON-REG OP ROUTINE
2051: b1 35     - SETZ:   lda  (R15L),Y       // HIGH ORDER BYTE OF CONSTANT
2053: 95 18     -         sta  R0H,X
2055: 88        -         dey
2056: b1 35     -         lda  (R15L),Y       // LOW ORDER BYTE OF CONSTANT
2058: 95 17     -         sta  R0L,X
205a: 98        -         tya                 // Y REG CONTAINS 1
205b: 38        -         sec
205c: 65 35     -         adc  R15L           // ADD 2 TO PC
205e: 85 35     -         sta  R15L
2060: 90 02     -         bcc  SET2
2062: e6 36     -         inc  R15H
2064: 60        - SET2:   rts
2065: 00        - OPTBL:  .byte <SET-1          // 1X
2066: f7        - BRTBL:  .byte  <RTN-1          // 0
2067: 03        -         .byte  <LD-1           // 2X
2068: 8b        -         .byte  <BR-1           // 1
2069: 13        -         .byte  <ST-1           // 3X
206a: 8c        -         .byte  <BNC-1          // 2
206b: 2b        -         .byte  <LDAT-1         // 4X
206c: 9d        -         .byte  <BC-1           // 3
206d: 1c        -         .byte  <STAT-1         // 5X
206e: a0        -         .byte  <BP-1           // 4
206f: 35        -         .byte  <LDDAT-1        // 6X
2070: a7        -         .byte  <BM-1           // 5
2071: 3f        -         .byte  <STDAT-1        // 7X
2072: ae        -         .byte  <BZ-1           // 6
2073: e7        -         .byte  <POP-1          // 8X
2074: b7        -         .byte  <BNZ-1          // 7
2075: 49        -         .byte  <STPAT-1        // 9X
2076: c0        -         .byte  <BM1-1          // 8
2077: 73        -         .byte  <ADD-1          // AX
2078: cb        -         .byte  <BNM1-1         // 9
2079: 5c        -         .byte  <SUB-1          // BX
207a: 0c        -         .byte  <BK-1           // A
207b: eb        -         .byte  <POPD-1         // CX
207c: d6        -         .byte  <RS-1           // B
207d: 5e        -         .byte  <CPR-1          // DX
207e: 81        -         .byte  <BS-1           // C
207f: 24        -         .byte  <INR-1          // EX
2080: 10        -         .byte  <XJSR-1         // D
2081: 53        -         .byte  <DCR-1          // FX
2082: 0d        -         .byte  <SETM-1         // E
2083: d5        -         .byte  <NUL-1          // UNUSED
2084: f4        -         .byte  <SETI-1         // F
2085: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -         .align $100            // ensures page aligned
20a5: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
20c5: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
20e5: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                
2100: ea        - RTS_FIX:nop                // otherwise RTS "cleverness" not so clever
2101: 4c 51 20  - SET:    jmp SETZ           // ALWAYS TAKEN (moved out of page)
2104: b5 17     - LD:     lda  R0L,X
2106: 85 17     -         sta  R0L
2108: b5 18     -         lda  R0H,X          // MOVE RX TO R0
210a: 85 18     -         sta  R0H
210c: 60        -         rts
210d: 00        - BK:     brk
210e: 4c 78 22  - SETM:   jmp SETM_OUTOFPAGE 	// code will make block larger than 255 if placed here
2111: 4c 8a 22  - XJSR:   jmp XJSR_OUTOFPAGE 	// code will make block larger than 255 if placed here
2114: a5 17     - ST:     lda  R0L
2116: 95 17     -         sta  R0L,X          // MOVE R0 TO RX
2118: a5 18     -         lda  R0H
211a: 95 18     -         sta  R0H,X
211c: 60        -         rts
211d: a5 17     - STAT:   lda  R0L	
211f: 81 17     - STAT2:  sta  (R0L,X)        // STORE BYTE INDIRECT
2121: a0 00     -         ldy  #$00
2123: 84 34     - STAT3:  sty  R14H           // INDICATE R0 IS RESULT NEG
2125: f6 17     - INR:    inc  R0L,X
2127: d0 02     -         bne  INR2           // INCR RX
2129: f6 18     -         inc  R0H,X	
212b: 60        - INR2:   rts
212c: a1 17     - LDAT:   lda  (R0L,X)        // LOAD INDIRECT (RX)
212e: 85 17     -         sta  R0L            // TO R0
2130: a0 00     -         ldy  #$00
2132: 84 18     -         sty  R0H            // ZERO HIGH ORDER R0 BYTE
2134: f0 ed     -         beq  STAT3          // ALWAYS TAKEN
2136: 20 2c 21  - LDDAT:  jsr  LDAT           // LOW ORDER BYTE TO R0, INCR RX
2139: a1 17     -         lda  (R0L,X)        // HIGH ORDER BYTE TO R0
213b: 85 18     -         sta  R0H
213d: 4c 25 21  -         jmp  INR            // INCR RX
2140: 20 1d 21  - STDAT:  jsr  STAT           // STORE INDIRECT LOW ORDER
2143: a5 18     -         lda  R0H            // BYTE AND INCR RX. THEN
2145: 81 17     -         sta  (R0L,X)        // STORE HIGH ORDER BYTE.
2147: 4c 25 21  -         jmp  INR            // INCR RX AND RETURN
214a: 20 54 21  - STPAT:  jsr  DCR            // DECR RX
214d: a5 17     -         lda  R0L
214f: 81 17     -         sta  (R0L,X)        // STORE R0 LOW BYTE @RX
2151: 4c 04 22  -         jmp  POP3           // INDICATE R0 AS LAST RESULT REG
2154: b5 17     - DCR:    lda  R0L,X
2156: d0 02     -         bne  DCR2           // DECR RX
2158: d6 18     -         dec  R0H,X
215a: d6 17     - DCR2:   dec  R0L,X
215c: 60        -         rts
215d: a0 00     - SUB:    ldy  #$00           // RESULT TO R0
215f: 38        - CPR:    sec                 // NOTE Y REG = 13*2 FOR CPR
2160: a5 17     -         lda  R0L
2162: f5 17     -         sbc  R0L,X
2164: 99 17 00  -         sta  R0L,Y          // R0-RX TO RY
2167: a5 18     -         lda  R0H
2169: f5 18     -         sbc  R0H,X
216b: 99 18 00  - SUB2:   sta  R0H,Y
216e: 98        -         tya                 // LAST RESULT REG*2
216f: 69 00     -         adc  #$00           // CARRY TO LSB
2171: 85 34     -         sta  R14H
2173: 60        -         rts
2174: a5 17     - ADD:    lda  R0L
2176: 75 17     -         adc  R0L,X
2178: 85 17     -         sta  R0L            // R0+RX TO R0
217a: a5 18     -         lda  R0H
217c: 75 18     -         adc  R0H,X
217e: a0 00     -         ldy  #$00           // R0 FOR RESULT
2180: f0 e9     -         beq  SUB2           // FINISH ADD
2182: a5 35     - BS:     lda  R15L           // NOTE X REG IS 12*2!
2184: 20 1f 21  -         jsr  STAT2          // PUSH LOW PC BYTE VIA R12
2187: a5 36     -         lda  R15H
2189: 20 1f 21  -         jsr  STAT2          // PUSH HIGH ORDER PC BYTE
218c: 18        - BR:     clc
218d: b0 0e     - BNC:    bcs  BNC2           // NO CARRY TEST	
218f: b1 35     - BR1:    lda  (R15L),Y       // DISPLACEMENT BYTE
2191: 10 01     -         bpl  BR2
2193: 88        -         dey
2194: 65 35     - BR2:    adc  R15L           // ADD TO PC
2196: 85 35     -         sta  R15L
2198: 98        -         tya
2199: 65 36     -         adc  R15H
219b: 85 36     -         sta  R15H
219d: 60        - BNC2:   rts
219e: b0 ec     - BC:     bcs  BR
21a0: 60        -         rts
21a1: 0a        - BP:     asl                 // DOUBLE RESULT-REG INDEX
21a2: aa        -         tax                 // TO X REG FOR INDEXING
21a3: b5 18     -         lda  R0H,X          // TEST FOR PLUS
21a5: 10 e8     -         bpl  BR1            // BRANCH IF SO
21a7: 60        -         rts
21a8: 0a        - BM:     asl                 // DOUBLE RESULT-REG INDEX
21a9: aa        -         tax
21aa: b5 18     -         lda  R0H,X          // TEST FOR MINUS
21ac: 30 e1     -         bmi  BR1
21ae: 60        -         rts
21af: 0a        - BZ:     asl                 // DOUBLE RESULT-REG INDEX
21b0: aa        -         tax
21b1: b5 17     -         lda  R0L,X          // TEST FOR ZERO
21b3: 15 18     -         ora  R0H,X          // (BOTH BYTES)
21b5: f0 d8     -         beq  BR1            // BRANCH IF SO
21b7: 60        -         rts
21b8: 0a        - BNZ:    asl                 // DOUBLE RESULT-REG INDEX
21b9: aa        -         tax
21ba: b5 17     -         lda  R0L,X          // TEST FOR NON-ZERO
21bc: 15 18     -         ora  R0H,X          // (BOTH BYTES)
21be: d0 cf     -         bne  BR1            // BRANCH IF SO
21c0: 60        -         rts	
21c1: 0a        - BM1:    asl                 // DOUBLE RESULT-REG INDEX
21c2: aa        -         tax
21c3: b5 17     -         lda  R0L,X          // CHECK BOTH BYTES
21c5: 35 18     -         and  R0H,X          // FOR $FF (MINUS 1)
21c7: 49 ff     -         eor  #$FF
21c9: f0 c4     -         beq  BR1            // BRANCH IF SO
21cb: 60        -         rts
21cc: 0a        - BNM1:   asl                 // DOUBLE RESULT-REG INDEX
21cd: aa        -         tax
21ce: b5 17     -         lda  R0L,X
21d0: 35 18     -         and  R0H,X          // CHECK BOTH BYTES FOR NO $FF
21d2: 49 ff     -         eor  #$FF
21d4: d0 b9     -         bne  BR1            // BRANCH IF NOT MINUS 1
21d6: 60        - NUL:    rts
21d7: a2 18     - RS:     ldx  #$18           // 12*2 FOR R12 AS STACK POINTER
21d9: 20 54 21  -         jsr  DCR            // DECR STACK POINTER
21dc: a1 17     -         lda  (R0L,X)        // POP HIGH RETURN ADDRESS TO PC
21de: 85 36     -         sta  R15H
21e0: 20 54 21  -         jsr  DCR            // SAME FOR LOW ORDER BYTE
21e3: a1 17     -         lda  (R0L,X)
21e5: 85 35     -         sta  R15L
21e7: 60        -         rts
21e8: a0 00     - POP:    ldy  #$00           // HIGH ORDER BYTE = 0
21ea: f0 0f     -         beq  POP2           // ALWAYS TAKEN
21ec: 20 54 21  - POPD:   jsr  DCR            // DECR RX
21ef: a1 17     -         lda  (R0L,X)        // POP HIGH ORDER BYTE @RX
21f1: a8        -         tay                 // SAVE IN Y REG	
21f2: 4c fb 21  -         jmp POP2
21f5: 4c 66 22  - SETI:   jmp SETI_OUTOFPAGE
21f8: 4c 09 22  - RTN:    jmp  RTNZ
21fb: 20 54 21  - POP2:   jsr  DCR            // DECR RX
21fe: a1 17     -         lda  (R0L,X)        // LOW ORDER BYTE
2200: 85 17     -         sta  R0L            // TO R0
2202: 84 18     -         sty  R0H
2204: a0 00     - POP3:   ldy  #$00           // INDICATE R0 AS LAST RESULT REG
2206: 84 34     -         sty  R14H
2208: 60        -         rts
2209: 68        - RTNZ:   pla                 // POP RETURN ADDRESS
220a: 68        -         pla
220b: ad aa 22  -         lda SW16_SAVE_RESTORE
220e: f0 03     -         beq RESTORED
2210: 20 26 22  -         jsr RESTORE        // RESTORE 6502 REG CONTENTS
2213: 6c 35 00  - RESTORED:jmp  (R15L)         // RETURN TO 6502 CODE VIA PC
2216: 8d a6 22  - SAVE:   sta ACCUMULATOR
2219: 8e a7 22  -         stx XREG
221c: 8c a8 22  -         sty YREG
221f: 08        -         php
2220: 68        -         pla
2221: 8d a9 22  -         sta STATUS
2224: d8        -         cld
2225: 60        -         rts
2226: ad a9 22  - RESTORE:lda STATUS
2229: 48        -         pha
222a: ad a6 22  -         lda ACCUMULATOR
222d: ae a7 22  -         ldx XREG
2230: ac a8 22  -         ldy YREG
2233: 28        -         plp
2234: 60        -         rts
2235: 68        - BREAK_HANDLER:pla		// Y
2236: a8        -         tay		// restore Y
2237: 68        -         pla		// X
2238: aa        -         tax		// restore X
2239: 68        -         pla		// restore A
223a: 85 37     -         sta RL(ZP)
223c: 28        -         plp		// restore Status Flags
223d: 68        -         pla		// PCL discard - not useful
223e: 68        -         pla		// PCH discard - not useful
223f: a5 37     -         lda RL(ZP)
2241: 4c 28 20  -         jmp SW16D
2244: b1 35     - SETIM_COMMON:lda (R15L),Y       		// dest addr high
2246: 85 37     -         sta RL(ZP)
2248: e6 35     -         inc R15L
224a: d0 02     -         bne !incremented+ 		// inc PC
224c: e6 36     -         inc R15H
224e: b1 35     -         lda (R15L),Y       		// dest addr low
2250: 85 38     -         sta RH(ZP)
2252: e6 35     -         inc R15L
2254: d0 02     -         bne !incremented+ 		// inc PC
2256: e6 36     -         inc R15H
2258: b1 35     -         lda (R15L),Y       		// dest register
225a: e6 35     -         inc R15L
225c: d0 02     -         bne !incremented+ 		// inc PC
225e: e6 36     -         inc R15H
2260: a8        -         tay
2261: e6 37     -         inc RL(ZP)
2263: a2 37     -         ldx #RL(ZP)
2265: 60        -         rts
2266: 20 44 22  - SETI_OUTOFPAGE:jsr SETIM_COMMON
2269: a1 00     -         lda ($00,X)
226b: 99 00 00  -         sta $00,Y				// low order
226e: c6 37     -         dec RL(ZP)
2270: a1 00     -         lda ($00,X)
2272: 99 01 00  -         sta $01,Y				// high order
2275: 4c 28 20  -         jmp SW16D				// back to SWEET16
2278: 20 44 22  - SETM_OUTOFPAGE:jsr SETIM_COMMON
227b: a1 00     -         lda ($00,X)
227d: 99 01 00  -         sta $01,Y				// high order
2280: c6 37     -         dec RL(ZP)
2282: a1 00     -         lda ($00,X)
2284: 99 00 00  -         sta $00,Y				// low order
2287: 4c 28 20  -         jmp SW16D				// back to SWEET16
228a: a9 22     - XJSR_OUTOFPAGE:lda #>((!returned+)-1)	// so we know where to come back to as we're
228c: 48        -         pha						// using rts as jmps here
228d: a9 a2     -         lda #<((!returned+)-1)
228f: 48        -         pha
2290: b1 35     -         lda (R15L),Y       		// high order byte
2292: 48        -         pha
2293: e6 35     -         inc R15L
2295: d0 02     -         bne !incremented+ 		// inc PC
2297: e6 36     -         inc R15H
2299: b1 35     -         lda (R15L),Y       		// low order byte
229b: 48        -         pha
229c: e6 35     -         inc R15L
229e: d0 02     -         bne !incremented+ 		// inc PC
22a0: e6 36     -         inc R15H
22a2: 60        -         rts				   		// this performs jump from stack
22a3: 4c 28 20  -         jmp SW16D				// back to SWEET16
22a6: 00        - ACCUMULATOR:.byte 0
22a7: 00        - XREG:   .byte 0
22a8: 00        - YREG:   .byte 0
22a9: 00        - STATUS: .byte 0
22aa: 00        - SW16_SAVE_RESTORE:.byte 0
22ab: 00        - TEST_COUNT:.byte $00
22ac: 00        - TEST_PASS_COUNT:.byte $00
22ad: 00        - TEST_NAME_COUNT:.byte $00
22ae: 53 57 45 45 54 31 36 20 54 45 53 54 20 52 55 4e  - TEST_TITLE:.text "SWEET16 TEST RUNNER"
22be: 4e 45 52                                        
22c1: 0d 00     -         .byte RETURN, NULL
22c3: 12 34     - TEST_MEMORY:.byte $12,$34
22c5: 56 78     - TEST_MEMORY_2:.byte $56,$78
22c7: 9a bc     - TEST_MEMORY_3:.byte $9a,$bc
22c9: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  - TEST_MEMORY_SEQUENCE:.fill TMS_SIZE, i
22d9: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  - TEST_MEMORY_SEQUENCE_2:.fill TMS_SIZE, $ff
22e9: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - STACK_MEMORY:.fill STACK_SIZE, 0
22f9: ee ad 22  - SET_TEST:inc TEST_NAME_COUNT
22fc: ad 86 02  -         lda foreground_color
22ff: 48        -         pha
2300: a9 0f     -         lda #color
2302: 8d 86 02  -         sta foreground_color
2305: a2 00     -         ldx #$00
2307: bd 1a 23  -         lda msg,x
230a: f0 07     -         beq !done+
230c: 20 d2 ff  -         jsr kernal_chrout
230f: e8        -         inx
2310: 4c 07 23  -         jmp !loop-
2313: 68        -         pla
2314: 8d 86 02  -         sta foreground_color
2317: 4c 23 23  -         jmp !done+
231a: 20 20     - memory: .fill spacing, spacebar
231c: 53 45 54  -         .text name
231f: 2e 2e 2e  -         .text "..."
2322: 00        -         .byte NULL
2323: 20 0c 20  -         jsr SW16
2326: 15        -         .byte opcode(op, register)
2327: 34 12     -         .word address.getValue()
2329: 00        -         .byte $00 }
232a: ee ab 22  -         inc TEST_COUNT
232d: ad 86 02  -         lda foreground_color
2330: 48        -         pha
2331: a9 0e     -         lda #color
2333: 8d 86 02  -         sta foreground_color
2336: a2 00     -         ldx #$00
2338: bd 4b 23  -         lda msg,x
233b: f0 07     -         beq !done+
233d: 20 d2 ff  -         jsr kernal_chrout
2340: e8        -         inx
2341: 4c 38 23  -         jmp !loop-
2344: 68        -         pla
2345: 8d 86 02  -         sta foreground_color
2348: 4c 53 23  -         jmp !done+
234b: 20        - memory: .byte spacebar
234c: 56 41 4c 55 45                                   -         .text description
2351: 3a        -         .text ":"
2352: 00        -         .byte NULL
2353: a6 21     -         ldx rl(register.getValue())
2355: a4 22     -         ldy rh(register.getValue())
2357: e0 34     -         cpx #<value
2359: d0 25     -         bne !failed+
235b: c0 12     -         cpy #>value
235d: d0 21     -         bne !failed+
235f: ee ac 22  -         inc TEST_PASS_COUNT
2362: ad 86 02  -         lda foreground_color
2365: 48        -         pha
2366: a9 05     -         lda #color
2368: 8d 86 02  -         sta foreground_color
236b: a2 00     -         ldx #$00
236d: bd 00 20  -         lda msg,x
2370: f0 07     -         beq !done+
2372: 20 d2 ff  -         jsr kernal_chrout
2375: e8        -         inx
2376: 4c 6d 23  -         jmp !loop-
2379: 68        -         pla
237a: 8d 86 02  -         sta foreground_color
237d: 4c 9b 23  -         jmp !done+
2380: ad 86 02  -         lda foreground_color
2383: 48        -         pha
2384: a9 02     -         lda #color
2386: 8d 86 02  -         sta foreground_color
2389: a2 00     -         ldx #$00
238b: bd 02 20  -         lda msg,x
238e: f0 07     -         beq !done+
2390: 20 d2 ff  -         jsr kernal_chrout
2393: e8        -         inx
2394: 4c 8b 23  -         jmp !loop-
2397: 68        -         pla
2398: 8d 86 02  -         sta foreground_color
239b: a2 00     -         ldx #$00
239d: bd ac 23  -         lda msg,x
23a0: f0 07     -         beq !done+
23a2: 20 d2 ff  -         jsr kernal_chrout
23a5: e8        -         inx
23a6: 4c 9d 23  -         jmp !loop-
23a9: 4c ae 23  -         jmp !done+
23ac: 0d 00     - memory: .byte RETURN, NULL
23ae: ae ad 22  -         ldx TEST_NAME_COUNT
23b1: e0 15     -         cpx #TESTS_PER_PAGE
23b3: d0 5d     -         bne !exit+
23b5: ad 86 02  -         lda foreground_color
23b8: 48        -         pha
23b9: a9 01     -         lda #color
23bb: 8d 86 02  -         sta foreground_color
23be: a2 00     -         ldx #$00
23c0: bd d3 23  -         lda msg,x
23c3: f0 07     -         beq !done+
23c5: 20 d2 ff  -         jsr kernal_chrout
23c8: e8        -         inx
23c9: 4c c0 23  -         jmp !loop-
23cc: 68        -         pla
23cd: 8d 86 02  -         sta foreground_color
23d0: 4c f2 23  -         jmp !no_key+
23d3: 0d        - memory: .byte RETURN
23d4: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
23e4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
23f0: 0d 00     -         .byte RETURN, NULL
23f2: 20 9f ff  -         jsr scnkey  // scan keyboard
23f5: 20 e4 ff  -         jsr getin	// put result into A
23f8: f0 f8     -         beq !no_key-
23fa: a2 00     -         ldx #$00
23fc: bd 0b 24  -         lda msg,x
23ff: f0 07     -         beq !done+
2401: 20 d2 ff  -         jsr kernal_chrout
2404: e8        -         inx
2405: 4c fc 23  -         jmp !loop-
2408: 4c 0d 24  -         jmp !done+
240b: 0d 00     - newline:.byte RETURN, NULL
240d: a2 00     -         ldx #$00
240f: 8e ad 22  -         stx TEST_NAME_COUNT
2412: 60        -         rts
2413: ee ad 22  - LOAD_TEST:inc TEST_NAME_COUNT
2416: ad 86 02  -         lda foreground_color
2419: 48        -         pha
241a: a9 0f     -         lda #color
241c: 8d 86 02  -         sta foreground_color
241f: a2 00     -         ldx #$00
2421: bd 34 24  -         lda msg,x
2424: f0 07     -         beq !done+
2426: 20 d2 ff  -         jsr kernal_chrout
2429: e8        -         inx
242a: 4c 21 24  -         jmp !loop-
242d: 68        -         pla
242e: 8d 86 02  -         sta foreground_color
2431: 4c 3e 24  -         jmp !done+
2434: 20 20     - memory: .fill spacing, spacebar
2436: 4c 4f 41 44                                      -         .text name
243a: 2e 2e 2e  -         .text "..."
243d: 00        -         .byte NULL
243e: 20 0c 20  -         jsr SW16
2441: 15        -         .byte opcode(op, register)
2442: 21 43     -         .word address.getValue()
2444: 25        -         .byte opcode($20, register) }
2445: 00        -         .byte $00 }
2446: ee ab 22  -         inc TEST_COUNT
2449: ad 86 02  -         lda foreground_color
244c: 48        -         pha
244d: a9 0e     -         lda #color
244f: 8d 86 02  -         sta foreground_color
2452: a2 00     -         ldx #$00
2454: bd 67 24  -         lda msg,x
2457: f0 07     -         beq !done+
2459: 20 d2 ff  -         jsr kernal_chrout
245c: e8        -         inx
245d: 4c 54 24  -         jmp !loop-
2460: 68        -         pla
2461: 8d 86 02  -         sta foreground_color
2464: 4c 6d 24  -         jmp !done+
2467: 20        - memory: .byte spacebar
2468: 41 43 43  -         .text description
246b: 3a        -         .text ":"
246c: 00        -         .byte NULL
246d: a6 17     -         ldx rl(register.getValue())
246f: a4 18     -         ldy rh(register.getValue())
2471: e0 21     -         cpx #<value
2473: d0 25     -         bne !failed+
2475: c0 43     -         cpy #>value
2477: d0 21     -         bne !failed+
2479: ee ac 22  -         inc TEST_PASS_COUNT
247c: ad 86 02  -         lda foreground_color
247f: 48        -         pha
2480: a9 05     -         lda #color
2482: 8d 86 02  -         sta foreground_color
2485: a2 00     -         ldx #$00
2487: bd 00 20  -         lda msg,x
248a: f0 07     -         beq !done+
248c: 20 d2 ff  -         jsr kernal_chrout
248f: e8        -         inx
2490: 4c 87 24  -         jmp !loop-
2493: 68        -         pla
2494: 8d 86 02  -         sta foreground_color
2497: 4c b5 24  -         jmp !done+
249a: ad 86 02  -         lda foreground_color
249d: 48        -         pha
249e: a9 02     -         lda #color
24a0: 8d 86 02  -         sta foreground_color
24a3: a2 00     -         ldx #$00
24a5: bd 02 20  -         lda msg,x
24a8: f0 07     -         beq !done+
24aa: 20 d2 ff  -         jsr kernal_chrout
24ad: e8        -         inx
24ae: 4c a5 24  -         jmp !loop-
24b1: 68        -         pla
24b2: 8d 86 02  -         sta foreground_color
24b5: a2 00     -         ldx #$00
24b7: bd c6 24  -         lda msg,x
24ba: f0 07     -         beq !done+
24bc: 20 d2 ff  -         jsr kernal_chrout
24bf: e8        -         inx
24c0: 4c b7 24  -         jmp !loop-
24c3: 4c c8 24  -         jmp !done+
24c6: 0d 00     - memory: .byte RETURN, NULL
24c8: ae ad 22  -         ldx TEST_NAME_COUNT
24cb: e0 15     -         cpx #TESTS_PER_PAGE
24cd: d0 5d     -         bne !exit+
24cf: ad 86 02  -         lda foreground_color
24d2: 48        -         pha
24d3: a9 01     -         lda #color
24d5: 8d 86 02  -         sta foreground_color
24d8: a2 00     -         ldx #$00
24da: bd ed 24  -         lda msg,x
24dd: f0 07     -         beq !done+
24df: 20 d2 ff  -         jsr kernal_chrout
24e2: e8        -         inx
24e3: 4c da 24  -         jmp !loop-
24e6: 68        -         pla
24e7: 8d 86 02  -         sta foreground_color
24ea: 4c 0c 25  -         jmp !no_key+
24ed: 0d        - memory: .byte RETURN
24ee: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
24fe: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
250a: 0d 00     -         .byte RETURN, NULL
250c: 20 9f ff  -         jsr scnkey  // scan keyboard
250f: 20 e4 ff  -         jsr getin	// put result into A
2512: f0 f8     -         beq !no_key-
2514: a2 00     -         ldx #$00
2516: bd 25 25  -         lda msg,x
2519: f0 07     -         beq !done+
251b: 20 d2 ff  -         jsr kernal_chrout
251e: e8        -         inx
251f: 4c 16 25  -         jmp !loop-
2522: 4c 27 25  -         jmp !done+
2525: 0d 00     - newline:.byte RETURN, NULL
2527: a2 00     -         ldx #$00
2529: 8e ad 22  -         stx TEST_NAME_COUNT
252c: 60        -         rts
252d: ee ad 22  - STORE_TEST:inc TEST_NAME_COUNT
2530: ad 86 02  -         lda foreground_color
2533: 48        -         pha
2534: a9 0f     -         lda #color
2536: 8d 86 02  -         sta foreground_color
2539: a2 00     -         ldx #$00
253b: bd 4e 25  -         lda msg,x
253e: f0 07     -         beq !done+
2540: 20 d2 ff  -         jsr kernal_chrout
2543: e8        -         inx
2544: 4c 3b 25  -         jmp !loop-
2547: 68        -         pla
2548: 8d 86 02  -         sta foreground_color
254b: 4c 59 25  -         jmp !done+
254e: 20 20     - memory: .fill spacing, spacebar
2550: 53 54 4f 52 45                                   -         .text name
2555: 2e 2e 2e  -         .text "..."
2558: 00        -         .byte NULL
2559: 20 0c 20  -         jsr SW16
255c: 15        -         .byte opcode(op, register)
255d: 34 12     -         .word address.getValue()
255f: 25        -         .byte opcode($20, register) }
2560: 36        -         .byte opcode($30, register) }
2561: 00        -         .byte $00 }
2562: ee ab 22  -         inc TEST_COUNT
2565: ad 86 02  -         lda foreground_color
2568: 48        -         pha
2569: a9 0e     -         lda #color
256b: 8d 86 02  -         sta foreground_color
256e: a2 00     -         ldx #$00
2570: bd 83 25  -         lda msg,x
2573: f0 07     -         beq !done+
2575: 20 d2 ff  -         jsr kernal_chrout
2578: e8        -         inx
2579: 4c 70 25  -         jmp !loop-
257c: 68        -         pla
257d: 8d 86 02  -         sta foreground_color
2580: 4c 8b 25  -         jmp !done+
2583: 20        - memory: .byte spacebar
2584: 56 41 4c 55 45                                   -         .text description
2589: 3a        -         .text ":"
258a: 00        -         .byte NULL
258b: a6 23     -         ldx rl(register.getValue())
258d: a4 24     -         ldy rh(register.getValue())
258f: e0 34     -         cpx #<value
2591: d0 25     -         bne !failed+
2593: c0 12     -         cpy #>value
2595: d0 21     -         bne !failed+
2597: ee ac 22  -         inc TEST_PASS_COUNT
259a: ad 86 02  -         lda foreground_color
259d: 48        -         pha
259e: a9 05     -         lda #color
25a0: 8d 86 02  -         sta foreground_color
25a3: a2 00     -         ldx #$00
25a5: bd 00 20  -         lda msg,x
25a8: f0 07     -         beq !done+
25aa: 20 d2 ff  -         jsr kernal_chrout
25ad: e8        -         inx
25ae: 4c a5 25  -         jmp !loop-
25b1: 68        -         pla
25b2: 8d 86 02  -         sta foreground_color
25b5: 4c d3 25  -         jmp !done+
25b8: ad 86 02  -         lda foreground_color
25bb: 48        -         pha
25bc: a9 02     -         lda #color
25be: 8d 86 02  -         sta foreground_color
25c1: a2 00     -         ldx #$00
25c3: bd 02 20  -         lda msg,x
25c6: f0 07     -         beq !done+
25c8: 20 d2 ff  -         jsr kernal_chrout
25cb: e8        -         inx
25cc: 4c c3 25  -         jmp !loop-
25cf: 68        -         pla
25d0: 8d 86 02  -         sta foreground_color
25d3: a2 00     -         ldx #$00
25d5: bd e4 25  -         lda msg,x
25d8: f0 07     -         beq !done+
25da: 20 d2 ff  -         jsr kernal_chrout
25dd: e8        -         inx
25de: 4c d5 25  -         jmp !loop-
25e1: 4c e6 25  -         jmp !done+
25e4: 0d 00     - memory: .byte RETURN, NULL
25e6: ae ad 22  -         ldx TEST_NAME_COUNT
25e9: e0 15     -         cpx #TESTS_PER_PAGE
25eb: d0 5d     -         bne !exit+
25ed: ad 86 02  -         lda foreground_color
25f0: 48        -         pha
25f1: a9 01     -         lda #color
25f3: 8d 86 02  -         sta foreground_color
25f6: a2 00     -         ldx #$00
25f8: bd 0b 26  -         lda msg,x
25fb: f0 07     -         beq !done+
25fd: 20 d2 ff  -         jsr kernal_chrout
2600: e8        -         inx
2601: 4c f8 25  -         jmp !loop-
2604: 68        -         pla
2605: 8d 86 02  -         sta foreground_color
2608: 4c 2a 26  -         jmp !no_key+
260b: 0d        - memory: .byte RETURN
260c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
261c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2628: 0d 00     -         .byte RETURN, NULL
262a: 20 9f ff  -         jsr scnkey  // scan keyboard
262d: 20 e4 ff  -         jsr getin	// put result into A
2630: f0 f8     -         beq !no_key-
2632: a2 00     -         ldx #$00
2634: bd 43 26  -         lda msg,x
2637: f0 07     -         beq !done+
2639: 20 d2 ff  -         jsr kernal_chrout
263c: e8        -         inx
263d: 4c 34 26  -         jmp !loop-
2640: 4c 45 26  -         jmp !done+
2643: 0d 00     - newline:.byte RETURN, NULL
2645: a2 00     -         ldx #$00
2647: 8e ad 22  -         stx TEST_NAME_COUNT
264a: 60        -         rts
264b: ee ad 22  - LOAD_INDIRECT_TEST:inc TEST_NAME_COUNT
264e: ad 86 02  -         lda foreground_color
2651: 48        -         pha
2652: a9 0f     -         lda #color
2654: 8d 86 02  -         sta foreground_color
2657: a2 00     -         ldx #$00
2659: bd 6c 26  -         lda msg,x
265c: f0 07     -         beq !done+
265e: 20 d2 ff  -         jsr kernal_chrout
2661: e8        -         inx
2662: 4c 59 26  -         jmp !loop-
2665: 68        -         pla
2666: 8d 86 02  -         sta foreground_color
2669: 4c 7f 26  -         jmp !done+
266c: 20 20     - memory: .fill spacing, spacebar
266e: 4c 4f 41 44 20 49 4e 44 49 52 45 43 54           -         .text name
267b: 2e 2e 2e  -         .text "..."
267e: 00        -         .byte NULL
267f: 20 0c 20  -         jsr SW16
2682: 15        -         .byte opcode(op, register)
2683: c3 22     -         .word address.getValue()
2685: 45        -         .byte opcode($40, register) }
2686: 00        -         .byte $00 }
2687: ee ab 22  -         inc TEST_COUNT
268a: ad 86 02  -         lda foreground_color
268d: 48        -         pha
268e: a9 0e     -         lda #color
2690: 8d 86 02  -         sta foreground_color
2693: a2 00     -         ldx #$00
2695: bd a8 26  -         lda msg,x
2698: f0 07     -         beq !done+
269a: 20 d2 ff  -         jsr kernal_chrout
269d: e8        -         inx
269e: 4c 95 26  -         jmp !loop-
26a1: 68        -         pla
26a2: 8d 86 02  -         sta foreground_color
26a5: 4c ae 26  -         jmp !done+
26a8: 20        - memory: .byte spacebar
26a9: 41 43 43  -         .text description
26ac: 3a        -         .text ":"
26ad: 00        -         .byte NULL
26ae: a6 17     -         ldx rl(register.getValue())
26b0: a4 18     -         ldy rh(register.getValue())
26b2: ec c3 22  -         cpx address
26b5: d0 21     -         bne !failed+
26b7: ee ac 22  -         inc TEST_PASS_COUNT
26ba: ad 86 02  -         lda foreground_color
26bd: 48        -         pha
26be: a9 05     -         lda #color
26c0: 8d 86 02  -         sta foreground_color
26c3: a2 00     -         ldx #$00
26c5: bd 00 20  -         lda msg,x
26c8: f0 07     -         beq !done+
26ca: 20 d2 ff  -         jsr kernal_chrout
26cd: e8        -         inx
26ce: 4c c5 26  -         jmp !loop-
26d1: 68        -         pla
26d2: 8d 86 02  -         sta foreground_color
26d5: 4c f3 26  -         jmp !done+
26d8: ad 86 02  -         lda foreground_color
26db: 48        -         pha
26dc: a9 02     -         lda #color
26de: 8d 86 02  -         sta foreground_color
26e1: a2 00     -         ldx #$00
26e3: bd 02 20  -         lda msg,x
26e6: f0 07     -         beq !done+
26e8: 20 d2 ff  -         jsr kernal_chrout
26eb: e8        -         inx
26ec: 4c e3 26  -         jmp !loop-
26ef: 68        -         pla
26f0: 8d 86 02  -         sta foreground_color
26f3: ee ab 22  -         inc TEST_COUNT
26f6: ad 86 02  -         lda foreground_color
26f9: 48        -         pha
26fa: a9 0e     -         lda #color
26fc: 8d 86 02  -         sta foreground_color
26ff: a2 00     -         ldx #$00
2701: bd 14 27  -         lda msg,x
2704: f0 07     -         beq !done+
2706: 20 d2 ff  -         jsr kernal_chrout
2709: e8        -         inx
270a: 4c 01 27  -         jmp !loop-
270d: 68        -         pla
270e: 8d 86 02  -         sta foreground_color
2711: 4c 1a 27  -         jmp !done+
2714: 20        - memory: .byte spacebar
2715: 52 45 47  -         .text description
2718: 3a        -         .text ":"
2719: 00        -         .byte NULL
271a: a6 21     -         ldx rl(register.getValue())
271c: a4 22     -         ldy rh(register.getValue())
271e: e0 c4     -         cpx #<value
2720: d0 25     -         bne !failed+
2722: c0 22     -         cpy #>value
2724: d0 21     -         bne !failed+
2726: ee ac 22  -         inc TEST_PASS_COUNT
2729: ad 86 02  -         lda foreground_color
272c: 48        -         pha
272d: a9 05     -         lda #color
272f: 8d 86 02  -         sta foreground_color
2732: a2 00     -         ldx #$00
2734: bd 00 20  -         lda msg,x
2737: f0 07     -         beq !done+
2739: 20 d2 ff  -         jsr kernal_chrout
273c: e8        -         inx
273d: 4c 34 27  -         jmp !loop-
2740: 68        -         pla
2741: 8d 86 02  -         sta foreground_color
2744: 4c 62 27  -         jmp !done+
2747: ad 86 02  -         lda foreground_color
274a: 48        -         pha
274b: a9 02     -         lda #color
274d: 8d 86 02  -         sta foreground_color
2750: a2 00     -         ldx #$00
2752: bd 02 20  -         lda msg,x
2755: f0 07     -         beq !done+
2757: 20 d2 ff  -         jsr kernal_chrout
275a: e8        -         inx
275b: 4c 52 27  -         jmp !loop-
275e: 68        -         pla
275f: 8d 86 02  -         sta foreground_color
2762: a2 00     -         ldx #$00
2764: bd 73 27  -         lda msg,x
2767: f0 07     -         beq !done+
2769: 20 d2 ff  -         jsr kernal_chrout
276c: e8        -         inx
276d: 4c 64 27  -         jmp !loop-
2770: 4c 75 27  -         jmp !done+
2773: 0d 00     - memory: .byte RETURN, NULL
2775: ae ad 22  -         ldx TEST_NAME_COUNT
2778: e0 15     -         cpx #TESTS_PER_PAGE
277a: d0 5d     -         bne !exit+
277c: ad 86 02  -         lda foreground_color
277f: 48        -         pha
2780: a9 01     -         lda #color
2782: 8d 86 02  -         sta foreground_color
2785: a2 00     -         ldx #$00
2787: bd 9a 27  -         lda msg,x
278a: f0 07     -         beq !done+
278c: 20 d2 ff  -         jsr kernal_chrout
278f: e8        -         inx
2790: 4c 87 27  -         jmp !loop-
2793: 68        -         pla
2794: 8d 86 02  -         sta foreground_color
2797: 4c b9 27  -         jmp !no_key+
279a: 0d        - memory: .byte RETURN
279b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
27ab: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
27b7: 0d 00     -         .byte RETURN, NULL
27b9: 20 9f ff  -         jsr scnkey  // scan keyboard
27bc: 20 e4 ff  -         jsr getin	// put result into A
27bf: f0 f8     -         beq !no_key-
27c1: a2 00     -         ldx #$00
27c3: bd d2 27  -         lda msg,x
27c6: f0 07     -         beq !done+
27c8: 20 d2 ff  -         jsr kernal_chrout
27cb: e8        -         inx
27cc: 4c c3 27  -         jmp !loop-
27cf: 4c d4 27  -         jmp !done+
27d2: 0d 00     - newline:.byte RETURN, NULL
27d4: a2 00     -         ldx #$00
27d6: 8e ad 22  -         stx TEST_NAME_COUNT
27d9: 60        -         rts
27da: ee ad 22  - STORE_INDIRECT_TEST:inc TEST_NAME_COUNT
27dd: ad 86 02  -         lda foreground_color
27e0: 48        -         pha
27e1: a9 0f     -         lda #color
27e3: 8d 86 02  -         sta foreground_color
27e6: a2 00     -         ldx #$00
27e8: bd fb 27  -         lda msg,x
27eb: f0 07     -         beq !done+
27ed: 20 d2 ff  -         jsr kernal_chrout
27f0: e8        -         inx
27f1: 4c e8 27  -         jmp !loop-
27f4: 68        -         pla
27f5: 8d 86 02  -         sta foreground_color
27f8: 4c 0f 28  -         jmp !done+
27fb: 20 20     - memory: .fill spacing, spacebar
27fd: 53 54 4f 52 45 20 49 4e 44 49 52 45 43 54        -         .text name
280b: 2e 2e 2e  -         .text "..."
280e: 00        -         .byte NULL
280f: 20 0c 20  -         jsr SW16
2812: 15        -         .byte opcode(op, register)
2813: c3 22     -         .word address.getValue()
2815: 16        -         .byte opcode(op, register)
2816: c5 22     -         .word address.getValue()
2818: 45        -         .byte opcode($40, register) }
2819: 56        -         .byte opcode($50, register) }
281a: 00        -         .byte $00 }
281b: ee ab 22  -         inc TEST_COUNT
281e: ad 86 02  -         lda foreground_color
2821: 48        -         pha
2822: a9 0e     -         lda #color
2824: 8d 86 02  -         sta foreground_color
2827: a2 00     -         ldx #$00
2829: bd 3c 28  -         lda msg,x
282c: f0 07     -         beq !done+
282e: 20 d2 ff  -         jsr kernal_chrout
2831: e8        -         inx
2832: 4c 29 28  -         jmp !loop-
2835: 68        -         pla
2836: 8d 86 02  -         sta foreground_color
2839: 4c 42 28  -         jmp !done+
283c: 20        - memory: .byte spacebar
283d: 4d 45 4d  -         .text description
2840: 3a        -         .text ":"
2841: 00        -         .byte NULL
2842: a2 ff     -         ldx #$ff
2844: e8        -         inx
2845: e0 01     -         cpx #size
2847: f0 0b     -         beq !success+
2849: bd c3 22  -         lda source,x
284c: dd c5 22  -         cmp dest,x
284f: f0 f3     -         beq !loop-
2851: 4c 75 28  -         jmp !failed+
2854: ee ac 22  -         inc TEST_PASS_COUNT
2857: ad 86 02  -         lda foreground_color
285a: 48        -         pha
285b: a9 05     -         lda #color
285d: 8d 86 02  -         sta foreground_color
2860: a2 00     -         ldx #$00
2862: bd 00 20  -         lda msg,x
2865: f0 07     -         beq !done+
2867: 20 d2 ff  -         jsr kernal_chrout
286a: e8        -         inx
286b: 4c 62 28  -         jmp !loop-
286e: 68        -         pla
286f: 8d 86 02  -         sta foreground_color
2872: 4c 90 28  -         jmp !done+
2875: ad 86 02  -         lda foreground_color
2878: 48        -         pha
2879: a9 02     -         lda #color
287b: 8d 86 02  -         sta foreground_color
287e: a2 00     -         ldx #$00
2880: bd 02 20  -         lda msg,x
2883: f0 07     -         beq !done+
2885: 20 d2 ff  -         jsr kernal_chrout
2888: e8        -         inx
2889: 4c 80 28  -         jmp !loop-
288c: 68        -         pla
288d: 8d 86 02  -         sta foreground_color
2890: ee ab 22  -         inc TEST_COUNT
2893: ad 86 02  -         lda foreground_color
2896: 48        -         pha
2897: a9 0e     -         lda #color
2899: 8d 86 02  -         sta foreground_color
289c: a2 00     -         ldx #$00
289e: bd b1 28  -         lda msg,x
28a1: f0 07     -         beq !done+
28a3: 20 d2 ff  -         jsr kernal_chrout
28a6: e8        -         inx
28a7: 4c 9e 28  -         jmp !loop-
28aa: 68        -         pla
28ab: 8d 86 02  -         sta foreground_color
28ae: 4c b7 28  -         jmp !done+
28b1: 20        - memory: .byte spacebar
28b2: 53 52 43  -         .text description
28b5: 3a        -         .text ":"
28b6: 00        -         .byte NULL
28b7: a6 21     -         ldx rl(register.getValue())
28b9: a4 22     -         ldy rh(register.getValue())
28bb: e0 c4     -         cpx #<value
28bd: d0 25     -         bne !failed+
28bf: c0 22     -         cpy #>value
28c1: d0 21     -         bne !failed+
28c3: ee ac 22  -         inc TEST_PASS_COUNT
28c6: ad 86 02  -         lda foreground_color
28c9: 48        -         pha
28ca: a9 05     -         lda #color
28cc: 8d 86 02  -         sta foreground_color
28cf: a2 00     -         ldx #$00
28d1: bd 00 20  -         lda msg,x
28d4: f0 07     -         beq !done+
28d6: 20 d2 ff  -         jsr kernal_chrout
28d9: e8        -         inx
28da: 4c d1 28  -         jmp !loop-
28dd: 68        -         pla
28de: 8d 86 02  -         sta foreground_color
28e1: 4c ff 28  -         jmp !done+
28e4: ad 86 02  -         lda foreground_color
28e7: 48        -         pha
28e8: a9 02     -         lda #color
28ea: 8d 86 02  -         sta foreground_color
28ed: a2 00     -         ldx #$00
28ef: bd 02 20  -         lda msg,x
28f2: f0 07     -         beq !done+
28f4: 20 d2 ff  -         jsr kernal_chrout
28f7: e8        -         inx
28f8: 4c ef 28  -         jmp !loop-
28fb: 68        -         pla
28fc: 8d 86 02  -         sta foreground_color
28ff: ee ab 22  -         inc TEST_COUNT
2902: ad 86 02  -         lda foreground_color
2905: 48        -         pha
2906: a9 0e     -         lda #color
2908: 8d 86 02  -         sta foreground_color
290b: a2 00     -         ldx #$00
290d: bd 20 29  -         lda msg,x
2910: f0 07     -         beq !done+
2912: 20 d2 ff  -         jsr kernal_chrout
2915: e8        -         inx
2916: 4c 0d 29  -         jmp !loop-
2919: 68        -         pla
291a: 8d 86 02  -         sta foreground_color
291d: 4c 26 29  -         jmp !done+
2920: 20        - memory: .byte spacebar
2921: 44 53 54  -         .text description
2924: 3a        -         .text ":"
2925: 00        -         .byte NULL
2926: a6 23     -         ldx rl(register.getValue())
2928: a4 24     -         ldy rh(register.getValue())
292a: e0 c6     -         cpx #<value
292c: d0 25     -         bne !failed+
292e: c0 22     -         cpy #>value
2930: d0 21     -         bne !failed+
2932: ee ac 22  -         inc TEST_PASS_COUNT
2935: ad 86 02  -         lda foreground_color
2938: 48        -         pha
2939: a9 05     -         lda #color
293b: 8d 86 02  -         sta foreground_color
293e: a2 00     -         ldx #$00
2940: bd 00 20  -         lda msg,x
2943: f0 07     -         beq !done+
2945: 20 d2 ff  -         jsr kernal_chrout
2948: e8        -         inx
2949: 4c 40 29  -         jmp !loop-
294c: 68        -         pla
294d: 8d 86 02  -         sta foreground_color
2950: 4c 6e 29  -         jmp !done+
2953: ad 86 02  -         lda foreground_color
2956: 48        -         pha
2957: a9 02     -         lda #color
2959: 8d 86 02  -         sta foreground_color
295c: a2 00     -         ldx #$00
295e: bd 02 20  -         lda msg,x
2961: f0 07     -         beq !done+
2963: 20 d2 ff  -         jsr kernal_chrout
2966: e8        -         inx
2967: 4c 5e 29  -         jmp !loop-
296a: 68        -         pla
296b: 8d 86 02  -         sta foreground_color
296e: a2 00     -         ldx #$00
2970: bd 7f 29  -         lda msg,x
2973: f0 07     -         beq !done+
2975: 20 d2 ff  -         jsr kernal_chrout
2978: e8        -         inx
2979: 4c 70 29  -         jmp !loop-
297c: 4c 81 29  -         jmp !done+
297f: 0d 00     - memory: .byte RETURN, NULL
2981: ae ad 22  -         ldx TEST_NAME_COUNT
2984: e0 15     -         cpx #TESTS_PER_PAGE
2986: d0 5d     -         bne !exit+
2988: ad 86 02  -         lda foreground_color
298b: 48        -         pha
298c: a9 01     -         lda #color
298e: 8d 86 02  -         sta foreground_color
2991: a2 00     -         ldx #$00
2993: bd a6 29  -         lda msg,x
2996: f0 07     -         beq !done+
2998: 20 d2 ff  -         jsr kernal_chrout
299b: e8        -         inx
299c: 4c 93 29  -         jmp !loop-
299f: 68        -         pla
29a0: 8d 86 02  -         sta foreground_color
29a3: 4c c5 29  -         jmp !no_key+
29a6: 0d        - memory: .byte RETURN
29a7: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
29b7: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
29c3: 0d 00     -         .byte RETURN, NULL
29c5: 20 9f ff  -         jsr scnkey  // scan keyboard
29c8: 20 e4 ff  -         jsr getin	// put result into A
29cb: f0 f8     -         beq !no_key-
29cd: a2 00     -         ldx #$00
29cf: bd de 29  -         lda msg,x
29d2: f0 07     -         beq !done+
29d4: 20 d2 ff  -         jsr kernal_chrout
29d7: e8        -         inx
29d8: 4c cf 29  -         jmp !loop-
29db: 4c e0 29  -         jmp !done+
29de: 0d 00     - newline:.byte RETURN, NULL
29e0: a2 00     -         ldx #$00
29e2: 8e ad 22  -         stx TEST_NAME_COUNT
29e5: 60        -         rts
29e6: ee ad 22  - LOAD_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
29e9: ad 86 02  -         lda foreground_color
29ec: 48        -         pha
29ed: a9 0f     -         lda #color
29ef: 8d 86 02  -         sta foreground_color
29f2: a2 00     -         ldx #$00
29f4: bd 07 2a  -         lda msg,x
29f7: f0 07     -         beq !done+
29f9: 20 d2 ff  -         jsr kernal_chrout
29fc: e8        -         inx
29fd: 4c f4 29  -         jmp !loop-
2a00: 68        -         pla
2a01: 8d 86 02  -         sta foreground_color
2a04: 4c 21 2a  -         jmp !done+
2a07: 20 20     - memory: .fill spacing, spacebar
2a09: 4c 4f 41 44 20 44 4f 55 42 4c 45 20 49 4e 44 49  -         .text name
2a19: 52 45 43 54                                     
2a1d: 2e 2e 2e  -         .text "..."
2a20: 00        -         .byte NULL
2a21: 20 0c 20  -         jsr SW16
2a24: 15        -         .byte opcode(op, register)
2a25: c3 22     -         .word address.getValue()
2a27: 65        -         .byte opcode($60, register) }
2a28: 00        -         .byte $00 }
2a29: ee ab 22  -         inc TEST_COUNT
2a2c: ad 86 02  -         lda foreground_color
2a2f: 48        -         pha
2a30: a9 0e     -         lda #color
2a32: 8d 86 02  -         sta foreground_color
2a35: a2 00     -         ldx #$00
2a37: bd 4a 2a  -         lda msg,x
2a3a: f0 07     -         beq !done+
2a3c: 20 d2 ff  -         jsr kernal_chrout
2a3f: e8        -         inx
2a40: 4c 37 2a  -         jmp !loop-
2a43: 68        -         pla
2a44: 8d 86 02  -         sta foreground_color
2a47: 4c 50 2a  -         jmp !done+
2a4a: 20        - memory: .byte spacebar
2a4b: 41 43 43  -         .text description
2a4e: 3a        -         .text ":"
2a4f: 00        -         .byte NULL
2a50: a6 17     -         ldx rl(register.getValue())
2a52: a4 18     -         ldy rh(register.getValue())
2a54: ec c3 22  -         cpx address
2a57: d0 26     -         bne !failed+
2a59: cc c4 22  -         cpy address+1
2a5c: d0 21     -         bne !failed+
2a5e: ee ac 22  -         inc TEST_PASS_COUNT
2a61: ad 86 02  -         lda foreground_color
2a64: 48        -         pha
2a65: a9 05     -         lda #color
2a67: 8d 86 02  -         sta foreground_color
2a6a: a2 00     -         ldx #$00
2a6c: bd 00 20  -         lda msg,x
2a6f: f0 07     -         beq !done+
2a71: 20 d2 ff  -         jsr kernal_chrout
2a74: e8        -         inx
2a75: 4c 6c 2a  -         jmp !loop-
2a78: 68        -         pla
2a79: 8d 86 02  -         sta foreground_color
2a7c: 4c 9a 2a  -         jmp !done+
2a7f: ad 86 02  -         lda foreground_color
2a82: 48        -         pha
2a83: a9 02     -         lda #color
2a85: 8d 86 02  -         sta foreground_color
2a88: a2 00     -         ldx #$00
2a8a: bd 02 20  -         lda msg,x
2a8d: f0 07     -         beq !done+
2a8f: 20 d2 ff  -         jsr kernal_chrout
2a92: e8        -         inx
2a93: 4c 8a 2a  -         jmp !loop-
2a96: 68        -         pla
2a97: 8d 86 02  -         sta foreground_color
2a9a: ee ab 22  -         inc TEST_COUNT
2a9d: ad 86 02  -         lda foreground_color
2aa0: 48        -         pha
2aa1: a9 0e     -         lda #color
2aa3: 8d 86 02  -         sta foreground_color
2aa6: a2 00     -         ldx #$00
2aa8: bd bb 2a  -         lda msg,x
2aab: f0 07     -         beq !done+
2aad: 20 d2 ff  -         jsr kernal_chrout
2ab0: e8        -         inx
2ab1: 4c a8 2a  -         jmp !loop-
2ab4: 68        -         pla
2ab5: 8d 86 02  -         sta foreground_color
2ab8: 4c c0 2a  -         jmp !done+
2abb: 20        - memory: .byte spacebar
2abc: 2b 32     -         .text description
2abe: 3a        -         .text ":"
2abf: 00        -         .byte NULL
2ac0: a6 21     -         ldx rl(register.getValue())
2ac2: a4 22     -         ldy rh(register.getValue())
2ac4: e0 c5     -         cpx #<value
2ac6: d0 25     -         bne !failed+
2ac8: c0 22     -         cpy #>value
2aca: d0 21     -         bne !failed+
2acc: ee ac 22  -         inc TEST_PASS_COUNT
2acf: ad 86 02  -         lda foreground_color
2ad2: 48        -         pha
2ad3: a9 05     -         lda #color
2ad5: 8d 86 02  -         sta foreground_color
2ad8: a2 00     -         ldx #$00
2ada: bd 00 20  -         lda msg,x
2add: f0 07     -         beq !done+
2adf: 20 d2 ff  -         jsr kernal_chrout
2ae2: e8        -         inx
2ae3: 4c da 2a  -         jmp !loop-
2ae6: 68        -         pla
2ae7: 8d 86 02  -         sta foreground_color
2aea: 4c 08 2b  -         jmp !done+
2aed: ad 86 02  -         lda foreground_color
2af0: 48        -         pha
2af1: a9 02     -         lda #color
2af3: 8d 86 02  -         sta foreground_color
2af6: a2 00     -         ldx #$00
2af8: bd 02 20  -         lda msg,x
2afb: f0 07     -         beq !done+
2afd: 20 d2 ff  -         jsr kernal_chrout
2b00: e8        -         inx
2b01: 4c f8 2a  -         jmp !loop-
2b04: 68        -         pla
2b05: 8d 86 02  -         sta foreground_color
2b08: a2 00     -         ldx #$00
2b0a: bd 19 2b  -         lda msg,x
2b0d: f0 07     -         beq !done+
2b0f: 20 d2 ff  -         jsr kernal_chrout
2b12: e8        -         inx
2b13: 4c 0a 2b  -         jmp !loop-
2b16: 4c 1b 2b  -         jmp !done+
2b19: 0d 00     - memory: .byte RETURN, NULL
2b1b: ae ad 22  -         ldx TEST_NAME_COUNT
2b1e: e0 15     -         cpx #TESTS_PER_PAGE
2b20: d0 5d     -         bne !exit+
2b22: ad 86 02  -         lda foreground_color
2b25: 48        -         pha
2b26: a9 01     -         lda #color
2b28: 8d 86 02  -         sta foreground_color
2b2b: a2 00     -         ldx #$00
2b2d: bd 40 2b  -         lda msg,x
2b30: f0 07     -         beq !done+
2b32: 20 d2 ff  -         jsr kernal_chrout
2b35: e8        -         inx
2b36: 4c 2d 2b  -         jmp !loop-
2b39: 68        -         pla
2b3a: 8d 86 02  -         sta foreground_color
2b3d: 4c 5f 2b  -         jmp !no_key+
2b40: 0d        - memory: .byte RETURN
2b41: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2b51: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2b5d: 0d 00     -         .byte RETURN, NULL
2b5f: 20 9f ff  -         jsr scnkey  // scan keyboard
2b62: 20 e4 ff  -         jsr getin	// put result into A
2b65: f0 f8     -         beq !no_key-
2b67: a2 00     -         ldx #$00
2b69: bd 78 2b  -         lda msg,x
2b6c: f0 07     -         beq !done+
2b6e: 20 d2 ff  -         jsr kernal_chrout
2b71: e8        -         inx
2b72: 4c 69 2b  -         jmp !loop-
2b75: 4c 7a 2b  -         jmp !done+
2b78: 0d 00     - newline:.byte RETURN, NULL
2b7a: a2 00     -         ldx #$00
2b7c: 8e ad 22  -         stx TEST_NAME_COUNT
2b7f: 60        -         rts
2b80: ee ad 22  - STORE_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
2b83: ad 86 02  -         lda foreground_color
2b86: 48        -         pha
2b87: a9 0f     -         lda #color
2b89: 8d 86 02  -         sta foreground_color
2b8c: a2 00     -         ldx #$00
2b8e: bd a1 2b  -         lda msg,x
2b91: f0 07     -         beq !done+
2b93: 20 d2 ff  -         jsr kernal_chrout
2b96: e8        -         inx
2b97: 4c 8e 2b  -         jmp !loop-
2b9a: 68        -         pla
2b9b: 8d 86 02  -         sta foreground_color
2b9e: 4c b4 2b  -         jmp !done+
2ba1: 20 20     - memory: .fill spacing, spacebar
2ba3: 53 54 4f 52 45 20 44 42 4c 20 49 4e 44           -         .text name
2bb0: 2e 2e 2e  -         .text "..."
2bb3: 00        -         .byte NULL
2bb4: 20 0c 20  -         jsr SW16
2bb7: 15        -         .byte opcode(op, register)
2bb8: c3 22     -         .word address.getValue()
2bba: 16        -         .byte opcode(op, register)
2bbb: c5 22     -         .word address.getValue()
2bbd: 65        -         .byte opcode($60, register) }
2bbe: 76        -         .byte opcode($70, register) }
2bbf: 00        -         .byte $00 }
2bc0: ee ab 22  -         inc TEST_COUNT
2bc3: ad 86 02  -         lda foreground_color
2bc6: 48        -         pha
2bc7: a9 0e     -         lda #color
2bc9: 8d 86 02  -         sta foreground_color
2bcc: a2 00     -         ldx #$00
2bce: bd e1 2b  -         lda msg,x
2bd1: f0 07     -         beq !done+
2bd3: 20 d2 ff  -         jsr kernal_chrout
2bd6: e8        -         inx
2bd7: 4c ce 2b  -         jmp !loop-
2bda: 68        -         pla
2bdb: 8d 86 02  -         sta foreground_color
2bde: 4c e7 2b  -         jmp !done+
2be1: 20        - memory: .byte spacebar
2be2: 4d 45 4d  -         .text description
2be5: 3a        -         .text ":"
2be6: 00        -         .byte NULL
2be7: a2 ff     -         ldx #$ff
2be9: e8        -         inx
2bea: e0 02     -         cpx #size
2bec: f0 0b     -         beq !success+
2bee: bd c3 22  -         lda source,x
2bf1: dd c5 22  -         cmp dest,x
2bf4: f0 f3     -         beq !loop-
2bf6: 4c 1a 2c  -         jmp !failed+
2bf9: ee ac 22  -         inc TEST_PASS_COUNT
2bfc: ad 86 02  -         lda foreground_color
2bff: 48        -         pha
2c00: a9 05     -         lda #color
2c02: 8d 86 02  -         sta foreground_color
2c05: a2 00     -         ldx #$00
2c07: bd 00 20  -         lda msg,x
2c0a: f0 07     -         beq !done+
2c0c: 20 d2 ff  -         jsr kernal_chrout
2c0f: e8        -         inx
2c10: 4c 07 2c  -         jmp !loop-
2c13: 68        -         pla
2c14: 8d 86 02  -         sta foreground_color
2c17: 4c 35 2c  -         jmp !done+
2c1a: ad 86 02  -         lda foreground_color
2c1d: 48        -         pha
2c1e: a9 02     -         lda #color
2c20: 8d 86 02  -         sta foreground_color
2c23: a2 00     -         ldx #$00
2c25: bd 02 20  -         lda msg,x
2c28: f0 07     -         beq !done+
2c2a: 20 d2 ff  -         jsr kernal_chrout
2c2d: e8        -         inx
2c2e: 4c 25 2c  -         jmp !loop-
2c31: 68        -         pla
2c32: 8d 86 02  -         sta foreground_color
2c35: ee ab 22  -         inc TEST_COUNT
2c38: ad 86 02  -         lda foreground_color
2c3b: 48        -         pha
2c3c: a9 0e     -         lda #color
2c3e: 8d 86 02  -         sta foreground_color
2c41: a2 00     -         ldx #$00
2c43: bd 56 2c  -         lda msg,x
2c46: f0 07     -         beq !done+
2c48: 20 d2 ff  -         jsr kernal_chrout
2c4b: e8        -         inx
2c4c: 4c 43 2c  -         jmp !loop-
2c4f: 68        -         pla
2c50: 8d 86 02  -         sta foreground_color
2c53: 4c 5c 2c  -         jmp !done+
2c56: 20        - memory: .byte spacebar
2c57: 53 2b 32  -         .text description
2c5a: 3a        -         .text ":"
2c5b: 00        -         .byte NULL
2c5c: a6 21     -         ldx rl(register.getValue())
2c5e: a4 22     -         ldy rh(register.getValue())
2c60: e0 c5     -         cpx #<value
2c62: d0 25     -         bne !failed+
2c64: c0 22     -         cpy #>value
2c66: d0 21     -         bne !failed+
2c68: ee ac 22  -         inc TEST_PASS_COUNT
2c6b: ad 86 02  -         lda foreground_color
2c6e: 48        -         pha
2c6f: a9 05     -         lda #color
2c71: 8d 86 02  -         sta foreground_color
2c74: a2 00     -         ldx #$00
2c76: bd 00 20  -         lda msg,x
2c79: f0 07     -         beq !done+
2c7b: 20 d2 ff  -         jsr kernal_chrout
2c7e: e8        -         inx
2c7f: 4c 76 2c  -         jmp !loop-
2c82: 68        -         pla
2c83: 8d 86 02  -         sta foreground_color
2c86: 4c a4 2c  -         jmp !done+
2c89: ad 86 02  -         lda foreground_color
2c8c: 48        -         pha
2c8d: a9 02     -         lda #color
2c8f: 8d 86 02  -         sta foreground_color
2c92: a2 00     -         ldx #$00
2c94: bd 02 20  -         lda msg,x
2c97: f0 07     -         beq !done+
2c99: 20 d2 ff  -         jsr kernal_chrout
2c9c: e8        -         inx
2c9d: 4c 94 2c  -         jmp !loop-
2ca0: 68        -         pla
2ca1: 8d 86 02  -         sta foreground_color
2ca4: ee ab 22  -         inc TEST_COUNT
2ca7: ad 86 02  -         lda foreground_color
2caa: 48        -         pha
2cab: a9 0e     -         lda #color
2cad: 8d 86 02  -         sta foreground_color
2cb0: a2 00     -         ldx #$00
2cb2: bd c5 2c  -         lda msg,x
2cb5: f0 07     -         beq !done+
2cb7: 20 d2 ff  -         jsr kernal_chrout
2cba: e8        -         inx
2cbb: 4c b2 2c  -         jmp !loop-
2cbe: 68        -         pla
2cbf: 8d 86 02  -         sta foreground_color
2cc2: 4c cb 2c  -         jmp !done+
2cc5: 20        - memory: .byte spacebar
2cc6: 44 2b 32  -         .text description
2cc9: 3a        -         .text ":"
2cca: 00        -         .byte NULL
2ccb: a6 23     -         ldx rl(register.getValue())
2ccd: a4 24     -         ldy rh(register.getValue())
2ccf: e0 c7     -         cpx #<value
2cd1: d0 25     -         bne !failed+
2cd3: c0 22     -         cpy #>value
2cd5: d0 21     -         bne !failed+
2cd7: ee ac 22  -         inc TEST_PASS_COUNT
2cda: ad 86 02  -         lda foreground_color
2cdd: 48        -         pha
2cde: a9 05     -         lda #color
2ce0: 8d 86 02  -         sta foreground_color
2ce3: a2 00     -         ldx #$00
2ce5: bd 00 20  -         lda msg,x
2ce8: f0 07     -         beq !done+
2cea: 20 d2 ff  -         jsr kernal_chrout
2ced: e8        -         inx
2cee: 4c e5 2c  -         jmp !loop-
2cf1: 68        -         pla
2cf2: 8d 86 02  -         sta foreground_color
2cf5: 4c 13 2d  -         jmp !done+
2cf8: ad 86 02  -         lda foreground_color
2cfb: 48        -         pha
2cfc: a9 02     -         lda #color
2cfe: 8d 86 02  -         sta foreground_color
2d01: a2 00     -         ldx #$00
2d03: bd 02 20  -         lda msg,x
2d06: f0 07     -         beq !done+
2d08: 20 d2 ff  -         jsr kernal_chrout
2d0b: e8        -         inx
2d0c: 4c 03 2d  -         jmp !loop-
2d0f: 68        -         pla
2d10: 8d 86 02  -         sta foreground_color
2d13: a2 00     -         ldx #$00
2d15: bd 24 2d  -         lda msg,x
2d18: f0 07     -         beq !done+
2d1a: 20 d2 ff  -         jsr kernal_chrout
2d1d: e8        -         inx
2d1e: 4c 15 2d  -         jmp !loop-
2d21: 4c 26 2d  -         jmp !done+
2d24: 0d 00     - memory: .byte RETURN, NULL
2d26: ae ad 22  -         ldx TEST_NAME_COUNT
2d29: e0 15     -         cpx #TESTS_PER_PAGE
2d2b: d0 5d     -         bne !exit+
2d2d: ad 86 02  -         lda foreground_color
2d30: 48        -         pha
2d31: a9 01     -         lda #color
2d33: 8d 86 02  -         sta foreground_color
2d36: a2 00     -         ldx #$00
2d38: bd 4b 2d  -         lda msg,x
2d3b: f0 07     -         beq !done+
2d3d: 20 d2 ff  -         jsr kernal_chrout
2d40: e8        -         inx
2d41: 4c 38 2d  -         jmp !loop-
2d44: 68        -         pla
2d45: 8d 86 02  -         sta foreground_color
2d48: 4c 6a 2d  -         jmp !no_key+
2d4b: 0d        - memory: .byte RETURN
2d4c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2d5c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2d68: 0d 00     -         .byte RETURN, NULL
2d6a: 20 9f ff  -         jsr scnkey  // scan keyboard
2d6d: 20 e4 ff  -         jsr getin	// put result into A
2d70: f0 f8     -         beq !no_key-
2d72: a2 00     -         ldx #$00
2d74: bd 83 2d  -         lda msg,x
2d77: f0 07     -         beq !done+
2d79: 20 d2 ff  -         jsr kernal_chrout
2d7c: e8        -         inx
2d7d: 4c 74 2d  -         jmp !loop-
2d80: 4c 85 2d  -         jmp !done+
2d83: 0d 00     - newline:.byte RETURN, NULL
2d85: a2 00     -         ldx #$00
2d87: 8e ad 22  -         stx TEST_NAME_COUNT
2d8a: 60        -         rts
2d8b: ee ad 22  - POP_INDIRECT_TEST:inc TEST_NAME_COUNT
2d8e: ad 86 02  -         lda foreground_color
2d91: 48        -         pha
2d92: a9 0f     -         lda #color
2d94: 8d 86 02  -         sta foreground_color
2d97: a2 00     -         ldx #$00
2d99: bd ac 2d  -         lda msg,x
2d9c: f0 07     -         beq !done+
2d9e: 20 d2 ff  -         jsr kernal_chrout
2da1: e8        -         inx
2da2: 4c 99 2d  -         jmp !loop-
2da5: 68        -         pla
2da6: 8d 86 02  -         sta foreground_color
2da9: 4c c0 2d  -         jmp !done+
2dac: 20 20     - memory: .fill spacing, spacebar
2dae: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 31        -         .text name
2dbc: 2e 2e 2e  -         .text "..."
2dbf: 00        -         .byte NULL
2dc0: 20 0c 20  -         jsr SW16
2dc3: 15        -         .byte opcode(op, register)
2dc4: e9 22     -         .word address.getValue()
2dc6: 10        -         .byte opcode(op, register)
2dc7: 04 00     -         .word address.getValue()
2dc9: 55        -         .byte opcode($50, register) }
2dca: 0d        -         .byte $0d
2dcb: 2e        -         .byte >(address.getValue()-1)
2dcc: 5f        -         .byte <(address.getValue()-1)
2dcd: 10        -         .byte opcode(op, register)
2dce: 05 00     -         .word address.getValue()
2dd0: 55        -         .byte opcode($50, register) }
2dd1: 0d        -         .byte $0d
2dd2: 2e        -         .byte >(address.getValue()-1)
2dd3: ca        -         .byte <(address.getValue()-1)
2dd4: 10        -         .byte opcode(op, register)
2dd5: 06 00     -         .word address.getValue()
2dd7: 55        -         .byte opcode($50, register) }
2dd8: 0d        -         .byte $0d
2dd9: 2f        -         .byte >(address.getValue()-1)
2dda: 35        -         .byte <(address.getValue()-1)
2ddb: 85        -         .byte opcode($80, register) }
2ddc: 0d        -         .byte $0d
2ddd: 2f        -         .byte >(address.getValue()-1)
2dde: a0        -         .byte <(address.getValue()-1)
2ddf: 85        -         .byte opcode($80, register) }
2de0: 0d        -         .byte $0d
2de1: 30        -         .byte >(address.getValue()-1)
2de2: bb        -         .byte <(address.getValue()-1)
2de3: 85        -         .byte opcode($80, register) }
2de4: 0d        -         .byte $0d
2de5: 31        -         .byte >(address.getValue()-1)
2de6: 2a        -         .byte <(address.getValue()-1)
2de7: 00        -         .byte $00 }
2de8: a2 00     -         ldx #$00
2dea: bd f9 2d  -         lda msg,x
2ded: f0 07     -         beq !done+
2def: 20 d2 ff  -         jsr kernal_chrout
2df2: e8        -         inx
2df3: 4c ea 2d  -         jmp !loop-
2df6: 4c fb 2d  -         jmp !done+
2df9: 0d 00     - memory: .byte RETURN, NULL
2dfb: ae ad 22  -         ldx TEST_NAME_COUNT
2dfe: e0 15     -         cpx #TESTS_PER_PAGE
2e00: d0 5d     -         bne !exit+
2e02: ad 86 02  -         lda foreground_color
2e05: 48        -         pha
2e06: a9 01     -         lda #color
2e08: 8d 86 02  -         sta foreground_color
2e0b: a2 00     -         ldx #$00
2e0d: bd 20 2e  -         lda msg,x
2e10: f0 07     -         beq !done+
2e12: 20 d2 ff  -         jsr kernal_chrout
2e15: e8        -         inx
2e16: 4c 0d 2e  -         jmp !loop-
2e19: 68        -         pla
2e1a: 8d 86 02  -         sta foreground_color
2e1d: 4c 3f 2e  -         jmp !no_key+
2e20: 0d        - memory: .byte RETURN
2e21: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2e31: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2e3d: 0d 00     -         .byte RETURN, NULL
2e3f: 20 9f ff  -         jsr scnkey  // scan keyboard
2e42: 20 e4 ff  -         jsr getin	// put result into A
2e45: f0 f8     -         beq !no_key-
2e47: a2 00     -         ldx #$00
2e49: bd 58 2e  -         lda msg,x
2e4c: f0 07     -         beq !done+
2e4e: 20 d2 ff  -         jsr kernal_chrout
2e51: e8        -         inx
2e52: 4c 49 2e  -         jmp !loop-
2e55: 4c 5a 2e  -         jmp !done+
2e58: 0d 00     - newline:.byte RETURN, NULL
2e5a: a2 00     -         ldx #$00
2e5c: 8e ad 22  -         stx TEST_NAME_COUNT
2e5f: 60        -         rts
2e60: ee ab 22  -         inc TEST_COUNT
2e63: ad 86 02  -         lda foreground_color
2e66: 48        -         pha
2e67: a9 0e     -         lda #color
2e69: 8d 86 02  -         sta foreground_color
2e6c: a2 00     -         ldx #$00
2e6e: bd 81 2e  -         lda msg,x
2e71: f0 07     -         beq !done+
2e73: 20 d2 ff  -         jsr kernal_chrout
2e76: e8        -         inx
2e77: 4c 6e 2e  -         jmp !loop-
2e7a: 68        -         pla
2e7b: 8d 86 02  -         sta foreground_color
2e7e: 4c 85 2e  -         jmp !done+
2e81: 20        - memory: .byte spacebar
2e82: 31        -         .text description
2e83: 3a        -         .text ":"
2e84: 00        -         .byte NULL
2e85: a6 17     -         ldx rl(register.getValue())
2e87: a4 18     -         ldy rh(register.getValue())
2e89: ec e9 22  -         cpx address
2e8c: d0 21     -         bne !failed+
2e8e: ee ac 22  -         inc TEST_PASS_COUNT
2e91: ad 86 02  -         lda foreground_color
2e94: 48        -         pha
2e95: a9 05     -         lda #color
2e97: 8d 86 02  -         sta foreground_color
2e9a: a2 00     -         ldx #$00
2e9c: bd 00 20  -         lda msg,x
2e9f: f0 07     -         beq !done+
2ea1: 20 d2 ff  -         jsr kernal_chrout
2ea4: e8        -         inx
2ea5: 4c 9c 2e  -         jmp !loop-
2ea8: 68        -         pla
2ea9: 8d 86 02  -         sta foreground_color
2eac: 4c ca 2e  -         jmp !done+
2eaf: ad 86 02  -         lda foreground_color
2eb2: 48        -         pha
2eb3: a9 02     -         lda #color
2eb5: 8d 86 02  -         sta foreground_color
2eb8: a2 00     -         ldx #$00
2eba: bd 02 20  -         lda msg,x
2ebd: f0 07     -         beq !done+
2ebf: 20 d2 ff  -         jsr kernal_chrout
2ec2: e8        -         inx
2ec3: 4c ba 2e  -         jmp !loop-
2ec6: 68        -         pla
2ec7: 8d 86 02  -         sta foreground_color
2eca: 60        -         rts
2ecb: ee ab 22  -         inc TEST_COUNT
2ece: ad 86 02  -         lda foreground_color
2ed1: 48        -         pha
2ed2: a9 0e     -         lda #color
2ed4: 8d 86 02  -         sta foreground_color
2ed7: a2 00     -         ldx #$00
2ed9: bd ec 2e  -         lda msg,x
2edc: f0 07     -         beq !done+
2ede: 20 d2 ff  -         jsr kernal_chrout
2ee1: e8        -         inx
2ee2: 4c d9 2e  -         jmp !loop-
2ee5: 68        -         pla
2ee6: 8d 86 02  -         sta foreground_color
2ee9: 4c f0 2e  -         jmp !done+
2eec: 20        - memory: .byte spacebar
2eed: 32        -         .text description
2eee: 3a        -         .text ":"
2eef: 00        -         .byte NULL
2ef0: a6 17     -         ldx rl(register.getValue())
2ef2: a4 18     -         ldy rh(register.getValue())
2ef4: ec ea 22  -         cpx address
2ef7: d0 21     -         bne !failed+
2ef9: ee ac 22  -         inc TEST_PASS_COUNT
2efc: ad 86 02  -         lda foreground_color
2eff: 48        -         pha
2f00: a9 05     -         lda #color
2f02: 8d 86 02  -         sta foreground_color
2f05: a2 00     -         ldx #$00
2f07: bd 00 20  -         lda msg,x
2f0a: f0 07     -         beq !done+
2f0c: 20 d2 ff  -         jsr kernal_chrout
2f0f: e8        -         inx
2f10: 4c 07 2f  -         jmp !loop-
2f13: 68        -         pla
2f14: 8d 86 02  -         sta foreground_color
2f17: 4c 35 2f  -         jmp !done+
2f1a: ad 86 02  -         lda foreground_color
2f1d: 48        -         pha
2f1e: a9 02     -         lda #color
2f20: 8d 86 02  -         sta foreground_color
2f23: a2 00     -         ldx #$00
2f25: bd 02 20  -         lda msg,x
2f28: f0 07     -         beq !done+
2f2a: 20 d2 ff  -         jsr kernal_chrout
2f2d: e8        -         inx
2f2e: 4c 25 2f  -         jmp !loop-
2f31: 68        -         pla
2f32: 8d 86 02  -         sta foreground_color
2f35: 60        -         rts
2f36: ee ab 22  -         inc TEST_COUNT
2f39: ad 86 02  -         lda foreground_color
2f3c: 48        -         pha
2f3d: a9 0e     -         lda #color
2f3f: 8d 86 02  -         sta foreground_color
2f42: a2 00     -         ldx #$00
2f44: bd 57 2f  -         lda msg,x
2f47: f0 07     -         beq !done+
2f49: 20 d2 ff  -         jsr kernal_chrout
2f4c: e8        -         inx
2f4d: 4c 44 2f  -         jmp !loop-
2f50: 68        -         pla
2f51: 8d 86 02  -         sta foreground_color
2f54: 4c 5b 2f  -         jmp !done+
2f57: 20        - memory: .byte spacebar
2f58: 33        -         .text description
2f59: 3a        -         .text ":"
2f5a: 00        -         .byte NULL
2f5b: a6 17     -         ldx rl(register.getValue())
2f5d: a4 18     -         ldy rh(register.getValue())
2f5f: ec eb 22  -         cpx address
2f62: d0 21     -         bne !failed+
2f64: ee ac 22  -         inc TEST_PASS_COUNT
2f67: ad 86 02  -         lda foreground_color
2f6a: 48        -         pha
2f6b: a9 05     -         lda #color
2f6d: 8d 86 02  -         sta foreground_color
2f70: a2 00     -         ldx #$00
2f72: bd 00 20  -         lda msg,x
2f75: f0 07     -         beq !done+
2f77: 20 d2 ff  -         jsr kernal_chrout
2f7a: e8        -         inx
2f7b: 4c 72 2f  -         jmp !loop-
2f7e: 68        -         pla
2f7f: 8d 86 02  -         sta foreground_color
2f82: 4c a0 2f  -         jmp !done+
2f85: ad 86 02  -         lda foreground_color
2f88: 48        -         pha
2f89: a9 02     -         lda #color
2f8b: 8d 86 02  -         sta foreground_color
2f8e: a2 00     -         ldx #$00
2f90: bd 02 20  -         lda msg,x
2f93: f0 07     -         beq !done+
2f95: 20 d2 ff  -         jsr kernal_chrout
2f98: e8        -         inx
2f99: 4c 90 2f  -         jmp !loop-
2f9c: 68        -         pla
2f9d: 8d 86 02  -         sta foreground_color
2fa0: 60        -         rts
2fa1: a2 00     -         ldx #$00
2fa3: bd b2 2f  -         lda msg,x
2fa6: f0 07     -         beq !done+
2fa8: 20 d2 ff  -         jsr kernal_chrout
2fab: e8        -         inx
2fac: 4c a3 2f  -         jmp !loop-
2faf: 4c b4 2f  -         jmp !done+
2fb2: 0d 00     - memory: .byte RETURN, NULL
2fb4: ae ad 22  -         ldx TEST_NAME_COUNT
2fb7: e0 15     -         cpx #TESTS_PER_PAGE
2fb9: d0 5d     -         bne !exit+
2fbb: ad 86 02  -         lda foreground_color
2fbe: 48        -         pha
2fbf: a9 01     -         lda #color
2fc1: 8d 86 02  -         sta foreground_color
2fc4: a2 00     -         ldx #$00
2fc6: bd d9 2f  -         lda msg,x
2fc9: f0 07     -         beq !done+
2fcb: 20 d2 ff  -         jsr kernal_chrout
2fce: e8        -         inx
2fcf: 4c c6 2f  -         jmp !loop-
2fd2: 68        -         pla
2fd3: 8d 86 02  -         sta foreground_color
2fd6: 4c f8 2f  -         jmp !no_key+
2fd9: 0d        - memory: .byte RETURN
2fda: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
2fea: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
2ff6: 0d 00     -         .byte RETURN, NULL
2ff8: 20 9f ff  -         jsr scnkey  // scan keyboard
2ffb: 20 e4 ff  -         jsr getin	// put result into A
2ffe: f0 f8     -         beq !no_key-
3000: a2 00     -         ldx #$00
3002: bd 11 30  -         lda msg,x
3005: f0 07     -         beq !done+
3007: 20 d2 ff  -         jsr kernal_chrout
300a: e8        -         inx
300b: 4c 02 30  -         jmp !loop-
300e: 4c 13 30  -         jmp !done+
3011: 0d 00     - newline:.byte RETURN, NULL
3013: a2 00     -         ldx #$00
3015: 8e ad 22  -         stx TEST_NAME_COUNT
3018: ee ad 22  -         inc TEST_NAME_COUNT
301b: ad 86 02  -         lda foreground_color
301e: 48        -         pha
301f: a9 0f     -         lda #color
3021: 8d 86 02  -         sta foreground_color
3024: a2 00     -         ldx #$00
3026: bd 39 30  -         lda msg,x
3029: f0 07     -         beq !done+
302b: 20 d2 ff  -         jsr kernal_chrout
302e: e8        -         inx
302f: 4c 26 30  -         jmp !loop-
3032: 68        -         pla
3033: 8d 86 02  -         sta foreground_color
3036: 4c 4d 30  -         jmp !done+
3039: 20 20     - memory: .fill spacing, spacebar
303b: 50 4f 50 20 49 4e 44 49 52 45 43 54 20 32        -         .text name
3049: 2e 2e 2e  -         .text "..."
304c: 00        -         .byte NULL
304d: ee ab 22  -         inc TEST_COUNT
3050: ad 86 02  -         lda foreground_color
3053: 48        -         pha
3054: a9 0e     -         lda #color
3056: 8d 86 02  -         sta foreground_color
3059: a2 00     -         ldx #$00
305b: bd 6e 30  -         lda msg,x
305e: f0 07     -         beq !done+
3060: 20 d2 ff  -         jsr kernal_chrout
3063: e8        -         inx
3064: 4c 5b 30  -         jmp !loop-
3067: 68        -         pla
3068: 8d 86 02  -         sta foreground_color
306b: 4c 73 30  -         jmp !done+
306e: 20        - memory: .byte spacebar
306f: 50 33     -         .text description
3071: 3a        -         .text ":"
3072: 00        -         .byte NULL
3073: a6 17     -         ldx rl(register.getValue())
3075: a4 18     -         ldy rh(register.getValue())
3077: e0 06     -         cpx #<value
3079: d0 25     -         bne !failed+
307b: c0 00     -         cpy #>value
307d: d0 21     -         bne !failed+
307f: ee ac 22  -         inc TEST_PASS_COUNT
3082: ad 86 02  -         lda foreground_color
3085: 48        -         pha
3086: a9 05     -         lda #color
3088: 8d 86 02  -         sta foreground_color
308b: a2 00     -         ldx #$00
308d: bd 00 20  -         lda msg,x
3090: f0 07     -         beq !done+
3092: 20 d2 ff  -         jsr kernal_chrout
3095: e8        -         inx
3096: 4c 8d 30  -         jmp !loop-
3099: 68        -         pla
309a: 8d 86 02  -         sta foreground_color
309d: 4c bb 30  -         jmp !done+
30a0: ad 86 02  -         lda foreground_color
30a3: 48        -         pha
30a4: a9 02     -         lda #color
30a6: 8d 86 02  -         sta foreground_color
30a9: a2 00     -         ldx #$00
30ab: bd 02 20  -         lda msg,x
30ae: f0 07     -         beq !done+
30b0: 20 d2 ff  -         jsr kernal_chrout
30b3: e8        -         inx
30b4: 4c ab 30  -         jmp !loop-
30b7: 68        -         pla
30b8: 8d 86 02  -         sta foreground_color
30bb: 60        -         rts
30bc: ee ab 22  -         inc TEST_COUNT
30bf: ad 86 02  -         lda foreground_color
30c2: 48        -         pha
30c3: a9 0e     -         lda #color
30c5: 8d 86 02  -         sta foreground_color
30c8: a2 00     -         ldx #$00
30ca: bd dd 30  -         lda msg,x
30cd: f0 07     -         beq !done+
30cf: 20 d2 ff  -         jsr kernal_chrout
30d2: e8        -         inx
30d3: 4c ca 30  -         jmp !loop-
30d6: 68        -         pla
30d7: 8d 86 02  -         sta foreground_color
30da: 4c e2 30  -         jmp !done+
30dd: 20        - memory: .byte spacebar
30de: 50 32     -         .text description
30e0: 3a        -         .text ":"
30e1: 00        -         .byte NULL
30e2: a6 17     -         ldx rl(register.getValue())
30e4: a4 18     -         ldy rh(register.getValue())
30e6: e0 05     -         cpx #<value
30e8: d0 25     -         bne !failed+
30ea: c0 00     -         cpy #>value
30ec: d0 21     -         bne !failed+
30ee: ee ac 22  -         inc TEST_PASS_COUNT
30f1: ad 86 02  -         lda foreground_color
30f4: 48        -         pha
30f5: a9 05     -         lda #color
30f7: 8d 86 02  -         sta foreground_color
30fa: a2 00     -         ldx #$00
30fc: bd 00 20  -         lda msg,x
30ff: f0 07     -         beq !done+
3101: 20 d2 ff  -         jsr kernal_chrout
3104: e8        -         inx
3105: 4c fc 30  -         jmp !loop-
3108: 68        -         pla
3109: 8d 86 02  -         sta foreground_color
310c: 4c 2a 31  -         jmp !done+
310f: ad 86 02  -         lda foreground_color
3112: 48        -         pha
3113: a9 02     -         lda #color
3115: 8d 86 02  -         sta foreground_color
3118: a2 00     -         ldx #$00
311a: bd 02 20  -         lda msg,x
311d: f0 07     -         beq !done+
311f: 20 d2 ff  -         jsr kernal_chrout
3122: e8        -         inx
3123: 4c 1a 31  -         jmp !loop-
3126: 68        -         pla
3127: 8d 86 02  -         sta foreground_color
312a: 60        -         rts
312b: ee ab 22  -         inc TEST_COUNT
312e: ad 86 02  -         lda foreground_color
3131: 48        -         pha
3132: a9 0e     -         lda #color
3134: 8d 86 02  -         sta foreground_color
3137: a2 00     -         ldx #$00
3139: bd 4c 31  -         lda msg,x
313c: f0 07     -         beq !done+
313e: 20 d2 ff  -         jsr kernal_chrout
3141: e8        -         inx
3142: 4c 39 31  -         jmp !loop-
3145: 68        -         pla
3146: 8d 86 02  -         sta foreground_color
3149: 4c 51 31  -         jmp !done+
314c: 20        - memory: .byte spacebar
314d: 50 31     -         .text description
314f: 3a        -         .text ":"
3150: 00        -         .byte NULL
3151: a6 17     -         ldx rl(register.getValue())
3153: a4 18     -         ldy rh(register.getValue())
3155: e0 04     -         cpx #<value
3157: d0 25     -         bne !failed+
3159: c0 00     -         cpy #>value
315b: d0 21     -         bne !failed+
315d: ee ac 22  -         inc TEST_PASS_COUNT
3160: ad 86 02  -         lda foreground_color
3163: 48        -         pha
3164: a9 05     -         lda #color
3166: 8d 86 02  -         sta foreground_color
3169: a2 00     -         ldx #$00
316b: bd 00 20  -         lda msg,x
316e: f0 07     -         beq !done+
3170: 20 d2 ff  -         jsr kernal_chrout
3173: e8        -         inx
3174: 4c 6b 31  -         jmp !loop-
3177: 68        -         pla
3178: 8d 86 02  -         sta foreground_color
317b: 4c 99 31  -         jmp !done+
317e: ad 86 02  -         lda foreground_color
3181: 48        -         pha
3182: a9 02     -         lda #color
3184: 8d 86 02  -         sta foreground_color
3187: a2 00     -         ldx #$00
3189: bd 02 20  -         lda msg,x
318c: f0 07     -         beq !done+
318e: 20 d2 ff  -         jsr kernal_chrout
3191: e8        -         inx
3192: 4c 89 31  -         jmp !loop-
3195: 68        -         pla
3196: 8d 86 02  -         sta foreground_color
3199: 60        -         rts
319a: ee ad 22  - STORE_POP_INDIRECT_TEST:inc TEST_NAME_COUNT
319d: ad 86 02  -         lda foreground_color
31a0: 48        -         pha
31a1: a9 0f     -         lda #color
31a3: 8d 86 02  -         sta foreground_color
31a6: a2 00     -         ldx #$00
31a8: bd bb 31  -         lda msg,x
31ab: f0 07     -         beq !done+
31ad: 20 d2 ff  -         jsr kernal_chrout
31b0: e8        -         inx
31b1: 4c a8 31  -         jmp !loop-
31b4: 68        -         pla
31b5: 8d 86 02  -         sta foreground_color
31b8: 4c ce 31  -         jmp !done+
31bb: 20 20     - memory: .fill spacing, spacebar
31bd: 53 54 4f 52 45 20 50 4f 50 20 49 4e 44           -         .text name
31ca: 2e 2e 2e  -         .text "..."
31cd: 00        -         .byte NULL
31ce: 20 0c 20  -         jsr SW16
31d1: 14        -         .byte opcode(op, register)
31d2: c5 22     -         .word address.getValue()
31d4: 15        -         .byte opcode(op, register)
31d5: c7 22     -         .word address.getValue()
31d7: 84        -         .byte opcode($80, register) }
31d8: 95        -         .byte opcode($90, register) }
31d9: 84        -         .byte opcode($80, register) }
31da: 95        -         .byte opcode($90, register) }
31db: 00        -         .byte $00 }
31dc: ee ab 22  -         inc TEST_COUNT
31df: ad 86 02  -         lda foreground_color
31e2: 48        -         pha
31e3: a9 0e     -         lda #color
31e5: 8d 86 02  -         sta foreground_color
31e8: a2 00     -         ldx #$00
31ea: bd fd 31  -         lda msg,x
31ed: f0 07     -         beq !done+
31ef: 20 d2 ff  -         jsr kernal_chrout
31f2: e8        -         inx
31f3: 4c ea 31  -         jmp !loop-
31f6: 68        -         pla
31f7: 8d 86 02  -         sta foreground_color
31fa: 4c 03 32  -         jmp !done+
31fd: 20        - memory: .byte spacebar
31fe: 4d 45 4d  -         .text description
3201: 3a        -         .text ":"
3202: 00        -         .byte NULL
3203: a2 ff     -         ldx #$ff
3205: e8        -         inx
3206: e0 02     -         cpx #size
3208: f0 0b     -         beq !success+
320a: bd c3 22  -         lda source,x
320d: dd c3 22  -         cmp dest,x
3210: f0 f3     -         beq !loop-
3212: 4c 36 32  -         jmp !failed+
3215: ee ac 22  -         inc TEST_PASS_COUNT
3218: ad 86 02  -         lda foreground_color
321b: 48        -         pha
321c: a9 05     -         lda #color
321e: 8d 86 02  -         sta foreground_color
3221: a2 00     -         ldx #$00
3223: bd 00 20  -         lda msg,x
3226: f0 07     -         beq !done+
3228: 20 d2 ff  -         jsr kernal_chrout
322b: e8        -         inx
322c: 4c 23 32  -         jmp !loop-
322f: 68        -         pla
3230: 8d 86 02  -         sta foreground_color
3233: 4c 51 32  -         jmp !done+
3236: ad 86 02  -         lda foreground_color
3239: 48        -         pha
323a: a9 02     -         lda #color
323c: 8d 86 02  -         sta foreground_color
323f: a2 00     -         ldx #$00
3241: bd 02 20  -         lda msg,x
3244: f0 07     -         beq !done+
3246: 20 d2 ff  -         jsr kernal_chrout
3249: e8        -         inx
324a: 4c 41 32  -         jmp !loop-
324d: 68        -         pla
324e: 8d 86 02  -         sta foreground_color
3251: a2 00     -         ldx #$00
3253: bd 62 32  -         lda msg,x
3256: f0 07     -         beq !done+
3258: 20 d2 ff  -         jsr kernal_chrout
325b: e8        -         inx
325c: 4c 53 32  -         jmp !loop-
325f: 4c 64 32  -         jmp !done+
3262: 0d 00     - memory: .byte RETURN, NULL
3264: ae ad 22  -         ldx TEST_NAME_COUNT
3267: e0 15     -         cpx #TESTS_PER_PAGE
3269: d0 5d     -         bne !exit+
326b: ad 86 02  -         lda foreground_color
326e: 48        -         pha
326f: a9 01     -         lda #color
3271: 8d 86 02  -         sta foreground_color
3274: a2 00     -         ldx #$00
3276: bd 89 32  -         lda msg,x
3279: f0 07     -         beq !done+
327b: 20 d2 ff  -         jsr kernal_chrout
327e: e8        -         inx
327f: 4c 76 32  -         jmp !loop-
3282: 68        -         pla
3283: 8d 86 02  -         sta foreground_color
3286: 4c a8 32  -         jmp !no_key+
3289: 0d        - memory: .byte RETURN
328a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
329a: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
32a6: 0d 00     -         .byte RETURN, NULL
32a8: 20 9f ff  -         jsr scnkey  // scan keyboard
32ab: 20 e4 ff  -         jsr getin	// put result into A
32ae: f0 f8     -         beq !no_key-
32b0: a2 00     -         ldx #$00
32b2: bd c1 32  -         lda msg,x
32b5: f0 07     -         beq !done+
32b7: 20 d2 ff  -         jsr kernal_chrout
32ba: e8        -         inx
32bb: 4c b2 32  -         jmp !loop-
32be: 4c c3 32  -         jmp !done+
32c1: 0d 00     - newline:.byte RETURN, NULL
32c3: a2 00     -         ldx #$00
32c5: 8e ad 22  -         stx TEST_NAME_COUNT
32c8: 60        -         rts
32c9: ee ad 22  - ADD_TEST:inc TEST_NAME_COUNT
32cc: ad 86 02  -         lda foreground_color
32cf: 48        -         pha
32d0: a9 0f     -         lda #color
32d2: 8d 86 02  -         sta foreground_color
32d5: a2 00     -         ldx #$00
32d7: bd ea 32  -         lda msg,x
32da: f0 07     -         beq !done+
32dc: 20 d2 ff  -         jsr kernal_chrout
32df: e8        -         inx
32e0: 4c d7 32  -         jmp !loop-
32e3: 68        -         pla
32e4: 8d 86 02  -         sta foreground_color
32e7: 4c f8 32  -         jmp !done+
32ea: 20 20     - memory: .fill spacing, spacebar
32ec: 41 44 44 49 54 49 4f 4e                          -         .text name
32f4: 2e 2e 2e  -         .text "..."
32f7: 00        -         .byte NULL
32f8: 20 0c 20  -         jsr SW16
32fb: 10        -         .byte opcode(op, register)
32fc: 34 76     -         .word address.getValue()
32fe: 11        -         .byte opcode(op, register)
32ff: 27 42     -         .word address.getValue()
3301: a1        -         .byte opcode($a0, register) }
3302: 0d        -         .byte $0d
3303: 33        -         .byte >(address.getValue()-1)
3304: ec        -         .byte <(address.getValue()-1)
3305: a0        -         .byte opcode($a0, register) }
3306: 00        -         .byte $00 }
3307: ee ab 22  -         inc TEST_COUNT
330a: ad 86 02  -         lda foreground_color
330d: 48        -         pha
330e: a9 0e     -         lda #color
3310: 8d 86 02  -         sta foreground_color
3313: a2 00     -         ldx #$00
3315: bd 28 33  -         lda msg,x
3318: f0 07     -         beq !done+
331a: 20 d2 ff  -         jsr kernal_chrout
331d: e8        -         inx
331e: 4c 15 33  -         jmp !loop-
3321: 68        -         pla
3322: 8d 86 02  -         sta foreground_color
3325: 4c 2d 33  -         jmp !done+
3328: 20        - memory: .byte spacebar
3329: 58 32     -         .text description
332b: 3a        -         .text ":"
332c: 00        -         .byte NULL
332d: a6 17     -         ldx rl(register.getValue())
332f: a4 18     -         ldy rh(register.getValue())
3331: e0 b6     -         cpx #<value
3333: d0 25     -         bne !failed+
3335: c0 70     -         cpy #>value
3337: d0 21     -         bne !failed+
3339: ee ac 22  -         inc TEST_PASS_COUNT
333c: ad 86 02  -         lda foreground_color
333f: 48        -         pha
3340: a9 05     -         lda #color
3342: 8d 86 02  -         sta foreground_color
3345: a2 00     -         ldx #$00
3347: bd 00 20  -         lda msg,x
334a: f0 07     -         beq !done+
334c: 20 d2 ff  -         jsr kernal_chrout
334f: e8        -         inx
3350: 4c 47 33  -         jmp !loop-
3353: 68        -         pla
3354: 8d 86 02  -         sta foreground_color
3357: 4c 75 33  -         jmp !done+
335a: ad 86 02  -         lda foreground_color
335d: 48        -         pha
335e: a9 02     -         lda #color
3360: 8d 86 02  -         sta foreground_color
3363: a2 00     -         ldx #$00
3365: bd 02 20  -         lda msg,x
3368: f0 07     -         beq !done+
336a: 20 d2 ff  -         jsr kernal_chrout
336d: e8        -         inx
336e: 4c 65 33  -         jmp !loop-
3371: 68        -         pla
3372: 8d 86 02  -         sta foreground_color
3375: a2 00     -         ldx #$00
3377: bd 86 33  -         lda msg,x
337a: f0 07     -         beq !done+
337c: 20 d2 ff  -         jsr kernal_chrout
337f: e8        -         inx
3380: 4c 77 33  -         jmp !loop-
3383: 4c 88 33  -         jmp !done+
3386: 0d 00     - memory: .byte RETURN, NULL
3388: ae ad 22  -         ldx TEST_NAME_COUNT
338b: e0 15     -         cpx #TESTS_PER_PAGE
338d: d0 5d     -         bne !exit+
338f: ad 86 02  -         lda foreground_color
3392: 48        -         pha
3393: a9 01     -         lda #color
3395: 8d 86 02  -         sta foreground_color
3398: a2 00     -         ldx #$00
339a: bd ad 33  -         lda msg,x
339d: f0 07     -         beq !done+
339f: 20 d2 ff  -         jsr kernal_chrout
33a2: e8        -         inx
33a3: 4c 9a 33  -         jmp !loop-
33a6: 68        -         pla
33a7: 8d 86 02  -         sta foreground_color
33aa: 4c cc 33  -         jmp !no_key+
33ad: 0d        - memory: .byte RETURN
33ae: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
33be: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
33ca: 0d 00     -         .byte RETURN, NULL
33cc: 20 9f ff  -         jsr scnkey  // scan keyboard
33cf: 20 e4 ff  -         jsr getin	// put result into A
33d2: f0 f8     -         beq !no_key-
33d4: a2 00     -         ldx #$00
33d6: bd e5 33  -         lda msg,x
33d9: f0 07     -         beq !done+
33db: 20 d2 ff  -         jsr kernal_chrout
33de: e8        -         inx
33df: 4c d6 33  -         jmp !loop-
33e2: 4c e7 33  -         jmp !done+
33e5: 0d 00     - newline:.byte RETURN, NULL
33e7: a2 00     -         ldx #$00
33e9: 8e ad 22  -         stx TEST_NAME_COUNT
33ec: 60        -         rts
33ed: ee ab 22  -         inc TEST_COUNT
33f0: ad 86 02  -         lda foreground_color
33f3: 48        -         pha
33f4: a9 0e     -         lda #color
33f6: 8d 86 02  -         sta foreground_color
33f9: a2 00     -         ldx #$00
33fb: bd 0e 34  -         lda msg,x
33fe: f0 07     -         beq !done+
3400: 20 d2 ff  -         jsr kernal_chrout
3403: e8        -         inx
3404: 4c fb 33  -         jmp !loop-
3407: 68        -         pla
3408: 8d 86 02  -         sta foreground_color
340b: 4c 14 34  -         jmp !done+
340e: 20        - memory: .byte spacebar
340f: 41 44 44  -         .text description
3412: 3a        -         .text ":"
3413: 00        -         .byte NULL
3414: a6 17     -         ldx rl(register.getValue())
3416: a4 18     -         ldy rh(register.getValue())
3418: e0 5b     -         cpx #<value
341a: d0 25     -         bne !failed+
341c: c0 b8     -         cpy #>value
341e: d0 21     -         bne !failed+
3420: ee ac 22  -         inc TEST_PASS_COUNT
3423: ad 86 02  -         lda foreground_color
3426: 48        -         pha
3427: a9 05     -         lda #color
3429: 8d 86 02  -         sta foreground_color
342c: a2 00     -         ldx #$00
342e: bd 00 20  -         lda msg,x
3431: f0 07     -         beq !done+
3433: 20 d2 ff  -         jsr kernal_chrout
3436: e8        -         inx
3437: 4c 2e 34  -         jmp !loop-
343a: 68        -         pla
343b: 8d 86 02  -         sta foreground_color
343e: 4c 5c 34  -         jmp !done+
3441: ad 86 02  -         lda foreground_color
3444: 48        -         pha
3445: a9 02     -         lda #color
3447: 8d 86 02  -         sta foreground_color
344a: a2 00     -         ldx #$00
344c: bd 02 20  -         lda msg,x
344f: f0 07     -         beq !done+
3451: 20 d2 ff  -         jsr kernal_chrout
3454: e8        -         inx
3455: 4c 4c 34  -         jmp !loop-
3458: 68        -         pla
3459: 8d 86 02  -         sta foreground_color
345c: 60        -         rts
345d: ee ad 22  - SUBTRACT_TEST:inc TEST_NAME_COUNT
3460: ad 86 02  -         lda foreground_color
3463: 48        -         pha
3464: a9 0f     -         lda #color
3466: 8d 86 02  -         sta foreground_color
3469: a2 00     -         ldx #$00
346b: bd 7e 34  -         lda msg,x
346e: f0 07     -         beq !done+
3470: 20 d2 ff  -         jsr kernal_chrout
3473: e8        -         inx
3474: 4c 6b 34  -         jmp !loop-
3477: 68        -         pla
3478: 8d 86 02  -         sta foreground_color
347b: 4c 8f 34  -         jmp !done+
347e: 20 20     - memory: .fill spacing, spacebar
3480: 53 55 42 54 52 41 43 54 49 4f 4e                 -         .text name
348b: 2e 2e 2e  -         .text "..."
348e: 00        -         .byte NULL
348f: 20 0c 20  -         jsr SW16
3492: 10        -         .byte opcode(op, register)
3493: 34 76     -         .word address.getValue()
3495: 11        -         .byte opcode(op, register)
3496: 27 42     -         .word address.getValue()
3498: b1        -         .byte opcode($b0, register) }
3499: 0d        -         .byte $0d
349a: 35        -         .byte >(address.getValue()-1)
349b: 82        -         .byte <(address.getValue()-1)
349c: b0        -         .byte opcode($b0, register) }
349d: 00        -         .byte $00 }
349e: ee ab 22  -         inc TEST_COUNT
34a1: ad 86 02  -         lda foreground_color
34a4: 48        -         pha
34a5: a9 0e     -         lda #color
34a7: 8d 86 02  -         sta foreground_color
34aa: a2 00     -         ldx #$00
34ac: bd bf 34  -         lda msg,x
34af: f0 07     -         beq !done+
34b1: 20 d2 ff  -         jsr kernal_chrout
34b4: e8        -         inx
34b5: 4c ac 34  -         jmp !loop-
34b8: 68        -         pla
34b9: 8d 86 02  -         sta foreground_color
34bc: 4c c3 34  -         jmp !done+
34bf: 20        - memory: .byte spacebar
34c0: 30        -         .text description
34c1: 3a        -         .text ":"
34c2: 00        -         .byte NULL
34c3: a6 17     -         ldx rl(register.getValue())
34c5: a4 18     -         ldy rh(register.getValue())
34c7: e0 00     -         cpx #<value
34c9: d0 25     -         bne !failed+
34cb: c0 00     -         cpy #>value
34cd: d0 21     -         bne !failed+
34cf: ee ac 22  -         inc TEST_PASS_COUNT
34d2: ad 86 02  -         lda foreground_color
34d5: 48        -         pha
34d6: a9 05     -         lda #color
34d8: 8d 86 02  -         sta foreground_color
34db: a2 00     -         ldx #$00
34dd: bd 00 20  -         lda msg,x
34e0: f0 07     -         beq !done+
34e2: 20 d2 ff  -         jsr kernal_chrout
34e5: e8        -         inx
34e6: 4c dd 34  -         jmp !loop-
34e9: 68        -         pla
34ea: 8d 86 02  -         sta foreground_color
34ed: 4c 0b 35  -         jmp !done+
34f0: ad 86 02  -         lda foreground_color
34f3: 48        -         pha
34f4: a9 02     -         lda #color
34f6: 8d 86 02  -         sta foreground_color
34f9: a2 00     -         ldx #$00
34fb: bd 02 20  -         lda msg,x
34fe: f0 07     -         beq !done+
3500: 20 d2 ff  -         jsr kernal_chrout
3503: e8        -         inx
3504: 4c fb 34  -         jmp !loop-
3507: 68        -         pla
3508: 8d 86 02  -         sta foreground_color
350b: a2 00     -         ldx #$00
350d: bd 1c 35  -         lda msg,x
3510: f0 07     -         beq !done+
3512: 20 d2 ff  -         jsr kernal_chrout
3515: e8        -         inx
3516: 4c 0d 35  -         jmp !loop-
3519: 4c 1e 35  -         jmp !done+
351c: 0d 00     - memory: .byte RETURN, NULL
351e: ae ad 22  -         ldx TEST_NAME_COUNT
3521: e0 15     -         cpx #TESTS_PER_PAGE
3523: d0 5d     -         bne !exit+
3525: ad 86 02  -         lda foreground_color
3528: 48        -         pha
3529: a9 01     -         lda #color
352b: 8d 86 02  -         sta foreground_color
352e: a2 00     -         ldx #$00
3530: bd 43 35  -         lda msg,x
3533: f0 07     -         beq !done+
3535: 20 d2 ff  -         jsr kernal_chrout
3538: e8        -         inx
3539: 4c 30 35  -         jmp !loop-
353c: 68        -         pla
353d: 8d 86 02  -         sta foreground_color
3540: 4c 62 35  -         jmp !no_key+
3543: 0d        - memory: .byte RETURN
3544: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3554: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3560: 0d 00     -         .byte RETURN, NULL
3562: 20 9f ff  -         jsr scnkey  // scan keyboard
3565: 20 e4 ff  -         jsr getin	// put result into A
3568: f0 f8     -         beq !no_key-
356a: a2 00     -         ldx #$00
356c: bd 7b 35  -         lda msg,x
356f: f0 07     -         beq !done+
3571: 20 d2 ff  -         jsr kernal_chrout
3574: e8        -         inx
3575: 4c 6c 35  -         jmp !loop-
3578: 4c 7d 35  -         jmp !done+
357b: 0d 00     - newline:.byte RETURN, NULL
357d: a2 00     -         ldx #$00
357f: 8e ad 22  -         stx TEST_NAME_COUNT
3582: 60        -         rts
3583: ee ab 22  -         inc TEST_COUNT
3586: ad 86 02  -         lda foreground_color
3589: 48        -         pha
358a: a9 0e     -         lda #color
358c: 8d 86 02  -         sta foreground_color
358f: a2 00     -         ldx #$00
3591: bd a4 35  -         lda msg,x
3594: f0 07     -         beq !done+
3596: 20 d2 ff  -         jsr kernal_chrout
3599: e8        -         inx
359a: 4c 91 35  -         jmp !loop-
359d: 68        -         pla
359e: 8d 86 02  -         sta foreground_color
35a1: 4c aa 35  -         jmp !done+
35a4: 20        - memory: .byte spacebar
35a5: 53 55 42  -         .text description
35a8: 3a        -         .text ":"
35a9: 00        -         .byte NULL
35aa: a6 17     -         ldx rl(register.getValue())
35ac: a4 18     -         ldy rh(register.getValue())
35ae: e0 0d     -         cpx #<value
35b0: d0 25     -         bne !failed+
35b2: c0 34     -         cpy #>value
35b4: d0 21     -         bne !failed+
35b6: ee ac 22  -         inc TEST_PASS_COUNT
35b9: ad 86 02  -         lda foreground_color
35bc: 48        -         pha
35bd: a9 05     -         lda #color
35bf: 8d 86 02  -         sta foreground_color
35c2: a2 00     -         ldx #$00
35c4: bd 00 20  -         lda msg,x
35c7: f0 07     -         beq !done+
35c9: 20 d2 ff  -         jsr kernal_chrout
35cc: e8        -         inx
35cd: 4c c4 35  -         jmp !loop-
35d0: 68        -         pla
35d1: 8d 86 02  -         sta foreground_color
35d4: 4c f2 35  -         jmp !done+
35d7: ad 86 02  -         lda foreground_color
35da: 48        -         pha
35db: a9 02     -         lda #color
35dd: 8d 86 02  -         sta foreground_color
35e0: a2 00     -         ldx #$00
35e2: bd 02 20  -         lda msg,x
35e5: f0 07     -         beq !done+
35e7: 20 d2 ff  -         jsr kernal_chrout
35ea: e8        -         inx
35eb: 4c e2 35  -         jmp !loop-
35ee: 68        -         pla
35ef: 8d 86 02  -         sta foreground_color
35f2: 60        -         rts	
35f3: ee ad 22  - POP_DOUBLE_BYTE_INDIRECT_TEST:inc TEST_NAME_COUNT
35f6: ad 86 02  -         lda foreground_color
35f9: 48        -         pha
35fa: a9 0f     -         lda #color
35fc: 8d 86 02  -         sta foreground_color
35ff: a2 00     -         ldx #$00
3601: bd 14 36  -         lda msg,x
3604: f0 07     -         beq !done+
3606: 20 d2 ff  -         jsr kernal_chrout
3609: e8        -         inx
360a: 4c 01 36  -         jmp !loop-
360d: 68        -         pla
360e: 8d 86 02  -         sta foreground_color
3611: 4c 27 36  -         jmp !done+
3614: 20 20     - memory: .fill spacing, spacebar
3616: 50 4f 50 20 44 42 4c 2d 42 20 49 4e 44           -         .text name
3623: 2e 2e 2e  -         .text "..."
3626: 00        -         .byte NULL
3627: 20 0c 20  -         jsr SW16
362a: 15        -         .byte opcode(op, register)
362b: e9 22     -         .word address.getValue()
362d: 10        -         .byte opcode(op, register)
362e: c3 22     -         .word address.getValue()
3630: 75        -         .byte opcode($70, register) }
3631: 0d        -         .byte $0d
3632: 37        -         .byte >(address.getValue()-1)
3633: 26        -         .byte <(address.getValue()-1)
3634: 10        -         .byte opcode(op, register)
3635: c5 22     -         .word address.getValue()
3637: 75        -         .byte opcode($70, register) }
3638: 0d        -         .byte $0d
3639: 37        -         .byte >(address.getValue()-1)
363a: 96        -         .byte <(address.getValue()-1)
363b: c5        -         .byte opcode($c0, register) }
363c: 0d        -         .byte $0d
363d: 38        -         .byte >(address.getValue()-1)
363e: 06        -         .byte <(address.getValue()-1)
363f: c5        -         .byte opcode($c0, register) }
3640: 00        -         .byte $00 }
3641: ee ab 22  -         inc TEST_COUNT
3644: ad 86 02  -         lda foreground_color
3647: 48        -         pha
3648: a9 0e     -         lda #color
364a: 8d 86 02  -         sta foreground_color
364d: a2 00     -         ldx #$00
364f: bd 62 36  -         lda msg,x
3652: f0 07     -         beq !done+
3654: 20 d2 ff  -         jsr kernal_chrout
3657: e8        -         inx
3658: 4c 4f 36  -         jmp !loop-
365b: 68        -         pla
365c: 8d 86 02  -         sta foreground_color
365f: 4c 67 36  -         jmp !done+
3662: 20        - memory: .byte spacebar
3663: 50 31     -         .text description
3665: 3a        -         .text ":"
3666: 00        -         .byte NULL
3667: a6 17     -         ldx addr
3669: e0 c3     -         cpx #<value
366b: d0 27     -         bne !failed+
366d: a6 18     -         ldx addr+1
366f: e0 22     -         cpx #>value
3671: d0 21     -         bne !failed+
3673: ee ac 22  -         inc TEST_PASS_COUNT
3676: ad 86 02  -         lda foreground_color
3679: 48        -         pha
367a: a9 05     -         lda #color
367c: 8d 86 02  -         sta foreground_color
367f: a2 00     -         ldx #$00
3681: bd 00 20  -         lda msg,x
3684: f0 07     -         beq !done+
3686: 20 d2 ff  -         jsr kernal_chrout
3689: e8        -         inx
368a: 4c 81 36  -         jmp !loop-
368d: 68        -         pla
368e: 8d 86 02  -         sta foreground_color
3691: 4c af 36  -         jmp !done+
3694: ad 86 02  -         lda foreground_color
3697: 48        -         pha
3698: a9 02     -         lda #color
369a: 8d 86 02  -         sta foreground_color
369d: a2 00     -         ldx #$00
369f: bd 02 20  -         lda msg,x
36a2: f0 07     -         beq !done+
36a4: 20 d2 ff  -         jsr kernal_chrout
36a7: e8        -         inx
36a8: 4c 9f 36  -         jmp !loop-
36ab: 68        -         pla
36ac: 8d 86 02  -         sta foreground_color
36af: a2 00     -         ldx #$00
36b1: bd c0 36  -         lda msg,x
36b4: f0 07     -         beq !done+
36b6: 20 d2 ff  -         jsr kernal_chrout
36b9: e8        -         inx
36ba: 4c b1 36  -         jmp !loop-
36bd: 4c c2 36  -         jmp !done+
36c0: 0d 00     - memory: .byte RETURN, NULL
36c2: ae ad 22  -         ldx TEST_NAME_COUNT
36c5: e0 15     -         cpx #TESTS_PER_PAGE
36c7: d0 5d     -         bne !exit+
36c9: ad 86 02  -         lda foreground_color
36cc: 48        -         pha
36cd: a9 01     -         lda #color
36cf: 8d 86 02  -         sta foreground_color
36d2: a2 00     -         ldx #$00
36d4: bd e7 36  -         lda msg,x
36d7: f0 07     -         beq !done+
36d9: 20 d2 ff  -         jsr kernal_chrout
36dc: e8        -         inx
36dd: 4c d4 36  -         jmp !loop-
36e0: 68        -         pla
36e1: 8d 86 02  -         sta foreground_color
36e4: 4c 06 37  -         jmp !no_key+
36e7: 0d        - memory: .byte RETURN
36e8: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
36f8: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3704: 0d 00     -         .byte RETURN, NULL
3706: 20 9f ff  -         jsr scnkey  // scan keyboard
3709: 20 e4 ff  -         jsr getin	// put result into A
370c: f0 f8     -         beq !no_key-
370e: a2 00     -         ldx #$00
3710: bd 1f 37  -         lda msg,x
3713: f0 07     -         beq !done+
3715: 20 d2 ff  -         jsr kernal_chrout
3718: e8        -         inx
3719: 4c 10 37  -         jmp !loop-
371c: 4c 21 37  -         jmp !done+
371f: 0d 00     - newline:.byte RETURN, NULL
3721: a2 00     -         ldx #$00
3723: 8e ad 22  -         stx TEST_NAME_COUNT
3726: 60        -         rts
3727: ee ab 22  -         inc TEST_COUNT
372a: ad 86 02  -         lda foreground_color
372d: 48        -         pha
372e: a9 0e     -         lda #color
3730: 8d 86 02  -         sta foreground_color
3733: a2 00     -         ldx #$00
3735: bd 48 37  -         lda msg,x
3738: f0 07     -         beq !done+
373a: 20 d2 ff  -         jsr kernal_chrout
373d: e8        -         inx
373e: 4c 35 37  -         jmp !loop-
3741: 68        -         pla
3742: 8d 86 02  -         sta foreground_color
3745: 4c 4c 37  -         jmp !done+
3748: 20        - memory: .byte spacebar
3749: 31        -         .text description
374a: 3a        -         .text ":"
374b: 00        -         .byte NULL
374c: ae e9 22  -         ldx addr
374f: e0 c3     -         cpx #<value
3751: d0 28     -         bne !failed+
3753: ae ea 22  -         ldx addr+1
3756: e0 22     -         cpx #>value
3758: d0 21     -         bne !failed+
375a: ee ac 22  -         inc TEST_PASS_COUNT
375d: ad 86 02  -         lda foreground_color
3760: 48        -         pha
3761: a9 05     -         lda #color
3763: 8d 86 02  -         sta foreground_color
3766: a2 00     -         ldx #$00
3768: bd 00 20  -         lda msg,x
376b: f0 07     -         beq !done+
376d: 20 d2 ff  -         jsr kernal_chrout
3770: e8        -         inx
3771: 4c 68 37  -         jmp !loop-
3774: 68        -         pla
3775: 8d 86 02  -         sta foreground_color
3778: 4c 96 37  -         jmp !done+
377b: ad 86 02  -         lda foreground_color
377e: 48        -         pha
377f: a9 02     -         lda #color
3781: 8d 86 02  -         sta foreground_color
3784: a2 00     -         ldx #$00
3786: bd 02 20  -         lda msg,x
3789: f0 07     -         beq !done+
378b: 20 d2 ff  -         jsr kernal_chrout
378e: e8        -         inx
378f: 4c 86 37  -         jmp !loop-
3792: 68        -         pla
3793: 8d 86 02  -         sta foreground_color
3796: 60        -         rts
3797: ee ab 22  -         inc TEST_COUNT
379a: ad 86 02  -         lda foreground_color
379d: 48        -         pha
379e: a9 0e     -         lda #color
37a0: 8d 86 02  -         sta foreground_color
37a3: a2 00     -         ldx #$00
37a5: bd b8 37  -         lda msg,x
37a8: f0 07     -         beq !done+
37aa: 20 d2 ff  -         jsr kernal_chrout
37ad: e8        -         inx
37ae: 4c a5 37  -         jmp !loop-
37b1: 68        -         pla
37b2: 8d 86 02  -         sta foreground_color
37b5: 4c bc 37  -         jmp !done+
37b8: 20        - memory: .byte spacebar
37b9: 32        -         .text description
37ba: 3a        -         .text ":"
37bb: 00        -         .byte NULL
37bc: ae eb 22  -         ldx addr
37bf: e0 c5     -         cpx #<value
37c1: d0 28     -         bne !failed+
37c3: ae ec 22  -         ldx addr+1
37c6: e0 22     -         cpx #>value
37c8: d0 21     -         bne !failed+
37ca: ee ac 22  -         inc TEST_PASS_COUNT
37cd: ad 86 02  -         lda foreground_color
37d0: 48        -         pha
37d1: a9 05     -         lda #color
37d3: 8d 86 02  -         sta foreground_color
37d6: a2 00     -         ldx #$00
37d8: bd 00 20  -         lda msg,x
37db: f0 07     -         beq !done+
37dd: 20 d2 ff  -         jsr kernal_chrout
37e0: e8        -         inx
37e1: 4c d8 37  -         jmp !loop-
37e4: 68        -         pla
37e5: 8d 86 02  -         sta foreground_color
37e8: 4c 06 38  -         jmp !done+
37eb: ad 86 02  -         lda foreground_color
37ee: 48        -         pha
37ef: a9 02     -         lda #color
37f1: 8d 86 02  -         sta foreground_color
37f4: a2 00     -         ldx #$00
37f6: bd 02 20  -         lda msg,x
37f9: f0 07     -         beq !done+
37fb: 20 d2 ff  -         jsr kernal_chrout
37fe: e8        -         inx
37ff: 4c f6 37  -         jmp !loop-
3802: 68        -         pla
3803: 8d 86 02  -         sta foreground_color
3806: 60        -         rts
3807: ee ab 22  -         inc TEST_COUNT
380a: ad 86 02  -         lda foreground_color
380d: 48        -         pha
380e: a9 0e     -         lda #color
3810: 8d 86 02  -         sta foreground_color
3813: a2 00     -         ldx #$00
3815: bd 28 38  -         lda msg,x
3818: f0 07     -         beq !done+
381a: 20 d2 ff  -         jsr kernal_chrout
381d: e8        -         inx
381e: 4c 15 38  -         jmp !loop-
3821: 68        -         pla
3822: 8d 86 02  -         sta foreground_color
3825: 4c 2d 38  -         jmp !done+
3828: 20        - memory: .byte spacebar
3829: 50 32     -         .text description
382b: 3a        -         .text ":"
382c: 00        -         .byte NULL
382d: a6 17     -         ldx addr
382f: e0 c5     -         cpx #<value
3831: d0 27     -         bne !failed+
3833: a6 18     -         ldx addr+1
3835: e0 22     -         cpx #>value
3837: d0 21     -         bne !failed+
3839: ee ac 22  -         inc TEST_PASS_COUNT
383c: ad 86 02  -         lda foreground_color
383f: 48        -         pha
3840: a9 05     -         lda #color
3842: 8d 86 02  -         sta foreground_color
3845: a2 00     -         ldx #$00
3847: bd 00 20  -         lda msg,x
384a: f0 07     -         beq !done+
384c: 20 d2 ff  -         jsr kernal_chrout
384f: e8        -         inx
3850: 4c 47 38  -         jmp !loop-
3853: 68        -         pla
3854: 8d 86 02  -         sta foreground_color
3857: 4c 75 38  -         jmp !done+
385a: ad 86 02  -         lda foreground_color
385d: 48        -         pha
385e: a9 02     -         lda #color
3860: 8d 86 02  -         sta foreground_color
3863: a2 00     -         ldx #$00
3865: bd 02 20  -         lda msg,x
3868: f0 07     -         beq !done+
386a: 20 d2 ff  -         jsr kernal_chrout
386d: e8        -         inx
386e: 4c 65 38  -         jmp !loop-
3871: 68        -         pla
3872: 8d 86 02  -         sta foreground_color
3875: 60        -         rts
3876: ee ad 22  - COMPARE_TEST:inc TEST_NAME_COUNT
3879: ad 86 02  -         lda foreground_color
387c: 48        -         pha
387d: a9 0f     -         lda #color
387f: 8d 86 02  -         sta foreground_color
3882: a2 00     -         ldx #$00
3884: bd 97 38  -         lda msg,x
3887: f0 07     -         beq !done+
3889: 20 d2 ff  -         jsr kernal_chrout
388c: e8        -         inx
388d: 4c 84 38  -         jmp !loop-
3890: 68        -         pla
3891: 8d 86 02  -         sta foreground_color
3894: 4c a4 38  -         jmp !done+
3897: 20 20     - memory: .fill spacing, spacebar
3899: 43 4f 4d 50 41 52 45                             -         .text name
38a0: 2e 2e 2e  -         .text "..."
38a3: 00        -         .byte NULL
38a4: 20 0c 20  -         jsr SW16
38a7: 15        -         .byte opcode(op, register)
38a8: c9 22     -         .word address.getValue()
38aa: 16        -         .byte opcode(op, register)
38ab: d9 22     -         .word address.getValue()
38ad: 14        -         .byte opcode(op, register)
38ae: 00 00     -         .word address.getValue()
38b0: e4        -         .byte opcode($e0, register) }
38b1: b0        -         .byte opcode($b0, register) }
38b2: 75        -         .byte opcode($70, register) }
38b3: 25        -         .byte opcode($20, register) }
38b4: d6        -         .byte opcode($d0, register) }
38b5: 02 f9     -         .byte $02, effective_address(ea,*) }
38b7: 00        -         .byte $00 }
38b8: ee ab 22  -         inc TEST_COUNT
38bb: ad 86 02  -         lda foreground_color
38be: 48        -         pha
38bf: a9 0e     -         lda #color
38c1: 8d 86 02  -         sta foreground_color
38c4: a2 00     -         ldx #$00
38c6: bd d9 38  -         lda msg,x
38c9: f0 07     -         beq !done+
38cb: 20 d2 ff  -         jsr kernal_chrout
38ce: e8        -         inx
38cf: 4c c6 38  -         jmp !loop-
38d2: 68        -         pla
38d3: 8d 86 02  -         sta foreground_color
38d6: 4c e1 38  -         jmp !done+
38d9: 20        - memory: .byte spacebar
38da: 43 4f 55 4e 54                                   -         .text description
38df: 3a        -         .text ":"
38e0: 00        -         .byte NULL
38e1: a6 1f     -         ldx rl(register.getValue())
38e3: a4 20     -         ldy rh(register.getValue())
38e5: e0 08     -         cpx #<value
38e7: d0 25     -         bne !failed+
38e9: c0 00     -         cpy #>value
38eb: d0 21     -         bne !failed+
38ed: ee ac 22  -         inc TEST_PASS_COUNT
38f0: ad 86 02  -         lda foreground_color
38f3: 48        -         pha
38f4: a9 05     -         lda #color
38f6: 8d 86 02  -         sta foreground_color
38f9: a2 00     -         ldx #$00
38fb: bd 00 20  -         lda msg,x
38fe: f0 07     -         beq !done+
3900: 20 d2 ff  -         jsr kernal_chrout
3903: e8        -         inx
3904: 4c fb 38  -         jmp !loop-
3907: 68        -         pla
3908: 8d 86 02  -         sta foreground_color
390b: 4c 29 39  -         jmp !done+
390e: ad 86 02  -         lda foreground_color
3911: 48        -         pha
3912: a9 02     -         lda #color
3914: 8d 86 02  -         sta foreground_color
3917: a2 00     -         ldx #$00
3919: bd 02 20  -         lda msg,x
391c: f0 07     -         beq !done+
391e: 20 d2 ff  -         jsr kernal_chrout
3921: e8        -         inx
3922: 4c 19 39  -         jmp !loop-
3925: 68        -         pla
3926: 8d 86 02  -         sta foreground_color
3929: a2 00     -         ldx #$00
392b: bd 3a 39  -         lda msg,x
392e: f0 07     -         beq !done+
3930: 20 d2 ff  -         jsr kernal_chrout
3933: e8        -         inx
3934: 4c 2b 39  -         jmp !loop-
3937: 4c 3c 39  -         jmp !done+
393a: 0d 00     - memory: .byte RETURN, NULL
393c: ae ad 22  -         ldx TEST_NAME_COUNT
393f: e0 15     -         cpx #TESTS_PER_PAGE
3941: d0 5d     -         bne !exit+
3943: ad 86 02  -         lda foreground_color
3946: 48        -         pha
3947: a9 01     -         lda #color
3949: 8d 86 02  -         sta foreground_color
394c: a2 00     -         ldx #$00
394e: bd 61 39  -         lda msg,x
3951: f0 07     -         beq !done+
3953: 20 d2 ff  -         jsr kernal_chrout
3956: e8        -         inx
3957: 4c 4e 39  -         jmp !loop-
395a: 68        -         pla
395b: 8d 86 02  -         sta foreground_color
395e: 4c 80 39  -         jmp !no_key+
3961: 0d        - memory: .byte RETURN
3962: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3972: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
397e: 0d 00     -         .byte RETURN, NULL
3980: 20 9f ff  -         jsr scnkey  // scan keyboard
3983: 20 e4 ff  -         jsr getin	// put result into A
3986: f0 f8     -         beq !no_key-
3988: a2 00     -         ldx #$00
398a: bd 99 39  -         lda msg,x
398d: f0 07     -         beq !done+
398f: 20 d2 ff  -         jsr kernal_chrout
3992: e8        -         inx
3993: 4c 8a 39  -         jmp !loop-
3996: 4c 9b 39  -         jmp !done+
3999: 0d 00     - newline:.byte RETURN, NULL
399b: a2 00     -         ldx #$00
399d: 8e ad 22  -         stx TEST_NAME_COUNT
39a0: 60        -         rts	
39a1: ee ad 22  - INCREMENT_TEST:inc TEST_NAME_COUNT
39a4: ad 86 02  -         lda foreground_color
39a7: 48        -         pha
39a8: a9 0f     -         lda #color
39aa: 8d 86 02  -         sta foreground_color
39ad: a2 00     -         ldx #$00
39af: bd c2 39  -         lda msg,x
39b2: f0 07     -         beq !done+
39b4: 20 d2 ff  -         jsr kernal_chrout
39b7: e8        -         inx
39b8: 4c af 39  -         jmp !loop-
39bb: 68        -         pla
39bc: 8d 86 02  -         sta foreground_color
39bf: 4c d1 39  -         jmp !done+
39c2: 20 20     - memory: .fill spacing, spacebar
39c4: 49 4e 43 52 45 4d 45 4e 54                       -         .text name
39cd: 2e 2e 2e  -         .text "..."
39d0: 00        -         .byte NULL
39d1: 20 0c 20  -         jsr SW16
39d4: 15        -         .byte opcode(op, register)
39d5: c3 22     -         .word address.getValue()
39d7: b0        -         .byte opcode($b0, register) }
39d8: 55        -         .byte opcode($50, register) }
39d9: e5        -         .byte opcode($e0, register) }
39da: 00        -         .byte $00 }
39db: ee ab 22  -         inc TEST_COUNT
39de: ad 86 02  -         lda foreground_color
39e1: 48        -         pha
39e2: a9 0e     -         lda #color
39e4: 8d 86 02  -         sta foreground_color
39e7: a2 00     -         ldx #$00
39e9: bd fc 39  -         lda msg,x
39ec: f0 07     -         beq !done+
39ee: 20 d2 ff  -         jsr kernal_chrout
39f1: e8        -         inx
39f2: 4c e9 39  -         jmp !loop-
39f5: 68        -         pla
39f6: 8d 86 02  -         sta foreground_color
39f9: 4c 01 3a  -         jmp !done+
39fc: 20        - memory: .byte spacebar
39fd: 2b 32     -         .text description
39ff: 3a        -         .text ":"
3a00: 00        -         .byte NULL
3a01: a6 21     -         ldx rl(register.getValue())
3a03: a4 22     -         ldy rh(register.getValue())
3a05: e0 c5     -         cpx #<value
3a07: d0 25     -         bne !failed+
3a09: c0 22     -         cpy #>value
3a0b: d0 21     -         bne !failed+
3a0d: ee ac 22  -         inc TEST_PASS_COUNT
3a10: ad 86 02  -         lda foreground_color
3a13: 48        -         pha
3a14: a9 05     -         lda #color
3a16: 8d 86 02  -         sta foreground_color
3a19: a2 00     -         ldx #$00
3a1b: bd 00 20  -         lda msg,x
3a1e: f0 07     -         beq !done+
3a20: 20 d2 ff  -         jsr kernal_chrout
3a23: e8        -         inx
3a24: 4c 1b 3a  -         jmp !loop-
3a27: 68        -         pla
3a28: 8d 86 02  -         sta foreground_color
3a2b: 4c 49 3a  -         jmp !done+
3a2e: ad 86 02  -         lda foreground_color
3a31: 48        -         pha
3a32: a9 02     -         lda #color
3a34: 8d 86 02  -         sta foreground_color
3a37: a2 00     -         ldx #$00
3a39: bd 02 20  -         lda msg,x
3a3c: f0 07     -         beq !done+
3a3e: 20 d2 ff  -         jsr kernal_chrout
3a41: e8        -         inx
3a42: 4c 39 3a  -         jmp !loop-
3a45: 68        -         pla
3a46: 8d 86 02  -         sta foreground_color
3a49: a2 00     -         ldx #$00
3a4b: bd 5a 3a  -         lda msg,x
3a4e: f0 07     -         beq !done+
3a50: 20 d2 ff  -         jsr kernal_chrout
3a53: e8        -         inx
3a54: 4c 4b 3a  -         jmp !loop-
3a57: 4c 5c 3a  -         jmp !done+
3a5a: 0d 00     - memory: .byte RETURN, NULL
3a5c: ae ad 22  -         ldx TEST_NAME_COUNT
3a5f: e0 15     -         cpx #TESTS_PER_PAGE
3a61: d0 5d     -         bne !exit+
3a63: ad 86 02  -         lda foreground_color
3a66: 48        -         pha
3a67: a9 01     -         lda #color
3a69: 8d 86 02  -         sta foreground_color
3a6c: a2 00     -         ldx #$00
3a6e: bd 81 3a  -         lda msg,x
3a71: f0 07     -         beq !done+
3a73: 20 d2 ff  -         jsr kernal_chrout
3a76: e8        -         inx
3a77: 4c 6e 3a  -         jmp !loop-
3a7a: 68        -         pla
3a7b: 8d 86 02  -         sta foreground_color
3a7e: 4c a0 3a  -         jmp !no_key+
3a81: 0d        - memory: .byte RETURN
3a82: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3a92: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3a9e: 0d 00     -         .byte RETURN, NULL
3aa0: 20 9f ff  -         jsr scnkey  // scan keyboard
3aa3: 20 e4 ff  -         jsr getin	// put result into A
3aa6: f0 f8     -         beq !no_key-
3aa8: a2 00     -         ldx #$00
3aaa: bd b9 3a  -         lda msg,x
3aad: f0 07     -         beq !done+
3aaf: 20 d2 ff  -         jsr kernal_chrout
3ab2: e8        -         inx
3ab3: 4c aa 3a  -         jmp !loop-
3ab6: 4c bb 3a  -         jmp !done+
3ab9: 0d 00     - newline:.byte RETURN, NULL
3abb: a2 00     -         ldx #$00
3abd: 8e ad 22  -         stx TEST_NAME_COUNT
3ac0: 60        -         rts
3ac1: ee ad 22  - DECREMENT_TEST:inc TEST_NAME_COUNT
3ac4: ad 86 02  -         lda foreground_color
3ac7: 48        -         pha
3ac8: a9 0f     -         lda #color
3aca: 8d 86 02  -         sta foreground_color
3acd: a2 00     -         ldx #$00
3acf: bd e2 3a  -         lda msg,x
3ad2: f0 07     -         beq !done+
3ad4: 20 d2 ff  -         jsr kernal_chrout
3ad7: e8        -         inx
3ad8: 4c cf 3a  -         jmp !loop-
3adb: 68        -         pla
3adc: 8d 86 02  -         sta foreground_color
3adf: 4c f1 3a  -         jmp !done+
3ae2: 20 20     - memory: .fill spacing, spacebar
3ae4: 44 45 43 52 45 4d 45 4e 54                       -         .text name
3aed: 2e 2e 2e  -         .text "..."
3af0: 00        -         .byte NULL
3af1: 20 0c 20  -         jsr SW16
3af4: 15        -         .byte opcode(op, register)
3af5: c9 22     -         .word address.getValue()
3af7: 14        -         .byte opcode(op, register)
3af8: 10 00     -         .word address.getValue()
3afa: b0        -         .byte opcode($b0, register) }
3afb: 55        -         .byte opcode($50, register) }
3afc: f4        -         .byte opcode($f0, register) }
3afd: 07 fc     -         .byte $07, effective_address(ea,*) }
3aff: 00        -         .byte $00 }
3b00: ee ab 22  -         inc TEST_COUNT
3b03: ad 86 02  -         lda foreground_color
3b06: 48        -         pha
3b07: a9 0e     -         lda #color
3b09: 8d 86 02  -         sta foreground_color
3b0c: a2 00     -         ldx #$00
3b0e: bd 21 3b  -         lda msg,x
3b11: f0 07     -         beq !done+
3b13: 20 d2 ff  -         jsr kernal_chrout
3b16: e8        -         inx
3b17: 4c 0e 3b  -         jmp !loop-
3b1a: 68        -         pla
3b1b: 8d 86 02  -         sta foreground_color
3b1e: 4c 25 3b  -         jmp !done+
3b21: 20        - memory: .byte spacebar
3b22: 30        -         .text description
3b23: 3a        -         .text ":"
3b24: 00        -         .byte NULL
3b25: a6 1f     -         ldx rl(register.getValue())
3b27: a4 20     -         ldy rh(register.getValue())
3b29: e0 00     -         cpx #<value
3b2b: d0 25     -         bne !failed+
3b2d: c0 00     -         cpy #>value
3b2f: d0 21     -         bne !failed+
3b31: ee ac 22  -         inc TEST_PASS_COUNT
3b34: ad 86 02  -         lda foreground_color
3b37: 48        -         pha
3b38: a9 05     -         lda #color
3b3a: 8d 86 02  -         sta foreground_color
3b3d: a2 00     -         ldx #$00
3b3f: bd 00 20  -         lda msg,x
3b42: f0 07     -         beq !done+
3b44: 20 d2 ff  -         jsr kernal_chrout
3b47: e8        -         inx
3b48: 4c 3f 3b  -         jmp !loop-
3b4b: 68        -         pla
3b4c: 8d 86 02  -         sta foreground_color
3b4f: 4c 6d 3b  -         jmp !done+
3b52: ad 86 02  -         lda foreground_color
3b55: 48        -         pha
3b56: a9 02     -         lda #color
3b58: 8d 86 02  -         sta foreground_color
3b5b: a2 00     -         ldx #$00
3b5d: bd 02 20  -         lda msg,x
3b60: f0 07     -         beq !done+
3b62: 20 d2 ff  -         jsr kernal_chrout
3b65: e8        -         inx
3b66: 4c 5d 3b  -         jmp !loop-
3b69: 68        -         pla
3b6a: 8d 86 02  -         sta foreground_color
3b6d: a2 00     -         ldx #$00
3b6f: bd 7e 3b  -         lda msg,x
3b72: f0 07     -         beq !done+
3b74: 20 d2 ff  -         jsr kernal_chrout
3b77: e8        -         inx
3b78: 4c 6f 3b  -         jmp !loop-
3b7b: 4c 80 3b  -         jmp !done+
3b7e: 0d 00     - memory: .byte RETURN, NULL
3b80: ae ad 22  -         ldx TEST_NAME_COUNT
3b83: e0 15     -         cpx #TESTS_PER_PAGE
3b85: d0 5d     -         bne !exit+
3b87: ad 86 02  -         lda foreground_color
3b8a: 48        -         pha
3b8b: a9 01     -         lda #color
3b8d: 8d 86 02  -         sta foreground_color
3b90: a2 00     -         ldx #$00
3b92: bd a5 3b  -         lda msg,x
3b95: f0 07     -         beq !done+
3b97: 20 d2 ff  -         jsr kernal_chrout
3b9a: e8        -         inx
3b9b: 4c 92 3b  -         jmp !loop-
3b9e: 68        -         pla
3b9f: 8d 86 02  -         sta foreground_color
3ba2: 4c c4 3b  -         jmp !no_key+
3ba5: 0d        - memory: .byte RETURN
3ba6: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3bb6: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3bc2: 0d 00     -         .byte RETURN, NULL
3bc4: 20 9f ff  -         jsr scnkey  // scan keyboard
3bc7: 20 e4 ff  -         jsr getin	// put result into A
3bca: f0 f8     -         beq !no_key-
3bcc: a2 00     -         ldx #$00
3bce: bd dd 3b  -         lda msg,x
3bd1: f0 07     -         beq !done+
3bd3: 20 d2 ff  -         jsr kernal_chrout
3bd6: e8        -         inx
3bd7: 4c ce 3b  -         jmp !loop-
3bda: 4c df 3b  -         jmp !done+
3bdd: 0d 00     - newline:.byte RETURN, NULL
3bdf: a2 00     -         ldx #$00
3be1: 8e ad 22  -         stx TEST_NAME_COUNT
3be4: 60        -         rts
3be5: ee ad 22  - RETURN_TO_6502_MODE_TEST:inc TEST_NAME_COUNT
3be8: ad 86 02  -         lda foreground_color
3beb: 48        -         pha
3bec: a9 0f     -         lda #color
3bee: 8d 86 02  -         sta foreground_color
3bf1: a2 00     -         ldx #$00
3bf3: bd 06 3c  -         lda msg,x
3bf6: f0 07     -         beq !done+
3bf8: 20 d2 ff  -         jsr kernal_chrout
3bfb: e8        -         inx
3bfc: 4c f3 3b  -         jmp !loop-
3bff: 68        -         pla
3c00: 8d 86 02  -         sta foreground_color
3c03: 4c 15 3c  -         jmp !done+
3c06: 20 20     - memory: .fill spacing, spacebar
3c08: 36 35 30 32 20 4d 4f 44 45                       -         .text name
3c11: 2e 2e 2e  -         .text "..."
3c14: 00        -         .byte NULL
3c15: 20 0c 20  -         jsr SW16
3c18: 00        -         .byte $00 }
3c19: ee ab 22  -         inc TEST_COUNT
3c1c: ad 86 02  -         lda foreground_color
3c1f: 48        -         pha
3c20: a9 0e     -         lda #color
3c22: 8d 86 02  -         sta foreground_color
3c25: a2 00     -         ldx #$00
3c27: bd 3a 3c  -         lda msg,x
3c2a: f0 07     -         beq !done+
3c2c: 20 d2 ff  -         jsr kernal_chrout
3c2f: e8        -         inx
3c30: 4c 27 3c  -         jmp !loop-
3c33: 68        -         pla
3c34: 8d 86 02  -         sta foreground_color
3c37: 4c 40 3c  -         jmp !done+
3c3a: 20        - memory: .byte spacebar
3c3b: 52 54 4e  -         .text description
3c3e: 3a        -         .text ":"
3c3f: 00        -         .byte NULL
3c40: a2 01     -         ldx #value
3c42: f0 21     -         beq !failed+
3c44: ee ac 22  -         inc TEST_PASS_COUNT
3c47: ad 86 02  -         lda foreground_color
3c4a: 48        -         pha
3c4b: a9 05     -         lda #color
3c4d: 8d 86 02  -         sta foreground_color
3c50: a2 00     -         ldx #$00
3c52: bd 00 20  -         lda msg,x
3c55: f0 07     -         beq !done+
3c57: 20 d2 ff  -         jsr kernal_chrout
3c5a: e8        -         inx
3c5b: 4c 52 3c  -         jmp !loop-
3c5e: 68        -         pla
3c5f: 8d 86 02  -         sta foreground_color
3c62: 4c 80 3c  -         jmp !done+
3c65: ad 86 02  -         lda foreground_color
3c68: 48        -         pha
3c69: a9 02     -         lda #color
3c6b: 8d 86 02  -         sta foreground_color
3c6e: a2 00     -         ldx #$00
3c70: bd 02 20  -         lda msg,x
3c73: f0 07     -         beq !done+
3c75: 20 d2 ff  -         jsr kernal_chrout
3c78: e8        -         inx
3c79: 4c 70 3c  -         jmp !loop-
3c7c: 68        -         pla
3c7d: 8d 86 02  -         sta foreground_color
3c80: a2 00     -         ldx #$00
3c82: bd 91 3c  -         lda msg,x
3c85: f0 07     -         beq !done+
3c87: 20 d2 ff  -         jsr kernal_chrout
3c8a: e8        -         inx
3c8b: 4c 82 3c  -         jmp !loop-
3c8e: 4c 93 3c  -         jmp !done+
3c91: 0d 00     - memory: .byte RETURN, NULL
3c93: ae ad 22  -         ldx TEST_NAME_COUNT
3c96: e0 15     -         cpx #TESTS_PER_PAGE
3c98: d0 5d     -         bne !exit+
3c9a: ad 86 02  -         lda foreground_color
3c9d: 48        -         pha
3c9e: a9 01     -         lda #color
3ca0: 8d 86 02  -         sta foreground_color
3ca3: a2 00     -         ldx #$00
3ca5: bd b8 3c  -         lda msg,x
3ca8: f0 07     -         beq !done+
3caa: 20 d2 ff  -         jsr kernal_chrout
3cad: e8        -         inx
3cae: 4c a5 3c  -         jmp !loop-
3cb1: 68        -         pla
3cb2: 8d 86 02  -         sta foreground_color
3cb5: 4c d7 3c  -         jmp !no_key+
3cb8: 0d        - memory: .byte RETURN
3cb9: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3cc9: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3cd5: 0d 00     -         .byte RETURN, NULL
3cd7: 20 9f ff  -         jsr scnkey  // scan keyboard
3cda: 20 e4 ff  -         jsr getin	// put result into A
3cdd: f0 f8     -         beq !no_key-
3cdf: a2 00     -         ldx #$00
3ce1: bd f0 3c  -         lda msg,x
3ce4: f0 07     -         beq !done+
3ce6: 20 d2 ff  -         jsr kernal_chrout
3ce9: e8        -         inx
3cea: 4c e1 3c  -         jmp !loop-
3ced: 4c f2 3c  -         jmp !done+
3cf0: 0d 00     - newline:.byte RETURN, NULL
3cf2: a2 00     -         ldx #$00
3cf4: 8e ad 22  -         stx TEST_NAME_COUNT
3cf7: 60        -         rts
3cf8: ee ad 22  - BRANCH_ALWAYS_TEST:inc TEST_NAME_COUNT
3cfb: ad 86 02  -         lda foreground_color
3cfe: 48        -         pha
3cff: a9 0f     -         lda #color
3d01: 8d 86 02  -         sta foreground_color
3d04: a2 00     -         ldx #$00
3d06: bd 19 3d  -         lda msg,x
3d09: f0 07     -         beq !done+
3d0b: 20 d2 ff  -         jsr kernal_chrout
3d0e: e8        -         inx
3d0f: 4c 06 3d  -         jmp !loop-
3d12: 68        -         pla
3d13: 8d 86 02  -         sta foreground_color
3d16: 4c 2c 3d  -         jmp !done+
3d19: 20 20     - memory: .fill spacing, spacebar
3d1b: 42 52 41 4e 43 48 20 41 4c 57 41 59 53           -         .text name
3d28: 2e 2e 2e  -         .text "..."
3d2b: 00        -         .byte NULL
3d2c: 20 0c 20  -         jsr SW16
3d2f: 01 00     -         .byte $01, effective_address(ea,*) }
3d31: 10        -         .byte opcode(op, register)
3d32: dc fe     -         .word address.getValue()
3d34: 01 05     -         .byte $01, effective_address(ea,*) }
3d36: 10        -         .byte opcode(op, register)
3d37: 23 01     -         .word address.getValue()
3d39: 01 00     -         .byte $01, effective_address(ea,*) }
3d3b: 00        -         .byte $00 }
3d3c: ee ab 22  -         inc TEST_COUNT
3d3f: ad 86 02  -         lda foreground_color
3d42: 48        -         pha
3d43: a9 0e     -         lda #color
3d45: 8d 86 02  -         sta foreground_color
3d48: a2 00     -         ldx #$00
3d4a: bd 5d 3d  -         lda msg,x
3d4d: f0 07     -         beq !done+
3d4f: 20 d2 ff  -         jsr kernal_chrout
3d52: e8        -         inx
3d53: 4c 4a 3d  -         jmp !loop-
3d56: 68        -         pla
3d57: 8d 86 02  -         sta foreground_color
3d5a: 4c 61 3d  -         jmp !done+
3d5d: 20        - memory: .byte spacebar
3d5e: 31        -         .text description
3d5f: 3a        -         .text ":"
3d60: 00        -         .byte NULL
3d61: a6 17     -         ldx rl(register.getValue())
3d63: a4 18     -         ldy rh(register.getValue())
3d65: e0 dc     -         cpx #<value
3d67: d0 25     -         bne !failed+
3d69: c0 fe     -         cpy #>value
3d6b: d0 21     -         bne !failed+
3d6d: ee ac 22  -         inc TEST_PASS_COUNT
3d70: ad 86 02  -         lda foreground_color
3d73: 48        -         pha
3d74: a9 05     -         lda #color
3d76: 8d 86 02  -         sta foreground_color
3d79: a2 00     -         ldx #$00
3d7b: bd 00 20  -         lda msg,x
3d7e: f0 07     -         beq !done+
3d80: 20 d2 ff  -         jsr kernal_chrout
3d83: e8        -         inx
3d84: 4c 7b 3d  -         jmp !loop-
3d87: 68        -         pla
3d88: 8d 86 02  -         sta foreground_color
3d8b: 4c a9 3d  -         jmp !done+
3d8e: ad 86 02  -         lda foreground_color
3d91: 48        -         pha
3d92: a9 02     -         lda #color
3d94: 8d 86 02  -         sta foreground_color
3d97: a2 00     -         ldx #$00
3d99: bd 02 20  -         lda msg,x
3d9c: f0 07     -         beq !done+
3d9e: 20 d2 ff  -         jsr kernal_chrout
3da1: e8        -         inx
3da2: 4c 99 3d  -         jmp !loop-
3da5: 68        -         pla
3da6: 8d 86 02  -         sta foreground_color
3da9: a2 00     -         ldx #$00
3dab: bd ba 3d  -         lda msg,x
3dae: f0 07     -         beq !done+
3db0: 20 d2 ff  -         jsr kernal_chrout
3db3: e8        -         inx
3db4: 4c ab 3d  -         jmp !loop-
3db7: 4c bc 3d  -         jmp !done+
3dba: 0d 00     - memory: .byte RETURN, NULL
3dbc: ae ad 22  -         ldx TEST_NAME_COUNT
3dbf: e0 15     -         cpx #TESTS_PER_PAGE
3dc1: d0 5d     -         bne !exit+
3dc3: ad 86 02  -         lda foreground_color
3dc6: 48        -         pha
3dc7: a9 01     -         lda #color
3dc9: 8d 86 02  -         sta foreground_color
3dcc: a2 00     -         ldx #$00
3dce: bd e1 3d  -         lda msg,x
3dd1: f0 07     -         beq !done+
3dd3: 20 d2 ff  -         jsr kernal_chrout
3dd6: e8        -         inx
3dd7: 4c ce 3d  -         jmp !loop-
3dda: 68        -         pla
3ddb: 8d 86 02  -         sta foreground_color
3dde: 4c 00 3e  -         jmp !no_key+
3de1: 0d        - memory: .byte RETURN
3de2: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3df2: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3dfe: 0d 00     -         .byte RETURN, NULL
3e00: 20 9f ff  -         jsr scnkey  // scan keyboard
3e03: 20 e4 ff  -         jsr getin	// put result into A
3e06: f0 f8     -         beq !no_key-
3e08: a2 00     -         ldx #$00
3e0a: bd 19 3e  -         lda msg,x
3e0d: f0 07     -         beq !done+
3e0f: 20 d2 ff  -         jsr kernal_chrout
3e12: e8        -         inx
3e13: 4c 0a 3e  -         jmp !loop-
3e16: 4c 1b 3e  -         jmp !done+
3e19: 0d 00     - newline:.byte RETURN, NULL
3e1b: a2 00     -         ldx #$00
3e1d: 8e ad 22  -         stx TEST_NAME_COUNT
3e20: 60        -         rts
3e21: ee ad 22  - BRANCH_IF_NO_CARRY_TEST:inc TEST_NAME_COUNT
3e24: ad 86 02  -         lda foreground_color
3e27: 48        -         pha
3e28: a9 0f     -         lda #color
3e2a: 8d 86 02  -         sta foreground_color
3e2d: a2 00     -         ldx #$00
3e2f: bd 42 3e  -         lda msg,x
3e32: f0 07     -         beq !done+
3e34: 20 d2 ff  -         jsr kernal_chrout
3e37: e8        -         inx
3e38: 4c 2f 3e  -         jmp !loop-
3e3b: 68        -         pla
3e3c: 8d 86 02  -         sta foreground_color
3e3f: 4c 57 3e  -         jmp !done+
3e42: 20 20     - memory: .fill spacing, spacebar
3e44: 42 52 41 4e 43 48 20 4e 4f 20 43 41 52 52 59     -         .text name
3e53: 2e 2e 2e  -         .text "..."
3e56: 00        -         .byte NULL
3e57: 20 0c 20  -         jsr SW16
3e5a: 15        -         .byte opcode(op, register)
3e5b: 00 10     -         .word address.getValue()
3e5d: 10        -         .byte opcode(op, register)
3e5e: ff ff     -         .word address.getValue()
3e60: a5        -         .byte opcode($a0, register) }
3e61: 02 02     -         .byte $02, effective_address(ea,*) }
3e63: 01 05     -         .byte $01, effective_address(ea,*) }
3e65: 10        -         .byte opcode(op, register)
3e66: dc fe     -         .word address.getValue()
3e68: 01 05     -         .byte $01, effective_address(ea,*) }
3e6a: 10        -         .byte opcode(op, register)
3e6b: 23 01     -         .word address.getValue()
3e6d: 01 00     -         .byte $01, effective_address(ea,*) }
3e6f: 00        -         .byte $00 }
3e70: ee ab 22  -         inc TEST_COUNT
3e73: ad 86 02  -         lda foreground_color
3e76: 48        -         pha
3e77: a9 0e     -         lda #color
3e79: 8d 86 02  -         sta foreground_color
3e7c: a2 00     -         ldx #$00
3e7e: bd 91 3e  -         lda msg,x
3e81: f0 07     -         beq !done+
3e83: 20 d2 ff  -         jsr kernal_chrout
3e86: e8        -         inx
3e87: 4c 7e 3e  -         jmp !loop-
3e8a: 68        -         pla
3e8b: 8d 86 02  -         sta foreground_color
3e8e: 4c 95 3e  -         jmp !done+
3e91: 20        - memory: .byte spacebar
3e92: 32        -         .text description
3e93: 3a        -         .text ":"
3e94: 00        -         .byte NULL
3e95: a6 17     -         ldx rl(register.getValue())
3e97: a4 18     -         ldy rh(register.getValue())
3e99: e0 23     -         cpx #<value
3e9b: d0 25     -         bne !failed+
3e9d: c0 01     -         cpy #>value
3e9f: d0 21     -         bne !failed+
3ea1: ee ac 22  -         inc TEST_PASS_COUNT
3ea4: ad 86 02  -         lda foreground_color
3ea7: 48        -         pha
3ea8: a9 05     -         lda #color
3eaa: 8d 86 02  -         sta foreground_color
3ead: a2 00     -         ldx #$00
3eaf: bd 00 20  -         lda msg,x
3eb2: f0 07     -         beq !done+
3eb4: 20 d2 ff  -         jsr kernal_chrout
3eb7: e8        -         inx
3eb8: 4c af 3e  -         jmp !loop-
3ebb: 68        -         pla
3ebc: 8d 86 02  -         sta foreground_color
3ebf: 4c dd 3e  -         jmp !done+
3ec2: ad 86 02  -         lda foreground_color
3ec5: 48        -         pha
3ec6: a9 02     -         lda #color
3ec8: 8d 86 02  -         sta foreground_color
3ecb: a2 00     -         ldx #$00
3ecd: bd 02 20  -         lda msg,x
3ed0: f0 07     -         beq !done+
3ed2: 20 d2 ff  -         jsr kernal_chrout
3ed5: e8        -         inx
3ed6: 4c cd 3e  -         jmp !loop-
3ed9: 68        -         pla
3eda: 8d 86 02  -         sta foreground_color
3edd: a2 00     -         ldx #$00
3edf: bd ee 3e  -         lda msg,x
3ee2: f0 07     -         beq !done+
3ee4: 20 d2 ff  -         jsr kernal_chrout
3ee7: e8        -         inx
3ee8: 4c df 3e  -         jmp !loop-
3eeb: 4c f0 3e  -         jmp !done+
3eee: 0d 00     - memory: .byte RETURN, NULL
3ef0: ae ad 22  -         ldx TEST_NAME_COUNT
3ef3: e0 15     -         cpx #TESTS_PER_PAGE
3ef5: d0 5d     -         bne !exit+
3ef7: ad 86 02  -         lda foreground_color
3efa: 48        -         pha
3efb: a9 01     -         lda #color
3efd: 8d 86 02  -         sta foreground_color
3f00: a2 00     -         ldx #$00
3f02: bd 15 3f  -         lda msg,x
3f05: f0 07     -         beq !done+
3f07: 20 d2 ff  -         jsr kernal_chrout
3f0a: e8        -         inx
3f0b: 4c 02 3f  -         jmp !loop-
3f0e: 68        -         pla
3f0f: 8d 86 02  -         sta foreground_color
3f12: 4c 34 3f  -         jmp !no_key+
3f15: 0d        - memory: .byte RETURN
3f16: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
3f26: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
3f32: 0d 00     -         .byte RETURN, NULL
3f34: 20 9f ff  -         jsr scnkey  // scan keyboard
3f37: 20 e4 ff  -         jsr getin	// put result into A
3f3a: f0 f8     -         beq !no_key-
3f3c: a2 00     -         ldx #$00
3f3e: bd 4d 3f  -         lda msg,x
3f41: f0 07     -         beq !done+
3f43: 20 d2 ff  -         jsr kernal_chrout
3f46: e8        -         inx
3f47: 4c 3e 3f  -         jmp !loop-
3f4a: 4c 4f 3f  -         jmp !done+
3f4d: 0d 00     - newline:.byte RETURN, NULL
3f4f: a2 00     -         ldx #$00
3f51: 8e ad 22  -         stx TEST_NAME_COUNT
3f54: 60        -         rts
3f55: ee ad 22  - BRANCH_IF_CARRY_SET_TEST:inc TEST_NAME_COUNT
3f58: ad 86 02  -         lda foreground_color
3f5b: 48        -         pha
3f5c: a9 0f     -         lda #color
3f5e: 8d 86 02  -         sta foreground_color
3f61: a2 00     -         ldx #$00
3f63: bd 76 3f  -         lda msg,x
3f66: f0 07     -         beq !done+
3f68: 20 d2 ff  -         jsr kernal_chrout
3f6b: e8        -         inx
3f6c: 4c 63 3f  -         jmp !loop-
3f6f: 68        -         pla
3f70: 8d 86 02  -         sta foreground_color
3f73: 4c 8b 3f  -         jmp !done+
3f76: 20 20     - memory: .fill spacing, spacebar
3f78: 42 52 41 4e 43 48 20 49 46 20 43 41 52 52 59     -         .text name
3f87: 2e 2e 2e  -         .text "..."
3f8a: 00        -         .byte NULL
3f8b: 20 0c 20  -         jsr SW16
3f8e: 15        -         .byte opcode(op, register)
3f8f: 00 10     -         .word address.getValue()
3f91: 10        -         .byte opcode(op, register)
3f92: ff ff     -         .word address.getValue()
3f94: a5        -         .byte opcode($a0, register) }
3f95: 03 02     -         .byte $03, effective_address(ea,*) }
3f97: 01 05     -         .byte $01, effective_address(ea,*) }
3f99: 10        -         .byte opcode(op, register)
3f9a: dc fe     -         .word address.getValue()
3f9c: 01 05     -         .byte $01, effective_address(ea,*) }
3f9e: 10        -         .byte opcode(op, register)
3f9f: 23 01     -         .word address.getValue()
3fa1: 01 00     -         .byte $01, effective_address(ea,*) }
3fa3: 00        -         .byte $00 }
3fa4: ee ab 22  -         inc TEST_COUNT
3fa7: ad 86 02  -         lda foreground_color
3faa: 48        -         pha
3fab: a9 0e     -         lda #color
3fad: 8d 86 02  -         sta foreground_color
3fb0: a2 00     -         ldx #$00
3fb2: bd c5 3f  -         lda msg,x
3fb5: f0 07     -         beq !done+
3fb7: 20 d2 ff  -         jsr kernal_chrout
3fba: e8        -         inx
3fbb: 4c b2 3f  -         jmp !loop-
3fbe: 68        -         pla
3fbf: 8d 86 02  -         sta foreground_color
3fc2: 4c c9 3f  -         jmp !done+
3fc5: 20        - memory: .byte spacebar
3fc6: 31        -         .text description
3fc7: 3a        -         .text ":"
3fc8: 00        -         .byte NULL
3fc9: a6 17     -         ldx rl(register.getValue())
3fcb: a4 18     -         ldy rh(register.getValue())
3fcd: e0 dc     -         cpx #<value
3fcf: d0 25     -         bne !failed+
3fd1: c0 fe     -         cpy #>value
3fd3: d0 21     -         bne !failed+
3fd5: ee ac 22  -         inc TEST_PASS_COUNT
3fd8: ad 86 02  -         lda foreground_color
3fdb: 48        -         pha
3fdc: a9 05     -         lda #color
3fde: 8d 86 02  -         sta foreground_color
3fe1: a2 00     -         ldx #$00
3fe3: bd 00 20  -         lda msg,x
3fe6: f0 07     -         beq !done+
3fe8: 20 d2 ff  -         jsr kernal_chrout
3feb: e8        -         inx
3fec: 4c e3 3f  -         jmp !loop-
3fef: 68        -         pla
3ff0: 8d 86 02  -         sta foreground_color
3ff3: 4c 11 40  -         jmp !done+
3ff6: ad 86 02  -         lda foreground_color
3ff9: 48        -         pha
3ffa: a9 02     -         lda #color
3ffc: 8d 86 02  -         sta foreground_color
3fff: a2 00     -         ldx #$00
4001: bd 02 20  -         lda msg,x
4004: f0 07     -         beq !done+
4006: 20 d2 ff  -         jsr kernal_chrout
4009: e8        -         inx
400a: 4c 01 40  -         jmp !loop-
400d: 68        -         pla
400e: 8d 86 02  -         sta foreground_color
4011: a2 00     -         ldx #$00
4013: bd 22 40  -         lda msg,x
4016: f0 07     -         beq !done+
4018: 20 d2 ff  -         jsr kernal_chrout
401b: e8        -         inx
401c: 4c 13 40  -         jmp !loop-
401f: 4c 24 40  -         jmp !done+
4022: 0d 00     - memory: .byte RETURN, NULL
4024: ae ad 22  -         ldx TEST_NAME_COUNT
4027: e0 15     -         cpx #TESTS_PER_PAGE
4029: d0 5d     -         bne !exit+
402b: ad 86 02  -         lda foreground_color
402e: 48        -         pha
402f: a9 01     -         lda #color
4031: 8d 86 02  -         sta foreground_color
4034: a2 00     -         ldx #$00
4036: bd 49 40  -         lda msg,x
4039: f0 07     -         beq !done+
403b: 20 d2 ff  -         jsr kernal_chrout
403e: e8        -         inx
403f: 4c 36 40  -         jmp !loop-
4042: 68        -         pla
4043: 8d 86 02  -         sta foreground_color
4046: 4c 68 40  -         jmp !no_key+
4049: 0d        - memory: .byte RETURN
404a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
405a: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4066: 0d 00     -         .byte RETURN, NULL
4068: 20 9f ff  -         jsr scnkey  // scan keyboard
406b: 20 e4 ff  -         jsr getin	// put result into A
406e: f0 f8     -         beq !no_key-
4070: a2 00     -         ldx #$00
4072: bd 81 40  -         lda msg,x
4075: f0 07     -         beq !done+
4077: 20 d2 ff  -         jsr kernal_chrout
407a: e8        -         inx
407b: 4c 72 40  -         jmp !loop-
407e: 4c 83 40  -         jmp !done+
4081: 0d 00     - newline:.byte RETURN, NULL
4083: a2 00     -         ldx #$00
4085: 8e ad 22  -         stx TEST_NAME_COUNT
4088: 60        -         rts
4089: ee ad 22  - BRANCH_IF_PLUS_TEST:inc TEST_NAME_COUNT
408c: ad 86 02  -         lda foreground_color
408f: 48        -         pha
4090: a9 0f     -         lda #color
4092: 8d 86 02  -         sta foreground_color
4095: a2 00     -         ldx #$00
4097: bd aa 40  -         lda msg,x
409a: f0 07     -         beq !done+
409c: 20 d2 ff  -         jsr kernal_chrout
409f: e8        -         inx
40a0: 4c 97 40  -         jmp !loop-
40a3: 68        -         pla
40a4: 8d 86 02  -         sta foreground_color
40a7: 4c bd 40  -         jmp !done+
40aa: 20 20     - memory: .fill spacing, spacebar
40ac: 42 52 41 4e 43 48 20 49 46 20 2b 56 45           -         .text name
40b9: 2e 2e 2e  -         .text "..."
40bc: 00        -         .byte NULL
40bd: 20 0c 20  -         jsr SW16
40c0: 15        -         .byte opcode(op, register)
40c1: c9 22     -         .word address.getValue()
40c3: 14        -         .byte opcode(op, register)
40c4: d9 22     -         .word address.getValue()
40c6: b0        -         .byte opcode($b0, register) }
40c7: 55        -         .byte opcode($50, register) }
40c8: 24        -         .byte opcode($20, register) }
40c9: d5        -         .byte opcode($d0, register) }
40ca: 04 fa     -         .byte $04, effective_address(ea,*) }
40cc: 00        -         .byte $00 }
40cd: ee ab 22  -         inc TEST_COUNT
40d0: ad 86 02  -         lda foreground_color
40d3: 48        -         pha
40d4: a9 0e     -         lda #color
40d6: 8d 86 02  -         sta foreground_color
40d9: a2 00     -         ldx #$00
40db: bd ee 40  -         lda msg,x
40de: f0 07     -         beq !done+
40e0: 20 d2 ff  -         jsr kernal_chrout
40e3: e8        -         inx
40e4: 4c db 40  -         jmp !loop-
40e7: 68        -         pla
40e8: 8d 86 02  -         sta foreground_color
40eb: 4c f4 40  -         jmp !done+
40ee: 20        - memory: .byte spacebar
40ef: 43 4c 52  -         .text description
40f2: 3a        -         .text ":"
40f3: 00        -         .byte NULL
40f4: a2 ff     -         ldx #$ff
40f6: e8        -         inx
40f7: e0 10     -         cpx #size
40f9: f0 0a     -         beq !success+
40fb: a9 00     -         lda #constant
40fd: dd c9 22  -         cmp source,x
4100: f0 f4     -         beq !loop-
4102: 4c 26 41  -         jmp !failed+
4105: ee ac 22  -         inc TEST_PASS_COUNT
4108: ad 86 02  -         lda foreground_color
410b: 48        -         pha
410c: a9 05     -         lda #color
410e: 8d 86 02  -         sta foreground_color
4111: a2 00     -         ldx #$00
4113: bd 00 20  -         lda msg,x
4116: f0 07     -         beq !done+
4118: 20 d2 ff  -         jsr kernal_chrout
411b: e8        -         inx
411c: 4c 13 41  -         jmp !loop-
411f: 68        -         pla
4120: 8d 86 02  -         sta foreground_color
4123: 4c 41 41  -         jmp !done+
4126: ad 86 02  -         lda foreground_color
4129: 48        -         pha
412a: a9 02     -         lda #color
412c: 8d 86 02  -         sta foreground_color
412f: a2 00     -         ldx #$00
4131: bd 02 20  -         lda msg,x
4134: f0 07     -         beq !done+
4136: 20 d2 ff  -         jsr kernal_chrout
4139: e8        -         inx
413a: 4c 31 41  -         jmp !loop-
413d: 68        -         pla
413e: 8d 86 02  -         sta foreground_color
4141: a2 00     -         ldx #$00
4143: bd 52 41  -         lda msg,x
4146: f0 07     -         beq !done+
4148: 20 d2 ff  -         jsr kernal_chrout
414b: e8        -         inx
414c: 4c 43 41  -         jmp !loop-
414f: 4c 54 41  -         jmp !done+
4152: 0d 00     - memory: .byte RETURN, NULL
4154: ae ad 22  -         ldx TEST_NAME_COUNT
4157: e0 15     -         cpx #TESTS_PER_PAGE
4159: d0 5d     -         bne !exit+
415b: ad 86 02  -         lda foreground_color
415e: 48        -         pha
415f: a9 01     -         lda #color
4161: 8d 86 02  -         sta foreground_color
4164: a2 00     -         ldx #$00
4166: bd 79 41  -         lda msg,x
4169: f0 07     -         beq !done+
416b: 20 d2 ff  -         jsr kernal_chrout
416e: e8        -         inx
416f: 4c 66 41  -         jmp !loop-
4172: 68        -         pla
4173: 8d 86 02  -         sta foreground_color
4176: 4c 98 41  -         jmp !no_key+
4179: 0d        - memory: .byte RETURN
417a: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
418a: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4196: 0d 00     -         .byte RETURN, NULL
4198: 20 9f ff  -         jsr scnkey  // scan keyboard
419b: 20 e4 ff  -         jsr getin	// put result into A
419e: f0 f8     -         beq !no_key-
41a0: a2 00     -         ldx #$00
41a2: bd b1 41  -         lda msg,x
41a5: f0 07     -         beq !done+
41a7: 20 d2 ff  -         jsr kernal_chrout
41aa: e8        -         inx
41ab: 4c a2 41  -         jmp !loop-
41ae: 4c b3 41  -         jmp !done+
41b1: 0d 00     - newline:.byte RETURN, NULL
41b3: a2 00     -         ldx #$00
41b5: 8e ad 22  -         stx TEST_NAME_COUNT
41b8: 60        -         rts
41b9: ee ad 22  - BRANCH_IF_MINUS_TEST:inc TEST_NAME_COUNT
41bc: ad 86 02  -         lda foreground_color
41bf: 48        -         pha
41c0: a9 0f     -         lda #color
41c2: 8d 86 02  -         sta foreground_color
41c5: a2 00     -         ldx #$00
41c7: bd da 41  -         lda msg,x
41ca: f0 07     -         beq !done+
41cc: 20 d2 ff  -         jsr kernal_chrout
41cf: e8        -         inx
41d0: 4c c7 41  -         jmp !loop-
41d3: 68        -         pla
41d4: 8d 86 02  -         sta foreground_color
41d7: 4c ed 41  -         jmp !done+
41da: 20 20     - memory: .fill spacing, spacebar
41dc: 42 52 41 4e 43 48 20 49 46 20 2d 56 45           -         .text name
41e9: 2e 2e 2e  -         .text "..."
41ec: 00        -         .byte NULL
41ed: 20 0c 20  -         jsr SW16
41f0: 15        -         .byte opcode(op, register)
41f1: 0a 00     -         .word address.getValue()
41f3: b0        -         .byte opcode($b0, register) }
41f4: b5        -         .byte opcode($b0, register) }
41f5: 05 07     -         .byte $05, effective_address(ea,*) }
41f7: 01 00     -         .byte $01, effective_address(ea,*) }
41f9: 10        -         .byte opcode(op, register)
41fa: dc fe     -         .word address.getValue()
41fc: 01 05     -         .byte $01, effective_address(ea,*) }
41fe: 10        -         .byte opcode(op, register)
41ff: 23 01     -         .word address.getValue()
4201: 01 00     -         .byte $01, effective_address(ea,*) }
4203: 00        -         .byte $00 }
4204: ee ab 22  -         inc TEST_COUNT
4207: ad 86 02  -         lda foreground_color
420a: 48        -         pha
420b: a9 0e     -         lda #color
420d: 8d 86 02  -         sta foreground_color
4210: a2 00     -         ldx #$00
4212: bd 25 42  -         lda msg,x
4215: f0 07     -         beq !done+
4217: 20 d2 ff  -         jsr kernal_chrout
421a: e8        -         inx
421b: 4c 12 42  -         jmp !loop-
421e: 68        -         pla
421f: 8d 86 02  -         sta foreground_color
4222: 4c 29 42  -         jmp !done+
4225: 20        - memory: .byte spacebar
4226: 32        -         .text description
4227: 3a        -         .text ":"
4228: 00        -         .byte NULL
4229: a6 17     -         ldx rl(register.getValue())
422b: a4 18     -         ldy rh(register.getValue())
422d: e0 23     -         cpx #<value
422f: d0 25     -         bne !failed+
4231: c0 01     -         cpy #>value
4233: d0 21     -         bne !failed+
4235: ee ac 22  -         inc TEST_PASS_COUNT
4238: ad 86 02  -         lda foreground_color
423b: 48        -         pha
423c: a9 05     -         lda #color
423e: 8d 86 02  -         sta foreground_color
4241: a2 00     -         ldx #$00
4243: bd 00 20  -         lda msg,x
4246: f0 07     -         beq !done+
4248: 20 d2 ff  -         jsr kernal_chrout
424b: e8        -         inx
424c: 4c 43 42  -         jmp !loop-
424f: 68        -         pla
4250: 8d 86 02  -         sta foreground_color
4253: 4c 71 42  -         jmp !done+
4256: ad 86 02  -         lda foreground_color
4259: 48        -         pha
425a: a9 02     -         lda #color
425c: 8d 86 02  -         sta foreground_color
425f: a2 00     -         ldx #$00
4261: bd 02 20  -         lda msg,x
4264: f0 07     -         beq !done+
4266: 20 d2 ff  -         jsr kernal_chrout
4269: e8        -         inx
426a: 4c 61 42  -         jmp !loop-
426d: 68        -         pla
426e: 8d 86 02  -         sta foreground_color
4271: a2 00     -         ldx #$00
4273: bd 82 42  -         lda msg,x
4276: f0 07     -         beq !done+
4278: 20 d2 ff  -         jsr kernal_chrout
427b: e8        -         inx
427c: 4c 73 42  -         jmp !loop-
427f: 4c 84 42  -         jmp !done+
4282: 0d 00     - memory: .byte RETURN, NULL
4284: ae ad 22  -         ldx TEST_NAME_COUNT
4287: e0 15     -         cpx #TESTS_PER_PAGE
4289: d0 5d     -         bne !exit+
428b: ad 86 02  -         lda foreground_color
428e: 48        -         pha
428f: a9 01     -         lda #color
4291: 8d 86 02  -         sta foreground_color
4294: a2 00     -         ldx #$00
4296: bd a9 42  -         lda msg,x
4299: f0 07     -         beq !done+
429b: 20 d2 ff  -         jsr kernal_chrout
429e: e8        -         inx
429f: 4c 96 42  -         jmp !loop-
42a2: 68        -         pla
42a3: 8d 86 02  -         sta foreground_color
42a6: 4c c8 42  -         jmp !no_key+
42a9: 0d        - memory: .byte RETURN
42aa: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
42ba: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
42c6: 0d 00     -         .byte RETURN, NULL
42c8: 20 9f ff  -         jsr scnkey  // scan keyboard
42cb: 20 e4 ff  -         jsr getin	// put result into A
42ce: f0 f8     -         beq !no_key-
42d0: a2 00     -         ldx #$00
42d2: bd e1 42  -         lda msg,x
42d5: f0 07     -         beq !done+
42d7: 20 d2 ff  -         jsr kernal_chrout
42da: e8        -         inx
42db: 4c d2 42  -         jmp !loop-
42de: 4c e3 42  -         jmp !done+
42e1: 0d 00     - newline:.byte RETURN, NULL
42e3: a2 00     -         ldx #$00
42e5: 8e ad 22  -         stx TEST_NAME_COUNT
42e8: 60        -         rts
42e9: ee ad 22  - BRANCH_IF_ZERO_TEST:inc TEST_NAME_COUNT
42ec: ad 86 02  -         lda foreground_color
42ef: 48        -         pha
42f0: a9 0f     -         lda #color
42f2: 8d 86 02  -         sta foreground_color
42f5: a2 00     -         ldx #$00
42f7: bd 0a 43  -         lda msg,x
42fa: f0 07     -         beq !done+
42fc: 20 d2 ff  -         jsr kernal_chrout
42ff: e8        -         inx
4300: 4c f7 42  -         jmp !loop-
4303: 68        -         pla
4304: 8d 86 02  -         sta foreground_color
4307: 4c 1b 43  -         jmp !done+
430a: 20 20     - memory: .fill spacing, spacebar
430c: 42 52 41 4e 43 48 20 49 46 20 30                 -         .text name
4317: 2e 2e 2e  -         .text "..."
431a: 00        -         .byte NULL
431b: 20 0c 20  -         jsr SW16
431e: b0        -         .byte opcode($b0, register) }
431f: 06 07     -         .byte $06, effective_address(ea,*) }
4321: 01 00     -         .byte $01, effective_address(ea,*) }
4323: 10        -         .byte opcode(op, register)
4324: dc fe     -         .word address.getValue()
4326: 01 05     -         .byte $01, effective_address(ea,*) }
4328: 10        -         .byte opcode(op, register)
4329: 23 01     -         .word address.getValue()
432b: 01 00     -         .byte $01, effective_address(ea,*) }
432d: 00        -         .byte $00 }
432e: ee ab 22  -         inc TEST_COUNT
4331: ad 86 02  -         lda foreground_color
4334: 48        -         pha
4335: a9 0e     -         lda #color
4337: 8d 86 02  -         sta foreground_color
433a: a2 00     -         ldx #$00
433c: bd 4f 43  -         lda msg,x
433f: f0 07     -         beq !done+
4341: 20 d2 ff  -         jsr kernal_chrout
4344: e8        -         inx
4345: 4c 3c 43  -         jmp !loop-
4348: 68        -         pla
4349: 8d 86 02  -         sta foreground_color
434c: 4c 53 43  -         jmp !done+
434f: 20        - memory: .byte spacebar
4350: 32        -         .text description
4351: 3a        -         .text ":"
4352: 00        -         .byte NULL
4353: a6 17     -         ldx rl(register.getValue())
4355: a4 18     -         ldy rh(register.getValue())
4357: e0 23     -         cpx #<value
4359: d0 25     -         bne !failed+
435b: c0 01     -         cpy #>value
435d: d0 21     -         bne !failed+
435f: ee ac 22  -         inc TEST_PASS_COUNT
4362: ad 86 02  -         lda foreground_color
4365: 48        -         pha
4366: a9 05     -         lda #color
4368: 8d 86 02  -         sta foreground_color
436b: a2 00     -         ldx #$00
436d: bd 00 20  -         lda msg,x
4370: f0 07     -         beq !done+
4372: 20 d2 ff  -         jsr kernal_chrout
4375: e8        -         inx
4376: 4c 6d 43  -         jmp !loop-
4379: 68        -         pla
437a: 8d 86 02  -         sta foreground_color
437d: 4c 9b 43  -         jmp !done+
4380: ad 86 02  -         lda foreground_color
4383: 48        -         pha
4384: a9 02     -         lda #color
4386: 8d 86 02  -         sta foreground_color
4389: a2 00     -         ldx #$00
438b: bd 02 20  -         lda msg,x
438e: f0 07     -         beq !done+
4390: 20 d2 ff  -         jsr kernal_chrout
4393: e8        -         inx
4394: 4c 8b 43  -         jmp !loop-
4397: 68        -         pla
4398: 8d 86 02  -         sta foreground_color
439b: a2 00     -         ldx #$00
439d: bd ac 43  -         lda msg,x
43a0: f0 07     -         beq !done+
43a2: 20 d2 ff  -         jsr kernal_chrout
43a5: e8        -         inx
43a6: 4c 9d 43  -         jmp !loop-
43a9: 4c ae 43  -         jmp !done+
43ac: 0d 00     - memory: .byte RETURN, NULL
43ae: ae ad 22  -         ldx TEST_NAME_COUNT
43b1: e0 15     -         cpx #TESTS_PER_PAGE
43b3: d0 5d     -         bne !exit+
43b5: ad 86 02  -         lda foreground_color
43b8: 48        -         pha
43b9: a9 01     -         lda #color
43bb: 8d 86 02  -         sta foreground_color
43be: a2 00     -         ldx #$00
43c0: bd d3 43  -         lda msg,x
43c3: f0 07     -         beq !done+
43c5: 20 d2 ff  -         jsr kernal_chrout
43c8: e8        -         inx
43c9: 4c c0 43  -         jmp !loop-
43cc: 68        -         pla
43cd: 8d 86 02  -         sta foreground_color
43d0: 4c f2 43  -         jmp !no_key+
43d3: 0d        - memory: .byte RETURN
43d4: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
43e4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
43f0: 0d 00     -         .byte RETURN, NULL
43f2: 20 9f ff  -         jsr scnkey  // scan keyboard
43f5: 20 e4 ff  -         jsr getin	// put result into A
43f8: f0 f8     -         beq !no_key-
43fa: a2 00     -         ldx #$00
43fc: bd 0b 44  -         lda msg,x
43ff: f0 07     -         beq !done+
4401: 20 d2 ff  -         jsr kernal_chrout
4404: e8        -         inx
4405: 4c fc 43  -         jmp !loop-
4408: 4c 0d 44  -         jmp !done+
440b: 0d 00     - newline:.byte RETURN, NULL
440d: a2 00     -         ldx #$00
440f: 8e ad 22  -         stx TEST_NAME_COUNT
4412: 60        -         rts
4413: ee ad 22  - BRANCH_IF_NONZERO_TEST:inc TEST_NAME_COUNT
4416: ad 86 02  -         lda foreground_color
4419: 48        -         pha
441a: a9 0f     -         lda #color
441c: 8d 86 02  -         sta foreground_color
441f: a2 00     -         ldx #$00
4421: bd 34 44  -         lda msg,x
4424: f0 07     -         beq !done+
4426: 20 d2 ff  -         jsr kernal_chrout
4429: e8        -         inx
442a: 4c 21 44  -         jmp !loop-
442d: 68        -         pla
442e: 8d 86 02  -         sta foreground_color
4431: 4c 46 44  -         jmp !done+
4434: 20 20     - memory: .fill spacing, spacebar
4436: 42 52 41 4e 43 48 20 49 46 20 21 30              -         .text name
4442: 2e 2e 2e  -         .text "..."
4445: 00        -         .byte NULL
4446: 20 0c 20  -         jsr SW16
4449: 15        -         .byte opcode(op, register)
444a: 0a 00     -         .word address.getValue()
444c: b0        -         .byte opcode($b0, register) }
444d: a5        -         .byte opcode($a0, register) }
444e: 07 07     -         .byte $07, effective_address(ea,*) }
4450: 01 00     -         .byte $01, effective_address(ea,*) }
4452: 10        -         .byte opcode(op, register)
4453: dc fe     -         .word address.getValue()
4455: 01 05     -         .byte $01, effective_address(ea,*) }
4457: 10        -         .byte opcode(op, register)
4458: 23 01     -         .word address.getValue()
445a: 01 00     -         .byte $01, effective_address(ea,*) }
445c: 00        -         .byte $00 }
445d: ee ab 22  -         inc TEST_COUNT
4460: ad 86 02  -         lda foreground_color
4463: 48        -         pha
4464: a9 0e     -         lda #color
4466: 8d 86 02  -         sta foreground_color
4469: a2 00     -         ldx #$00
446b: bd 7e 44  -         lda msg,x
446e: f0 07     -         beq !done+
4470: 20 d2 ff  -         jsr kernal_chrout
4473: e8        -         inx
4474: 4c 6b 44  -         jmp !loop-
4477: 68        -         pla
4478: 8d 86 02  -         sta foreground_color
447b: 4c 82 44  -         jmp !done+
447e: 20        - memory: .byte spacebar
447f: 32        -         .text description
4480: 3a        -         .text ":"
4481: 00        -         .byte NULL
4482: a6 17     -         ldx rl(register.getValue())
4484: a4 18     -         ldy rh(register.getValue())
4486: e0 23     -         cpx #<value
4488: d0 25     -         bne !failed+
448a: c0 01     -         cpy #>value
448c: d0 21     -         bne !failed+
448e: ee ac 22  -         inc TEST_PASS_COUNT
4491: ad 86 02  -         lda foreground_color
4494: 48        -         pha
4495: a9 05     -         lda #color
4497: 8d 86 02  -         sta foreground_color
449a: a2 00     -         ldx #$00
449c: bd 00 20  -         lda msg,x
449f: f0 07     -         beq !done+
44a1: 20 d2 ff  -         jsr kernal_chrout
44a4: e8        -         inx
44a5: 4c 9c 44  -         jmp !loop-
44a8: 68        -         pla
44a9: 8d 86 02  -         sta foreground_color
44ac: 4c ca 44  -         jmp !done+
44af: ad 86 02  -         lda foreground_color
44b2: 48        -         pha
44b3: a9 02     -         lda #color
44b5: 8d 86 02  -         sta foreground_color
44b8: a2 00     -         ldx #$00
44ba: bd 02 20  -         lda msg,x
44bd: f0 07     -         beq !done+
44bf: 20 d2 ff  -         jsr kernal_chrout
44c2: e8        -         inx
44c3: 4c ba 44  -         jmp !loop-
44c6: 68        -         pla
44c7: 8d 86 02  -         sta foreground_color
44ca: a2 00     -         ldx #$00
44cc: bd db 44  -         lda msg,x
44cf: f0 07     -         beq !done+
44d1: 20 d2 ff  -         jsr kernal_chrout
44d4: e8        -         inx
44d5: 4c cc 44  -         jmp !loop-
44d8: 4c dd 44  -         jmp !done+
44db: 0d 00     - memory: .byte RETURN, NULL
44dd: ae ad 22  -         ldx TEST_NAME_COUNT
44e0: e0 15     -         cpx #TESTS_PER_PAGE
44e2: d0 5d     -         bne !exit+
44e4: ad 86 02  -         lda foreground_color
44e7: 48        -         pha
44e8: a9 01     -         lda #color
44ea: 8d 86 02  -         sta foreground_color
44ed: a2 00     -         ldx #$00
44ef: bd 02 45  -         lda msg,x
44f2: f0 07     -         beq !done+
44f4: 20 d2 ff  -         jsr kernal_chrout
44f7: e8        -         inx
44f8: 4c ef 44  -         jmp !loop-
44fb: 68        -         pla
44fc: 8d 86 02  -         sta foreground_color
44ff: 4c 21 45  -         jmp !no_key+
4502: 0d        - memory: .byte RETURN
4503: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4513: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
451f: 0d 00     -         .byte RETURN, NULL
4521: 20 9f ff  -         jsr scnkey  // scan keyboard
4524: 20 e4 ff  -         jsr getin	// put result into A
4527: f0 f8     -         beq !no_key-
4529: a2 00     -         ldx #$00
452b: bd 3a 45  -         lda msg,x
452e: f0 07     -         beq !done+
4530: 20 d2 ff  -         jsr kernal_chrout
4533: e8        -         inx
4534: 4c 2b 45  -         jmp !loop-
4537: 4c 3c 45  -         jmp !done+
453a: 0d 00     - newline:.byte RETURN, NULL
453c: a2 00     -         ldx #$00
453e: 8e ad 22  -         stx TEST_NAME_COUNT
4541: 60        -         rts
4542: ee ad 22  - BRANCH_IF_MINUS_ONE_TEST:inc TEST_NAME_COUNT
4545: ad 86 02  -         lda foreground_color
4548: 48        -         pha
4549: a9 0f     -         lda #color
454b: 8d 86 02  -         sta foreground_color
454e: a2 00     -         ldx #$00
4550: bd 63 45  -         lda msg,x
4553: f0 07     -         beq !done+
4555: 20 d2 ff  -         jsr kernal_chrout
4558: e8        -         inx
4559: 4c 50 45  -         jmp !loop-
455c: 68        -         pla
455d: 8d 86 02  -         sta foreground_color
4560: 4c 75 45  -         jmp !done+
4563: 20 20     - memory: .fill spacing, spacebar
4565: 42 52 41 4e 43 48 20 49 46 20 2d 31              -         .text name
4571: 2e 2e 2e  -         .text "..."
4574: 00        -         .byte NULL
4575: 20 0c 20  -         jsr SW16
4578: 15        -         .byte opcode(op, register)
4579: 01 00     -         .word address.getValue()
457b: b0        -         .byte opcode($b0, register) }
457c: b5        -         .byte opcode($b0, register) }
457d: 08 07     -         .byte $08, effective_address(ea,*) }
457f: 01 00     -         .byte $01, effective_address(ea,*) }
4581: 10        -         .byte opcode(op, register)
4582: dc fe     -         .word address.getValue()
4584: 01 05     -         .byte $01, effective_address(ea,*) }
4586: 10        -         .byte opcode(op, register)
4587: 23 01     -         .word address.getValue()
4589: 01 00     -         .byte $01, effective_address(ea,*) }
458b: 00        -         .byte $00 }
458c: ee ab 22  -         inc TEST_COUNT
458f: ad 86 02  -         lda foreground_color
4592: 48        -         pha
4593: a9 0e     -         lda #color
4595: 8d 86 02  -         sta foreground_color
4598: a2 00     -         ldx #$00
459a: bd ad 45  -         lda msg,x
459d: f0 07     -         beq !done+
459f: 20 d2 ff  -         jsr kernal_chrout
45a2: e8        -         inx
45a3: 4c 9a 45  -         jmp !loop-
45a6: 68        -         pla
45a7: 8d 86 02  -         sta foreground_color
45aa: 4c b1 45  -         jmp !done+
45ad: 20        - memory: .byte spacebar
45ae: 32        -         .text description
45af: 3a        -         .text ":"
45b0: 00        -         .byte NULL
45b1: a6 17     -         ldx rl(register.getValue())
45b3: a4 18     -         ldy rh(register.getValue())
45b5: e0 23     -         cpx #<value
45b7: d0 25     -         bne !failed+
45b9: c0 01     -         cpy #>value
45bb: d0 21     -         bne !failed+
45bd: ee ac 22  -         inc TEST_PASS_COUNT
45c0: ad 86 02  -         lda foreground_color
45c3: 48        -         pha
45c4: a9 05     -         lda #color
45c6: 8d 86 02  -         sta foreground_color
45c9: a2 00     -         ldx #$00
45cb: bd 00 20  -         lda msg,x
45ce: f0 07     -         beq !done+
45d0: 20 d2 ff  -         jsr kernal_chrout
45d3: e8        -         inx
45d4: 4c cb 45  -         jmp !loop-
45d7: 68        -         pla
45d8: 8d 86 02  -         sta foreground_color
45db: 4c f9 45  -         jmp !done+
45de: ad 86 02  -         lda foreground_color
45e1: 48        -         pha
45e2: a9 02     -         lda #color
45e4: 8d 86 02  -         sta foreground_color
45e7: a2 00     -         ldx #$00
45e9: bd 02 20  -         lda msg,x
45ec: f0 07     -         beq !done+
45ee: 20 d2 ff  -         jsr kernal_chrout
45f1: e8        -         inx
45f2: 4c e9 45  -         jmp !loop-
45f5: 68        -         pla
45f6: 8d 86 02  -         sta foreground_color
45f9: a2 00     -         ldx #$00
45fb: bd 0a 46  -         lda msg,x
45fe: f0 07     -         beq !done+
4600: 20 d2 ff  -         jsr kernal_chrout
4603: e8        -         inx
4604: 4c fb 45  -         jmp !loop-
4607: 4c 0c 46  -         jmp !done+
460a: 0d 00     - memory: .byte RETURN, NULL
460c: ae ad 22  -         ldx TEST_NAME_COUNT
460f: e0 15     -         cpx #TESTS_PER_PAGE
4611: d0 5d     -         bne !exit+
4613: ad 86 02  -         lda foreground_color
4616: 48        -         pha
4617: a9 01     -         lda #color
4619: 8d 86 02  -         sta foreground_color
461c: a2 00     -         ldx #$00
461e: bd 31 46  -         lda msg,x
4621: f0 07     -         beq !done+
4623: 20 d2 ff  -         jsr kernal_chrout
4626: e8        -         inx
4627: 4c 1e 46  -         jmp !loop-
462a: 68        -         pla
462b: 8d 86 02  -         sta foreground_color
462e: 4c 50 46  -         jmp !no_key+
4631: 0d        - memory: .byte RETURN
4632: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4642: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
464e: 0d 00     -         .byte RETURN, NULL
4650: 20 9f ff  -         jsr scnkey  // scan keyboard
4653: 20 e4 ff  -         jsr getin	// put result into A
4656: f0 f8     -         beq !no_key-
4658: a2 00     -         ldx #$00
465a: bd 69 46  -         lda msg,x
465d: f0 07     -         beq !done+
465f: 20 d2 ff  -         jsr kernal_chrout
4662: e8        -         inx
4663: 4c 5a 46  -         jmp !loop-
4666: 4c 6b 46  -         jmp !done+
4669: 0d 00     - newline:.byte RETURN, NULL
466b: a2 00     -         ldx #$00
466d: 8e ad 22  -         stx TEST_NAME_COUNT
4670: 60        -         rts
4671: ee ad 22  - BRANCH_IF_NOT_MINUS_ONE_TEST:inc TEST_NAME_COUNT
4674: ad 86 02  -         lda foreground_color
4677: 48        -         pha
4678: a9 0f     -         lda #color
467a: 8d 86 02  -         sta foreground_color
467d: a2 00     -         ldx #$00
467f: bd 92 46  -         lda msg,x
4682: f0 07     -         beq !done+
4684: 20 d2 ff  -         jsr kernal_chrout
4687: e8        -         inx
4688: 4c 7f 46  -         jmp !loop-
468b: 68        -         pla
468c: 8d 86 02  -         sta foreground_color
468f: 4c a5 46  -         jmp !done+
4692: 20 20     - memory: .fill spacing, spacebar
4694: 42 52 41 4e 43 48 20 49 46 20 21 2d 31           -         .text name
46a1: 2e 2e 2e  -         .text "..."
46a4: 00        -         .byte NULL
46a5: 20 0c 20  -         jsr SW16
46a8: 15        -         .byte opcode(op, register)
46a9: 02 00     -         .word address.getValue()
46ab: b0        -         .byte opcode($b0, register) }
46ac: b5        -         .byte opcode($b0, register) }
46ad: 09 07     -         .byte $09, effective_address(ea,*) }
46af: 01 00     -         .byte $01, effective_address(ea,*) }
46b1: 10        -         .byte opcode(op, register)
46b2: dc fe     -         .word address.getValue()
46b4: 01 05     -         .byte $01, effective_address(ea,*) }
46b6: 10        -         .byte opcode(op, register)
46b7: 23 01     -         .word address.getValue()
46b9: 01 00     -         .byte $01, effective_address(ea,*) }
46bb: 00        -         .byte $00 }
46bc: ee ab 22  -         inc TEST_COUNT
46bf: ad 86 02  -         lda foreground_color
46c2: 48        -         pha
46c3: a9 0e     -         lda #color
46c5: 8d 86 02  -         sta foreground_color
46c8: a2 00     -         ldx #$00
46ca: bd dd 46  -         lda msg,x
46cd: f0 07     -         beq !done+
46cf: 20 d2 ff  -         jsr kernal_chrout
46d2: e8        -         inx
46d3: 4c ca 46  -         jmp !loop-
46d6: 68        -         pla
46d7: 8d 86 02  -         sta foreground_color
46da: 4c e1 46  -         jmp !done+
46dd: 20        - memory: .byte spacebar
46de: 32        -         .text description
46df: 3a        -         .text ":"
46e0: 00        -         .byte NULL
46e1: a6 17     -         ldx rl(register.getValue())
46e3: a4 18     -         ldy rh(register.getValue())
46e5: e0 23     -         cpx #<value
46e7: d0 25     -         bne !failed+
46e9: c0 01     -         cpy #>value
46eb: d0 21     -         bne !failed+
46ed: ee ac 22  -         inc TEST_PASS_COUNT
46f0: ad 86 02  -         lda foreground_color
46f3: 48        -         pha
46f4: a9 05     -         lda #color
46f6: 8d 86 02  -         sta foreground_color
46f9: a2 00     -         ldx #$00
46fb: bd 00 20  -         lda msg,x
46fe: f0 07     -         beq !done+
4700: 20 d2 ff  -         jsr kernal_chrout
4703: e8        -         inx
4704: 4c fb 46  -         jmp !loop-
4707: 68        -         pla
4708: 8d 86 02  -         sta foreground_color
470b: 4c 29 47  -         jmp !done+
470e: ad 86 02  -         lda foreground_color
4711: 48        -         pha
4712: a9 02     -         lda #color
4714: 8d 86 02  -         sta foreground_color
4717: a2 00     -         ldx #$00
4719: bd 02 20  -         lda msg,x
471c: f0 07     -         beq !done+
471e: 20 d2 ff  -         jsr kernal_chrout
4721: e8        -         inx
4722: 4c 19 47  -         jmp !loop-
4725: 68        -         pla
4726: 8d 86 02  -         sta foreground_color
4729: a2 00     -         ldx #$00
472b: bd 3a 47  -         lda msg,x
472e: f0 07     -         beq !done+
4730: 20 d2 ff  -         jsr kernal_chrout
4733: e8        -         inx
4734: 4c 2b 47  -         jmp !loop-
4737: 4c 3c 47  -         jmp !done+
473a: 0d 00     - memory: .byte RETURN, NULL
473c: ae ad 22  -         ldx TEST_NAME_COUNT
473f: e0 15     -         cpx #TESTS_PER_PAGE
4741: d0 5d     -         bne !exit+
4743: ad 86 02  -         lda foreground_color
4746: 48        -         pha
4747: a9 01     -         lda #color
4749: 8d 86 02  -         sta foreground_color
474c: a2 00     -         ldx #$00
474e: bd 61 47  -         lda msg,x
4751: f0 07     -         beq !done+
4753: 20 d2 ff  -         jsr kernal_chrout
4756: e8        -         inx
4757: 4c 4e 47  -         jmp !loop-
475a: 68        -         pla
475b: 8d 86 02  -         sta foreground_color
475e: 4c 80 47  -         jmp !no_key+
4761: 0d        - memory: .byte RETURN
4762: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4772: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
477e: 0d 00     -         .byte RETURN, NULL
4780: 20 9f ff  -         jsr scnkey  // scan keyboard
4783: 20 e4 ff  -         jsr getin	// put result into A
4786: f0 f8     -         beq !no_key-
4788: a2 00     -         ldx #$00
478a: bd 99 47  -         lda msg,x
478d: f0 07     -         beq !done+
478f: 20 d2 ff  -         jsr kernal_chrout
4792: e8        -         inx
4793: 4c 8a 47  -         jmp !loop-
4796: 4c 9b 47  -         jmp !done+
4799: 0d 00     - newline:.byte RETURN, NULL
479b: a2 00     -         ldx #$00
479d: 8e ad 22  -         stx TEST_NAME_COUNT
47a0: 60        -         rts
47a1: ee ad 22  - BREAK_TEST:inc TEST_NAME_COUNT
47a4: ad 86 02  -         lda foreground_color
47a7: 48        -         pha
47a8: a9 0f     -         lda #color
47aa: 8d 86 02  -         sta foreground_color
47ad: a2 00     -         ldx #$00
47af: bd c2 47  -         lda msg,x
47b2: f0 07     -         beq !done+
47b4: 20 d2 ff  -         jsr kernal_chrout
47b7: e8        -         inx
47b8: 4c af 47  -         jmp !loop-
47bb: 68        -         pla
47bc: 8d 86 02  -         sta foreground_color
47bf: 4c cd 47  -         jmp !done+
47c2: 20 20     - memory: .fill spacing, spacebar
47c4: 42 52 45 41 4b                                   -         .text name
47c9: 2e 2e 2e  -         .text "..."
47cc: 00        -         .byte NULL
47cd: a9 35     -         lda #<handler
47cf: 8d 16 03  -         sta address
47d2: a9 22     -         lda #>handler
47d4: 8d 17 03  -         sta address+1
47d7: 20 0c 20  -         jsr SW16
47da: 10        -         .byte opcode(op, register)
47db: ed fe     -         .word address.getValue()
47dd: 0a        -         .byte $0a }
47de: 0d        -         .byte $0d
47df: 48        -         .byte >(address.getValue()-1)
47e0: ca        -         .byte <(address.getValue()-1)
47e1: 10        -         .byte opcode(op, register)
47e2: 23 01     -         .word address.getValue()
47e4: 0a        -         .byte $0a }
47e5: 00        -         .byte $00 }
47e6: ee ab 22  -         inc TEST_COUNT
47e9: ad 86 02  -         lda foreground_color
47ec: 48        -         pha
47ed: a9 0e     -         lda #color
47ef: 8d 86 02  -         sta foreground_color
47f2: a2 00     -         ldx #$00
47f4: bd 07 48  -         lda msg,x
47f7: f0 07     -         beq !done+
47f9: 20 d2 ff  -         jsr kernal_chrout
47fc: e8        -         inx
47fd: 4c f4 47  -         jmp !loop-
4800: 68        -         pla
4801: 8d 86 02  -         sta foreground_color
4804: 4c 0b 48  -         jmp !done+
4807: 20        - memory: .byte spacebar
4808: 32        -         .text description
4809: 3a        -         .text ":"
480a: 00        -         .byte NULL
480b: a6 17     -         ldx rl(register.getValue())
480d: a4 18     -         ldy rh(register.getValue())
480f: e0 23     -         cpx #<value
4811: d0 25     -         bne !failed+
4813: c0 01     -         cpy #>value
4815: d0 21     -         bne !failed+
4817: ee ac 22  -         inc TEST_PASS_COUNT
481a: ad 86 02  -         lda foreground_color
481d: 48        -         pha
481e: a9 05     -         lda #color
4820: 8d 86 02  -         sta foreground_color
4823: a2 00     -         ldx #$00
4825: bd 00 20  -         lda msg,x
4828: f0 07     -         beq !done+
482a: 20 d2 ff  -         jsr kernal_chrout
482d: e8        -         inx
482e: 4c 25 48  -         jmp !loop-
4831: 68        -         pla
4832: 8d 86 02  -         sta foreground_color
4835: 4c 53 48  -         jmp !done+
4838: ad 86 02  -         lda foreground_color
483b: 48        -         pha
483c: a9 02     -         lda #color
483e: 8d 86 02  -         sta foreground_color
4841: a2 00     -         ldx #$00
4843: bd 02 20  -         lda msg,x
4846: f0 07     -         beq !done+
4848: 20 d2 ff  -         jsr kernal_chrout
484b: e8        -         inx
484c: 4c 43 48  -         jmp !loop-
484f: 68        -         pla
4850: 8d 86 02  -         sta foreground_color
4853: a2 00     -         ldx #$00
4855: bd 64 48  -         lda msg,x
4858: f0 07     -         beq !done+
485a: 20 d2 ff  -         jsr kernal_chrout
485d: e8        -         inx
485e: 4c 55 48  -         jmp !loop-
4861: 4c 66 48  -         jmp !done+
4864: 0d 00     - memory: .byte RETURN, NULL
4866: ae ad 22  -         ldx TEST_NAME_COUNT
4869: e0 15     -         cpx #TESTS_PER_PAGE
486b: d0 5d     -         bne !exit+
486d: ad 86 02  -         lda foreground_color
4870: 48        -         pha
4871: a9 01     -         lda #color
4873: 8d 86 02  -         sta foreground_color
4876: a2 00     -         ldx #$00
4878: bd 8b 48  -         lda msg,x
487b: f0 07     -         beq !done+
487d: 20 d2 ff  -         jsr kernal_chrout
4880: e8        -         inx
4881: 4c 78 48  -         jmp !loop-
4884: 68        -         pla
4885: 8d 86 02  -         sta foreground_color
4888: 4c aa 48  -         jmp !no_key+
488b: 0d        - memory: .byte RETURN
488c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
489c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
48a8: 0d 00     -         .byte RETURN, NULL
48aa: 20 9f ff  -         jsr scnkey  // scan keyboard
48ad: 20 e4 ff  -         jsr getin	// put result into A
48b0: f0 f8     -         beq !no_key-
48b2: a2 00     -         ldx #$00
48b4: bd c3 48  -         lda msg,x
48b7: f0 07     -         beq !done+
48b9: 20 d2 ff  -         jsr kernal_chrout
48bc: e8        -         inx
48bd: 4c b4 48  -         jmp !loop-
48c0: 4c c5 48  -         jmp !done+
48c3: 0d 00     - newline:.byte RETURN, NULL
48c5: a2 00     -         ldx #$00
48c7: 8e ad 22  -         stx TEST_NAME_COUNT
48ca: 60        -         rts
48cb: ee ab 22  -         inc TEST_COUNT
48ce: ad 86 02  -         lda foreground_color
48d1: 48        -         pha
48d2: a9 0e     -         lda #color
48d4: 8d 86 02  -         sta foreground_color
48d7: a2 00     -         ldx #$00
48d9: bd ec 48  -         lda msg,x
48dc: f0 07     -         beq !done+
48de: 20 d2 ff  -         jsr kernal_chrout
48e1: e8        -         inx
48e2: 4c d9 48  -         jmp !loop-
48e5: 68        -         pla
48e6: 8d 86 02  -         sta foreground_color
48e9: 4c f0 48  -         jmp !done+
48ec: 20        - memory: .byte spacebar
48ed: 31        -         .text description
48ee: 3a        -         .text ":"
48ef: 00        -         .byte NULL
48f0: a6 17     -         ldx rl(register.getValue())
48f2: a4 18     -         ldy rh(register.getValue())
48f4: e0 ed     -         cpx #<value
48f6: d0 25     -         bne !failed+
48f8: c0 fe     -         cpy #>value
48fa: d0 21     -         bne !failed+
48fc: ee ac 22  -         inc TEST_PASS_COUNT
48ff: ad 86 02  -         lda foreground_color
4902: 48        -         pha
4903: a9 05     -         lda #color
4905: 8d 86 02  -         sta foreground_color
4908: a2 00     -         ldx #$00
490a: bd 00 20  -         lda msg,x
490d: f0 07     -         beq !done+
490f: 20 d2 ff  -         jsr kernal_chrout
4912: e8        -         inx
4913: 4c 0a 49  -         jmp !loop-
4916: 68        -         pla
4917: 8d 86 02  -         sta foreground_color
491a: 4c 38 49  -         jmp !done+
491d: ad 86 02  -         lda foreground_color
4920: 48        -         pha
4921: a9 02     -         lda #color
4923: 8d 86 02  -         sta foreground_color
4926: a2 00     -         ldx #$00
4928: bd 02 20  -         lda msg,x
492b: f0 07     -         beq !done+
492d: 20 d2 ff  -         jsr kernal_chrout
4930: e8        -         inx
4931: 4c 28 49  -         jmp !loop-
4934: 68        -         pla
4935: 8d 86 02  -         sta foreground_color
4938: 60        -         rts
4939: ee ad 22  - INTERRUPT_BREAK_TEST:inc TEST_NAME_COUNT
493c: ad 86 02  -         lda foreground_color
493f: 48        -         pha
4940: a9 0f     -         lda #color
4942: 8d 86 02  -         sta foreground_color
4945: a2 00     -         ldx #$00
4947: bd 5a 49  -         lda msg,x
494a: f0 07     -         beq !done+
494c: 20 d2 ff  -         jsr kernal_chrout
494f: e8        -         inx
4950: 4c 47 49  -         jmp !loop-
4953: 68        -         pla
4954: 8d 86 02  -         sta foreground_color
4957: 4c 69 49  -         jmp !done+
495a: 20 20     - memory: .fill spacing, spacebar
495c: 49 4e 54 20 42 52 45 41 4b                       -         .text name
4965: 2e 2e 2e  -         .text "..."
4968: 00        -         .byte NULL
4969: a9 35     -         lda #<handler
496b: 8d 16 03  -         sta address
496e: a9 22     -         lda #>handler
4970: 8d 17 03  -         sta address+1
4973: 20 0c 20  -         jsr SW16
4976: 10        -         .byte opcode(op, register)
4977: ed fe     -         .word address.getValue()
4979: 0a        -         .byte $0a }
497a: 0d        -         .byte $0d
497b: 49        -         .byte >(address.getValue()-1)
497c: fc        -         .byte <(address.getValue()-1)
497d: 10        -         .byte opcode(op, register)
497e: 23 01     -         .word address.getValue()
4980: 0a        -         .byte $0a }
4981: 0d        -         .byte $0d
4982: 4a        -         .byte >(address.getValue()-1)
4983: 6a        -         .byte <(address.getValue()-1)
4984: 00        -         .byte $00 }
4985: a2 00     -         ldx #$00
4987: bd 96 49  -         lda msg,x
498a: f0 07     -         beq !done+
498c: 20 d2 ff  -         jsr kernal_chrout
498f: e8        -         inx
4990: 4c 87 49  -         jmp !loop-
4993: 4c 98 49  -         jmp !done+
4996: 0d 00     - memory: .byte RETURN, NULL
4998: ae ad 22  -         ldx TEST_NAME_COUNT
499b: e0 15     -         cpx #TESTS_PER_PAGE
499d: d0 5d     -         bne !exit+
499f: ad 86 02  -         lda foreground_color
49a2: 48        -         pha
49a3: a9 01     -         lda #color
49a5: 8d 86 02  -         sta foreground_color
49a8: a2 00     -         ldx #$00
49aa: bd bd 49  -         lda msg,x
49ad: f0 07     -         beq !done+
49af: 20 d2 ff  -         jsr kernal_chrout
49b2: e8        -         inx
49b3: 4c aa 49  -         jmp !loop-
49b6: 68        -         pla
49b7: 8d 86 02  -         sta foreground_color
49ba: 4c dc 49  -         jmp !no_key+
49bd: 0d        - memory: .byte RETURN
49be: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
49ce: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
49da: 0d 00     -         .byte RETURN, NULL
49dc: 20 9f ff  -         jsr scnkey  // scan keyboard
49df: 20 e4 ff  -         jsr getin	// put result into A
49e2: f0 f8     -         beq !no_key-
49e4: a2 00     -         ldx #$00
49e6: bd f5 49  -         lda msg,x
49e9: f0 07     -         beq !done+
49eb: 20 d2 ff  -         jsr kernal_chrout
49ee: e8        -         inx
49ef: 4c e6 49  -         jmp !loop-
49f2: 4c f7 49  -         jmp !done+
49f5: 0d 00     - newline:.byte RETURN, NULL
49f7: a2 00     -         ldx #$00
49f9: 8e ad 22  -         stx TEST_NAME_COUNT
49fc: 60        -         rts
49fd: ee ab 22  -         inc TEST_COUNT
4a00: ad 86 02  -         lda foreground_color
4a03: 48        -         pha
4a04: a9 0e     -         lda #color
4a06: 8d 86 02  -         sta foreground_color
4a09: a2 00     -         ldx #$00
4a0b: bd 1e 4a  -         lda msg,x
4a0e: f0 07     -         beq !done+
4a10: 20 d2 ff  -         jsr kernal_chrout
4a13: e8        -         inx
4a14: 4c 0b 4a  -         jmp !loop-
4a17: 68        -         pla
4a18: 8d 86 02  -         sta foreground_color
4a1b: 4c 22 4a  -         jmp !done+
4a1e: 20        - memory: .byte spacebar
4a1f: 31        -         .text description
4a20: 3a        -         .text ":"
4a21: 00        -         .byte NULL
4a22: a6 17     -         ldx rl(register.getValue())
4a24: a4 18     -         ldy rh(register.getValue())
4a26: e0 ed     -         cpx #<value
4a28: d0 25     -         bne !failed+
4a2a: c0 fe     -         cpy #>value
4a2c: d0 21     -         bne !failed+
4a2e: ee ac 22  -         inc TEST_PASS_COUNT
4a31: ad 86 02  -         lda foreground_color
4a34: 48        -         pha
4a35: a9 05     -         lda #color
4a37: 8d 86 02  -         sta foreground_color
4a3a: a2 00     -         ldx #$00
4a3c: bd 00 20  -         lda msg,x
4a3f: f0 07     -         beq !done+
4a41: 20 d2 ff  -         jsr kernal_chrout
4a44: e8        -         inx
4a45: 4c 3c 4a  -         jmp !loop-
4a48: 68        -         pla
4a49: 8d 86 02  -         sta foreground_color
4a4c: 4c 6a 4a  -         jmp !done+
4a4f: ad 86 02  -         lda foreground_color
4a52: 48        -         pha
4a53: a9 02     -         lda #color
4a55: 8d 86 02  -         sta foreground_color
4a58: a2 00     -         ldx #$00
4a5a: bd 02 20  -         lda msg,x
4a5d: f0 07     -         beq !done+
4a5f: 20 d2 ff  -         jsr kernal_chrout
4a62: e8        -         inx
4a63: 4c 5a 4a  -         jmp !loop-
4a66: 68        -         pla
4a67: 8d 86 02  -         sta foreground_color
4a6a: 60        -         rts
4a6b: ee ab 22  -         inc TEST_COUNT
4a6e: ad 86 02  -         lda foreground_color
4a71: 48        -         pha
4a72: a9 0e     -         lda #color
4a74: 8d 86 02  -         sta foreground_color
4a77: a2 00     -         ldx #$00
4a79: bd 8c 4a  -         lda msg,x
4a7c: f0 07     -         beq !done+
4a7e: 20 d2 ff  -         jsr kernal_chrout
4a81: e8        -         inx
4a82: 4c 79 4a  -         jmp !loop-
4a85: 68        -         pla
4a86: 8d 86 02  -         sta foreground_color
4a89: 4c 90 4a  -         jmp !done+
4a8c: 20        - memory: .byte spacebar
4a8d: 32        -         .text description
4a8e: 3a        -         .text ":"
4a8f: 00        -         .byte NULL
4a90: a6 17     -         ldx rl(register.getValue())
4a92: a4 18     -         ldy rh(register.getValue())
4a94: e0 23     -         cpx #<value
4a96: d0 25     -         bne !failed+
4a98: c0 01     -         cpy #>value
4a9a: d0 21     -         bne !failed+
4a9c: ee ac 22  -         inc TEST_PASS_COUNT
4a9f: ad 86 02  -         lda foreground_color
4aa2: 48        -         pha
4aa3: a9 05     -         lda #color
4aa5: 8d 86 02  -         sta foreground_color
4aa8: a2 00     -         ldx #$00
4aaa: bd 00 20  -         lda msg,x
4aad: f0 07     -         beq !done+
4aaf: 20 d2 ff  -         jsr kernal_chrout
4ab2: e8        -         inx
4ab3: 4c aa 4a  -         jmp !loop-
4ab6: 68        -         pla
4ab7: 8d 86 02  -         sta foreground_color
4aba: 4c d8 4a  -         jmp !done+
4abd: ad 86 02  -         lda foreground_color
4ac0: 48        -         pha
4ac1: a9 02     -         lda #color
4ac3: 8d 86 02  -         sta foreground_color
4ac6: a2 00     -         ldx #$00
4ac8: bd 02 20  -         lda msg,x
4acb: f0 07     -         beq !done+
4acd: 20 d2 ff  -         jsr kernal_chrout
4ad0: e8        -         inx
4ad1: 4c c8 4a  -         jmp !loop-
4ad4: 68        -         pla
4ad5: 8d 86 02  -         sta foreground_color
4ad8: 60        -         rts
4ad9: ee ad 22  - BRANCH_TO_SUBROUTINE_TEST:inc TEST_NAME_COUNT
4adc: ad 86 02  -         lda foreground_color
4adf: 48        -         pha
4ae0: a9 0f     -         lda #color
4ae2: 8d 86 02  -         sta foreground_color
4ae5: a2 00     -         ldx #$00
4ae7: bd fa 4a  -         lda msg,x
4aea: f0 07     -         beq !done+
4aec: 20 d2 ff  -         jsr kernal_chrout
4aef: e8        -         inx
4af0: 4c e7 4a  -         jmp !loop-
4af3: 68        -         pla
4af4: 8d 86 02  -         sta foreground_color
4af7: 4c 0d 4b  -         jmp !done+
4afa: 20 20     - memory: .fill spacing, spacebar
4afc: 42 52 41 4e 43 48 20 54 4f 20 53 55 42           -         .text name
4b09: 2e 2e 2e  -         .text "..."
4b0c: 00        -         .byte NULL
4b0d: 20 0c 20  -         jsr SW16
4b10: 15        -         .byte opcode(op, register)
4b11: c9 22     -         .word address.getValue()
4b13: 14        -         .byte opcode(op, register)
4b14: d9 22     -         .word address.getValue()
4b16: 16        -         .byte opcode(op, register)
4b17: d9 22     -         .word address.getValue()
4b19: 0c 04     -         .byte $0c, effective_address(ea,*) }
4b1b: 00        -         .byte $00 }
4b1c: 4c 26 4b  -         jmp !done+
4b1f: 45        -         .byte opcode($40, register) }
4b20: 56        -         .byte opcode($50, register) }
4b21: 24        -         .byte opcode($20, register) }
4b22: d5        -         .byte opcode($d0, register) }
4b23: 04 fa     -         .byte $04, effective_address(ea,*) }
4b25: 0b        -         .byte $0b }
4b26: ee ab 22  -         inc TEST_COUNT
4b29: ad 86 02  -         lda foreground_color
4b2c: 48        -         pha
4b2d: a9 0e     -         lda #color
4b2f: 8d 86 02  -         sta foreground_color
4b32: a2 00     -         ldx #$00
4b34: bd 47 4b  -         lda msg,x
4b37: f0 07     -         beq !done+
4b39: 20 d2 ff  -         jsr kernal_chrout
4b3c: e8        -         inx
4b3d: 4c 34 4b  -         jmp !loop-
4b40: 68        -         pla
4b41: 8d 86 02  -         sta foreground_color
4b44: 4c 4d 4b  -         jmp !done+
4b47: 20        - memory: .byte spacebar
4b48: 4d 45 4d  -         .text description
4b4b: 3a        -         .text ":"
4b4c: 00        -         .byte NULL
4b4d: a2 ff     -         ldx #$ff
4b4f: e8        -         inx
4b50: e0 10     -         cpx #size
4b52: f0 0b     -         beq !success+
4b54: bd c9 22  -         lda source,x
4b57: dd d9 22  -         cmp dest,x
4b5a: f0 f3     -         beq !loop-
4b5c: 4c 80 4b  -         jmp !failed+
4b5f: ee ac 22  -         inc TEST_PASS_COUNT
4b62: ad 86 02  -         lda foreground_color
4b65: 48        -         pha
4b66: a9 05     -         lda #color
4b68: 8d 86 02  -         sta foreground_color
4b6b: a2 00     -         ldx #$00
4b6d: bd 00 20  -         lda msg,x
4b70: f0 07     -         beq !done+
4b72: 20 d2 ff  -         jsr kernal_chrout
4b75: e8        -         inx
4b76: 4c 6d 4b  -         jmp !loop-
4b79: 68        -         pla
4b7a: 8d 86 02  -         sta foreground_color
4b7d: 4c 9b 4b  -         jmp !done+
4b80: ad 86 02  -         lda foreground_color
4b83: 48        -         pha
4b84: a9 02     -         lda #color
4b86: 8d 86 02  -         sta foreground_color
4b89: a2 00     -         ldx #$00
4b8b: bd 02 20  -         lda msg,x
4b8e: f0 07     -         beq !done+
4b90: 20 d2 ff  -         jsr kernal_chrout
4b93: e8        -         inx
4b94: 4c 8b 4b  -         jmp !loop-
4b97: 68        -         pla
4b98: 8d 86 02  -         sta foreground_color
4b9b: a2 00     -         ldx #$00
4b9d: bd ac 4b  -         lda msg,x
4ba0: f0 07     -         beq !done+
4ba2: 20 d2 ff  -         jsr kernal_chrout
4ba5: e8        -         inx
4ba6: 4c 9d 4b  -         jmp !loop-
4ba9: 4c ae 4b  -         jmp !done+
4bac: 0d 00     - memory: .byte RETURN, NULL
4bae: ae ad 22  -         ldx TEST_NAME_COUNT
4bb1: e0 15     -         cpx #TESTS_PER_PAGE
4bb3: d0 5d     -         bne !exit+
4bb5: ad 86 02  -         lda foreground_color
4bb8: 48        -         pha
4bb9: a9 01     -         lda #color
4bbb: 8d 86 02  -         sta foreground_color
4bbe: a2 00     -         ldx #$00
4bc0: bd d3 4b  -         lda msg,x
4bc3: f0 07     -         beq !done+
4bc5: 20 d2 ff  -         jsr kernal_chrout
4bc8: e8        -         inx
4bc9: 4c c0 4b  -         jmp !loop-
4bcc: 68        -         pla
4bcd: 8d 86 02  -         sta foreground_color
4bd0: 4c f2 4b  -         jmp !no_key+
4bd3: 0d        - memory: .byte RETURN
4bd4: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4be4: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4bf0: 0d 00     -         .byte RETURN, NULL
4bf2: 20 9f ff  -         jsr scnkey  // scan keyboard
4bf5: 20 e4 ff  -         jsr getin	// put result into A
4bf8: f0 f8     -         beq !no_key-
4bfa: a2 00     -         ldx #$00
4bfc: bd 0b 4c  -         lda msg,x
4bff: f0 07     -         beq !done+
4c01: 20 d2 ff  -         jsr kernal_chrout
4c04: e8        -         inx
4c05: 4c fc 4b  -         jmp !loop-
4c08: 4c 0d 4c  -         jmp !done+
4c0b: 0d 00     - newline:.byte RETURN, NULL
4c0d: a2 00     -         ldx #$00
4c0f: 8e ad 22  -         stx TEST_NAME_COUNT
4c12: 60        -         rts
4c13: ee ad 22  - RETURN_FROM_SUBROUTINE_TEST:inc TEST_NAME_COUNT
4c16: ad 86 02  -         lda foreground_color
4c19: 48        -         pha
4c1a: a9 0f     -         lda #color
4c1c: 8d 86 02  -         sta foreground_color
4c1f: a2 00     -         ldx #$00
4c21: bd 34 4c  -         lda msg,x
4c24: f0 07     -         beq !done+
4c26: 20 d2 ff  -         jsr kernal_chrout
4c29: e8        -         inx
4c2a: 4c 21 4c  -         jmp !loop-
4c2d: 68        -         pla
4c2e: 8d 86 02  -         sta foreground_color
4c31: 4c 49 4c  -         jmp !done+
4c34: 20 20     - memory: .fill spacing, spacebar
4c36: 52 45 54 55 52 4e 20 46 52 4f 4d 20 53 55 42     -         .text name
4c45: 2e 2e 2e  -         .text "..."
4c48: 00        -         .byte NULL
4c49: 20 0c 20  -         jsr SW16
4c4c: 10        -         .byte opcode(op, register)
4c4d: 34 12     -         .word address.getValue()
4c4f: 0c 04     -         .byte $0c, effective_address(ea,*) }
4c51: 00        -         .byte $00 }
4c52: 4c 59 4c  -         jmp !done+
4c55: 10        -         .byte opcode(op, register)
4c56: 78 56     -         .word address.getValue()
4c58: 0b        -         .byte $0b }
4c59: ee ab 22  -         inc TEST_COUNT
4c5c: ad 86 02  -         lda foreground_color
4c5f: 48        -         pha
4c60: a9 0e     -         lda #color
4c62: 8d 86 02  -         sta foreground_color
4c65: a2 00     -         ldx #$00
4c67: bd 7a 4c  -         lda msg,x
4c6a: f0 07     -         beq !done+
4c6c: 20 d2 ff  -         jsr kernal_chrout
4c6f: e8        -         inx
4c70: 4c 67 4c  -         jmp !loop-
4c73: 68        -         pla
4c74: 8d 86 02  -         sta foreground_color
4c77: 4c 80 4c  -         jmp !done+
4c7a: 20        - memory: .byte spacebar
4c7b: 53 55 42  -         .text description
4c7e: 3a        -         .text ":"
4c7f: 00        -         .byte NULL
4c80: a6 17     -         ldx rl(register.getValue())
4c82: a4 18     -         ldy rh(register.getValue())
4c84: e0 78     -         cpx #<value
4c86: d0 25     -         bne !failed+
4c88: c0 56     -         cpy #>value
4c8a: d0 21     -         bne !failed+
4c8c: ee ac 22  -         inc TEST_PASS_COUNT
4c8f: ad 86 02  -         lda foreground_color
4c92: 48        -         pha
4c93: a9 05     -         lda #color
4c95: 8d 86 02  -         sta foreground_color
4c98: a2 00     -         ldx #$00
4c9a: bd 00 20  -         lda msg,x
4c9d: f0 07     -         beq !done+
4c9f: 20 d2 ff  -         jsr kernal_chrout
4ca2: e8        -         inx
4ca3: 4c 9a 4c  -         jmp !loop-
4ca6: 68        -         pla
4ca7: 8d 86 02  -         sta foreground_color
4caa: 4c c8 4c  -         jmp !done+
4cad: ad 86 02  -         lda foreground_color
4cb0: 48        -         pha
4cb1: a9 02     -         lda #color
4cb3: 8d 86 02  -         sta foreground_color
4cb6: a2 00     -         ldx #$00
4cb8: bd 02 20  -         lda msg,x
4cbb: f0 07     -         beq !done+
4cbd: 20 d2 ff  -         jsr kernal_chrout
4cc0: e8        -         inx
4cc1: 4c b8 4c  -         jmp !loop-
4cc4: 68        -         pla
4cc5: 8d 86 02  -         sta foreground_color
4cc8: a2 00     -         ldx #$00
4cca: bd d9 4c  -         lda msg,x
4ccd: f0 07     -         beq !done+
4ccf: 20 d2 ff  -         jsr kernal_chrout
4cd2: e8        -         inx
4cd3: 4c ca 4c  -         jmp !loop-
4cd6: 4c db 4c  -         jmp !done+
4cd9: 0d 00     - memory: .byte RETURN, NULL
4cdb: ae ad 22  -         ldx TEST_NAME_COUNT
4cde: e0 15     -         cpx #TESTS_PER_PAGE
4ce0: d0 5d     -         bne !exit+
4ce2: ad 86 02  -         lda foreground_color
4ce5: 48        -         pha
4ce6: a9 01     -         lda #color
4ce8: 8d 86 02  -         sta foreground_color
4ceb: a2 00     -         ldx #$00
4ced: bd 00 4d  -         lda msg,x
4cf0: f0 07     -         beq !done+
4cf2: 20 d2 ff  -         jsr kernal_chrout
4cf5: e8        -         inx
4cf6: 4c ed 4c  -         jmp !loop-
4cf9: 68        -         pla
4cfa: 8d 86 02  -         sta foreground_color
4cfd: 4c 1f 4d  -         jmp !no_key+
4d00: 0d        - memory: .byte RETURN
4d01: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4d11: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4d1d: 0d 00     -         .byte RETURN, NULL
4d1f: 20 9f ff  -         jsr scnkey  // scan keyboard
4d22: 20 e4 ff  -         jsr getin	// put result into A
4d25: f0 f8     -         beq !no_key-
4d27: a2 00     -         ldx #$00
4d29: bd 38 4d  -         lda msg,x
4d2c: f0 07     -         beq !done+
4d2e: 20 d2 ff  -         jsr kernal_chrout
4d31: e8        -         inx
4d32: 4c 29 4d  -         jmp !loop-
4d35: 4c 3a 4d  -         jmp !done+
4d38: 0d 00     - newline:.byte RETURN, NULL
4d3a: a2 00     -         ldx #$00
4d3c: 8e ad 22  -         stx TEST_NAME_COUNT
4d3f: 60        -         rts
4d40: ee ad 22  - ABSOLUTE_JUMP_TEST:inc TEST_NAME_COUNT
4d43: ad 86 02  -         lda foreground_color
4d46: 48        -         pha
4d47: a9 0f     -         lda #color
4d49: 8d 86 02  -         sta foreground_color
4d4c: a2 00     -         ldx #$00
4d4e: bd 61 4d  -         lda msg,x
4d51: f0 07     -         beq !done+
4d53: 20 d2 ff  -         jsr kernal_chrout
4d56: e8        -         inx
4d57: 4c 4e 4d  -         jmp !loop-
4d5a: 68        -         pla
4d5b: 8d 86 02  -         sta foreground_color
4d5e: 4c 74 4d  -         jmp !done+
4d61: 20 20     - memory: .fill spacing, spacebar
4d63: 41 42 53 4f 4c 55 54 45 20 4a 55 4d 50           -         .text name
4d70: 2e 2e 2e  -         .text "..."
4d73: 00        -         .byte NULL
4d74: 20 0c 20  -         jsr SW16
4d77: 15        -         .byte opcode(op, register)
4d78: 00 00     -         .word address.getValue()
4d7a: 10        -         .byte opcode(op, register)
4d7b: 65 4e     -         .word address.getValue()
4d7d: 3f        -         .byte opcode($30, register) }
4d7e: 00        -         .byte $00 }
4d7f: ee ab 22  -         inc TEST_COUNT
4d82: ad 86 02  -         lda foreground_color
4d85: 48        -         pha
4d86: a9 0e     -         lda #color
4d88: 8d 86 02  -         sta foreground_color
4d8b: a2 00     -         ldx #$00
4d8d: bd a0 4d  -         lda msg,x
4d90: f0 07     -         beq !done+
4d92: 20 d2 ff  -         jsr kernal_chrout
4d95: e8        -         inx
4d96: 4c 8d 4d  -         jmp !loop-
4d99: 68        -         pla
4d9a: 8d 86 02  -         sta foreground_color
4d9d: 4c a6 4d  -         jmp !done+
4da0: 20        - memory: .byte spacebar
4da1: 53 45 54  -         .text description
4da4: 3a        -         .text ":"
4da5: 00        -         .byte NULL
4da6: a6 21     -         ldx rl(register.getValue())
4da8: a4 22     -         ldy rh(register.getValue())
4daa: e0 34     -         cpx #<value
4dac: d0 25     -         bne !failed+
4dae: c0 12     -         cpy #>value
4db0: d0 21     -         bne !failed+
4db2: ee ac 22  -         inc TEST_PASS_COUNT
4db5: ad 86 02  -         lda foreground_color
4db8: 48        -         pha
4db9: a9 05     -         lda #color
4dbb: 8d 86 02  -         sta foreground_color
4dbe: a2 00     -         ldx #$00
4dc0: bd 00 20  -         lda msg,x
4dc3: f0 07     -         beq !done+
4dc5: 20 d2 ff  -         jsr kernal_chrout
4dc8: e8        -         inx
4dc9: 4c c0 4d  -         jmp !loop-
4dcc: 68        -         pla
4dcd: 8d 86 02  -         sta foreground_color
4dd0: 4c ee 4d  -         jmp !done+
4dd3: ad 86 02  -         lda foreground_color
4dd6: 48        -         pha
4dd7: a9 02     -         lda #color
4dd9: 8d 86 02  -         sta foreground_color
4ddc: a2 00     -         ldx #$00
4dde: bd 02 20  -         lda msg,x
4de1: f0 07     -         beq !done+
4de3: 20 d2 ff  -         jsr kernal_chrout
4de6: e8        -         inx
4de7: 4c de 4d  -         jmp !loop-
4dea: 68        -         pla
4deb: 8d 86 02  -         sta foreground_color
4dee: a2 00     -         ldx #$00
4df0: bd ff 4d  -         lda msg,x
4df3: f0 07     -         beq !done+
4df5: 20 d2 ff  -         jsr kernal_chrout
4df8: e8        -         inx
4df9: 4c f0 4d  -         jmp !loop-
4dfc: 4c 01 4e  -         jmp !done+
4dff: 0d 00     - memory: .byte RETURN, NULL
4e01: ae ad 22  -         ldx TEST_NAME_COUNT
4e04: e0 15     -         cpx #TESTS_PER_PAGE
4e06: d0 5d     -         bne !exit+
4e08: ad 86 02  -         lda foreground_color
4e0b: 48        -         pha
4e0c: a9 01     -         lda #color
4e0e: 8d 86 02  -         sta foreground_color
4e11: a2 00     -         ldx #$00
4e13: bd 26 4e  -         lda msg,x
4e16: f0 07     -         beq !done+
4e18: 20 d2 ff  -         jsr kernal_chrout
4e1b: e8        -         inx
4e1c: 4c 13 4e  -         jmp !loop-
4e1f: 68        -         pla
4e20: 8d 86 02  -         sta foreground_color
4e23: 4c 45 4e  -         jmp !no_key+
4e26: 0d        - memory: .byte RETURN
4e27: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4e37: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4e43: 0d 00     -         .byte RETURN, NULL
4e45: 20 9f ff  -         jsr scnkey  // scan keyboard
4e48: 20 e4 ff  -         jsr getin	// put result into A
4e4b: f0 f8     -         beq !no_key-
4e4d: a2 00     -         ldx #$00
4e4f: bd 5e 4e  -         lda msg,x
4e52: f0 07     -         beq !done+
4e54: 20 d2 ff  -         jsr kernal_chrout
4e57: e8        -         inx
4e58: 4c 4f 4e  -         jmp !loop-
4e5b: 4c 60 4e  -         jmp !done+
4e5e: 0d 00     - newline:.byte RETURN, NULL
4e60: a2 00     -         ldx #$00
4e62: 8e ad 22  -         stx TEST_NAME_COUNT
4e65: 60        -         rts
4e66: 15        -         .byte opcode(op, register)
4e67: 34 12     -         .word address.getValue()
4e69: 10        -         .byte opcode(op, register)
4e6a: 7d 4d     -         .word address.getValue()
4e6c: 3f        -         .byte opcode($30, register) }
4e6d: ee ad 22  - EXTERNAL_JSR_TEST:inc TEST_NAME_COUNT
4e70: ad 86 02  -         lda foreground_color
4e73: 48        -         pha
4e74: a9 0f     -         lda #color
4e76: 8d 86 02  -         sta foreground_color
4e79: a2 00     -         ldx #$00
4e7b: bd 8e 4e  -         lda msg,x
4e7e: f0 07     -         beq !done+
4e80: 20 d2 ff  -         jsr kernal_chrout
4e83: e8        -         inx
4e84: 4c 7b 4e  -         jmp !loop-
4e87: 68        -         pla
4e88: 8d 86 02  -         sta foreground_color
4e8b: 4c a0 4e  -         jmp !done+
4e8e: 20 20     - memory: .fill spacing, spacebar
4e90: 45 58 54 45 52 4e 41 4c 20 4a 53 52              -         .text name
4e9c: 2e 2e 2e  -         .text "..."
4e9f: 00        -         .byte NULL
4ea0: 20 0c 20  -         jsr SW16
4ea3: 15        -         .byte opcode(op, register)
4ea4: 21 43     -         .word address.getValue()
4ea6: 0d        -         .byte $0d
4ea7: 4f        -         .byte >(address.getValue()-1)
4ea8: 9a        -         .byte <(address.getValue()-1)
4ea9: 15        -         .byte opcode(op, register)
4eaa: 34 12     -         .word address.getValue()
4eac: 0d        -         .byte $0d
4ead: 50        -         .byte >(address.getValue()-1)
4eae: 0c        -         .byte <(address.getValue()-1)
4eaf: 15        -         .byte opcode(op, register)
4eb0: 21 43     -         .word address.getValue()
4eb2: 00        -         .byte $00 }
4eb3: ee ab 22  -         inc TEST_COUNT
4eb6: ad 86 02  -         lda foreground_color
4eb9: 48        -         pha
4eba: a9 0e     -         lda #color
4ebc: 8d 86 02  -         sta foreground_color
4ebf: a2 00     -         ldx #$00
4ec1: bd d4 4e  -         lda msg,x
4ec4: f0 07     -         beq !done+
4ec6: 20 d2 ff  -         jsr kernal_chrout
4ec9: e8        -         inx
4eca: 4c c1 4e  -         jmp !loop-
4ecd: 68        -         pla
4ece: 8d 86 02  -         sta foreground_color
4ed1: 4c db 4e  -         jmp !done+
4ed4: 20        - memory: .byte spacebar
4ed5: 53 41 4d 45                                      -         .text description
4ed9: 3a        -         .text ":"
4eda: 00        -         .byte NULL
4edb: a6 21     -         ldx rl(register.getValue())
4edd: a4 22     -         ldy rh(register.getValue())
4edf: e0 21     -         cpx #<value
4ee1: d0 25     -         bne !failed+
4ee3: c0 43     -         cpy #>value
4ee5: d0 21     -         bne !failed+
4ee7: ee ac 22  -         inc TEST_PASS_COUNT
4eea: ad 86 02  -         lda foreground_color
4eed: 48        -         pha
4eee: a9 05     -         lda #color
4ef0: 8d 86 02  -         sta foreground_color
4ef3: a2 00     -         ldx #$00
4ef5: bd 00 20  -         lda msg,x
4ef8: f0 07     -         beq !done+
4efa: 20 d2 ff  -         jsr kernal_chrout
4efd: e8        -         inx
4efe: 4c f5 4e  -         jmp !loop-
4f01: 68        -         pla
4f02: 8d 86 02  -         sta foreground_color
4f05: 4c 23 4f  -         jmp !done+
4f08: ad 86 02  -         lda foreground_color
4f0b: 48        -         pha
4f0c: a9 02     -         lda #color
4f0e: 8d 86 02  -         sta foreground_color
4f11: a2 00     -         ldx #$00
4f13: bd 02 20  -         lda msg,x
4f16: f0 07     -         beq !done+
4f18: 20 d2 ff  -         jsr kernal_chrout
4f1b: e8        -         inx
4f1c: 4c 13 4f  -         jmp !loop-
4f1f: 68        -         pla
4f20: 8d 86 02  -         sta foreground_color
4f23: a2 00     -         ldx #$00
4f25: bd 34 4f  -         lda msg,x
4f28: f0 07     -         beq !done+
4f2a: 20 d2 ff  -         jsr kernal_chrout
4f2d: e8        -         inx
4f2e: 4c 25 4f  -         jmp !loop-
4f31: 4c 36 4f  -         jmp !done+
4f34: 0d 00     - memory: .byte RETURN, NULL
4f36: ae ad 22  -         ldx TEST_NAME_COUNT
4f39: e0 15     -         cpx #TESTS_PER_PAGE
4f3b: d0 5d     -         bne !exit+
4f3d: ad 86 02  -         lda foreground_color
4f40: 48        -         pha
4f41: a9 01     -         lda #color
4f43: 8d 86 02  -         sta foreground_color
4f46: a2 00     -         ldx #$00
4f48: bd 5b 4f  -         lda msg,x
4f4b: f0 07     -         beq !done+
4f4d: 20 d2 ff  -         jsr kernal_chrout
4f50: e8        -         inx
4f51: 4c 48 4f  -         jmp !loop-
4f54: 68        -         pla
4f55: 8d 86 02  -         sta foreground_color
4f58: 4c 7a 4f  -         jmp !no_key+
4f5b: 0d        - memory: .byte RETURN
4f5c: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
4f6c: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
4f78: 0d 00     -         .byte RETURN, NULL
4f7a: 20 9f ff  -         jsr scnkey  // scan keyboard
4f7d: 20 e4 ff  -         jsr getin	// put result into A
4f80: f0 f8     -         beq !no_key-
4f82: a2 00     -         ldx #$00
4f84: bd 93 4f  -         lda msg,x
4f87: f0 07     -         beq !done+
4f89: 20 d2 ff  -         jsr kernal_chrout
4f8c: e8        -         inx
4f8d: 4c 84 4f  -         jmp !loop-
4f90: 4c 95 4f  -         jmp !done+
4f93: 0d 00     - newline:.byte RETURN, NULL
4f95: a2 00     -         ldx #$00
4f97: 8e ad 22  -         stx TEST_NAME_COUNT
4f9a: 60        -         rts
4f9b: ee ab 22  -         inc TEST_COUNT
4f9e: ad 86 02  -         lda foreground_color
4fa1: 48        -         pha
4fa2: a9 0e     -         lda #color
4fa4: 8d 86 02  -         sta foreground_color
4fa7: a2 00     -         ldx #$00
4fa9: bd bc 4f  -         lda msg,x
4fac: f0 07     -         beq !done+
4fae: 20 d2 ff  -         jsr kernal_chrout
4fb1: e8        -         inx
4fb2: 4c a9 4f  -         jmp !loop-
4fb5: 68        -         pla
4fb6: 8d 86 02  -         sta foreground_color
4fb9: 4c c4 4f  -         jmp !done+
4fbc: 20        - memory: .byte spacebar
4fbd: 56 41 4c 55 45                                   -         .text description
4fc2: 3a        -         .text ":"
4fc3: 00        -         .byte NULL
4fc4: a6 21     -         ldx rl(register.getValue())
4fc6: a4 22     -         ldy rh(register.getValue())
4fc8: e0 21     -         cpx #<value
4fca: d0 25     -         bne !failed+
4fcc: c0 43     -         cpy #>value
4fce: d0 21     -         bne !failed+
4fd0: ee ac 22  -         inc TEST_PASS_COUNT
4fd3: ad 86 02  -         lda foreground_color
4fd6: 48        -         pha
4fd7: a9 05     -         lda #color
4fd9: 8d 86 02  -         sta foreground_color
4fdc: a2 00     -         ldx #$00
4fde: bd 00 20  -         lda msg,x
4fe1: f0 07     -         beq !done+
4fe3: 20 d2 ff  -         jsr kernal_chrout
4fe6: e8        -         inx
4fe7: 4c de 4f  -         jmp !loop-
4fea: 68        -         pla
4feb: 8d 86 02  -         sta foreground_color
4fee: 4c 0c 50  -         jmp !done+
4ff1: ad 86 02  -         lda foreground_color
4ff4: 48        -         pha
4ff5: a9 02     -         lda #color
4ff7: 8d 86 02  -         sta foreground_color
4ffa: a2 00     -         ldx #$00
4ffc: bd 02 20  -         lda msg,x
4fff: f0 07     -         beq !done+
5001: 20 d2 ff  -         jsr kernal_chrout
5004: e8        -         inx
5005: 4c fc 4f  -         jmp !loop-
5008: 68        -         pla
5009: 8d 86 02  -         sta foreground_color
500c: 60        -         rts
500d: a9 fe     -         lda #>VALUE_3
500f: 85 22     -         sta rh(REGISTER)
5011: a9 ed     -         lda #<VALUE_3
5013: 85 21     -         sta rl(REGISTER)
5015: a6 21     -         ldx rl(register.getValue())
5017: a4 22     -         ldy rh(register.getValue())
5019: ee ab 22  -         inc TEST_COUNT
501c: ad 86 02  -         lda foreground_color
501f: 48        -         pha
5020: a9 0e     -         lda #color
5022: 8d 86 02  -         sta foreground_color
5025: a2 00     -         ldx #$00
5027: bd 3a 50  -         lda msg,x
502a: f0 07     -         beq !done+
502c: 20 d2 ff  -         jsr kernal_chrout
502f: e8        -         inx
5030: 4c 27 50  -         jmp !loop-
5033: 68        -         pla
5034: 8d 86 02  -         sta foreground_color
5037: 4c 41 50  -         jmp !done+
503a: 20        - memory: .byte spacebar
503b: 36 35 30 32                                      -         .text description
503f: 3a        -         .text ":"
5040: 00        -         .byte NULL
5041: a6 21     -         ldx rl(register.getValue())
5043: a4 22     -         ldy rh(register.getValue())
5045: e0 ed     -         cpx #<value
5047: d0 25     -         bne !failed+
5049: c0 fe     -         cpy #>value
504b: d0 21     -         bne !failed+
504d: ee ac 22  -         inc TEST_PASS_COUNT
5050: ad 86 02  -         lda foreground_color
5053: 48        -         pha
5054: a9 05     -         lda #color
5056: 8d 86 02  -         sta foreground_color
5059: a2 00     -         ldx #$00
505b: bd 00 20  -         lda msg,x
505e: f0 07     -         beq !done+
5060: 20 d2 ff  -         jsr kernal_chrout
5063: e8        -         inx
5064: 4c 5b 50  -         jmp !loop-
5067: 68        -         pla
5068: 8d 86 02  -         sta foreground_color
506b: 4c 89 50  -         jmp !done+
506e: ad 86 02  -         lda foreground_color
5071: 48        -         pha
5072: a9 02     -         lda #color
5074: 8d 86 02  -         sta foreground_color
5077: a2 00     -         ldx #$00
5079: bd 02 20  -         lda msg,x
507c: f0 07     -         beq !done+
507e: 20 d2 ff  -         jsr kernal_chrout
5081: e8        -         inx
5082: 4c 79 50  -         jmp !loop-
5085: 68        -         pla
5086: 8d 86 02  -         sta foreground_color
5089: 60        -         rts
508a: ee ad 22  - SET_INDIRECT_TEST:inc TEST_NAME_COUNT
508d: ad 86 02  -         lda foreground_color
5090: 48        -         pha
5091: a9 0f     -         lda #color
5093: 8d 86 02  -         sta foreground_color
5096: a2 00     -         ldx #$00
5098: bd ab 50  -         lda msg,x
509b: f0 07     -         beq !done+
509d: 20 d2 ff  -         jsr kernal_chrout
50a0: e8        -         inx
50a1: 4c 98 50  -         jmp !loop-
50a4: 68        -         pla
50a5: 8d 86 02  -         sta foreground_color
50a8: 4c bd 50  -         jmp !done+
50ab: 20 20     - memory: .fill spacing, spacebar
50ad: 53 45 54 20 49 4e 44 49 52 45 43 54              -         .text name
50b9: 2e 2e 2e  -         .text "..."
50bc: 00        -         .byte NULL
50bd: 20 0c 20  -         jsr SW16
50c0: 0f        -         .byte $0f
50c1: c3 22     -         .word address.getValue()
50c3: 21        -         .byte rl(register.getValue())
50c4: 00        -         .byte $00 }
50c5: ee ab 22  -         inc TEST_COUNT
50c8: ad 86 02  -         lda foreground_color
50cb: 48        -         pha
50cc: a9 0e     -         lda #color
50ce: 8d 86 02  -         sta foreground_color
50d1: a2 00     -         ldx #$00
50d3: bd e6 50  -         lda msg,x
50d6: f0 07     -         beq !done+
50d8: 20 d2 ff  -         jsr kernal_chrout
50db: e8        -         inx
50dc: 4c d3 50  -         jmp !loop-
50df: 68        -         pla
50e0: 8d 86 02  -         sta foreground_color
50e3: 4c f1 50  -         jmp !done+
50e6: 20        - memory: .byte spacebar
50e7: 54 45 53 54 20 4d 45 4d                          -         .text description
50ef: 3a        -         .text ":"
50f0: 00        -         .byte NULL
50f1: a6 21     -         ldx rl(register.getValue())
50f3: a4 22     -         ldy rh(register.getValue())
50f5: cc c3 22  -         cpy address
50f8: d0 26     -         bne !failed+
50fa: ec c4 22  -         cpx address+1
50fd: d0 21     -         bne !failed+
50ff: ee ac 22  -         inc TEST_PASS_COUNT
5102: ad 86 02  -         lda foreground_color
5105: 48        -         pha
5106: a9 05     -         lda #color
5108: 8d 86 02  -         sta foreground_color
510b: a2 00     -         ldx #$00
510d: bd 00 20  -         lda msg,x
5110: f0 07     -         beq !done+
5112: 20 d2 ff  -         jsr kernal_chrout
5115: e8        -         inx
5116: 4c 0d 51  -         jmp !loop-
5119: 68        -         pla
511a: 8d 86 02  -         sta foreground_color
511d: 4c 3b 51  -         jmp !done+
5120: ad 86 02  -         lda foreground_color
5123: 48        -         pha
5124: a9 02     -         lda #color
5126: 8d 86 02  -         sta foreground_color
5129: a2 00     -         ldx #$00
512b: bd 02 20  -         lda msg,x
512e: f0 07     -         beq !done+
5130: 20 d2 ff  -         jsr kernal_chrout
5133: e8        -         inx
5134: 4c 2b 51  -         jmp !loop-
5137: 68        -         pla
5138: 8d 86 02  -         sta foreground_color
513b: a2 00     -         ldx #$00
513d: bd 4c 51  -         lda msg,x
5140: f0 07     -         beq !done+
5142: 20 d2 ff  -         jsr kernal_chrout
5145: e8        -         inx
5146: 4c 3d 51  -         jmp !loop-
5149: 4c 4e 51  -         jmp !done+
514c: 0d 00     - memory: .byte RETURN, NULL
514e: ae ad 22  -         ldx TEST_NAME_COUNT
5151: e0 15     -         cpx #TESTS_PER_PAGE
5153: d0 5d     -         bne !exit+
5155: ad 86 02  -         lda foreground_color
5158: 48        -         pha
5159: a9 01     -         lda #color
515b: 8d 86 02  -         sta foreground_color
515e: a2 00     -         ldx #$00
5160: bd 73 51  -         lda msg,x
5163: f0 07     -         beq !done+
5165: 20 d2 ff  -         jsr kernal_chrout
5168: e8        -         inx
5169: 4c 60 51  -         jmp !loop-
516c: 68        -         pla
516d: 8d 86 02  -         sta foreground_color
5170: 4c 92 51  -         jmp !no_key+
5173: 0d        - memory: .byte RETURN
5174: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
5184: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
5190: 0d 00     -         .byte RETURN, NULL
5192: 20 9f ff  -         jsr scnkey  // scan keyboard
5195: 20 e4 ff  -         jsr getin	// put result into A
5198: f0 f8     -         beq !no_key-
519a: a2 00     -         ldx #$00
519c: bd ab 51  -         lda msg,x
519f: f0 07     -         beq !done+
51a1: 20 d2 ff  -         jsr kernal_chrout
51a4: e8        -         inx
51a5: 4c 9c 51  -         jmp !loop-
51a8: 4c ad 51  -         jmp !done+
51ab: 0d 00     - newline:.byte RETURN, NULL
51ad: a2 00     -         ldx #$00
51af: 8e ad 22  -         stx TEST_NAME_COUNT
51b2: 60        -         rts
51b3: ee ad 22  - SET_MEMORY_TEST:inc TEST_NAME_COUNT
51b6: ad 86 02  -         lda foreground_color
51b9: 48        -         pha
51ba: a9 0f     -         lda #color
51bc: 8d 86 02  -         sta foreground_color
51bf: a2 00     -         ldx #$00
51c1: bd d4 51  -         lda msg,x
51c4: f0 07     -         beq !done+
51c6: 20 d2 ff  -         jsr kernal_chrout
51c9: e8        -         inx
51ca: 4c c1 51  -         jmp !loop-
51cd: 68        -         pla
51ce: 8d 86 02  -         sta foreground_color
51d1: 4c e4 51  -         jmp !done+
51d4: 20 20     - memory: .fill spacing, spacebar
51d6: 53 45 54 20 4d 45 4d 4f 52 59                    -         .text name
51e0: 2e 2e 2e  -         .text "..."
51e3: 00        -         .byte NULL
51e4: 20 0c 20  -         jsr SW16
51e7: 0e        -         .byte $0e
51e8: c3 22     -         .word address.getValue()
51ea: 21        -         .byte rl(register.getValue())
51eb: 00        -         .byte $00 }
51ec: ee ab 22  -         inc TEST_COUNT
51ef: ad 86 02  -         lda foreground_color
51f2: 48        -         pha
51f3: a9 0e     -         lda #color
51f5: 8d 86 02  -         sta foreground_color
51f8: a2 00     -         ldx #$00
51fa: bd 0d 52  -         lda msg,x
51fd: f0 07     -         beq !done+
51ff: 20 d2 ff  -         jsr kernal_chrout
5202: e8        -         inx
5203: 4c fa 51  -         jmp !loop-
5206: 68        -         pla
5207: 8d 86 02  -         sta foreground_color
520a: 4c 18 52  -         jmp !done+
520d: 20        - memory: .byte spacebar
520e: 54 45 53 54 20 4d 45 4d                          -         .text description
5216: 3a        -         .text ":"
5217: 00        -         .byte NULL
5218: a6 21     -         ldx rl(register.getValue())
521a: a4 22     -         ldy rh(register.getValue())
521c: ec c3 22  -         cpx address
521f: d0 26     -         bne !failed+
5221: cc c4 22  -         cpy address+1
5224: d0 21     -         bne !failed+
5226: ee ac 22  -         inc TEST_PASS_COUNT
5229: ad 86 02  -         lda foreground_color
522c: 48        -         pha
522d: a9 05     -         lda #color
522f: 8d 86 02  -         sta foreground_color
5232: a2 00     -         ldx #$00
5234: bd 00 20  -         lda msg,x
5237: f0 07     -         beq !done+
5239: 20 d2 ff  -         jsr kernal_chrout
523c: e8        -         inx
523d: 4c 34 52  -         jmp !loop-
5240: 68        -         pla
5241: 8d 86 02  -         sta foreground_color
5244: 4c 62 52  -         jmp !done+
5247: ad 86 02  -         lda foreground_color
524a: 48        -         pha
524b: a9 02     -         lda #color
524d: 8d 86 02  -         sta foreground_color
5250: a2 00     -         ldx #$00
5252: bd 02 20  -         lda msg,x
5255: f0 07     -         beq !done+
5257: 20 d2 ff  -         jsr kernal_chrout
525a: e8        -         inx
525b: 4c 52 52  -         jmp !loop-
525e: 68        -         pla
525f: 8d 86 02  -         sta foreground_color
5262: a2 00     -         ldx #$00
5264: bd 73 52  -         lda msg,x
5267: f0 07     -         beq !done+
5269: 20 d2 ff  -         jsr kernal_chrout
526c: e8        -         inx
526d: 4c 64 52  -         jmp !loop-
5270: 4c 75 52  -         jmp !done+
5273: 0d 00     - memory: .byte RETURN, NULL
5275: ae ad 22  -         ldx TEST_NAME_COUNT
5278: e0 15     -         cpx #TESTS_PER_PAGE
527a: d0 5d     -         bne !exit+
527c: ad 86 02  -         lda foreground_color
527f: 48        -         pha
5280: a9 01     -         lda #color
5282: 8d 86 02  -         sta foreground_color
5285: a2 00     -         ldx #$00
5287: bd 9a 52  -         lda msg,x
528a: f0 07     -         beq !done+
528c: 20 d2 ff  -         jsr kernal_chrout
528f: e8        -         inx
5290: 4c 87 52  -         jmp !loop-
5293: 68        -         pla
5294: 8d 86 02  -         sta foreground_color
5297: 4c b9 52  -         jmp !no_key+
529a: 0d        - memory: .byte RETURN
529b: 50 52 45 53 53 20 41 4e 59 20 4b 45 59 20 54 4f  -         .text "PRESS ANY KEY TO CONTINUE..."
52ab: 20 43 4f 4e 54 49 4e 55 45 2e 2e 2e             
52b7: 0d 00     -         .byte RETURN, NULL
52b9: 20 9f ff  -         jsr scnkey  // scan keyboard
52bc: 20 e4 ff  -         jsr getin	// put result into A
52bf: f0 f8     -         beq !no_key-
52c1: a2 00     -         ldx #$00
52c3: bd d2 52  -         lda msg,x
52c6: f0 07     -         beq !done+
52c8: 20 d2 ff  -         jsr kernal_chrout
52cb: e8        -         inx
52cc: 4c c3 52  -         jmp !loop-
52cf: 4c d4 52  -         jmp !done+
52d2: 0d 00     - newline:.byte RETURN, NULL
52d4: a2 00     -         ldx #$00
52d6: 8e ad 22  -         stx TEST_NAME_COUNT
52d9: 60        -         rts
